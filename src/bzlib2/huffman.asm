; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\programovani\WoW Editor\Test\src\bzlib2\huffman.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_len$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_BZ2_hbMakeCodeLengths
EXTRN	_BZ2_bz__AssertH__fail:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_tmp$81776 = -5192					; size = 4
_len$GSCopy$ = -5188					; size = 4
_n1$ = -5184						; size = 4
_n2$ = -5180						; size = 4
_tmp$81766 = -5180					; size = 4
_tmp$81756 = -5180					; size = 4
tv534 = -5176						; size = 4
tv495 = -5176						; size = 4
_nNodes$ = -5176					; size = 4
_i$ = -5176						; size = 4
_parent$ = -5172					; size = 2064
_weight$ = -3108					; size = 2064
_heap$ = -1044						; size = 1040
__$ArrayPad$ = -4					; size = 4
_len$ = 8						; size = 4
_freq$ = 12						; size = 4
_alphaSize$ = 16					; size = 4
_maxLen$ = 20						; size = 4
_BZ2_hbMakeCodeLengths PROC
; File c:\programovani\wow editor\test\src\bzlib2\huffman.c
; Line 67
	push	ebp
	mov	ebp, esp
	mov	eax, 5192				; 00001448H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 79
	mov	ecx, DWORD PTR _alphaSize$[ebp]
; Line 147
	mov	eax, DWORD PTR _len$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _len$GSCopy$[ebp], eax
	test	ecx, ecx
	jle	SHORT $LL33@BZ2_hbMake
; Line 79
	mov	edx, DWORD PTR _freq$[ebp]
	lea	esi, DWORD PTR _weight$[ebp+4]
	sub	esi, edx
	mov	edi, ecx
$LL36@BZ2_hbMake:
; Line 80
	mov	eax, DWORD PTR [edx]
	test	eax, eax
	jne	SHORT $LN39@BZ2_hbMake
	mov	eax, 1
$LN39@BZ2_hbMake:
	shl	eax, 8
	mov	DWORD PTR [esi+edx], eax
	add	edx, 4
	dec	edi
	jne	SHORT $LL36@BZ2_hbMake
	npad	2
$LL33@BZ2_hbMake:
; Line 85
	xor	esi, esi
	mov	ebx, ecx
; Line 87
	mov	DWORD PTR _heap$[ebp], esi
; Line 88
	mov	DWORD PTR _weight$[ebp], esi
; Line 89
	mov	DWORD PTR _parent$[ebp], -2		; fffffffeH
; Line 91
	mov	DWORD PTR _i$[ebp], 1
	cmp	ecx, 1
	jl	$LN24@BZ2_hbMake
; Line 84
	or	eax, -1
	lea	edi, DWORD PTR _parent$[ebp+4]
	rep stosd
	npad	8
$LL111@BZ2_hbMake:
; Line 94
	mov	ecx, DWORD PTR _i$[ebp]
	inc	esi
	mov	DWORD PTR _heap$[ebp+esi*4], ecx
; Line 95
	mov	edx, DWORD PTR _heap$[ebp+esi*4]
	mov	DWORD PTR _tmp$81756[ebp], edx
	mov	edi, DWORD PTR _tmp$81756[ebp]
	mov	edi, DWORD PTR _weight$[ebp+edi*4]
	mov	eax, esi
	sar	eax, 1
	mov	edx, DWORD PTR _heap$[ebp+eax*4]
	mov	ecx, esi
	cmp	edi, DWORD PTR _weight$[ebp+edx*4]
	jge	SHORT $LN27@BZ2_hbMake
	mov	edi, DWORD PTR _tmp$81756[ebp]
	mov	edi, DWORD PTR _weight$[ebp+edi*4]
	npad	5
$LL28@BZ2_hbMake:
	mov	DWORD PTR _heap$[ebp+ecx*4], edx
	mov	ecx, eax
	sar	eax, 1
	mov	edx, DWORD PTR _heap$[ebp+eax*4]
	cmp	edi, DWORD PTR _weight$[ebp+edx*4]
	jl	SHORT $LL28@BZ2_hbMake
$LN27@BZ2_hbMake:
	mov	eax, DWORD PTR _tmp$81756[ebp]
	mov	DWORD PTR _heap$[ebp+ecx*4], eax
	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _alphaSize$[ebp]
	jle	$LL111@BZ2_hbMake
; Line 98
	cmp	esi, 260				; 00000104H
	jl	SHORT $LN48@BZ2_hbMake
	push	2001					; 000007d1H
	call	_BZ2_bz__AssertH__fail
	add	esp, 4
$LN48@BZ2_hbMake:
; Line 100
	cmp	esi, 1
	jle	$LN116@BZ2_hbMake
	npad	4
$LL25@BZ2_hbMake:
; Line 101
	mov	edx, DWORD PTR _heap$[ebp+esi*4]
	mov	ecx, DWORD PTR _heap$[ebp+4]
	dec	esi
	mov	eax, 2
	mov	DWORD PTR _n1$[ebp], ecx
	mov	DWORD PTR _heap$[ebp+4], edx
	mov	ecx, 1
	mov	DWORD PTR _tmp$81766[ebp], edx
	cmp	eax, esi
	jg	SHORT $LN113@BZ2_hbMake
	mov	edx, DWORD PTR _weight$[ebp+edx*4]
	mov	DWORD PTR tv495[ebp], edx
$LN127@BZ2_hbMake:
	jge	SHORT $LN112@BZ2_hbMake
	mov	edx, DWORD PTR _heap$[ebp+eax*4+4]
	mov	edi, DWORD PTR _heap$[ebp+eax*4]
	mov	edx, DWORD PTR _weight$[ebp+edx*4]
	cmp	edx, DWORD PTR _weight$[ebp+edi*4]
	jge	SHORT $LN112@BZ2_hbMake
	inc	eax
$LN112@BZ2_hbMake:
	mov	edx, DWORD PTR _heap$[ebp+eax*4]
	mov	edi, DWORD PTR tv495[ebp]
	cmp	edi, DWORD PTR _weight$[ebp+edx*4]
	jl	SHORT $LN113@BZ2_hbMake
	mov	DWORD PTR _heap$[ebp+ecx*4], edx
	mov	ecx, eax
	add	eax, eax
	cmp	eax, esi
	jle	SHORT $LN127@BZ2_hbMake
$LN113@BZ2_hbMake:
	mov	eax, DWORD PTR _tmp$81766[ebp]
	mov	DWORD PTR _heap$[ebp+ecx*4], eax
; Line 102
	mov	edx, DWORD PTR _heap$[ebp+esi*4]
	mov	edi, DWORD PTR _heap$[ebp+4]
	dec	esi
	mov	eax, 2
	mov	DWORD PTR _n2$[ebp], edi
	mov	DWORD PTR _heap$[ebp+4], edx
	mov	ecx, 1
	mov	DWORD PTR _tmp$81776[ebp], edx
	cmp	eax, esi
	jg	SHORT $LN58@BZ2_hbMake
	mov	edx, DWORD PTR _weight$[ebp+edx*4]
	mov	DWORD PTR tv534[ebp], edx
$LN128@BZ2_hbMake:
	jge	SHORT $LN114@BZ2_hbMake
	mov	edx, DWORD PTR _heap$[ebp+eax*4+4]
	mov	edi, DWORD PTR _heap$[ebp+eax*4]
	mov	edx, DWORD PTR _weight$[ebp+edx*4]
	cmp	edx, DWORD PTR _weight$[ebp+edi*4]
	jge	SHORT $LN114@BZ2_hbMake
	inc	eax
$LN114@BZ2_hbMake:
	mov	edx, DWORD PTR _heap$[ebp+eax*4]
	mov	edi, DWORD PTR tv534[ebp]
	cmp	edi, DWORD PTR _weight$[ebp+edx*4]
	jl	SHORT $LN115@BZ2_hbMake
	mov	DWORD PTR _heap$[ebp+ecx*4], edx
	mov	ecx, eax
	add	eax, eax
	cmp	eax, esi
	jle	SHORT $LN128@BZ2_hbMake
$LN115@BZ2_hbMake:
	mov	edi, DWORD PTR _n2$[ebp]
$LN58@BZ2_hbMake:
	mov	eax, DWORD PTR _tmp$81776[ebp]
; Line 103
	inc	ebx
	mov	DWORD PTR _heap$[ebp+ecx*4], eax
; Line 104
	mov	eax, DWORD PTR _n1$[ebp]
; Line 105
	mov	ecx, DWORD PTR _weight$[ebp+edi*4]
	mov	DWORD PTR _parent$[ebp+edi*4], ebx
	mov	DWORD PTR _parent$[ebp+eax*4], ebx
	mov	eax, DWORD PTR _weight$[ebp+eax*4]
	mov	edx, ecx
	mov	edi, eax
	and	edx, 255				; 000000ffH
	and	edi, 255				; 000000ffH
	mov	DWORD PTR _nNodes$[ebp], ebx
	cmp	edi, edx
	jle	SHORT $LN41@BZ2_hbMake
	mov	edx, edi
$LN41@BZ2_hbMake:
	and	eax, -256				; ffffff00H
	and	ecx, -256				; ffffff00H
	add	eax, ecx
	inc	edx
	or	eax, edx
; Line 107
	inc	esi
	mov	DWORD PTR _weight$[ebp+ebx*4], eax
; Line 109
	mov	eax, esi
	sar	eax, 1
	mov	DWORD PTR _heap$[ebp+esi*4], ebx
	mov	edx, DWORD PTR _heap$[ebp+eax*4]
	mov	edi, ebx
	mov	DWORD PTR _parent$[ebp+ebx*4], -1
	mov	ebx, DWORD PTR _weight$[ebp+edi*4]
	mov	ecx, esi
	cmp	ebx, DWORD PTR _weight$[ebp+edx*4]
	jge	SHORT $LN12@BZ2_hbMake
	npad	6
$LL13@BZ2_hbMake:
	mov	DWORD PTR _heap$[ebp+ecx*4], edx
	mov	ecx, eax
	sar	eax, 1
	mov	edx, DWORD PTR _heap$[ebp+eax*4]
	cmp	ebx, DWORD PTR _weight$[ebp+edx*4]
	jl	SHORT $LL13@BZ2_hbMake
$LN12@BZ2_hbMake:
; Line 100
	mov	ebx, DWORD PTR _nNodes$[ebp]
; Line 109
	mov	DWORD PTR _heap$[ebp+ecx*4], edi
	cmp	esi, 1
	jg	$LL25@BZ2_hbMake
$LN116@BZ2_hbMake:
; Line 100
	mov	ecx, DWORD PTR _alphaSize$[ebp]
$LN24@BZ2_hbMake:
; Line 112
	cmp	ebx, 516				; 00000204H
	jl	SHORT $LN11@BZ2_hbMake
	push	2002					; 000007d2H
	call	_BZ2_bz__AssertH__fail
	mov	ecx, DWORD PTR _alphaSize$[ebp]
	add	esp, 4
$LN11@BZ2_hbMake:
; Line 115
	mov	esi, 1
	xor	bl, bl
	cmp	ecx, esi
	jl	SHORT $LN60@BZ2_hbMake
; Line 114
	lea	edi, DWORD PTR _parent$[ebp+4]
	npad	3
$LL117@BZ2_hbMake:
; Line 116
	xor	edx, edx
; Line 118
	cmp	DWORD PTR [edi], edx
	jl	SHORT $LN6@BZ2_hbMake
	mov	eax, edi
	npad	8
$LL7@BZ2_hbMake:
	mov	eax, DWORD PTR [eax]
	lea	eax, DWORD PTR _parent$[ebp+eax*4]
	inc	edx
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LL7@BZ2_hbMake
$LN6@BZ2_hbMake:
; Line 119
	mov	eax, DWORD PTR _len$GSCopy$[ebp]
	mov	BYTE PTR [eax+esi-1], dl
; Line 120
	cmp	edx, DWORD PTR _maxLen$[ebp]
	jle	SHORT $LN9@BZ2_hbMake
	mov	bl, 1
$LN9@BZ2_hbMake:
; Line 115
	inc	esi
	add	edi, 4
	cmp	esi, ecx
	jle	SHORT $LL117@BZ2_hbMake
; Line 123
	test	bl, bl
	je	SHORT $LN60@BZ2_hbMake
; Line 142
	mov	ecx, 1
$LL3@BZ2_hbMake:
; Line 143
	mov	eax, DWORD PTR _weight$[ebp+ecx*4]
	sar	eax, 8
; Line 144
	cdq
	sub	eax, edx
	sar	eax, 1
; Line 145
	inc	eax
	shl	eax, 8
	mov	DWORD PTR _weight$[ebp+ecx*4], eax
	inc	ecx
	cmp	ecx, DWORD PTR _alphaSize$[ebp]
	jle	SHORT $LL3@BZ2_hbMake
; Line 147
	mov	ecx, DWORD PTR _alphaSize$[ebp]
	jmp	$LL33@BZ2_hbMake
$LN60@BZ2_hbMake:
; Line 148
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_BZ2_hbMakeCodeLengths ENDP
_TEXT	ENDS
PUBLIC	_BZ2_hbAssignCodes
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_code$ = 8						; size = 4
_length$ = 12						; size = 4
_minLen$ = 16						; size = 4
_maxLen$ = 20						; size = 4
_alphaSize$ = 24					; size = 4
_BZ2_hbAssignCodes PROC
; Line 157
	push	ebp
	mov	ebp, esp
; Line 161
	mov	edx, DWORD PTR _minLen$[ebp]
	xor	ecx, ecx
	cmp	edx, DWORD PTR _maxLen$[ebp]
	jg	SHORT $LN5@BZ2_hbAssi
	push	ebx
	push	esi
	mov	esi, DWORD PTR _alphaSize$[ebp]
	push	edi
	mov	edi, DWORD PTR _code$[ebp]
$LL16@BZ2_hbAssi:
; Line 162
	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN2@BZ2_hbAssi
	npad	4
$LL14@BZ2_hbAssi:
; Line 163
	mov	ebx, DWORD PTR _length$[ebp]
	movzx	ebx, BYTE PTR [eax+ebx]
	cmp	ebx, edx
	jne	SHORT $LN3@BZ2_hbAssi
	mov	DWORD PTR [edi+eax*4], ecx
	inc	ecx
$LN3@BZ2_hbAssi:
; Line 162
	inc	eax
	cmp	eax, esi
	jl	SHORT $LL14@BZ2_hbAssi
$LN2@BZ2_hbAssi:
; Line 161
	inc	edx
; Line 164
	add	ecx, ecx
	cmp	edx, DWORD PTR _maxLen$[ebp]
	jle	SHORT $LL16@BZ2_hbAssi
	pop	edi
	pop	esi
	pop	ebx
$LN5@BZ2_hbAssi:
; Line 166
	pop	ebp
	ret	0
_BZ2_hbAssignCodes ENDP
_TEXT	ENDS
PUBLIC	_BZ2_hbCreateDecodeTables
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_vec$ = -4						; size = 4
_limit$ = 8						; size = 4
_base$ = 12						; size = 4
_perm$ = 16						; size = 4
_length$ = 20						; size = 4
_minLen$ = 24						; size = 4
_maxLen$ = 28						; size = 4
tv702 = 32						; size = 4
_alphaSize$ = 32					; size = 4
_BZ2_hbCreateDecodeTables PROC
; Line 177
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 181
	mov	edx, DWORD PTR _minLen$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _maxLen$[ebp]
	push	esi
	xor	ecx, ecx
	push	edi
	mov	edi, DWORD PTR _alphaSize$[ebp]
	cmp	edx, ebx
	jg	SHORT $LN23@BZ2_hbCrea
$LL47@BZ2_hbCrea:
; Line 182
	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN24@BZ2_hbCrea
	npad	4
$LL45@BZ2_hbCrea:
; Line 183
	mov	esi, DWORD PTR _length$[ebp]
	movzx	esi, BYTE PTR [eax+esi]
	cmp	esi, edx
	jne	SHORT $LN21@BZ2_hbCrea
	mov	esi, DWORD PTR _perm$[ebp]
	mov	DWORD PTR [esi+ecx*4], eax
	inc	ecx
$LN21@BZ2_hbCrea:
; Line 182
	inc	eax
	cmp	eax, edi
	jl	SHORT $LL45@BZ2_hbCrea
$LN24@BZ2_hbCrea:
; Line 181
	inc	edx
	cmp	edx, ebx
	jle	SHORT $LL47@BZ2_hbCrea
$LN23@BZ2_hbCrea:
; Line 185
	mov	eax, DWORD PTR _base$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], ecx
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], ecx
	mov	DWORD PTR [eax+40], ecx
	mov	DWORD PTR [eax+44], ecx
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], ecx
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], ecx
	mov	DWORD PTR [eax+64], ecx
	mov	DWORD PTR [eax+68], ecx
	mov	DWORD PTR [eax+72], ecx
	mov	DWORD PTR [eax+76], ecx
	mov	DWORD PTR [eax+80], ecx
	mov	DWORD PTR [eax+84], ecx
	mov	DWORD PTR [eax+88], ecx
; Line 186
	test	edi, edi
	jle	SHORT $LN13@BZ2_hbCrea
	npad	7
$LL15@BZ2_hbCrea:
	mov	edx, DWORD PTR _length$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	inc	DWORD PTR [eax+edx*4+4]
	lea	edx, DWORD PTR [eax+edx*4+4]
	inc	ecx
	cmp	ecx, edi
	jl	SHORT $LL15@BZ2_hbCrea
$LN13@BZ2_hbCrea:
; Line 188
	lea	ecx, DWORD PTR [eax+8]
	mov	esi, 11					; 0000000bH
	npad	4
$LL12@BZ2_hbCrea:
	mov	edx, DWORD PTR [ecx-8]
	add	DWORD PTR [ecx-4], edx
	mov	edx, DWORD PTR [ecx-4]
	add	DWORD PTR [ecx], edx
	add	ecx, 8
	dec	esi
	jne	SHORT $LL12@BZ2_hbCrea
; Line 190
	mov	edx, DWORD PTR _limit$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], ecx
	mov	DWORD PTR [edx+12], ecx
	mov	DWORD PTR [edx+16], ecx
	mov	DWORD PTR [edx+20], ecx
	mov	DWORD PTR [edx+24], ecx
	mov	DWORD PTR [edx+28], ecx
	mov	DWORD PTR [edx+32], ecx
	mov	DWORD PTR [edx+36], ecx
	mov	DWORD PTR [edx+40], ecx
	mov	DWORD PTR [edx+44], ecx
	mov	DWORD PTR [edx+48], ecx
	mov	DWORD PTR [edx+52], ecx
	mov	DWORD PTR [edx+56], ecx
	mov	DWORD PTR [edx+60], ecx
	mov	DWORD PTR [edx+64], ecx
	mov	DWORD PTR [edx+68], ecx
	mov	DWORD PTR [edx+72], ecx
	mov	DWORD PTR [edx+76], ecx
	mov	DWORD PTR [edx+80], ecx
	mov	DWORD PTR [edx+84], ecx
	mov	DWORD PTR [edx+88], ecx
; Line 193
	mov	ecx, DWORD PTR _minLen$[ebp]
	xor	edi, edi
	cmp	ecx, ebx
	jg	SHORT $LN4@BZ2_hbCrea
	mov	esi, edx
	sub	esi, eax
	mov	DWORD PTR tv702[ebp], esi
	mov	esi, ebx
	sub	esi, DWORD PTR _minLen$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*4]
	inc	esi
$LL6@BZ2_hbCrea:
; Line 194
	mov	ebx, DWORD PTR [ecx+4]
	sub	ebx, DWORD PTR [ecx]
	add	ecx, 4
	add	edi, ebx
; Line 195
	mov	ebx, DWORD PTR tv702[ebp]
	mov	DWORD PTR _vec$[ebp], edi
	dec	edi
	mov	DWORD PTR [ebx+ecx-4], edi
; Line 196
	mov	edi, DWORD PTR _vec$[ebp]
	add	edi, edi
	dec	esi
	jne	SHORT $LL6@BZ2_hbCrea
; Line 193
	mov	ebx, DWORD PTR _maxLen$[ebp]
	mov	ecx, DWORD PTR _minLen$[ebp]
$LN4@BZ2_hbCrea:
; Line 198
	inc	ecx
	cmp	ecx, ebx
	jg	SHORT $LN1@BZ2_hbCrea
	lea	edx, DWORD PTR [edx+ecx*4-4]
	npad	1
$LL3@BZ2_hbCrea:
; Line 199
	mov	esi, DWORD PTR [edx]
	lea	esi, DWORD PTR [esi+esi+2]
	sub	esi, DWORD PTR [eax+ecx*4]
	inc	ecx
	mov	DWORD PTR [eax+ecx*4-4], esi
	add	edx, 4
	cmp	ecx, ebx
	jle	SHORT $LL3@BZ2_hbCrea
$LN1@BZ2_hbCrea:
	pop	edi
	pop	esi
	pop	ebx
; Line 200
	mov	esp, ebp
	pop	ebp
	ret	0
_BZ2_hbCreateDecodeTables ENDP
_TEXT	ENDS
END
