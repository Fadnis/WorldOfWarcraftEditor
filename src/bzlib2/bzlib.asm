; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\programovani\WoW Editor\Test\src\bzlib2\bzlib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
$SG83326 DB	01H DUP (?)
$SG83358 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG81728 DB	0aH, 0aH, 'bzip2/libbzip2: internal error number %d.', 0aH
	DB	'This is a bug in bzip2/libbzip2, %s.', 0aH, 'Please report it'
	DB	' to me at: jseward@bzip.org.  If this happened', 0aH, 'when y'
	DB	'ou were using some program which uses libbzip2 as a', 0aH, 'c'
	DB	'omponent, you should also report this bug to the author(s)', 0aH
	DB	'of that program.  Please make an effort to report this bug;', 0aH
	DB	'timely and accurate bug reports eventually lead to higher', 0aH
	DB	'quality software.  Thanks.  Julian Seward, 10 December 2007.', 0aH
	DB	0aH, 00H
	ORG $+5
$SG81730 DB	0aH, '*** A special note about internal error number 1007'
	DB	' ***', 0aH, 0aH, 'Experience suggests that a common cause of '
	DB	'i.e. 1007', 0aH, 'is unreliable memory or other hardware.  Th'
	DB	'e 1007 assertion', 0aH, 'just happens to cross-check the resu'
	DB	'lts of huge numbers of', 0aH, 'memory reads/writes, and so ac'
	DB	'ts (unintendedly) as a stress', 0aH, 'test of your memory sys'
	DB	'tem.', 0aH, 0aH, 'I suggest the following: try compressing th'
	DB	'e file again,', 0aH, 'possibly monitoring progress in detail '
	DB	'with the -vv flag.', 0aH, 0aH, '* If the error cannot be repr'
	DB	'oduced, and/or happens at different', 0aH, '  points in compr'
	DB	'ession, you may have a flaky memory system.', 0aH, '  Try a m'
	DB	'emory-test program.  I have used Memtest86', 0aH, '  (www.mem'
	DB	'test86.com).  At the time of writing it is free (GPLd).', 0aH
	DB	'  Memtest86 tests memory much more thorougly than your BIOSs', 0aH
	DB	'  power-on test, and may find failures that the BIOS doesn''t'
	DB	'.', 0aH, 0aH, '* If the error can be repeatably reproduced, t'
	DB	'his is a bug in', 0aH, '  bzip2, and I would very much like t'
	DB	'o hear about it.  Please', 0aH, '  let me know, and, ideally,'
	DB	' save a copy of the file causing the', 0aH, '  problem -- wit'
	DB	'hout which I will be unable to investigate it.', 0aH, 0aH, 00H
	ORG $+3
$SG82328 DB	' {0x%08x, 0x%08x}', 00H
	ORG $+2
$SG82330 DB	']', 00H
	ORG $+2
$SG82337 DB	0aH, '    combined CRCs: stored = 0x%08x, computed = 0x%0'
	DB	'8x', 00H
	ORG $+1
$SG82853 DB	'1.0.5, 10-Dec-2007', 00H
	ORG $+1
$SG83351 DB	'w', 00H
	ORG $+2
$SG83352 DB	'r', 00H
	ORG $+2
$SG83353 DB	'b', 00H
	ORG $+2
$SG83429 DB	'OK', 00H
	ORG $+1
$SG83430 DB	'SEQUENCE_ERROR', 00H
	ORG $+1
$SG83431 DB	'PARAM_ERROR', 00H
$SG83432 DB	'MEM_ERROR', 00H
	ORG $+2
$SG83433 DB	'DATA_ERROR', 00H
	ORG $+1
$SG83434 DB	'DATA_ERROR_MAGIC', 00H
	ORG $+3
$SG83435 DB	'IO_ERROR', 00H
	ORG $+3
$SG83436 DB	'UNEXPECTED_EOF', 00H
	ORG $+1
$SG83437 DB	'OUTBUFF_FULL', 00H
	ORG $+3
$SG83438 DB	'CONFIG_ERROR', 00H
	ORG $+3
$SG83439 DB	'???', 00H
$SG83440 DB	'???', 00H
$SG83441 DB	'???', 00H
$SG83442 DB	'???', 00H
$SG83443 DB	'???', 00H
$SG83444 DB	'???', 00H
	ORG $+4
_bzerrorstrings DD FLAT:$SG83429
	DD	FLAT:$SG83430
	DD	FLAT:$SG83431
	DD	FLAT:$SG83432
	DD	FLAT:$SG83433
	DD	FLAT:$SG83434
	DD	FLAT:$SG83435
	DD	FLAT:$SG83436
	DD	FLAT:$SG83437
	DD	FLAT:$SG83438
	DD	FLAT:$SG83439
	DD	FLAT:$SG83440
	DD	FLAT:$SG83441
	DD	FLAT:$SG83442
	DD	FLAT:$SG83443
	DD	FLAT:$SG83444
; Function compile flags: /Ogtp
_DATA	ENDS
_TEXT	SEGMENT
_bz_config_ok PROC
; File c:\programovani\wow editor\test\src\bzlib2\bzlib.c
; Line 66
	mov	eax, 1
; Line 67
	ret	0
_bz_config_ok ENDP
_TEXT	ENDS
EXTRN	__imp__malloc:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_items$ = 12						; size = 4
_size$ = 16						; size = 4
_default_bzalloc PROC
; Line 73
	push	ebp
	mov	ebp, esp
; Line 74
	mov	eax, DWORD PTR _items$[ebp]
	imul	eax, DWORD PTR _size$[ebp]
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
; Line 76
	pop	ebp
	ret	0
_default_bzalloc ENDP
_TEXT	ENDS
EXTRN	__imp__free:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_addr$ = 12						; size = 4
_default_bzfree PROC
; Line 80
	push	ebp
	mov	ebp, esp
; Line 81
	mov	eax, DWORD PTR _addr$[ebp]
	test	eax, eax
	je	SHORT $LN1@default_bz
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN1@default_bz:
; Line 82
	pop	ebp
	ret	0
_default_bzfree ENDP
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_prepare_new_block PROC
; _s$ = esi
; Line 90
	xor	ecx, ecx
; Line 94
	push	256					; 00000100H
	lea	eax, DWORD PTR [esi+88]
	push	ecx
	push	eax
	mov	DWORD PTR [esi+68], ecx
	mov	DWORD PTR [esi+76], ecx
	mov	DWORD PTR [esi+80], ecx
	mov	DWORD PTR [esi+608], -1
	call	_memset
; Line 95
	inc	DWORD PTR [esi+620]
	add	esp, 12					; 0000000cH
; Line 96
	ret	0
_prepare_new_block ENDP
; Function compile flags: /Ogtp
_init_RL PROC
; _s$ = eax
; Line 103
	mov	DWORD PTR [eax+52], 256			; 00000100H
; Line 104
	mov	DWORD PTR [eax+56], 0
; Line 105
	ret	0
_init_RL ENDP
; Function compile flags: /Ogtp
_isempty_RL PROC
; _s$ = eax
; Line 111
	cmp	DWORD PTR [eax+52], 256			; 00000100H
	jae	SHORT $LN2@isempty_RL
	cmp	DWORD PTR [eax+56], 0
	jle	SHORT $LN2@isempty_RL
; Line 112
	xor	al, al
; Line 114
	ret	0
$LN2@isempty_RL:
; Line 113
	mov	al, 1
; Line 114
	ret	0
_isempty_RL ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzCompressInit@16
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv140 = 8						; size = 4
_strm$ = 8						; size = 4
_blockSize100k$ = 12					; size = 4
_verbosity$ = 16					; size = 4
_workFactor$ = 20					; size = 4
_BZ2_bzCompressInit@16 PROC
; Line 123
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
; Line 131
	mov	edi, DWORD PTR _strm$[ebp]
	xor	ebx, ebx
	cmp	edi, ebx
	je	$LN11@BZ2_bzComp
	mov	eax, DWORD PTR _blockSize100k$[ebp]
	dec	eax
	cmp	eax, 8
	ja	$LN11@BZ2_bzComp
	mov	eax, DWORD PTR _workFactor$[ebp]
	cmp	eax, 250				; 000000faH
	ja	$LN11@BZ2_bzComp
; Line 134
	cmp	eax, ebx
	jne	SHORT $LN10@BZ2_bzComp
	mov	DWORD PTR _workFactor$[ebp], 30		; 0000001eH
$LN10@BZ2_bzComp:
; Line 135
	cmp	DWORD PTR [edi+36], ebx
	jne	SHORT $LN9@BZ2_bzComp
	mov	DWORD PTR [edi+36], OFFSET _default_bzalloc
$LN9@BZ2_bzComp:
; Line 136
	cmp	DWORD PTR [edi+40], ebx
	jne	SHORT $LN8@BZ2_bzComp
	mov	DWORD PTR [edi+40], OFFSET _default_bzfree
$LN8@BZ2_bzComp:
; Line 138
	mov	ecx, DWORD PTR [edi+44]
	mov	edx, DWORD PTR [edi+36]
	push	esi
	push	1
	push	55728					; 0000d9b0H
	push	ecx
	call	edx
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 139
	cmp	esi, ebx
	je	$LN25@BZ2_bzComp
; Line 142
	mov	DWORD PTR [esi+16], ebx
; Line 143
	mov	DWORD PTR [esi+20], ebx
; Line 144
	mov	DWORD PTR [esi+24], ebx
; Line 146
	mov	ebx, DWORD PTR _blockSize100k$[ebp]
	imul	ebx, 100000				; 000186a0H
	mov	DWORD PTR [esi], edi
; Line 147
	mov	ecx, DWORD PTR [edi+44]
	mov	edx, DWORD PTR [edi+36]
	push	1
	lea	eax, DWORD PTR [ebx*4]
	push	eax
	push	ecx
	call	edx
	mov	DWORD PTR [esi+16], eax
; Line 148
	mov	ecx, DWORD PTR [edi+44]
	mov	edx, DWORD PTR [edi+36]
	push	1
	lea	eax, DWORD PTR [ebx*4+136]
	push	eax
	push	ecx
	call	edx
	mov	DWORD PTR [esi+20], eax
; Line 149
	mov	eax, DWORD PTR [edi+44]
	mov	ecx, DWORD PTR [edi+36]
	push	1
	push	262148					; 00040004H
	push	eax
	call	ecx
; Line 151
	mov	ecx, DWORD PTR [esi+16]
	xor	edx, edx
	add	esp, 36					; 00000024H
	mov	DWORD PTR [esi+24], eax
	cmp	ecx, edx
	je	$LN4@BZ2_bzComp
	cmp	DWORD PTR [esi+20], edx
	je	SHORT $LN5@BZ2_bzComp
	cmp	eax, edx
	je	SHORT $LN5@BZ2_bzComp
; Line 160
	mov	eax, 2
	mov	DWORD PTR [esi+8], eax
; Line 161
	mov	DWORD PTR [esi+4], eax
; Line 163
	mov	eax, DWORD PTR _blockSize100k$[ebp]
	mov	DWORD PTR [esi+624], eax
; Line 165
	mov	eax, DWORD PTR _verbosity$[ebp]
	mov	DWORD PTR [esi+616], eax
; Line 166
	mov	eax, DWORD PTR _workFactor$[ebp]
	mov	DWORD PTR [esi+48], eax
; Line 168
	mov	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [esi+620], edx
	mov	DWORD PTR [esi+612], edx
	mov	DWORD PTR [esi+36], eax
; Line 169
	mov	DWORD PTR [esi+40], ecx
; Line 170
	mov	DWORD PTR [esi+44], edx
; Line 171
	mov	DWORD PTR [esi+32], ecx
	add	ebx, -19				; ffffffedH
	mov	DWORD PTR [esi+72], ebx
; Line 173
	mov	DWORD PTR [edi+32], esi
; Line 174
	mov	DWORD PTR [edi+8], edx
; Line 175
	mov	DWORD PTR [edi+12], edx
; Line 176
	mov	DWORD PTR [edi+24], edx
; Line 177
	mov	DWORD PTR [edi+28], edx
; Line 178
	mov	DWORD PTR [esi+52], 256			; 00000100H
	mov	DWORD PTR [esi+56], edx
; Line 179
	call	_prepare_new_block
	pop	esi
	pop	edi
; Line 180
	xor	eax, eax
	pop	ebx
; Line 181
	pop	ebp
	ret	16					; 00000010H
$LN5@BZ2_bzComp:
; Line 152
	cmp	ecx, edx
	je	SHORT $LN4@BZ2_bzComp
	mov	edx, DWORD PTR [edi+40]
	push	ecx
	mov	ecx, DWORD PTR [edi+44]
	push	ecx
	call	edx
	add	esp, 8
	xor	edx, edx
$LN4@BZ2_bzComp:
; Line 153
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, edx
	je	SHORT $LN3@BZ2_bzComp
	mov	ecx, DWORD PTR [edi+40]
	push	eax
	mov	eax, DWORD PTR [edi+44]
	push	eax
	call	ecx
	add	esp, 8
	xor	edx, edx
$LN3@BZ2_bzComp:
; Line 154
	mov	eax, DWORD PTR [esi+24]
	cmp	eax, edx
	je	SHORT $LN2@BZ2_bzComp
	mov	edx, DWORD PTR [edi+44]
	push	eax
	mov	eax, DWORD PTR [edi+40]
	push	edx
	call	eax
	add	esp, 8
$LN2@BZ2_bzComp:
; Line 155
	mov	ecx, DWORD PTR [edi+44]
	mov	edx, DWORD PTR [edi+40]
	push	esi
	push	ecx
	call	edx
	add	esp, 8
$LN25@BZ2_bzComp:
; Line 156
	pop	esi
	pop	edi
	mov	eax, -3					; fffffffdH
	pop	ebx
; Line 181
	pop	ebp
	ret	16					; 00000010H
$LN11@BZ2_bzComp:
	pop	edi
; Line 132
	mov	eax, -2					; fffffffeH
	pop	ebx
; Line 181
	pop	ebp
	ret	16					; 00000010H
_BZ2_bzCompressInit@16 ENDP
_TEXT	ENDS
EXTRN	_BZ2_crc32Table:BYTE
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_i$ = -4						; size = 4
_add_pair_to_block PROC
; _s$ = eax
; Line 187
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 190
	cmp	DWORD PTR [eax+56], 0
	mov	cl, BYTE PTR [eax+52]
	push	ebx
	push	esi
	mov	DWORD PTR _i$[ebp], 0
	mov	ebx, 1
	jle	SHORT $LN7@add_pair_t
	mov	edx, DWORD PTR [eax+608]
	push	edi
	movzx	edi, cl
$LL9@add_pair_t:
; Line 191
	mov	esi, edx
	shr	esi, 24					; 00000018H
	xor	esi, edi
	shl	edx, 8
	xor	edx, DWORD PTR _BZ2_crc32Table[esi*4]
	mov	esi, DWORD PTR _i$[ebp]
	add	esi, ebx
	mov	DWORD PTR [eax+608], edx
	mov	DWORD PTR _i$[ebp], esi
	cmp	esi, DWORD PTR [eax+56]
	jl	SHORT $LL9@add_pair_t
	pop	edi
$LN7@add_pair_t:
; Line 193
	mov	edx, DWORD PTR [eax+52]
	mov	BYTE PTR [eax+edx+88], bl
; Line 194
	mov	esi, DWORD PTR [eax+56]
	mov	edx, esi
	sub	edx, ebx
	je	SHORT $LN4@add_pair_t
	sub	edx, ebx
	je	SHORT $LN3@add_pair_t
	sub	edx, ebx
	je	SHORT $LN2@add_pair_t
; Line 208
	mov	BYTE PTR [esi+eax+84], bl
; Line 209
	mov	edx, DWORD PTR [eax+68]
	mov	esi, DWORD PTR [eax+36]
	mov	BYTE PTR [edx+esi], cl
	add	DWORD PTR [eax+68], ebx
	mov	edx, DWORD PTR [eax+68]
; Line 210
	mov	esi, DWORD PTR [eax+36]
	mov	BYTE PTR [edx+esi], cl
	add	DWORD PTR [eax+68], ebx
	mov	edx, DWORD PTR [eax+68]
; Line 211
	mov	esi, DWORD PTR [eax+36]
	mov	BYTE PTR [edx+esi], cl
	add	DWORD PTR [eax+68], ebx
	mov	edx, DWORD PTR [eax+68]
; Line 212
	mov	esi, DWORD PTR [eax+36]
	mov	BYTE PTR [edx+esi], cl
	add	DWORD PTR [eax+68], ebx
; Line 213
	mov	cl, BYTE PTR [eax+56]
	mov	esi, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [eax+36]
	sub	cl, 4
	mov	BYTE PTR [esi+edx], cl
	add	DWORD PTR [eax+68], ebx
	pop	esi
	pop	ebx
; Line 217
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@add_pair_t:
; Line 203
	mov	edx, DWORD PTR [eax+68]
	mov	esi, DWORD PTR [eax+36]
	mov	BYTE PTR [edx+esi], cl
	add	DWORD PTR [eax+68], ebx
$LN3@add_pair_t:
	mov	edx, DWORD PTR [eax+68]
; Line 204
	mov	esi, DWORD PTR [eax+36]
	mov	BYTE PTR [edx+esi], cl
	add	DWORD PTR [eax+68], ebx
	mov	edx, DWORD PTR [eax+68]
; Line 205
	mov	esi, DWORD PTR [eax+36]
	mov	BYTE PTR [edx+esi], cl
	add	DWORD PTR [eax+68], ebx
	pop	esi
	pop	ebx
; Line 217
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@add_pair_t:
; Line 196
	mov	esi, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [eax+36]
	mov	BYTE PTR [edx+esi], cl
	add	DWORD PTR [eax+68], ebx
	pop	esi
	pop	ebx
; Line 217
	mov	esp, ebp
	pop	ebp
	ret	0
_add_pair_to_block ENDP
; Function compile flags: /Ogtp
_flush_RL PROC
; _s$ = eax
; Line 224
	cmp	DWORD PTR [eax+52], 256			; 00000100H
	jae	SHORT $LN6@flush_RL
	call	_add_pair_to_block
$LN6@flush_RL:
; Line 225
	mov	DWORD PTR [eax+56], 0
	mov	DWORD PTR [eax+52], 256			; 00000100H
; Line 226
	ret	0
_flush_RL ENDP
; Function compile flags: /Ogtp
tv416 = -8						; size = 4
tv415 = -8						; size = 4
_ch$81905 = -2						; size = 1
_ch$81880 = -2						; size = 1
_progress_in$ = -1					; size = 1
_copy_input_until_stop PROC
; _s$ = eax
; Line 260
	push	ebp
	mov	ebp, esp
; Line 268
	mov	ecx, DWORD PTR [eax+68]
	sub	esp, 8
	push	ebx
	push	esi
	xor	dl, dl
	cmp	DWORD PTR [eax+4], 2
	push	edi
	jne	$LN30@copy_input
	cmp	ecx, DWORD PTR [eax+72]
	jge	$LN41@copy_input
	mov	ebx, 1
	jmp	SHORT $LN24@copy_input
	npad	8
$LL42@copy_input:
	mov	dl, BYTE PTR _progress_in$[ebp]
$LN24@copy_input:
; Line 270
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+4], 0
	je	$LN41@copy_input
; Line 272
	mov	edx, DWORD PTR [ecx]
	movzx	edi, BYTE PTR [edx]
	mov	esi, DWORD PTR [eax+52]
	mov	BYTE PTR _progress_in$[ebp], bl
	cmp	edi, esi
	je	SHORT $LN45@copy_input
	cmp	DWORD PTR [eax+56], ebx
	jne	SHORT $LN20@copy_input
	mov	dl, BYTE PTR [eax+52]
	mov	ecx, DWORD PTR [eax+608]
	mov	BYTE PTR _ch$81880[ebp], dl
	mov	ebx, ecx
	movzx	edx, dl
	shr	ebx, 24					; 00000018H
	xor	ebx, edx
	shl	ecx, 8
	xor	ecx, DWORD PTR _BZ2_crc32Table[ebx*4]
	mov	ebx, 1
	mov	DWORD PTR [eax+608], ecx
	mov	BYTE PTR [esi+eax+88], bl
	mov	edx, DWORD PTR [eax+68]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR tv416[ebp], eax
	mov	al, BYTE PTR _ch$81880[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	eax, DWORD PTR tv416[ebp]
	add	DWORD PTR [eax+68], ebx
	jmp	SHORT $LN46@copy_input
$LN20@copy_input:
	cmp	edi, esi
	jne	SHORT $LN17@copy_input
$LN45@copy_input:
	mov	ecx, DWORD PTR [eax+56]
	cmp	ecx, 255				; 000000ffH
	je	SHORT $LN17@copy_input
	inc	ecx
	mov	DWORD PTR [eax+56], ecx
	jmp	SHORT $LN15@copy_input
$LN17@copy_input:
	cmp	esi, 256				; 00000100H
	jae	SHORT $LN16@copy_input
	call	_add_pair_to_block
$LN16@copy_input:
	mov	DWORD PTR [eax+56], ebx
$LN46@copy_input:
	mov	DWORD PTR [eax+52], edi
$LN15@copy_input:
; Line 273
	mov	ecx, DWORD PTR [eax]
	add	DWORD PTR [ecx], ebx
; Line 274
	mov	ecx, DWORD PTR [eax]
	dec	DWORD PTR [ecx+4]
; Line 275
	mov	ecx, DWORD PTR [eax]
	add	DWORD PTR [ecx+8], ebx
; Line 276
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN14@copy_input
	add	DWORD PTR [ecx+12], ebx
$LN14@copy_input:
; Line 268
	mov	ecx, DWORD PTR [eax+68]
	cmp	ecx, DWORD PTR [eax+72]
	jl	$LL42@copy_input
; Line 298
	mov	al, BYTE PTR _progress_in$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 299
	mov	esp, ebp
	pop	ebp
	ret	0
$LN30@copy_input:
; Line 284
	cmp	ecx, DWORD PTR [eax+72]
	jge	$LN41@copy_input
	mov	ebx, 1
	jmp	SHORT $LN12@copy_input
$LL43@copy_input:
	mov	dl, BYTE PTR _progress_in$[ebp]
$LN12@copy_input:
; Line 286
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+4], 0
	je	$LN41@copy_input
; Line 288
	cmp	DWORD PTR [eax+12], 0
	je	$LN41@copy_input
; Line 290
	mov	edx, DWORD PTR [ecx]
	movzx	edi, BYTE PTR [edx]
	mov	esi, DWORD PTR [eax+52]
	mov	BYTE PTR _progress_in$[ebp], bl
	cmp	edi, esi
	je	SHORT $LN48@copy_input
	cmp	DWORD PTR [eax+56], ebx
	jne	SHORT $LN7@copy_input
	mov	dl, BYTE PTR [eax+52]
	mov	ecx, DWORD PTR [eax+608]
	mov	BYTE PTR _ch$81905[ebp], dl
	mov	ebx, ecx
	movzx	edx, dl
	shr	ebx, 24					; 00000018H
	xor	ebx, edx
	shl	ecx, 8
	xor	ecx, DWORD PTR _BZ2_crc32Table[ebx*4]
	mov	ebx, 1
	mov	DWORD PTR [eax+608], ecx
	mov	BYTE PTR [esi+eax+88], bl
	mov	edx, DWORD PTR [eax+68]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR tv415[ebp], eax
	mov	al, BYTE PTR _ch$81905[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	eax, DWORD PTR tv415[ebp]
	add	DWORD PTR [eax+68], ebx
	jmp	SHORT $LN49@copy_input
$LN7@copy_input:
	cmp	edi, esi
	jne	SHORT $LN4@copy_input
$LN48@copy_input:
	mov	ecx, DWORD PTR [eax+56]
	cmp	ecx, 255				; 000000ffH
	je	SHORT $LN4@copy_input
	inc	ecx
	mov	DWORD PTR [eax+56], ecx
	jmp	SHORT $LN2@copy_input
$LN4@copy_input:
	cmp	esi, 256				; 00000100H
	jae	SHORT $LN3@copy_input
	call	_add_pair_to_block
$LN3@copy_input:
	mov	DWORD PTR [eax+56], ebx
$LN49@copy_input:
	mov	DWORD PTR [eax+52], edi
$LN2@copy_input:
; Line 291
	mov	ecx, DWORD PTR [eax]
	add	DWORD PTR [ecx], ebx
; Line 292
	mov	ecx, DWORD PTR [eax]
	or	edx, -1
	add	DWORD PTR [ecx+4], edx
; Line 293
	mov	ecx, DWORD PTR [eax]
	add	DWORD PTR [ecx+8], ebx
; Line 294
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN1@copy_input
	add	DWORD PTR [ecx+12], ebx
$LN1@copy_input:
; Line 295
	add	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [eax+68]
	cmp	ecx, DWORD PTR [eax+72]
	jl	$LL43@copy_input
; Line 298
	mov	al, BYTE PTR _progress_in$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 299
	mov	esp, ebp
	pop	ebp
	ret	0
$LN41@copy_input:
	pop	edi
	pop	esi
; Line 298
	mov	al, dl
	pop	ebx
; Line 299
	mov	esp, ebp
	pop	ebp
	ret	0
_copy_input_until_stop ENDP
; Function compile flags: /Ogtp
_copy_output_until_stop PROC
; _s$ = ecx
; Line 311
	mov	edx, DWORD PTR [ecx]
	xor	al, al
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN10@copy_outpu
	push	ebx
	push	esi
	mov	ebx, 1
	push	edi
$LL5@copy_outpu:
; Line 314
	mov	edx, DWORD PTR [ecx+80]
	cmp	edx, DWORD PTR [ecx+76]
	jge	SHORT $LN15@copy_outpu
; Line 317
	mov	esi, DWORD PTR [ecx+44]
	mov	dl, BYTE PTR [edx+esi]
	mov	edi, DWORD PTR [ecx]
	mov	edi, DWORD PTR [edi+16]
	mov	BYTE PTR [edi], dl
; Line 319
	mov	edx, DWORD PTR [ecx]
	add	DWORD PTR [ecx+80], ebx
	dec	DWORD PTR [edx+20]
; Line 320
	mov	edx, DWORD PTR [ecx]
	add	DWORD PTR [edx+16], ebx
; Line 321
	mov	edx, DWORD PTR [ecx]
	add	DWORD PTR [edx+24], ebx
; Line 322
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+24], 0
	mov	al, bl
	jne	SHORT $LN1@copy_outpu
	add	DWORD PTR [edx+28], ebx
$LN1@copy_outpu:
; Line 311
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+20], 0
	jne	SHORT $LL5@copy_outpu
$LN15@copy_outpu:
	pop	edi
	pop	esi
	pop	ebx
$LN10@copy_outpu:
; Line 326
	ret	0
_copy_output_until_stop ENDP
_TEXT	ENDS
EXTRN	_BZ2_compressBlock:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_progress_out$ = -2					; size = 1
_progress_in$ = -1					; size = 1
_handle_compress PROC
; _strm$ = eax
; Line 332
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
; Line 335
	mov	esi, DWORD PTR [eax+32]
	xor	ebx, ebx
	push	edi
	mov	BYTE PTR _progress_in$[ebp], bl
	mov	BYTE PTR _progress_out$[ebp], bl
	mov	edi, 1
$LL12@handle_com:
; Line 339
	mov	eax, DWORD PTR [esi+8]
	cmp	eax, edi
	jne	SHORT $LN7@handle_com
; Line 340
	mov	ecx, esi
	call	_copy_output_until_stop
; Line 341
	mov	ecx, DWORD PTR [esi+80]
	or	BYTE PTR _progress_out$[ebp], al
	cmp	ecx, DWORD PTR [esi+76]
	jl	$LN36@handle_com
; Line 344
	cmp	DWORD PTR [esi+4], 4
	jne	SHORT $LN8@handle_com
	cmp	DWORD PTR [esi+12], ebx
	jne	SHORT $LN8@handle_com
	mov	eax, esi
	call	_isempty_RL
	test	al, al
	jne	$LN36@handle_com
$LN8@handle_com:
; Line 345
	push	256					; 00000100H
	lea	eax, DWORD PTR [esi+88]
	push	ebx
	push	eax
	mov	DWORD PTR [esi+68], ebx
	mov	DWORD PTR [esi+76], ebx
	mov	DWORD PTR [esi+80], ebx
	mov	DWORD PTR [esi+608], -1
	call	_memset
	add	DWORD PTR [esi+620], edi
	add	esp, 12					; 0000000cH
; Line 349
	cmp	DWORD PTR [esi+4], 3
	mov	DWORD PTR [esi+8], 2
	jne	SHORT $LN35@handle_com
	cmp	DWORD PTR [esi+12], ebx
	jne	SHORT $LN35@handle_com
	mov	eax, esi
	call	_isempty_RL
	test	al, al
	jne	SHORT $LN36@handle_com
; Line 352
	jmp	SHORT $LN35@handle_com
$LN7@handle_com:
	cmp	eax, 2
	jne	$LL12@handle_com
$LN35@handle_com:
; Line 353
	mov	eax, esi
	call	_copy_input_until_stop
	or	BYTE PTR _progress_in$[ebp], al
; Line 354
	cmp	DWORD PTR [esi+4], 2
	je	SHORT $LN5@handle_com
	cmp	DWORD PTR [esi+12], ebx
	jne	SHORT $LN5@handle_com
; Line 355
	cmp	DWORD PTR [esi+52], 256			; 00000100H
	jae	SHORT $LN22@handle_com
	mov	eax, esi
	call	_add_pair_to_block
$LN22@handle_com:
; Line 356
	cmp	DWORD PTR [esi+4], 4
	mov	DWORD PTR [esi+52], 256			; 00000100H
	sete	dl
	movzx	eax, dl
	push	eax
	push	esi
	mov	DWORD PTR [esi+56], ebx
	call	_BZ2_compressBlock
	add	esp, 8
; Line 357
	mov	DWORD PTR [esi+8], edi
; Line 359
	jmp	$LL12@handle_com
$LN5@handle_com:
; Line 360
	mov	ecx, DWORD PTR [esi+68]
	cmp	ecx, DWORD PTR [esi+72]
	jl	SHORT $LN3@handle_com
; Line 361
	push	ebx
	push	esi
	call	_BZ2_compressBlock
	add	esp, 8
; Line 362
	mov	DWORD PTR [esi+8], edi
; Line 364
	jmp	$LL12@handle_com
$LN3@handle_com:
; Line 365
	mov	edx, DWORD PTR [esi]
	cmp	DWORD PTR [edx+4], ebx
; Line 370
	jne	$LL12@handle_com
$LN36@handle_com:
; Line 372
	cmp	BYTE PTR _progress_in$[ebp], bl
	jne	SHORT $LN15@handle_com
	cmp	BYTE PTR _progress_out$[ebp], bl
	jne	SHORT $LN15@handle_com
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 373
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@handle_com:
; Line 372
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 373
	mov	esp, ebp
	pop	ebp
	ret	0
_handle_compress ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzCompress@8
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_action$ = 12						; size = 4
_BZ2_bzCompress@8 PROC
; Line 378
	push	ebp
	mov	ebp, esp
; Line 381
	mov	eax, DWORD PTR _strm$[ebp]
	test	eax, eax
	jne	SHORT $LN24@BZ2_bzComp@2
	mov	eax, -2					; fffffffeH
; Line 434
	pop	ebp
	ret	8
$LN24@BZ2_bzComp@2:
	push	esi
; Line 382
	mov	esi, DWORD PTR [eax+32]
; Line 383
	test	esi, esi
	jne	SHORT $LN23@BZ2_bzComp@2
	lea	eax, DWORD PTR [esi-2]
	pop	esi
; Line 434
	pop	ebp
	ret	8
$LN23@BZ2_bzComp@2:
	push	edi
; Line 384
	mov	edi, DWORD PTR [esi]
	cmp	edi, eax
	jne	SHORT $LN13@BZ2_bzComp@2
; Line 387
	mov	ecx, DWORD PTR [esi+4]
	dec	ecx
	cmp	ecx, 3
	ja	SHORT $LN20@BZ2_bzComp@2
	mov	edx, DWORD PTR _action$[ebp]
$preswitch$81967:
	jmp	DWORD PTR $LN35@BZ2_bzComp@2[ecx*4]
$LN18@BZ2_bzComp@2:
; Line 393
	test	edx, edx
	je	SHORT $LN29@BZ2_bzComp@2
; Line 398
	cmp	edx, 1
	jne	SHORT $LN15@BZ2_bzComp@2
; Line 399
	mov	ecx, DWORD PTR [eax+4]
; Line 400
	mov	DWORD PTR [esi+4], 3
; Line 401
	jmp	SHORT $LN33@BZ2_bzComp@2
$LN15@BZ2_bzComp@2:
; Line 404
	cmp	edx, 2
	jne	SHORT $LN13@BZ2_bzComp@2
; Line 405
	mov	ecx, DWORD PTR [eax+4]
; Line 406
	mov	DWORD PTR [esi+4], 4
$LN33@BZ2_bzComp@2:
; Line 387
	mov	DWORD PTR [esi+12], ecx
	mov	ecx, DWORD PTR [esi+4]
	dec	ecx
	cmp	ecx, 3
	jbe	SHORT $preswitch$81967
$LN20@BZ2_bzComp@2:
	pop	edi
; Line 433
	xor	eax, eax
	pop	esi
; Line 434
	pop	ebp
	ret	8
$LN29@BZ2_bzComp@2:
; Line 394
	call	_handle_compress
; Line 395
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	and	eax, 3
	pop	edi
	add	eax, -2					; fffffffeH
	pop	esi
; Line 434
	pop	ebp
	ret	8
$LN13@BZ2_bzComp@2:
	pop	edi
; Line 410
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 434
	pop	ebp
	ret	8
$LN12@BZ2_bzComp@2:
; Line 413
	cmp	edx, 1
	jne	SHORT $LN34@BZ2_bzComp@2
; Line 414
	mov	edx, DWORD PTR [esi+12]
	cmp	edx, DWORD PTR [edi+4]
; Line 415
	jne	SHORT $LN34@BZ2_bzComp@2
; Line 416
	call	_handle_compress
; Line 418
	cmp	DWORD PTR [esi+12], 0
	ja	SHORT $LN7@BZ2_bzComp@2
	mov	eax, esi
	call	_isempty_RL
	test	al, al
	je	SHORT $LN7@BZ2_bzComp@2
	mov	eax, DWORD PTR [esi+80]
	cmp	eax, DWORD PTR [esi+76]
	jl	SHORT $LN7@BZ2_bzComp@2
; Line 419
	pop	edi
	mov	DWORD PTR [esi+4], 2
; Line 420
	mov	eax, 1
	pop	esi
; Line 434
	pop	ebp
	ret	8
$LN7@BZ2_bzComp@2:
	pop	edi
; Line 418
	mov	eax, 2
	pop	esi
; Line 434
	pop	ebp
	ret	8
$LN6@BZ2_bzComp@2:
; Line 423
	cmp	edx, 2
	jne	SHORT $LN34@BZ2_bzComp@2
; Line 424
	mov	ecx, DWORD PTR [esi+12]
	cmp	ecx, DWORD PTR [edi+4]
; Line 425
	jne	SHORT $LN34@BZ2_bzComp@2
; Line 426
	call	_handle_compress
; Line 427
	test	al, al
	jne	SHORT $LN3@BZ2_bzComp@2
$LN34@BZ2_bzComp@2:
	pop	edi
	or	eax, -1
	pop	esi
; Line 434
	pop	ebp
	ret	8
$LN3@BZ2_bzComp@2:
; Line 429
	cmp	DWORD PTR [esi+12], 0
	ja	SHORT $LN1@BZ2_bzComp@2
	mov	eax, esi
	call	_isempty_RL
	test	al, al
	je	SHORT $LN1@BZ2_bzComp@2
	mov	edx, DWORD PTR [esi+80]
	cmp	edx, DWORD PTR [esi+76]
	jl	SHORT $LN1@BZ2_bzComp@2
; Line 430
	pop	edi
	mov	DWORD PTR [esi+4], 1
; Line 431
	mov	eax, 4
	pop	esi
; Line 434
	pop	ebp
	ret	8
$LN1@BZ2_bzComp@2:
	pop	edi
; Line 429
	mov	eax, 3
	pop	esi
; Line 434
	pop	ebp
	ret	8
	npad	3
$LN35@BZ2_bzComp@2:
	DD	$LN34@BZ2_bzComp@2
	DD	$LN18@BZ2_bzComp@2
	DD	$LN12@BZ2_bzComp@2
	DD	$LN6@BZ2_bzComp@2
_BZ2_bzCompress@8 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzCompressEnd@4
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_BZ2_bzCompressEnd@4 PROC
; Line 439
	push	ebp
	mov	ebp, esp
	push	esi
; Line 441
	mov	esi, DWORD PTR _strm$[ebp]
	test	esi, esi
	jne	SHORT $LN6@BZ2_bzComp@3
	lea	eax, DWORD PTR [esi-2]
	pop	esi
; Line 454
	pop	ebp
	ret	4
$LN6@BZ2_bzComp@3:
	push	edi
; Line 442
	mov	edi, DWORD PTR [esi+32]
; Line 443
	test	edi, edi
	je	SHORT $LN10@BZ2_bzComp@3
; Line 444
	cmp	DWORD PTR [edi], esi
	je	SHORT $LN4@BZ2_bzComp@3
$LN10@BZ2_bzComp@3:
	pop	edi
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 454
	pop	ebp
	ret	4
$LN4@BZ2_bzComp@3:
; Line 446
	mov	eax, DWORD PTR [edi+16]
	test	eax, eax
	je	SHORT $LN3@BZ2_bzComp@3
	mov	ecx, DWORD PTR [esi+40]
	push	eax
	mov	eax, DWORD PTR [esi+44]
	push	eax
	call	ecx
	add	esp, 8
$LN3@BZ2_bzComp@3:
; Line 447
	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN2@BZ2_bzComp@3
	mov	edx, DWORD PTR [esi+44]
	push	eax
	mov	eax, DWORD PTR [esi+40]
	push	edx
	call	eax
	add	esp, 8
$LN2@BZ2_bzComp@3:
; Line 448
	mov	edi, DWORD PTR [edi+24]
	test	edi, edi
	je	SHORT $LN1@BZ2_bzComp@3
	mov	ecx, DWORD PTR [esi+44]
	mov	edx, DWORD PTR [esi+40]
	push	edi
	push	ecx
	call	edx
	add	esp, 8
$LN1@BZ2_bzComp@3:
; Line 449
	mov	eax, DWORD PTR [esi+32]
	mov	ecx, DWORD PTR [esi+44]
	mov	edx, DWORD PTR [esi+40]
	push	eax
	push	ecx
	call	edx
	add	esp, 8
	pop	edi
; Line 451
	mov	DWORD PTR [esi+32], 0
; Line 453
	xor	eax, eax
	pop	esi
; Line 454
	pop	ebp
	ret	4
_BZ2_bzCompressEnd@4 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzDecompressInit@12
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_verbosity$ = 12					; size = 4
_small$ = 16						; size = 4
_BZ2_bzDecompressInit@12 PROC
; Line 466
	push	ebp
	mov	ebp, esp
	push	esi
; Line 471
	mov	esi, DWORD PTR _strm$[ebp]
	push	edi
	xor	edi, edi
	cmp	esi, edi
	jne	SHORT $LN7@BZ2_bzDeco
	lea	eax, DWORD PTR [edi-2]
	pop	edi
	pop	esi
; Line 498
	pop	ebp
	ret	12					; 0000000cH
$LN7@BZ2_bzDeco:
	push	ebx
; Line 472
	mov	ebx, DWORD PTR _small$[ebp]
	cmp	ebx, edi
	je	SHORT $LN6@BZ2_bzDeco
	cmp	ebx, 1
	jne	$LN4@BZ2_bzDeco
$LN6@BZ2_bzDeco:
; Line 473
	cmp	DWORD PTR _verbosity$[ebp], 4
	ja	$LN4@BZ2_bzDeco
; Line 475
	cmp	DWORD PTR [esi+36], edi
	jne	SHORT $LN3@BZ2_bzDeco
	mov	DWORD PTR [esi+36], OFFSET _default_bzalloc
$LN3@BZ2_bzDeco:
; Line 476
	cmp	DWORD PTR [esi+40], edi
	jne	SHORT $LN2@BZ2_bzDeco
	mov	DWORD PTR [esi+40], OFFSET _default_bzfree
$LN2@BZ2_bzDeco:
; Line 478
	mov	eax, DWORD PTR [esi+44]
	mov	ecx, DWORD PTR [esi+36]
	push	1
	push	64116					; 0000fa74H
	push	eax
	call	ecx
	add	esp, 12					; 0000000cH
; Line 479
	cmp	eax, edi
	jne	SHORT $LN1@BZ2_bzDeco
	pop	ebx
	pop	edi
	mov	eax, -3					; fffffffdH
	pop	esi
; Line 498
	pop	ebp
	ret	12					; 0000000cH
$LN1@BZ2_bzDeco:
; Line 495
	mov	edx, DWORD PTR _verbosity$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [esi+32], eax
	mov	DWORD PTR [eax+32], edi
	mov	DWORD PTR [eax+28], edi
	mov	DWORD PTR [eax+3172], edi
	mov	DWORD PTR [eax+4], 10			; 0000000aH
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+24], edi
	mov	DWORD PTR [esi+28], edi
	mov	BYTE PTR [eax+40], bl
	pop	ebx
	mov	DWORD PTR [eax+3156], edi
	mov	DWORD PTR [eax+3152], edi
	mov	DWORD PTR [eax+3148], edi
	mov	DWORD PTR [eax+44], edi
	pop	edi
	mov	DWORD PTR [eax+48], edx
; Line 497
	xor	eax, eax
	pop	esi
; Line 498
	pop	ebp
	ret	12					; 0000000cH
$LN4@BZ2_bzDeco:
	pop	ebx
	pop	edi
; Line 473
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 498
	pop	ebp
	ret	12					; 0000000cH
_BZ2_bzDecompressInit@12 ENDP
_TEXT	ENDS
EXTRN	_BZ2_rNums:BYTE
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_avail_out_INIT$82109 = -40				; size = 4
tv780 = -36						; size = 4
tv765 = -36						; size = 4
tv694 = -36						; size = 4
_ro_blockSize100k$82108 = -32				; size = 4
_s_save_nblockPP$82110 = -28				; size = 4
tv706 = -24						; size = 4
_c_tt$82104 = -24					; size = 4
_c_calculatedBlockCRC$82099 = -20			; size = 4
_cs_next_out$82106 = -16				; size = 4
_cs_avail_out$82107 = -12				; size = 4
_c_k0$82103 = -8					; size = 4
_k1$ = -2						; size = 1
_c_state_out_ch$82100 = -1				; size = 1
_unRLE_obuf_to_output_FAST PROC
; _s$ = ecx
; Line 507
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
; Line 510
	cmp	BYTE PTR [ecx+16], 0
	push	ebx
	push	esi
	push	edi
	je	$LN54@unRLE_obuf
$LL51@unRLE_obuf:
; Line 515
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+20], 0
	je	$LN73@unRLE_obuf
; Line 516
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN74@unRLE_obuf
; Line 517
	mov	eax, DWORD PTR [edx+16]
	mov	dl, BYTE PTR [ecx+8]
	mov	BYTE PTR [eax], dl
; Line 518
	mov	edx, DWORD PTR [ecx+3168]
	movzx	esi, BYTE PTR [ecx+8]
	mov	eax, edx
	shl	edx, 8
	shr	eax, 24					; 00000018H
	xor	eax, esi
	xor	edx, DWORD PTR _BZ2_crc32Table[eax*4]
; Line 519
	or	esi, -1
	add	DWORD PTR [ecx+12], esi
	mov	DWORD PTR [ecx+3168], edx
; Line 520
	mov	edx, DWORD PTR [ecx]
	mov	eax, 1
	add	DWORD PTR [edx+16], eax
; Line 521
	mov	edx, DWORD PTR [ecx]
	add	DWORD PTR [edx+20], esi
; Line 522
	mov	edx, DWORD PTR [ecx]
	add	DWORD PTR [edx+24], eax
; Line 523
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+24], 0
	jne	SHORT $LL51@unRLE_obuf
	inc	DWORD PTR [edx+28]
; Line 524
	jmp	SHORT $LL51@unRLE_obuf
$LN74@unRLE_obuf:
; Line 527
	mov	eax, DWORD PTR [ecx+64064]
	mov	esi, DWORD PTR [ecx+1088]
	lea	ebx, DWORD PTR [eax+1]
	mov	DWORD PTR tv694[ebp], ebx
	cmp	esi, ebx
	je	$LN73@unRLE_obuf
; Line 530
	jg	$LN91@unRLE_obuf
; Line 534
	mov	dl, BYTE PTR [ecx+60]
; Line 535
	mov	eax, DWORD PTR [ecx+56]
	mov	BYTE PTR [ecx+8], dl
	mov	edx, DWORD PTR [ecx+36]
	imul	edx, 100000				; 000186a0H
	mov	DWORD PTR [ecx+12], 1
	mov	DWORD PTR tv706[ebp], edx
	cmp	eax, edx
	jae	$LN91@unRLE_obuf
	mov	edx, DWORD PTR [ecx+3148]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	al, dl
	shr	edx, 8
	cmp	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+56], edx
	jne	SHORT $LN42@unRLE_obuf
	mov	edx, DWORD PTR [ecx+24]
	mov	edi, DWORD PTR _BZ2_rNums[edx*4]
	inc	edx
	mov	DWORD PTR [ecx+20], edi
	mov	DWORD PTR [ecx+24], edx
	cmp	edx, 512				; 00000200H
	jne	SHORT $LN42@unRLE_obuf
	mov	DWORD PTR [ecx+24], 0
$LN42@unRLE_obuf:
	dec	DWORD PTR [ecx+20]
	mov	edi, DWORD PTR [ecx+20]
; Line 536
	cmp	edi, 1
	sete	dl
	inc	esi
	xor	al, dl
	mov	DWORD PTR [ecx+1088], esi
; Line 537
	cmp	esi, ebx
	je	$LL51@unRLE_obuf
; Line 538
	movzx	eax, al
	cmp	eax, DWORD PTR [ecx+60]
	je	SHORT $LN40@unRLE_obuf
	mov	DWORD PTR [ecx+60], eax
	jmp	$LL51@unRLE_obuf
$LN40@unRLE_obuf:
; Line 541
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [ecx+12], 2
	cmp	eax, DWORD PTR tv706[ebp]
	jae	$LN91@unRLE_obuf
	mov	edx, DWORD PTR [ecx+3148]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	al, dl
	shr	edx, 8
	mov	DWORD PTR [ecx+56], edx
	test	edi, edi
	jne	SHORT $LN37@unRLE_obuf
	mov	edx, DWORD PTR [ecx+24]
	mov	edi, DWORD PTR _BZ2_rNums[edx*4]
	inc	edx
	mov	DWORD PTR [ecx+20], edi
	mov	DWORD PTR [ecx+24], edx
	cmp	edx, 512				; 00000200H
	jne	SHORT $LN37@unRLE_obuf
	mov	DWORD PTR [ecx+24], 0
$LN37@unRLE_obuf:
	dec	DWORD PTR [ecx+20]
	mov	edi, DWORD PTR [ecx+20]
; Line 542
	cmp	edi, 1
	sete	dl
	inc	esi
	xor	al, dl
	mov	DWORD PTR [ecx+1088], esi
; Line 543
	cmp	esi, ebx
	je	$LL51@unRLE_obuf
; Line 544
	movzx	eax, al
	cmp	eax, DWORD PTR [ecx+60]
	je	SHORT $LN35@unRLE_obuf
	mov	DWORD PTR [ecx+60], eax
	jmp	$LL51@unRLE_obuf
$LN35@unRLE_obuf:
; Line 547
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [ecx+12], 3
	cmp	eax, DWORD PTR tv706[ebp]
	jae	$LN91@unRLE_obuf
	mov	edx, DWORD PTR [ecx+3148]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	al, dl
	shr	edx, 8
	mov	DWORD PTR [ecx+56], edx
	test	edi, edi
	jne	SHORT $LN32@unRLE_obuf
	mov	edx, DWORD PTR [ecx+24]
	mov	edi, DWORD PTR _BZ2_rNums[edx*4]
	inc	edx
	mov	DWORD PTR [ecx+20], edi
	mov	DWORD PTR [ecx+24], edx
	cmp	edx, 512				; 00000200H
	jne	SHORT $LN32@unRLE_obuf
	mov	DWORD PTR [ecx+24], 0
$LN32@unRLE_obuf:
	dec	DWORD PTR [ecx+20]
	mov	ebx, DWORD PTR [ecx+20]
; Line 548
	cmp	ebx, 1
	sete	dl
	lea	edi, DWORD PTR [esi+1]
	xor	al, dl
	mov	DWORD PTR [ecx+1088], edi
; Line 549
	cmp	edi, DWORD PTR tv694[ebp]
	je	$LL51@unRLE_obuf
; Line 550
	movzx	eax, al
	cmp	eax, DWORD PTR [ecx+60]
	je	SHORT $LN30@unRLE_obuf
	mov	DWORD PTR [ecx+60], eax
	jmp	$LL51@unRLE_obuf
$LN30@unRLE_obuf:
; Line 552
	mov	edx, DWORD PTR [ecx+56]
	cmp	edx, DWORD PTR tv706[ebp]
	jae	$LN91@unRLE_obuf
	mov	eax, DWORD PTR [ecx+3148]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	al, dl
	shr	edx, 8
	mov	DWORD PTR [ecx+56], edx
	test	ebx, ebx
	jne	SHORT $LN96@unRLE_obuf
	mov	edx, DWORD PTR [ecx+24]
	mov	esi, DWORD PTR _BZ2_rNums[edx*4]
	inc	edx
	mov	DWORD PTR [ecx+20], esi
	mov	DWORD PTR [ecx+24], edx
	cmp	edx, 512				; 00000200H
	jne	SHORT $LN96@unRLE_obuf
	mov	DWORD PTR [ecx+24], ebx
$LN96@unRLE_obuf:
	or	ebx, -1
	add	DWORD PTR [ecx+20], ebx
	mov	esi, DWORD PTR [ecx+20]
; Line 553
	xor	edx, edx
	inc	edi
	cmp	esi, 1
	sete	dl
; Line 554
	movzx	eax, al
	mov	DWORD PTR [ecx+1088], edi
	xor	edx, eax
	add	edx, 4
	mov	DWORD PTR [ecx+12], edx
; Line 555
	mov	edx, DWORD PTR [ecx+56]
	cmp	edx, DWORD PTR tv706[ebp]
	jae	$LN91@unRLE_obuf
	mov	eax, DWORD PTR [ecx+3148]
	mov	edx, DWORD PTR [eax+edx*4]
	movzx	eax, dl
	mov	DWORD PTR [ecx+56], edx
	shr	DWORD PTR [ecx+56], 8
	mov	DWORD PTR [ecx+60], eax
	test	esi, esi
	jne	SHORT $LN24@unRLE_obuf
	mov	eax, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _BZ2_rNums[eax*4]
	inc	eax
	mov	DWORD PTR [ecx+20], edx
	mov	DWORD PTR [ecx+24], eax
	cmp	eax, 512				; 00000200H
	jne	SHORT $LN24@unRLE_obuf
	mov	DWORD PTR [ecx+24], esi
$LN24@unRLE_obuf:
	add	DWORD PTR [ecx+20], ebx
	mov	eax, DWORD PTR [ecx+20]
; Line 556
	xor	edx, edx
	cmp	eax, 1
	sete	dl
	xor	DWORD PTR [ecx+60], edx
	inc	edi
	mov	DWORD PTR [ecx+1088], edi
; Line 651
	jmp	$LL51@unRLE_obuf
$LN54@unRLE_obuf:
; Line 569
	mov	ebx, DWORD PTR [ecx]
	mov	ebx, DWORD PTR [ebx+16]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR [ecx+3168]
	mov	esi, DWORD PTR [ecx+12]
	mov	edi, DWORD PTR [ecx+1088]
	mov	DWORD PTR _cs_next_out$82106[ebp], ebx
; Line 570
	mov	ebx, DWORD PTR [ecx]
	mov	ebx, DWORD PTR [ebx+20]
	mov	DWORD PTR _cs_avail_out$82107[ebp], ebx
; Line 571
	mov	ebx, DWORD PTR [ecx+36]
	mov	DWORD PTR _ro_blockSize100k$82108[ebp], ebx
; Line 574
	mov	ebx, DWORD PTR _cs_avail_out$82107[ebp]
	mov	DWORD PTR _avail_out_INIT$82109[ebp], ebx
; Line 575
	mov	ebx, DWORD PTR [ecx+64064]
	mov	DWORD PTR _c_k0$82103[ebp], edx
	mov	edx, DWORD PTR [ecx+3148]
	mov	DWORD PTR _c_calculatedBlockCRC$82099[ebp], eax
	mov	al, BYTE PTR [ecx+8]
	inc	ebx
	mov	DWORD PTR _c_tt$82104[ebp], edx
	mov	edx, DWORD PTR [ecx+56]
	mov	BYTE PTR _c_state_out_ch$82100[ebp], al
	mov	DWORD PTR _s_save_nblockPP$82110[ebp], ebx
	jmp	SHORT $LL22@unRLE_obuf
$LN101@unRLE_obuf:
; Line 626
	mov	DWORD PTR _c_k0$82103[ebp], eax
	npad	3
$LL92@unRLE_obuf:
; Line 621
	mov	al, BYTE PTR _c_state_out_ch$82100[ebp]
$LL22@unRLE_obuf:
; Line 581
	test	esi, esi
	jle	SHORT $LN97@unRLE_obuf
	npad	9
$LL19@unRLE_obuf:
; Line 583
	cmp	DWORD PTR _cs_avail_out$82107[ebp], 0
	je	$return_notr$82122
; Line 584
	cmp	esi, 1
	je	SHORT $s_state_out_len_eq_one$82126
; Line 585
	mov	ebx, DWORD PTR _cs_next_out$82106[ebp]
	mov	BYTE PTR [ebx], al
; Line 586
	mov	ebx, DWORD PTR _c_calculatedBlockCRC$82099[ebp]
	movzx	eax, al
	shr	ebx, 24					; 00000018H
	xor	ebx, eax
	mov	eax, DWORD PTR _c_calculatedBlockCRC$82099[ebp]
	shl	eax, 8
	xor	eax, DWORD PTR _BZ2_crc32Table[ebx*4]
	mov	DWORD PTR _c_calculatedBlockCRC$82099[ebp], eax
; Line 587
	mov	eax, 1
; Line 588
	add	DWORD PTR _cs_next_out$82106[ebp], eax
	sub	esi, eax
; Line 589
	sub	DWORD PTR _cs_avail_out$82107[ebp], eax
; Line 590
	mov	al, BYTE PTR _c_state_out_ch$82100[ebp]
	jmp	SHORT $LL19@unRLE_obuf
$LN97@unRLE_obuf:
; Line 603
	mov	eax, DWORD PTR _s_save_nblockPP$82110[ebp]
	cmp	edi, eax
	jg	$LN91@unRLE_obuf
; Line 607
	je	$LN85@unRLE_obuf
; Line 611
	mov	esi, DWORD PTR _ro_blockSize100k$82108[ebp]
	mov	al, BYTE PTR _c_k0$82103[ebp]
	imul	esi, 100000				; 000186a0H
	mov	BYTE PTR _c_state_out_ch$82100[ebp], al
	cmp	edx, esi
	jae	$LN91@unRLE_obuf
	mov	esi, DWORD PTR _c_tt$82104[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	bl, dl
; Line 612
	movzx	esi, bl
	shr	edx, 8
	inc	edi
	cmp	esi, DWORD PTR _c_k0$82103[ebp]
	je	SHORT $LN11@unRLE_obuf
; Line 613
	mov	DWORD PTR _c_k0$82103[ebp], esi
	jmp	SHORT $s_state_out_len_eq_one$82126
$LN11@unRLE_obuf:
; Line 615
	cmp	edi, DWORD PTR _s_save_nblockPP$82110[ebp]
	jne	SHORT $LN10@unRLE_obuf
$s_state_out_len_eq_one$82126:
; Line 593
	cmp	DWORD PTR _cs_avail_out$82107[ebp], 0
	je	$LN87@unRLE_obuf
; Line 596
	mov	esi, DWORD PTR _cs_next_out$82106[ebp]
	mov	BYTE PTR [esi], al
; Line 597
	mov	esi, DWORD PTR _c_calculatedBlockCRC$82099[ebp]
	mov	ebx, esi
	movzx	eax, al
	shr	ebx, 24					; 00000018H
	xor	ebx, eax
	shl	esi, 8
	xor	esi, DWORD PTR _BZ2_crc32Table[ebx*4]
; Line 598
	mov	eax, 1
	add	DWORD PTR _cs_next_out$82106[ebp], eax
; Line 599
	sub	DWORD PTR _cs_avail_out$82107[ebp], eax
	mov	DWORD PTR _c_calculatedBlockCRC$82099[ebp], esi
	jmp	SHORT $LN97@unRLE_obuf
$LN10@unRLE_obuf:
; Line 619
	mov	ebx, DWORD PTR _ro_blockSize100k$82108[ebp]
	imul	ebx, 100000				; 000186a0H
	mov	esi, 2
	mov	DWORD PTR tv765[ebp], ebx
	cmp	edx, ebx
	jae	$LN91@unRLE_obuf
	mov	ebx, DWORD PTR _c_tt$82104[ebp]
	mov	edx, DWORD PTR [ebx+edx*4]
	mov	BYTE PTR _k1$[ebp], dl
	inc	edi
	shr	edx, 8
; Line 620
	cmp	edi, DWORD PTR _s_save_nblockPP$82110[ebp]
	je	$LL22@unRLE_obuf
; Line 621
	movzx	eax, BYTE PTR _k1$[ebp]
	cmp	eax, DWORD PTR _c_k0$82103[ebp]
	jne	$LN101@unRLE_obuf
; Line 623
	mov	esi, 3
; Line 624
	cmp	edx, DWORD PTR tv765[ebp]
	jae	$LN91@unRLE_obuf
	mov	eax, ebx
	mov	edx, DWORD PTR [eax+edx*4]
	mov	al, dl
	inc	edi
	shr	edx, 8
; Line 625
	cmp	edi, DWORD PTR _s_save_nblockPP$82110[ebp]
	je	$LL92@unRLE_obuf
; Line 626
	movzx	eax, al
	cmp	eax, DWORD PTR _c_k0$82103[ebp]
	jne	$LN101@unRLE_obuf
; Line 628
	mov	ebx, DWORD PTR tv765[ebp]
	cmp	edx, ebx
	jae	$LN91@unRLE_obuf
	mov	eax, DWORD PTR _c_tt$82104[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	al, dl
; Line 629
	movzx	esi, al
	shr	edx, 8
	add	esi, 4
; Line 630
	cmp	edx, ebx
	jae	$LN91@unRLE_obuf
	mov	eax, DWORD PTR _c_tt$82104[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	movzx	eax, dl
	shr	edx, 8
	add	edi, 2
; Line 631
	jmp	$LN101@unRLE_obuf
$LN85@unRLE_obuf:
; Line 608
	xor	esi, esi
	jmp	SHORT $return_notr$82122
$LN87@unRLE_obuf:
; Line 594
	mov	esi, 1
$return_notr$82122:
; Line 634
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+24]
; Line 635
	mov	ebx, eax
	sub	ebx, DWORD PTR _cs_avail_out$82107[ebp]
	mov	DWORD PTR tv780[ebp], eax
	add	ebx, DWORD PTR _avail_out_INIT$82109[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], ebx
; Line 636
	mov	eax, DWORD PTR [ecx]
	mov	ebx, DWORD PTR tv780[ebp]
	cmp	DWORD PTR [eax+24], ebx
	jae	SHORT $LN1@unRLE_obuf
; Line 637
	inc	DWORD PTR [eax+28]
$LN1@unRLE_obuf:
; Line 640
	mov	eax, DWORD PTR _c_calculatedBlockCRC$82099[ebp]
	mov	DWORD PTR [ecx+3168], eax
; Line 641
	mov	al, BYTE PTR _c_state_out_ch$82100[ebp]
	mov	BYTE PTR [ecx+8], al
; Line 644
	mov	eax, DWORD PTR _c_k0$82103[ebp]
	mov	DWORD PTR [ecx+60], eax
; Line 645
	mov	eax, DWORD PTR _c_tt$82104[ebp]
; Line 646
	mov	DWORD PTR [ecx+56], edx
; Line 647
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+3148], eax
	mov	eax, DWORD PTR _cs_next_out$82106[ebp]
	mov	DWORD PTR [ecx+12], esi
	mov	DWORD PTR [ecx+1088], edi
	mov	DWORD PTR [edx+16], eax
; Line 648
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR _cs_avail_out$82107[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN73@unRLE_obuf:
; Line 651
	pop	edi
	pop	esi
	xor	al, al
	pop	ebx
; Line 652
	mov	esp, ebp
	pop	ebp
	ret	0
$LN91@unRLE_obuf:
	pop	edi
	pop	esi
; Line 630
	mov	al, 1
	pop	ebx
; Line 652
	mov	esp, ebp
	pop	ebp
	ret	0
_unRLE_obuf_to_output_FAST ENDP
_TEXT	ENDS
PUBLIC	_BZ2_indexIntoF
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_indx$ = 8						; size = 4
_cftab$ = 12						; size = 4
_BZ2_indexIntoF PROC
; Line 658
	push	ebp
	mov	ebp, esp
	push	esi
; Line 661
	mov	esi, DWORD PTR _cftab$[ebp]
	push	edi
	mov	edi, DWORD PTR _indx$[ebp]
	xor	eax, eax
	mov	edx, 256				; 00000100H
$LL5@BZ2_indexI:
; Line 663
	lea	ecx, DWORD PTR [edx+eax]
	sar	ecx, 1
; Line 664
	cmp	edi, DWORD PTR [esi+ecx*4]
	jl	SHORT $LN2@BZ2_indexI
	mov	eax, ecx
	jmp	SHORT $LN4@BZ2_indexI
$LN2@BZ2_indexI:
	mov	edx, ecx
$LN4@BZ2_indexI:
; Line 666
	mov	ecx, edx
	sub	ecx, eax
	cmp	ecx, 1
	jne	SHORT $LL5@BZ2_indexI
	pop	edi
	pop	esi
; Line 668
	pop	ebp
	ret	0
_BZ2_indexIntoF ENDP
; Function compile flags: /Ogtp
tv1311 = -16						; size = 4
tv1304 = -16						; size = 4
tv1144 = -16						; size = 4
tv532 = -16						; size = 4
_nb$83691 = -12						; size = 4
_nb$83669 = -12						; size = 4
tv1078 = -8						; size = 4
tv1090 = -4						; size = 4
_unRLE_obuf_to_output_SMALL PROC
; _s$ = esi
; Line 677
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 680
	cmp	BYTE PTR [esi+16], 0
	push	ebx
	push	edi
	je	$LL20@unRLE_obuf@2
$LL51@unRLE_obuf@2:
	or	edx, -1
	npad	11
$LL49@unRLE_obuf@2:
; Line 685
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax+20], 0
	je	$LN106@unRLE_obuf@2
; Line 686
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN107@unRLE_obuf@2
; Line 687
	mov	eax, DWORD PTR [eax+16]
	mov	cl, BYTE PTR [esi+8]
	mov	BYTE PTR [eax], cl
; Line 688
	mov	eax, DWORD PTR [esi+3168]
	movzx	edi, BYTE PTR [esi+8]
	mov	ecx, eax
	shl	eax, 8
	shr	ecx, 24					; 00000018H
	xor	ecx, edi
	xor	eax, DWORD PTR _BZ2_crc32Table[ecx*4]
; Line 689
	add	DWORD PTR [esi+12], edx
	mov	DWORD PTR [esi+3168], eax
; Line 690
	mov	eax, DWORD PTR [esi]
	mov	ecx, 1
	add	DWORD PTR [eax+16], ecx
; Line 691
	mov	eax, DWORD PTR [esi]
	add	DWORD PTR [eax+20], edx
; Line 692
	mov	eax, DWORD PTR [esi]
	add	DWORD PTR [eax+24], ecx
; Line 693
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LL49@unRLE_obuf@2
	inc	DWORD PTR [eax+28]
; Line 694
	jmp	SHORT $LL49@unRLE_obuf@2
$LN107@unRLE_obuf@2:
; Line 697
	mov	eax, DWORD PTR [esi+64064]
	mov	ecx, DWORD PTR [esi+1088]
	inc	eax
	mov	DWORD PTR tv1078[ebp], eax
	cmp	ecx, eax
	je	$LN106@unRLE_obuf@2
; Line 700
	jg	$LN123@unRLE_obuf@2
; Line 705
	mov	eax, DWORD PTR [esi+36]
	mov	dl, BYTE PTR [esi+60]
	imul	eax, 100000				; 000186a0H
	mov	BYTE PTR [esi+8], dl
	mov	edx, DWORD PTR [esi+56]
	mov	DWORD PTR [esi+12], 1
	mov	DWORD PTR tv1090[ebp], eax
	cmp	edx, eax
	jae	$LN123@unRLE_obuf@2
	xor	ebx, ebx
	mov	ecx, 256				; 00000100H
	npad	8
$LL59@unRLE_obuf@2:
	lea	eax, DWORD PTR [ecx+ebx]
	sar	eax, 1
	cmp	edx, DWORD PTR [esi+eax*4+1092]
	jl	SHORT $LN56@unRLE_obuf@2
	mov	ebx, eax
	jmp	SHORT $LN58@unRLE_obuf@2
$LN56@unRLE_obuf@2:
	mov	ecx, eax
$LN58@unRLE_obuf@2:
	mov	eax, ecx
	sub	eax, ebx
	cmp	eax, 1
	jne	SHORT $LL59@unRLE_obuf@2
	mov	eax, DWORD PTR [esi+3156]
	mov	edi, DWORD PTR [esi+3152]
	mov	ecx, edx
	shr	ecx, 1
	movzx	eax, BYTE PTR [ecx+eax]
	movzx	ecx, dl
	and	cl, 1
	add	cl, cl
	add	cl, cl
	shr	eax, cl
	movzx	ecx, WORD PTR [edi+edx*2]
	and	eax, 15					; 0000000fH
	shl	eax, 16					; 00000010H
	or	eax, ecx
	cmp	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi+56], eax
	jne	SHORT $LN129@unRLE_obuf@2
	mov	eax, DWORD PTR [esi+24]
	mov	edx, DWORD PTR _BZ2_rNums[eax*4]
	inc	eax
	mov	DWORD PTR [esi+20], edx
	mov	DWORD PTR [esi+24], eax
	cmp	eax, 512				; 00000200H
	jne	SHORT $LN129@unRLE_obuf@2
	mov	DWORD PTR [esi+24], 0
$LN129@unRLE_obuf@2:
	dec	DWORD PTR [esi+20]
	mov	edi, DWORD PTR [esi+20]
; Line 706
	cmp	edi, 1
	sete	al
	xor	al, bl
	mov	ebx, DWORD PTR [esi+1088]
	inc	ebx
	mov	DWORD PTR [esi+1088], ebx
; Line 707
	cmp	ebx, DWORD PTR tv1078[ebp]
	je	$LL51@unRLE_obuf@2
; Line 708
	movzx	eax, al
	cmp	eax, DWORD PTR [esi+60]
	je	SHORT $LN38@unRLE_obuf@2
	mov	DWORD PTR [esi+60], eax
	jmp	$LL51@unRLE_obuf@2
$LN38@unRLE_obuf@2:
; Line 711
	mov	edx, DWORD PTR [esi+56]
	mov	DWORD PTR [esi+12], 2
	cmp	edx, DWORD PTR tv1090[ebp]
	jae	$LN123@unRLE_obuf@2
	mov	DWORD PTR _nb$83669[ebp], 0
	mov	ecx, 256				; 00000100H
$LL66@unRLE_obuf@2:
	mov	eax, DWORD PTR _nb$83669[ebp]
	add	eax, ecx
	sar	eax, 1
	cmp	edx, DWORD PTR [esi+eax*4+1092]
	jl	SHORT $LN63@unRLE_obuf@2
	mov	DWORD PTR _nb$83669[ebp], eax
	jmp	SHORT $LN65@unRLE_obuf@2
$LN63@unRLE_obuf@2:
	mov	ecx, eax
$LN65@unRLE_obuf@2:
	mov	eax, ecx
	sub	eax, DWORD PTR _nb$83669[ebp]
	cmp	eax, 1
	jne	SHORT $LL66@unRLE_obuf@2
	mov	eax, DWORD PTR [esi+3156]
	mov	ecx, edx
	shr	ecx, 1
	movzx	eax, BYTE PTR [ecx+eax]
	movzx	ecx, dl
	and	cl, 1
	add	cl, cl
	add	cl, cl
	shr	eax, cl
	and	eax, 15					; 0000000fH
	shl	eax, 16					; 00000010H
	mov	DWORD PTR tv532[ebp], eax
	mov	eax, DWORD PTR [esi+3152]
	movzx	edx, WORD PTR [eax+edx*2]
	mov	eax, DWORD PTR tv532[ebp]
	or	eax, edx
	mov	DWORD PTR [esi+56], eax
	test	edi, edi
	jne	SHORT $LN35@unRLE_obuf@2
	mov	eax, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR _BZ2_rNums[eax*4]
	inc	eax
	mov	DWORD PTR [esi+20], ecx
	mov	DWORD PTR [esi+24], eax
	cmp	eax, 512				; 00000200H
	jne	SHORT $LN35@unRLE_obuf@2
	mov	DWORD PTR [esi+24], edi
$LN35@unRLE_obuf@2:
	dec	DWORD PTR [esi+20]
	mov	edi, DWORD PTR [esi+20]
; Line 712
	cmp	edi, 1
	sete	al
	xor	al, BYTE PTR _nb$83669[ebp]
	inc	ebx
	mov	DWORD PTR tv1144[ebp], ebx
	mov	DWORD PTR [esi+1088], ebx
; Line 713
	cmp	ebx, DWORD PTR tv1078[ebp]
	je	$LL51@unRLE_obuf@2
; Line 714
	movzx	eax, al
	cmp	eax, DWORD PTR [esi+60]
	je	SHORT $LN33@unRLE_obuf@2
	mov	DWORD PTR [esi+60], eax
	jmp	$LL51@unRLE_obuf@2
$LN33@unRLE_obuf@2:
; Line 717
	mov	ebx, DWORD PTR [esi+56]
	mov	DWORD PTR [esi+12], 3
	cmp	ebx, DWORD PTR tv1090[ebp]
	jae	$LN123@unRLE_obuf@2
	lea	eax, DWORD PTR [esi+1092]
	push	eax
	push	ebx
	call	_BZ2_indexIntoF
	mov	ecx, DWORD PTR [esi+3156]
	mov	edx, ebx
	shr	edx, 1
	movzx	edx, BYTE PTR [edx+ecx]
	movzx	ecx, bl
	and	cl, 1
	add	cl, cl
	add	cl, cl
	shr	edx, cl
	mov	ecx, DWORD PTR [esi+3152]
	movzx	ecx, WORD PTR [ecx+ebx*2]
	and	edx, 15					; 0000000fH
	shl	edx, 16					; 00000010H
	or	edx, ecx
	add	esp, 8
	mov	DWORD PTR [esi+56], edx
	test	edi, edi
	jne	SHORT $LN30@unRLE_obuf@2
	mov	ecx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR _BZ2_rNums[ecx*4]
	inc	ecx
	mov	DWORD PTR [esi+20], edx
	mov	DWORD PTR [esi+24], ecx
	cmp	ecx, 512				; 00000200H
	jne	SHORT $LN30@unRLE_obuf@2
	mov	DWORD PTR [esi+24], edi
$LN30@unRLE_obuf@2:
	dec	DWORD PTR [esi+20]
	mov	edi, DWORD PTR [esi+20]
; Line 718
	cmp	edi, 1
	sete	cl
	xor	al, cl
	mov	ecx, DWORD PTR tv1144[ebp]
	inc	ecx
	mov	DWORD PTR tv1304[ebp], ecx
	mov	DWORD PTR [esi+1088], ecx
; Line 719
	cmp	ecx, DWORD PTR tv1078[ebp]
	je	$LL51@unRLE_obuf@2
; Line 720
	movzx	eax, al
	cmp	eax, DWORD PTR [esi+60]
	je	SHORT $LN28@unRLE_obuf@2
	mov	DWORD PTR [esi+60], eax
	jmp	$LL51@unRLE_obuf@2
$LN28@unRLE_obuf@2:
; Line 722
	mov	ebx, DWORD PTR [esi+56]
	cmp	ebx, DWORD PTR tv1090[ebp]
	jae	$LN123@unRLE_obuf@2
	lea	eax, DWORD PTR [esi+1092]
	push	eax
	push	ebx
	call	_BZ2_indexIntoF
	mov	ecx, DWORD PTR [esi+3156]
	mov	edx, ebx
	shr	edx, 1
	movzx	edx, BYTE PTR [edx+ecx]
	movzx	ecx, bl
	and	cl, 1
	add	cl, cl
	add	cl, cl
	shr	edx, cl
	mov	ecx, DWORD PTR [esi+3152]
	movzx	ecx, WORD PTR [ecx+ebx*2]
	and	edx, 15					; 0000000fH
	shl	edx, 16					; 00000010H
	or	edx, ecx
	add	esp, 8
	mov	DWORD PTR [esi+56], edx
	test	edi, edi
	jne	SHORT $LN25@unRLE_obuf@2
	mov	ecx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR _BZ2_rNums[ecx*4]
	inc	ecx
	mov	DWORD PTR [esi+20], edx
	mov	DWORD PTR [esi+24], ecx
	cmp	ecx, 512				; 00000200H
	jne	SHORT $LN25@unRLE_obuf@2
	mov	DWORD PTR [esi+24], edi
$LN25@unRLE_obuf@2:
; Line 723
	mov	ecx, DWORD PTR tv1304[ebp]
	dec	DWORD PTR [esi+20]
	mov	edi, DWORD PTR [esi+20]
; Line 725
	mov	ebx, DWORD PTR [esi+56]
	inc	ecx
	mov	DWORD PTR tv1311[ebp], ecx
	mov	DWORD PTR [esi+1088], ecx
	xor	ecx, ecx
	cmp	edi, 1
	sete	cl
	movzx	edx, al
	xor	ecx, edx
	add	ecx, 4
	mov	DWORD PTR [esi+12], ecx
	cmp	ebx, DWORD PTR tv1090[ebp]
	jae	$LN123@unRLE_obuf@2
	lea	eax, DWORD PTR [esi+1092]
	push	eax
	push	ebx
	call	_BZ2_indexIntoF
	mov	ecx, DWORD PTR [esi+3156]
	mov	edx, ebx
	shr	edx, 1
	mov	DWORD PTR [esi+60], eax
	movzx	edx, BYTE PTR [edx+ecx]
	movzx	ecx, bl
	and	cl, 1
	add	cl, cl
	add	cl, cl
	shr	edx, cl
	mov	ecx, DWORD PTR [esi+3152]
	movzx	ecx, WORD PTR [ecx+ebx*2]
	and	edx, 15					; 0000000fH
	shl	edx, 16					; 00000010H
	or	edx, ecx
	add	esp, 8
	mov	DWORD PTR [esi+56], edx
	test	edi, edi
	jne	SHORT $LN22@unRLE_obuf@2
	mov	ecx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR _BZ2_rNums[ecx*4]
	inc	ecx
	mov	DWORD PTR [esi+20], edx
	mov	DWORD PTR [esi+24], ecx
	cmp	ecx, 512				; 00000200H
	jne	SHORT $LN22@unRLE_obuf@2
	mov	DWORD PTR [esi+24], edi
$LN22@unRLE_obuf@2:
	dec	DWORD PTR [esi+20]
; Line 726
	xor	edx, edx
	cmp	DWORD PTR [esi+20], 1
	sete	dl
	xor	edx, eax
	mov	eax, DWORD PTR tv1311[ebp]
	inc	eax
	mov	DWORD PTR [esi+60], edx
	mov	DWORD PTR [esi+1088], eax
	jmp	$LL51@unRLE_obuf@2
$LN106@unRLE_obuf@2:
	pop	edi
; Line 685
	xor	al, al
	pop	ebx
; Line 774
	mov	esp, ebp
	pop	ebp
	ret	0
$LN138@unRLE_obuf@2:
; Line 761
	mov	DWORD PTR [esi+60], eax
	npad	5
$LL20@unRLE_obuf@2:
; Line 725
	or	edx, -1
$LL18@unRLE_obuf@2:
; Line 734
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN106@unRLE_obuf@2
; Line 735
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN116@unRLE_obuf@2
; Line 736
	mov	ecx, DWORD PTR [eax+16]
	mov	al, BYTE PTR [esi+8]
	mov	BYTE PTR [ecx], al
; Line 737
	mov	eax, DWORD PTR [esi+3168]
	movzx	edi, BYTE PTR [esi+8]
	mov	ecx, eax
	shl	eax, 8
	shr	ecx, 24					; 00000018H
	xor	ecx, edi
	xor	eax, DWORD PTR _BZ2_crc32Table[ecx*4]
; Line 738
	add	DWORD PTR [esi+12], edx
	mov	DWORD PTR [esi+3168], eax
; Line 739
	mov	eax, DWORD PTR [esi]
	mov	ecx, 1
	add	DWORD PTR [eax+16], ecx
; Line 740
	mov	eax, DWORD PTR [esi]
	add	DWORD PTR [eax+20], edx
; Line 741
	mov	eax, DWORD PTR [esi]
	add	DWORD PTR [eax+24], ecx
; Line 742
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LL18@unRLE_obuf@2
	inc	DWORD PTR [eax+28]
; Line 743
	jmp	SHORT $LL18@unRLE_obuf@2
$LN116@unRLE_obuf@2:
; Line 746
	mov	eax, DWORD PTR [esi+64064]
	mov	ecx, DWORD PTR [esi+1088]
	inc	eax
	mov	DWORD PTR tv1078[ebp], eax
	cmp	ecx, eax
	je	$LN106@unRLE_obuf@2
; Line 749
	jg	$LN123@unRLE_obuf@2
; Line 754
	mov	eax, DWORD PTR [esi+36]
	mov	ebx, DWORD PTR [esi+56]
	imul	eax, 100000				; 000186a0H
	mov	dl, BYTE PTR [esi+60]
	mov	DWORD PTR [esi+12], 1
	mov	BYTE PTR [esi+8], dl
	mov	DWORD PTR tv1090[ebp], eax
	cmp	ebx, eax
	jae	$LN123@unRLE_obuf@2
	xor	edx, edx
	mov	ecx, 256				; 00000100H
	npad	9
$LL73@unRLE_obuf@2:
	lea	eax, DWORD PTR [ecx+edx]
	sar	eax, 1
	cmp	ebx, DWORD PTR [esi+eax*4+1092]
	jl	SHORT $LN70@unRLE_obuf@2
	mov	edx, eax
	jmp	SHORT $LN72@unRLE_obuf@2
$LN70@unRLE_obuf@2:
	mov	ecx, eax
$LN72@unRLE_obuf@2:
	mov	eax, ecx
	sub	eax, edx
	cmp	eax, 1
	jne	SHORT $LL73@unRLE_obuf@2
	mov	eax, DWORD PTR [esi+3156]
	mov	edi, DWORD PTR [esi+3152]
	mov	ecx, ebx
	shr	ecx, 1
	movzx	eax, BYTE PTR [ecx+eax]
	movzx	ecx, bl
	and	cl, 1
	add	cl, cl
	add	cl, cl
	shr	eax, cl
	movzx	ecx, WORD PTR [edi+ebx*2]
	mov	edi, DWORD PTR [esi+1088]
	and	eax, 15					; 0000000fH
	shl	eax, 16					; 00000010H
	inc	edi
	or	eax, ecx
	mov	DWORD PTR [esi+56], eax
	mov	DWORD PTR [esi+1088], edi
; Line 755
	cmp	edi, DWORD PTR tv1078[ebp]
	je	$LL20@unRLE_obuf@2
; Line 756
	movzx	eax, dl
	cmp	eax, DWORD PTR [esi+60]
	jne	$LN138@unRLE_obuf@2
; Line 759
	mov	ebx, DWORD PTR [esi+56]
	mov	DWORD PTR [esi+12], 2
	cmp	ebx, DWORD PTR tv1090[ebp]
	jae	$LN123@unRLE_obuf@2
	mov	DWORD PTR _nb$83691[ebp], 0
	mov	ecx, 256				; 00000100H
	npad	3
$LL80@unRLE_obuf@2:
	mov	edx, DWORD PTR _nb$83691[ebp]
	lea	eax, DWORD PTR [ecx+edx]
	sar	eax, 1
	cmp	ebx, DWORD PTR [esi+eax*4+1092]
	jl	SHORT $LN77@unRLE_obuf@2
	mov	DWORD PTR _nb$83691[ebp], eax
	jmp	SHORT $LN79@unRLE_obuf@2
$LN77@unRLE_obuf@2:
	mov	ecx, eax
$LN79@unRLE_obuf@2:
	mov	eax, ecx
	sub	eax, DWORD PTR _nb$83691[ebp]
	cmp	eax, 1
	jne	SHORT $LL80@unRLE_obuf@2
	mov	eax, DWORD PTR [esi+3156]
	mov	ecx, ebx
	shr	ecx, 1
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR [esi+3152]
	movzx	eax, WORD PTR [eax+ebx*2]
	movzx	ecx, bl
	and	cl, 1
	add	cl, cl
	add	cl, cl
	shr	edx, cl
	inc	edi
	mov	DWORD PTR [esi+1088], edi
	and	edx, 15					; 0000000fH
	shl	edx, 16					; 00000010H
	or	edx, eax
	mov	DWORD PTR [esi+56], edx
; Line 760
	cmp	edi, DWORD PTR tv1078[ebp]
	je	$LL20@unRLE_obuf@2
; Line 761
	movzx	eax, BYTE PTR _nb$83691[ebp]
	cmp	eax, DWORD PTR [esi+60]
	jne	$LN138@unRLE_obuf@2
; Line 764
	mov	ebx, edx
	mov	DWORD PTR [esi+12], 3
	cmp	ebx, DWORD PTR tv1090[ebp]
	jae	$LN123@unRLE_obuf@2
	lea	eax, DWORD PTR [esi+1092]
	push	eax
	push	ebx
	call	_BZ2_indexIntoF
	mov	ecx, DWORD PTR [esi+3156]
	mov	edx, ebx
	shr	edx, 1
	movzx	edx, BYTE PTR [edx+ecx]
	movzx	ecx, bl
	and	cl, 1
	add	cl, cl
	add	cl, cl
	shr	edx, cl
	mov	ecx, DWORD PTR [esi+3152]
	movzx	ecx, WORD PTR [ecx+ebx*2]
	and	edx, 15					; 0000000fH
	shl	edx, 16					; 00000010H
	inc	edi
	or	edx, ecx
	add	esp, 8
	mov	DWORD PTR [esi+56], edx
	mov	DWORD PTR [esi+1088], edi
; Line 765
	cmp	edi, DWORD PTR tv1078[ebp]
	je	$LL20@unRLE_obuf@2
; Line 766
	movzx	eax, al
	cmp	eax, DWORD PTR [esi+60]
	jne	$LN138@unRLE_obuf@2
; Line 768
	mov	ebx, edx
	cmp	ebx, DWORD PTR tv1090[ebp]
	jae	$LN123@unRLE_obuf@2
	lea	eax, DWORD PTR [esi+1092]
	push	eax
	push	ebx
	call	_BZ2_indexIntoF
	mov	ecx, DWORD PTR [esi+3156]
	mov	edx, ebx
	shr	edx, 1
	movzx	edx, BYTE PTR [edx+ecx]
	movzx	ecx, bl
	and	cl, 1
	add	cl, cl
	add	cl, cl
	shr	edx, cl
	mov	ecx, DWORD PTR [esi+3152]
	movzx	ecx, WORD PTR [ecx+ebx*2]
	and	edx, 15					; 0000000fH
	shl	edx, 16					; 00000010H
	or	edx, ecx
	mov	DWORD PTR [esi+56], edx
; Line 770
	mov	ebx, DWORD PTR [esi+56]
	movzx	edx, al
	inc	edi
	add	edx, 4
	add	esp, 8
	mov	DWORD PTR [esi+1088], edi
	mov	DWORD PTR [esi+12], edx
	cmp	ebx, DWORD PTR tv1090[ebp]
	jae	SHORT $LN123@unRLE_obuf@2
	lea	eax, DWORD PTR [esi+1092]
	push	eax
	push	ebx
	call	_BZ2_indexIntoF
	mov	DWORD PTR [esi+60], eax
	mov	eax, DWORD PTR [esi+3156]
	mov	ecx, ebx
	shr	ecx, 1
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR [esi+3152]
	movzx	eax, WORD PTR [eax+ebx*2]
	movzx	ecx, bl
	and	cl, 1
	add	cl, cl
	add	cl, cl
	shr	edx, cl
	add	esp, 8
	and	edx, 15					; 0000000fH
	shl	edx, 16					; 00000010H
	or	edx, eax
	inc	edi
	mov	DWORD PTR [esi+56], edx
	mov	DWORD PTR [esi+1088], edi
	jmp	$LL20@unRLE_obuf@2
$LN123@unRLE_obuf@2:
	pop	edi
	mov	al, 1
	pop	ebx
; Line 774
	mov	esp, ebp
	pop	ebp
	ret	0
_unRLE_obuf_to_output_SMALL ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzDecompressEnd@4
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_BZ2_bzDecompressEnd@4 PROC
; Line 833
	push	ebp
	mov	ebp, esp
	push	esi
; Line 835
	mov	esi, DWORD PTR _strm$[ebp]
	test	esi, esi
	jne	SHORT $LN6@BZ2_bzDeco@2
	lea	eax, DWORD PTR [esi-2]
	pop	esi
; Line 848
	pop	ebp
	ret	4
$LN6@BZ2_bzDeco@2:
	push	edi
; Line 836
	mov	edi, DWORD PTR [esi+32]
; Line 837
	test	edi, edi
	je	SHORT $LN10@BZ2_bzDeco@2
; Line 838
	cmp	DWORD PTR [edi], esi
	je	SHORT $LN4@BZ2_bzDeco@2
$LN10@BZ2_bzDeco@2:
	pop	edi
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 848
	pop	ebp
	ret	4
$LN4@BZ2_bzDeco@2:
; Line 840
	mov	eax, DWORD PTR [edi+3148]
	test	eax, eax
	je	SHORT $LN3@BZ2_bzDeco@2
	mov	ecx, DWORD PTR [esi+40]
	push	eax
	mov	eax, DWORD PTR [esi+44]
	push	eax
	call	ecx
	add	esp, 8
$LN3@BZ2_bzDeco@2:
; Line 841
	mov	eax, DWORD PTR [edi+3152]
	test	eax, eax
	je	SHORT $LN2@BZ2_bzDeco@2
	mov	edx, DWORD PTR [esi+44]
	push	eax
	mov	eax, DWORD PTR [esi+40]
	push	edx
	call	eax
	add	esp, 8
$LN2@BZ2_bzDeco@2:
; Line 842
	mov	edi, DWORD PTR [edi+3156]
	test	edi, edi
	je	SHORT $LN1@BZ2_bzDeco@2
	mov	ecx, DWORD PTR [esi+44]
	mov	edx, DWORD PTR [esi+40]
	push	edi
	push	ecx
	call	edx
	add	esp, 8
$LN1@BZ2_bzDeco@2:
; Line 844
	mov	eax, DWORD PTR [esi+32]
	mov	ecx, DWORD PTR [esi+44]
	mov	edx, DWORD PTR [esi+40]
	push	eax
	push	ecx
	call	edx
	add	esp, 8
	pop	edi
; Line 845
	mov	DWORD PTR [esi+32], 0
; Line 847
	xor	eax, eax
	pop	esi
; Line 848
	pop	ebp
	ret	4
_BZ2_bzDecompressEnd@4 ENDP
_TEXT	ENDS
EXTRN	__imp__ungetc:PROC
EXTRN	__imp__fgetc:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_myfeof	PROC
; _f$ = esi
; Line 878
	push	esi
	call	DWORD PTR __imp__fgetc
	add	esp, 4
; Line 879
	cmp	eax, -1
	jne	SHORT $LN1@myfeof
	mov	al, 1
; Line 882
	ret	0
$LN1@myfeof:
; Line 880
	push	esi
	push	eax
	call	DWORD PTR __imp__ungetc
	add	esp, 8
; Line 881
	xor	al, al
; Line 882
	ret	0
_myfeof	ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzWriteOpen@20
EXTRN	__imp__ferror:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_bzerror$ = 8						; size = 4
_f$ = 12						; size = 4
_blockSize100k$ = 16					; size = 4
_verbosity$ = 20					; size = 4
_workFactor$ = 24					; size = 4
_BZ2_bzWriteOpen@20 PROC
; Line 892
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
; Line 896
	mov	edi, DWORD PTR _bzerror$[ebp]
	xor	ebx, ebx
	cmp	edi, ebx
	je	SHORT $LN18@BZ2_bzWrit
	mov	DWORD PTR [edi], ebx
$LN18@BZ2_bzWrit:
; Line 901
	mov	eax, DWORD PTR _f$[ebp]
	cmp	eax, ebx
	je	$LN15@BZ2_bzWrit
	mov	ecx, DWORD PTR _blockSize100k$[ebp]
	dec	ecx
	cmp	ecx, 8
	ja	$LN15@BZ2_bzWrit
	cmp	DWORD PTR _workFactor$[ebp], 250	; 000000faH
	ja	$LN15@BZ2_bzWrit
	cmp	DWORD PTR _verbosity$[ebp], 4
	ja	$LN15@BZ2_bzWrit
; Line 904
	push	eax
	call	DWORD PTR __imp__ferror
	add	esp, 4
	test	eax, eax
	je	SHORT $LN12@BZ2_bzWrit
; Line 905
	cmp	edi, ebx
	je	SHORT $LN10@BZ2_bzWrit
	mov	DWORD PTR [edi], -6			; fffffffaH
$LN10@BZ2_bzWrit:
	pop	edi
	xor	eax, eax
	pop	ebx
; Line 929
	pop	ebp
	ret	20					; 00000014H
$LN12@BZ2_bzWrit:
	push	esi
; Line 907
	push	5068					; 000013ccH
	call	DWORD PTR __imp__malloc
	mov	esi, eax
	add	esp, 4
; Line 908
	cmp	esi, ebx
	jne	SHORT $LN9@BZ2_bzWrit
; Line 909
	cmp	edi, ebx
	je	SHORT $LN7@BZ2_bzWrit
	mov	DWORD PTR [edi], -3			; fffffffdH
$LN7@BZ2_bzWrit:
	pop	esi
	pop	edi
	xor	eax, eax
	pop	ebx
; Line 929
	pop	ebp
	ret	20					; 00000014H
$LN9@BZ2_bzWrit:
; Line 911
	cmp	edi, ebx
	je	SHORT $LN6@BZ2_bzWrit
	mov	DWORD PTR [edi], ebx
$LN6@BZ2_bzWrit:
; Line 914
	mov	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [esi+5060], ebx
	mov	BYTE PTR [esi+5064], bl
	mov	DWORD PTR [esi+5004], ebx
	mov	DWORD PTR [esi], edx
; Line 915
	mov	BYTE PTR [esi+5008], 1
; Line 916
	mov	DWORD PTR [esi+5048], ebx
; Line 917
	mov	DWORD PTR [esi+5052], ebx
; Line 918
	mov	DWORD PTR [esi+5056], ebx
; Line 920
	cmp	DWORD PTR _workFactor$[ebp], ebx
	jne	SHORT $LN4@BZ2_bzWrit
	mov	DWORD PTR _workFactor$[ebp], 30		; 0000001eH
$LN4@BZ2_bzWrit:
; Line 922
	mov	eax, DWORD PTR _workFactor$[ebp]
	mov	ecx, DWORD PTR _verbosity$[ebp]
	mov	edx, DWORD PTR _blockSize100k$[ebp]
	push	eax
	push	ecx
	push	edx
	lea	eax, DWORD PTR [esi+5012]
	push	eax
	call	_BZ2_bzCompressInit@16
; Line 923
	cmp	eax, ebx
	je	SHORT $LN3@BZ2_bzWrit
; Line 924
	cmp	edi, ebx
	je	SHORT $LN2@BZ2_bzWrit
	mov	DWORD PTR [edi], eax
$LN2@BZ2_bzWrit:
	push	esi
	mov	DWORD PTR [esi+5060], eax
	call	DWORD PTR __imp__free
	add	esp, 4
	pop	esi
	pop	edi
	xor	eax, eax
	pop	ebx
; Line 929
	pop	ebp
	ret	20					; 00000014H
$LN3@BZ2_bzWrit:
; Line 926
	mov	DWORD PTR [esi+5016], ebx
; Line 927
	mov	BYTE PTR [esi+5064], 1
; Line 928
	mov	eax, esi
	pop	esi
	pop	edi
	pop	ebx
; Line 929
	pop	ebp
	ret	20					; 00000014H
$LN15@BZ2_bzWrit:
; Line 902
	cmp	edi, ebx
	je	SHORT $LN13@BZ2_bzWrit
	mov	DWORD PTR [edi], -2			; fffffffeH
$LN13@BZ2_bzWrit:
	pop	edi
	xor	eax, eax
	pop	ebx
; Line 929
	pop	ebp
	ret	20					; 00000014H
_BZ2_bzWriteOpen@20 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzWrite@16
EXTRN	__imp__fwrite:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_bzerror$ = 8						; size = 4
_b$ = 12						; size = 4
_buf$ = 16						; size = 4
_len$ = 20						; size = 4
_BZ2_bzWrite@16 PROC
; Line 939
	push	ebp
	mov	ebp, esp
; Line 943
	mov	eax, DWORD PTR _bzerror$[ebp]
	test	eax, eax
	je	SHORT $LN28@BZ2_bzWrit@2
	mov	DWORD PTR [eax], 0
$LN28@BZ2_bzWrit@2:
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _b$[ebp]
	test	edi, edi
	je	$LN25@BZ2_bzWrit@2
; Line 944
	mov	esi, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [edi+5060], 0
	test	esi, esi
	je	$LN25@BZ2_bzWrit@2
	mov	ebx, DWORD PTR _len$[ebp]
	test	ebx, ebx
	js	$LN25@BZ2_bzWrit@2
; Line 946
	cmp	BYTE PTR [edi+5008], 0
	jne	SHORT $LN22@BZ2_bzWrit@2
; Line 947
	test	eax, eax
	je	SHORT $LN21@BZ2_bzWrit@2
	mov	DWORD PTR [eax], -1
$LN21@BZ2_bzWrit@2:
	mov	DWORD PTR [edi+5060], -1
	pop	edi
	pop	esi
	pop	ebx
; Line 975
	pop	ebp
	ret	16					; 00000010H
$LN22@BZ2_bzWrit@2:
; Line 948
	mov	eax, DWORD PTR [edi]
	push	eax
	call	DWORD PTR __imp__ferror
	add	esp, 4
	test	eax, eax
	je	SHORT $LN19@BZ2_bzWrit@2
$LN6@BZ2_bzWrit@2:
; Line 949
	mov	eax, DWORD PTR _bzerror$[ebp]
	test	eax, eax
	je	SHORT $LN18@BZ2_bzWrit@2
	mov	DWORD PTR [eax], -6			; fffffffaH
$LN18@BZ2_bzWrit@2:
	mov	DWORD PTR [edi+5060], -6		; fffffffaH
	pop	edi
	pop	esi
	pop	ebx
; Line 975
	pop	ebp
	ret	16					; 00000010H
$LN19@BZ2_bzWrit@2:
; Line 951
	test	ebx, ebx
	jne	SHORT $LN16@BZ2_bzWrit@2
$LN60@BZ2_bzWrit@2:
; Line 952
	mov	eax, DWORD PTR _bzerror$[ebp]
	test	eax, eax
	je	SHORT $LN15@BZ2_bzWrit@2
	mov	DWORD PTR [eax], 0
$LN15@BZ2_bzWrit@2:
	mov	DWORD PTR [edi+5060], 0
	pop	edi
	pop	esi
	pop	ebx
; Line 975
	pop	ebp
	ret	16					; 00000010H
$LN16@BZ2_bzWrit@2:
; Line 954
	mov	DWORD PTR [edi+5016], ebx
; Line 955
	lea	ebx, DWORD PTR [edi+5012]
	mov	DWORD PTR [ebx], esi
$LL13@BZ2_bzWrit@2:
; Line 958
	mov	esi, 5000				; 00001388H
; Line 959
	lea	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [edi+5032], esi
	mov	DWORD PTR [edi+5028], eax
; Line 960
	test	ebx, ebx
	je	$LN61@BZ2_bzWrit@2
	mov	eax, DWORD PTR [ebx+32]
	test	eax, eax
	je	SHORT $LN61@BZ2_bzWrit@2
	cmp	DWORD PTR [eax], ebx
	jne	SHORT $LN61@BZ2_bzWrit@2
	mov	eax, DWORD PTR [eax+4]
	dec	eax
$preswitch$83770:
	cmp	eax, 3
	ja	SHORT $LN50@BZ2_bzWrit@2
	jmp	DWORD PTR $LN66@BZ2_bzWrit@2[eax*4]
$LN48@BZ2_bzWrit@2:
	mov	eax, ebx
	call	_handle_compress
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	and	eax, 3
	add	eax, -2					; fffffffeH
; Line 961
	cmp	eax, 1
	jne	SHORT $LN65@BZ2_bzWrit@2
; Line 964
	mov	eax, DWORD PTR [edi+5032]
	cmp	eax, esi
	jae	SHORT $LN7@BZ2_bzWrit@2
; Line 967
	mov	ecx, DWORD PTR [edi]
	push	ecx
	sub	esi, eax
	push	esi
	lea	eax, DWORD PTR [edi+4]
	push	1
	push	eax
	call	DWORD PTR __imp__fwrite
	add	esp, 16					; 00000010H
; Line 968
	cmp	esi, eax
	jne	$LN6@BZ2_bzWrit@2
	mov	edx, DWORD PTR [edi]
	push	edx
	call	DWORD PTR __imp__ferror
	add	esp, 4
	test	eax, eax
	jne	$LN6@BZ2_bzWrit@2
$LN7@BZ2_bzWrit@2:
; Line 972
	cmp	DWORD PTR [edi+5016], 0
	jne	$LL13@BZ2_bzWrit@2
; Line 974
	jmp	$LN60@BZ2_bzWrit@2
$LN61@BZ2_bzWrit@2:
; Line 960
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN65@BZ2_bzWrit@2
$LN49@BZ2_bzWrit@2:
	or	eax, -1
	jmp	SHORT $LN65@BZ2_bzWrit@2
$LN50@BZ2_bzWrit@2:
	xor	eax, eax
$LN65@BZ2_bzWrit@2:
; Line 962
	mov	ecx, DWORD PTR _bzerror$[ebp]
	test	ecx, ecx
	je	SHORT $LN10@BZ2_bzWrit@2
	mov	DWORD PTR [ecx], eax
$LN10@BZ2_bzWrit@2:
	mov	DWORD PTR [edi+5060], eax
	pop	edi
	pop	esi
	pop	ebx
; Line 975
	pop	ebp
	ret	16					; 00000010H
$LN25@BZ2_bzWrit@2:
; Line 945
	test	eax, eax
	je	SHORT $LN64@BZ2_bzWrit@2
	mov	DWORD PTR [eax], -2			; fffffffeH
$LN64@BZ2_bzWrit@2:
	test	edi, edi
	je	SHORT $LN23@BZ2_bzWrit@2
	mov	DWORD PTR [edi+5060], -2		; fffffffeH
$LN23@BZ2_bzWrit@2:
	pop	edi
	pop	esi
	pop	ebx
; Line 975
	pop	ebp
	ret	16					; 00000010H
$LN66@BZ2_bzWrit@2:
	DD	$LN49@BZ2_bzWrit@2
	DD	$LN48@BZ2_bzWrit@2
	DD	$LN49@BZ2_bzWrit@2
	DD	$LN49@BZ2_bzWrit@2
_BZ2_bzWrite@16 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzWriteClose64@28
EXTRN	__imp__fflush:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_bzerror$ = 8						; size = 4
_b$ = 12						; size = 4
_abandon$ = 16						; size = 4
_nbytes_in_lo32$ = 20					; size = 4
_nbytes_in_hi32$ = 24					; size = 4
_nbytes_out_lo32$ = 28					; size = 4
_nbytes_out_hi32$ = 32					; size = 4
_BZ2_bzWriteClose64@28 PROC
; Line 999
	push	ebp
	mov	ebp, esp
	push	edi
; Line 1003
	mov	edi, DWORD PTR _b$[ebp]
	test	edi, edi
	jne	SHORT $LN35@BZ2_bzWrit@3
; Line 1004
	mov	eax, DWORD PTR _bzerror$[ebp]
	test	eax, eax
	je	$LN36@BZ2_bzWrit@3
	mov	DWORD PTR [eax], edi
	pop	edi
; Line 1053
	pop	ebp
	ret	28					; 0000001cH
$LN35@BZ2_bzWrit@3:
; Line 1005
	cmp	BYTE PTR [edi+5008], 0
	jne	SHORT $LN32@BZ2_bzWrit@3
; Line 1006
	mov	eax, DWORD PTR _bzerror$[ebp]
	test	eax, eax
	je	SHORT $LN31@BZ2_bzWrit@3
	mov	DWORD PTR [eax], -1
$LN31@BZ2_bzWrit@3:
	mov	DWORD PTR [edi+5060], -1
	pop	edi
; Line 1053
	pop	ebp
	ret	28					; 0000001cH
$LN32@BZ2_bzWrit@3:
; Line 1007
	mov	eax, DWORD PTR [edi]
	push	eax
	call	DWORD PTR __imp__ferror
	add	esp, 4
	test	eax, eax
	je	SHORT $LN29@BZ2_bzWrit@3
; Line 1008
	mov	eax, DWORD PTR _bzerror$[ebp]
	test	eax, eax
	je	SHORT $LN28@BZ2_bzWrit@3
	mov	DWORD PTR [eax], -6			; fffffffaH
$LN28@BZ2_bzWrit@3:
	mov	DWORD PTR [edi+5060], -6		; fffffffaH
	pop	edi
; Line 1053
	pop	ebp
	ret	28					; 0000001cH
$LN29@BZ2_bzWrit@3:
; Line 1010
	mov	ecx, DWORD PTR _nbytes_in_lo32$[ebp]
	test	ecx, ecx
	je	SHORT $LN26@BZ2_bzWrit@3
	mov	DWORD PTR [ecx], 0
$LN26@BZ2_bzWrit@3:
; Line 1011
	mov	eax, DWORD PTR _nbytes_in_hi32$[ebp]
	test	eax, eax
	je	SHORT $LN25@BZ2_bzWrit@3
	mov	DWORD PTR [eax], 0
$LN25@BZ2_bzWrit@3:
	push	ebx
; Line 1012
	mov	ebx, DWORD PTR _nbytes_out_lo32$[ebp]
	test	ebx, ebx
	je	SHORT $LN24@BZ2_bzWrit@3
	mov	DWORD PTR [ebx], 0
$LN24@BZ2_bzWrit@3:
	push	esi
; Line 1013
	mov	esi, DWORD PTR _nbytes_out_hi32$[ebp]
	test	esi, esi
	je	SHORT $LN23@BZ2_bzWrit@3
	mov	DWORD PTR [esi], 0
$LN23@BZ2_bzWrit@3:
; Line 1015
	cmp	DWORD PTR _abandon$[ebp], 0
	jne	$LN9@BZ2_bzWrit@3
	cmp	DWORD PTR [edi+5060], 0
	jne	SHORT $LN41@BZ2_bzWrit@3
	npad	9
$LL21@BZ2_bzWrit@3:
; Line 1018
	lea	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [edi+5028], eax
; Line 1019
	push	2
	lea	eax, DWORD PTR [edi+5012]
	mov	esi, 5000				; 00001388H
	push	eax
	mov	DWORD PTR [edi+5032], esi
	call	_BZ2_bzCompress@8
	mov	ebx, eax
; Line 1020
	cmp	ebx, 3
	je	SHORT $LN42@BZ2_bzWrit@3
	cmp	ebx, 4
	jne	$LN39@BZ2_bzWrit@3
$LN42@BZ2_bzWrit@3:
; Line 1023
	mov	eax, DWORD PTR [edi+5032]
	cmp	eax, esi
	jae	SHORT $LN15@BZ2_bzWrit@3
; Line 1026
	mov	ecx, DWORD PTR [edi]
	push	ecx
	sub	esi, eax
	push	esi
	lea	eax, DWORD PTR [edi+4]
	push	1
	push	eax
	call	DWORD PTR __imp__fwrite
	add	esp, 16					; 00000010H
; Line 1027
	cmp	esi, eax
	jne	SHORT $LN14@BZ2_bzWrit@3
	mov	edx, DWORD PTR [edi]
	push	edx
	call	DWORD PTR __imp__ferror
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN14@BZ2_bzWrit@3
$LN15@BZ2_bzWrit@3:
; Line 1031
	cmp	ebx, 4
	jne	SHORT $LL21@BZ2_bzWrit@3
; Line 1021
	mov	esi, DWORD PTR _nbytes_out_hi32$[ebp]
	mov	ebx, DWORD PTR _nbytes_out_lo32$[ebp]
$LN41@BZ2_bzWrit@3:
; Line 1035
	mov	eax, DWORD PTR [edi]
	push	eax
	call	DWORD PTR __imp__ferror
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN44@BZ2_bzWrit@3
; Line 1036
	mov	ecx, DWORD PTR [edi]
	push	ecx
	call	DWORD PTR __imp__fflush
; Line 1037
	mov	edx, DWORD PTR [edi]
	push	edx
	call	DWORD PTR __imp__ferror
	add	esp, 8
	test	eax, eax
	je	SHORT $LN44@BZ2_bzWrit@3
$LN14@BZ2_bzWrit@3:
; Line 1038
	mov	eax, DWORD PTR _bzerror$[ebp]
	test	eax, eax
	je	SHORT $LN8@BZ2_bzWrit@3
	mov	DWORD PTR [eax], -6			; fffffffaH
$LN8@BZ2_bzWrit@3:
	pop	esi
	pop	ebx
	mov	DWORD PTR [edi+5060], -6		; fffffffaH
	pop	edi
; Line 1053
	pop	ebp
	ret	28					; 0000001cH
$LN39@BZ2_bzWrit@3:
; Line 1021
	mov	eax, DWORD PTR _bzerror$[ebp]
	test	eax, eax
	je	SHORT $LN18@BZ2_bzWrit@3
	mov	DWORD PTR [eax], ebx
$LN18@BZ2_bzWrit@3:
	pop	esi
	mov	DWORD PTR [edi+5060], ebx
	pop	ebx
	pop	edi
; Line 1053
	pop	ebp
	ret	28					; 0000001cH
$LN44@BZ2_bzWrit@3:
; Line 1038
	mov	eax, DWORD PTR _nbytes_in_hi32$[ebp]
	mov	ecx, DWORD PTR _nbytes_in_lo32$[ebp]
$LN9@BZ2_bzWrit@3:
; Line 1041
	test	ecx, ecx
	je	SHORT $LN6@BZ2_bzWrit@3
; Line 1042
	mov	edx, DWORD PTR [edi+5020]
	mov	DWORD PTR [ecx], edx
$LN6@BZ2_bzWrit@3:
; Line 1043
	test	eax, eax
	je	SHORT $LN5@BZ2_bzWrit@3
; Line 1044
	mov	ecx, DWORD PTR [edi+5024]
	mov	DWORD PTR [eax], ecx
$LN5@BZ2_bzWrit@3:
; Line 1045
	test	ebx, ebx
	je	SHORT $LN4@BZ2_bzWrit@3
; Line 1046
	mov	edx, DWORD PTR [edi+5036]
	mov	DWORD PTR [ebx], edx
$LN4@BZ2_bzWrit@3:
; Line 1047
	test	esi, esi
	je	SHORT $LN3@BZ2_bzWrit@3
; Line 1048
	mov	eax, DWORD PTR [edi+5040]
	mov	DWORD PTR [esi], eax
$LN3@BZ2_bzWrit@3:
; Line 1050
	mov	eax, DWORD PTR _bzerror$[ebp]
	test	eax, eax
	je	SHORT $LN2@BZ2_bzWrit@3
	mov	DWORD PTR [eax], 0
$LN2@BZ2_bzWrit@3:
; Line 1051
	lea	ecx, DWORD PTR [edi+5012]
	push	ecx
	mov	DWORD PTR [edi+5060], 0
	call	_BZ2_bzCompressEnd@4
; Line 1052
	push	edi
	call	DWORD PTR __imp__free
	add	esp, 4
	pop	esi
	pop	ebx
$LN36@BZ2_bzWrit@3:
	pop	edi
; Line 1053
	pop	ebp
	ret	28					; 0000001cH
_BZ2_bzWriteClose64@28 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzReadOpen@24
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_bzerror$ = 8						; size = 4
_f$ = 12						; size = 4
_verbosity$ = 16					; size = 4
_small$ = 20						; size = 4
_unused$ = 24						; size = 4
_nUnused$ = 28						; size = 4
_BZ2_bzReadOpen@24 PROC
; Line 1064
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 1068
	mov	esi, DWORD PTR _bzerror$[ebp]
	push	edi
	test	esi, esi
	je	SHORT $LN21@BZ2_bzRead
	mov	DWORD PTR [esi], 0
$LN21@BZ2_bzRead:
; Line 1074
	mov	ecx, DWORD PTR _f$[ebp]
	test	ecx, ecx
	je	SHORT $LN16@BZ2_bzRead
	mov	eax, DWORD PTR _small$[ebp]
	test	eax, eax
	je	SHORT $LN18@BZ2_bzRead
	cmp	eax, 1
	jne	SHORT $LN16@BZ2_bzRead
$LN18@BZ2_bzRead:
	cmp	DWORD PTR _verbosity$[ebp], 4
	ja	SHORT $LN16@BZ2_bzRead
	mov	ebx, DWORD PTR _unused$[ebp]
	mov	edi, DWORD PTR _nUnused$[ebp]
	test	ebx, ebx
	jne	SHORT $LN27@BZ2_bzRead
	test	edi, edi
	je	SHORT $LN20@BZ2_bzRead
$LN16@BZ2_bzRead:
; Line 1075
	test	esi, esi
	je	SHORT $LN14@BZ2_bzRead
	mov	DWORD PTR [esi], -2			; fffffffeH
$LN14@BZ2_bzRead:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 1109
	pop	ebp
	ret	24					; 00000018H
$LN27@BZ2_bzRead:
; Line 1074
	cmp	edi, 5000				; 00001388H
	ja	SHORT $LN16@BZ2_bzRead
$LN20@BZ2_bzRead:
; Line 1077
	push	ecx
	call	DWORD PTR __imp__ferror
	add	esp, 4
	test	eax, eax
	je	SHORT $LN13@BZ2_bzRead
; Line 1078
	test	esi, esi
	je	SHORT $LN14@BZ2_bzRead
	pop	edi
	mov	DWORD PTR [esi], -6			; fffffffaH
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 1109
	pop	ebp
	ret	24					; 00000018H
$LN13@BZ2_bzRead:
; Line 1080
	push	5068					; 000013ccH
	call	DWORD PTR __imp__malloc
; Line 1082
	mov	ecx, DWORD PTR _bzerror$[ebp]
	mov	esi, eax
	xor	eax, eax
	add	esp, 4
	cmp	esi, eax
	jne	SHORT $LN10@BZ2_bzRead
	cmp	ecx, eax
	je	SHORT $LN14@BZ2_bzRead
	pop	edi
	pop	esi
	mov	DWORD PTR [ecx], -3			; fffffffdH
	pop	ebx
; Line 1109
	pop	ebp
	ret	24					; 00000018H
$LN10@BZ2_bzRead:
; Line 1084
	cmp	ecx, eax
	je	SHORT $LN7@BZ2_bzRead
	mov	DWORD PTR [ecx], eax
$LN7@BZ2_bzRead:
; Line 1087
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [esi+5060], eax
	mov	BYTE PTR [esi+5064], al
	mov	DWORD PTR [esi], ecx
; Line 1088
	mov	DWORD PTR [esi+5004], eax
; Line 1089
	mov	BYTE PTR [esi+5008], al
; Line 1090
	mov	DWORD PTR [esi+5048], eax
; Line 1091
	mov	DWORD PTR [esi+5052], eax
; Line 1092
	mov	DWORD PTR [esi+5056], eax
; Line 1094
	cmp	edi, eax
	jle	SHORT $LN4@BZ2_bzRead
	npad	7
$LL5@BZ2_bzRead:
; Line 1095
	mov	cl, BYTE PTR [ebx]
	mov	edx, DWORD PTR [esi+5004]
	mov	BYTE PTR [edx+esi+4], cl
	inc	DWORD PTR [esi+5004]
; Line 1097
	dec	edi
	inc	ebx
	cmp	edi, eax
	jg	SHORT $LL5@BZ2_bzRead
$LN4@BZ2_bzRead:
; Line 1100
	mov	edx, DWORD PTR _small$[ebp]
	mov	eax, DWORD PTR _verbosity$[ebp]
	push	edx
	push	eax
	lea	edi, DWORD PTR [esi+5012]
	push	edi
	call	_BZ2_bzDecompressInit@12
; Line 1101
	test	eax, eax
	je	SHORT $LN3@BZ2_bzRead
; Line 1102
	mov	ecx, DWORD PTR _bzerror$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@BZ2_bzRead
	mov	DWORD PTR [ecx], eax
$LN2@BZ2_bzRead:
	push	esi
	mov	DWORD PTR [esi+5060], eax
	call	DWORD PTR __imp__free
	add	esp, 4
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 1109
	pop	ebp
	ret	24					; 00000018H
$LN3@BZ2_bzRead:
; Line 1104
	mov	ecx, DWORD PTR [esi+5004]
; Line 1105
	lea	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi], edx
	pop	edi
	mov	DWORD PTR [esi+5016], ecx
; Line 1107
	mov	BYTE PTR [esi+5064], 1
; Line 1108
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 1109
	pop	ebp
	ret	24					; 00000018H
_BZ2_bzReadOpen@24 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzReadClose@8
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_bzerror$ = 8						; size = 4
_b$ = 12						; size = 4
_BZ2_bzReadClose@8 PROC
; Line 1114
	push	ebp
	mov	ebp, esp
; Line 1117
	mov	eax, DWORD PTR _bzerror$[ebp]
	test	eax, eax
	je	SHORT $LN9@BZ2_bzRead@2
	mov	DWORD PTR [eax], 0
$LN9@BZ2_bzRead@2:
	push	esi
	mov	esi, DWORD PTR _b$[ebp]
	test	esi, esi
	je	SHORT $LN12@BZ2_bzRead@2
; Line 1121
	cmp	BYTE PTR [esi+5008], 0
	mov	DWORD PTR [esi+5060], 0
	je	SHORT $LN4@BZ2_bzRead@2
; Line 1122
	test	eax, eax
	je	SHORT $LN3@BZ2_bzRead@2
	mov	DWORD PTR [eax], -1
$LN3@BZ2_bzRead@2:
	mov	DWORD PTR [esi+5060], -1
	pop	esi
; Line 1127
	pop	ebp
	ret	8
$LN12@BZ2_bzRead@2:
; Line 1119
	test	eax, eax
	je	SHORT $LN10@BZ2_bzRead@2
	mov	DWORD PTR [eax], 0
	pop	esi
; Line 1127
	pop	ebp
	ret	8
$LN4@BZ2_bzRead@2:
; Line 1124
	cmp	BYTE PTR [esi+5064], 0
	je	SHORT $LN1@BZ2_bzRead@2
; Line 1125
	lea	eax, DWORD PTR [esi+5012]
	push	eax
	call	_BZ2_bzDecompressEnd@4
$LN1@BZ2_bzRead@2:
; Line 1126
	push	esi
	call	DWORD PTR __imp__free
	add	esp, 4
$LN10@BZ2_bzRead@2:
	pop	esi
; Line 1127
	pop	ebp
	ret	8
_BZ2_bzReadClose@8 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzReadGetUnused@16
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_bzerror$ = 8						; size = 4
_b$ = 12						; size = 4
_unused$ = 16						; size = 4
_nUnused$ = 20						; size = 4
_BZ2_bzReadGetUnused@16 PROC
; Line 1196
	push	ebp
	mov	ebp, esp
; Line 1198
	mov	eax, DWORD PTR _b$[ebp]
	test	eax, eax
	jne	SHORT $LN12@BZ2_bzRead@3
; Line 1199
	mov	eax, DWORD PTR _bzerror$[ebp]
	test	eax, eax
	je	$LN3@BZ2_bzRead@3
	mov	DWORD PTR [eax], -2			; fffffffeH
; Line 1208
	pop	ebp
	ret	16					; 00000010H
$LN12@BZ2_bzRead@3:
; Line 1200
	cmp	DWORD PTR [eax+5060], 4
	je	SHORT $LN9@BZ2_bzRead@3
; Line 1201
	mov	ecx, DWORD PTR _bzerror$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@BZ2_bzRead@3
	mov	DWORD PTR [ecx], -1
$LN8@BZ2_bzRead@3:
	mov	DWORD PTR [eax+5060], -1
; Line 1208
	pop	ebp
	ret	16					; 00000010H
$LN9@BZ2_bzRead@3:
	push	esi
; Line 1202
	mov	esi, DWORD PTR _unused$[ebp]
	test	esi, esi
	je	SHORT $LN5@BZ2_bzRead@3
	mov	edx, DWORD PTR _nUnused$[ebp]
	test	edx, edx
	je	SHORT $LN5@BZ2_bzRead@3
; Line 1205
	mov	ecx, DWORD PTR _bzerror$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@BZ2_bzRead@3
	mov	DWORD PTR [ecx], 0
$LN2@BZ2_bzRead@3:
; Line 1206
	mov	ecx, DWORD PTR [eax+5016]
	mov	DWORD PTR [eax+5060], 0
	mov	DWORD PTR [edx], ecx
; Line 1207
	mov	edx, DWORD PTR [eax+5012]
	mov	DWORD PTR [esi], edx
	pop	esi
; Line 1208
	pop	ebp
	ret	16					; 00000010H
$LN5@BZ2_bzRead@3:
; Line 1203
	mov	ecx, DWORD PTR _bzerror$[ebp]
	test	ecx, ecx
	je	SHORT $LN4@BZ2_bzRead@3
	mov	DWORD PTR [ecx], -2			; fffffffeH
$LN4@BZ2_bzRead@3:
	mov	DWORD PTR [eax+5060], -2		; fffffffeH
	pop	esi
$LN3@BZ2_bzRead@3:
; Line 1208
	pop	ebp
	ret	16					; 00000010H
_BZ2_bzReadGetUnused@16 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzBuffToBuffCompress@28
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = -48						; size = 48
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_source$ = 16						; size = 4
_sourceLen$ = 20					; size = 4
_blockSize100k$ = 24					; size = 4
_verbosity$ = 28					; size = 4
_workFactor$ = 32					; size = 4
_BZ2_bzBuffToBuffCompress@28 PROC
; Line 1225
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
; Line 1233
	mov	edi, DWORD PTR _dest$[ebp]
	test	edi, edi
	je	$LN5@BZ2_bzBuff
	cmp	DWORD PTR _destLen$[ebp], 0
	je	$LN5@BZ2_bzBuff
	mov	esi, DWORD PTR _source$[ebp]
	test	esi, esi
	je	$LN5@BZ2_bzBuff
	mov	edx, DWORD PTR _blockSize100k$[ebp]
	lea	eax, DWORD PTR [edx-1]
	cmp	eax, 8
	ja	$LN5@BZ2_bzBuff
	mov	ecx, DWORD PTR _verbosity$[ebp]
	cmp	ecx, 4
	ja	$LN5@BZ2_bzBuff
	mov	eax, DWORD PTR _workFactor$[ebp]
	cmp	eax, 250				; 000000faH
	ja	$LN5@BZ2_bzBuff
; Line 1236
	test	eax, eax
	jne	SHORT $LN4@BZ2_bzBuff
	mov	eax, 30					; 0000001eH
$LN4@BZ2_bzBuff:
; Line 1241
	push	eax
	push	ecx
	push	edx
	lea	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	mov	DWORD PTR _strm$[ebp+36], 0
	mov	DWORD PTR _strm$[ebp+40], 0
	mov	DWORD PTR _strm$[ebp+44], 0
	call	_BZ2_bzCompressInit@16
; Line 1242
	test	eax, eax
	jne	$LN7@BZ2_bzBuff
; Line 1247
	mov	eax, DWORD PTR _destLen$[ebp]
	mov	edx, DWORD PTR _sourceLen$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _strm$[ebp+16], edi
; Line 1249
	mov	edi, DWORD PTR _strm$[ebp+32]
	mov	DWORD PTR _strm$[ebp], esi
	mov	DWORD PTR _strm$[ebp+4], edx
	mov	DWORD PTR _strm$[ebp+20], ecx
	test	edi, edi
	jne	SHORT $LN31@BZ2_bzBuff
$LN41@BZ2_bzBuff:
; Line 1263
	lea	edx, DWORD PTR _strm$[ebp]
	push	edx
	mov	esi, -2					; fffffffeH
$errhandler$82819:
	call	_BZ2_bzCompressEnd@4
	pop	edi
; Line 1264
	mov	eax, esi
	pop	esi
; Line 1265
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
; Line 1249
$LN31@BZ2_bzBuff:
	lea	edx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [edi], edx
	jne	SHORT $LN41@BZ2_bzBuff
	mov	eax, DWORD PTR [edi+4]
	dec	eax
	cmp	eax, 3
	ja	SHORT $LN28@BZ2_bzBuff
$preswitch$83830:
	jmp	DWORD PTR $LN42@BZ2_bzBuff[eax*4]
$LN26@BZ2_bzBuff:
	mov	eax, DWORD PTR _strm$[ebp+4]
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+4], 4
	mov	eax, DWORD PTR [edi+4]
	dec	eax
	cmp	eax, 3
	jbe	SHORT $preswitch$83830
$LN28@BZ2_bzBuff:
; Line 1263
	lea	edx, DWORD PTR _strm$[ebp]
	push	edx
	xor	esi, esi
$errhandler_1$82819:
	call	_BZ2_bzCompressEnd@4
	pop	edi
; Line 1264
	mov	eax, esi
	pop	esi
; Line 1265
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
; Line 1249
$LN27@BZ2_bzBuff:
; Line 1263
	lea	edx, DWORD PTR _strm$[ebp]
	push	edx
	or	esi, -1
$errhandler_2$82819:
	call	_BZ2_bzCompressEnd@4
	pop	edi
; Line 1264
	mov	eax, esi
	pop	esi
; Line 1265
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
; Line 1249
$LN14@BZ2_bzBuff:
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [edi+12]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN27@BZ2_bzBuff
	lea	eax, DWORD PTR _strm$[ebp]
	call	_handle_compress
	test	al, al
	je	SHORT $LN27@BZ2_bzBuff
	cmp	DWORD PTR [edi+12], 0
	ja	SHORT $LN39@BZ2_bzBuff
	mov	eax, edi
	call	_isempty_RL
	test	al, al
	je	SHORT $LN39@BZ2_bzBuff
	mov	eax, DWORD PTR [edi+80]
	cmp	eax, DWORD PTR [edi+76]
	jl	SHORT $LN39@BZ2_bzBuff
; Line 1254
	mov	eax, DWORD PTR _destLen$[ebp]
	mov	DWORD PTR [edi+4], 1
	mov	ecx, DWORD PTR _strm$[ebp+20]
	sub	DWORD PTR [eax], ecx
; Line 1255
	lea	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_BZ2_bzCompressEnd@4
	pop	edi
; Line 1256
	xor	eax, eax
	pop	esi
; Line 1265
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
$LN39@BZ2_bzBuff:
; Line 1259
	lea	ecx, DWORD PTR _strm$[ebp]
	push	ecx
$output_overflow$82817:
	call	_BZ2_bzCompressEnd@4
	pop	edi
; Line 1260
	mov	eax, -8					; fffffff8H
	pop	esi
; Line 1265
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
$LN5@BZ2_bzBuff:
; Line 1234
	mov	eax, -2					; fffffffeH
$LN7@BZ2_bzBuff:
	pop	edi
	pop	esi
; Line 1265
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	2
$LN42@BZ2_bzBuff:
	DD	$LN27@BZ2_bzBuff
	DD	$LN26@BZ2_bzBuff
	DD	$LN27@BZ2_bzBuff
	DD	$LN14@BZ2_bzBuff
_BZ2_bzBuffToBuffCompress@28 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzlibVersion@0
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_BZ2_bzlibVersion@0 PROC
; Line 1338
	mov	eax, OFFSET $SG82853
; Line 1339
	ret	0
_BZ2_bzlibVersion@0 ENDP
_TEXT	ENDS
PUBLIC	_fd$GSCopy$
PUBLIC	_path$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp__fclose:PROC
EXTRN	__imp___fdopen:PROC
EXTRN	__imp___setmode:PROC
EXTRN	__imp___fileno:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	__imp__isdigit:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_path$GSCopy$ = -5032					; size = 4
_smallMode$ = -5028					; size = 4
_fd$GSCopy$ = -5024					; size = 4
_bzerr$ = -5024						; size = 4
_writing$ = -5020					; size = 4
_unused$ = -5016					; size = 5000
_mode2$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
_path$ = 8						; size = 4
_open_mode$ = 12					; size = 4
_bzopen_or_bzdopen PROC
; _fd$ = ecx
; _mode$ = edx
; Line 1358
	push	ebp
	mov	ebp, esp
	mov	eax, 5032				; 000013a8H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _path$[ebp]
	push	ebx
; Line 1362
	mov	DWORD PTR _path$GSCopy$[ebp], eax
; Line 1363
	mov	al, BYTE PTR $SG83326
	push	esi
	mov	esi, edx
	xor	edx, edx
	mov	BYTE PTR _mode2$[ebp], al
	xor	eax, eax
	mov	DWORD PTR _fd$GSCopy$[ebp], ecx
	mov	ebx, 9
	mov	DWORD PTR _writing$[ebp], edx
	mov	DWORD PTR _mode2$[ebp+1], eax
	mov	DWORD PTR _mode2$[ebp+5], eax
	mov	BYTE PTR _mode2$[ebp+9], al
; Line 1368
	mov	DWORD PTR _smallMode$[ebp], edx
; Line 1371
	cmp	esi, edx
	jne	SHORT $LN29@bzopen_or_
	pop	esi
	pop	ebx
; Line 1421
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@bzopen_or_:
; Line 1372
	mov	al, BYTE PTR [esi]
	push	edi
	test	al, al
	je	SHORT $LN25@bzopen_or_
	mov	edi, DWORD PTR __imp__isdigit
	jmp	SHORT $LN21@bzopen_or_
$LL41@bzopen_or_:
	xor	edx, edx
$LN21@bzopen_or_:
; Line 1373
	movsx	ecx, al
	mov	eax, ecx
	sub	eax, 114				; 00000072H
	je	SHORT $LN17@bzopen_or_
	mov	edx, 1
	sub	eax, edx
	je	SHORT $LN15@bzopen_or_
	sub	eax, 4
	je	SHORT $LN17@bzopen_or_
; Line 1381
	push	ecx
	call	edi
	add	esp, 4
	test	eax, eax
	je	SHORT $LN39@bzopen_or_
; Line 1382
	movsx	ebx, BYTE PTR [esi]
	sub	ebx, 48					; 00000030H
	jmp	SHORT $LN39@bzopen_or_
$LN15@bzopen_or_:
; Line 1379
	mov	DWORD PTR _smallMode$[ebp], edx
	jmp	SHORT $LN39@bzopen_or_
$LN17@bzopen_or_:
; Line 1375
	mov	DWORD PTR _writing$[ebp], edx
$LN39@bzopen_or_:
; Line 1372
	mov	al, BYTE PTR [esi+1]
; Line 1385
	inc	esi
	test	al, al
	jne	SHORT $LL41@bzopen_or_
; Line 1387
	cmp	DWORD PTR _writing$[ebp], 0
	mov	eax, OFFSET $SG83351
	jne	SHORT $LN26@bzopen_or_
$LN25@bzopen_or_:
	mov	eax, OFFSET $SG83352
$LN26@bzopen_or_:
	mov	edx, eax
	npad	6
$LL31@bzopen_or_:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL31@bzopen_or_
	lea	edi, DWORD PTR _mode2$[ebp]
	sub	eax, edx
	dec	edi
	npad	3
$LL32@bzopen_or_:
	mov	cl, BYTE PTR [edi+1]
	inc	edi
	test	cl, cl
	jne	SHORT $LL32@bzopen_or_
	mov	ecx, eax
	shr	ecx, 2
	mov	esi, edx
	rep movsd
	mov	ecx, eax
	and	ecx, 3
; Line 1388
	mov	eax, OFFSET $SG83353
	rep movsb
	mov	ecx, eax
	npad	1
$LL33@bzopen_or_:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL33@bzopen_or_
	lea	edi, DWORD PTR _mode2$[ebp]
	sub	eax, ecx
	mov	esi, ecx
	dec	edi
	npad	1
$LL34@bzopen_or_:
	mov	cl, BYTE PTR [edi+1]
	inc	edi
	test	cl, cl
	jne	SHORT $LL34@bzopen_or_
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
	and	ecx, 3
; Line 1390
	cmp	DWORD PTR _open_mode$[ebp], 0
	rep movsb
	mov	edi, DWORD PTR __imp____iob_func
	jne	SHORT $LN12@bzopen_or_
; Line 1391
	mov	esi, DWORD PTR _path$GSCopy$[ebp]
	test	esi, esi
	je	SHORT $LN40@bzopen_or_
	mov	ecx, OFFSET $SG83358
	mov	eax, esi
$LL35@bzopen_or_:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN36@bzopen_or_
	test	dl, dl
	je	SHORT $LN37@bzopen_or_
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN36@bzopen_or_
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL35@bzopen_or_
$LN37@bzopen_or_:
	xor	eax, eax
	jmp	SHORT $LN38@bzopen_or_
$LN36@bzopen_or_:
	sbb	eax, eax
	sbb	eax, -1
$LN38@bzopen_or_:
	test	eax, eax
	je	SHORT $LN40@bzopen_or_
; Line 1395
	lea	ecx, DWORD PTR _mode2$[ebp]
	push	ecx
	push	esi
	call	DWORD PTR __imp__fopen
	jmp	SHORT $LN44@bzopen_or_
$LN40@bzopen_or_:
; Line 1392
	call	edi
	cmp	DWORD PTR _writing$[ebp], 0
	lea	esi, DWORD PTR [eax+32]
	jne	SHORT $LN28@bzopen_or_
	mov	esi, eax
$LN28@bzopen_or_:
; Line 1393
	push	32768					; 00008000H
	push	esi
	call	DWORD PTR __imp___fileno
	add	esp, 4
	push	eax
	call	DWORD PTR __imp___setmode
; Line 1397
	jmp	SHORT $LN45@bzopen_or_
$LN12@bzopen_or_:
; Line 1401
	mov	eax, DWORD PTR _fd$GSCopy$[ebp]
	lea	edx, DWORD PTR _mode2$[ebp]
	push	edx
	push	eax
	call	DWORD PTR __imp___fdopen
$LN44@bzopen_or_:
	mov	esi, eax
$LN45@bzopen_or_:
	add	esp, 8
; Line 1404
	test	esi, esi
	je	$LN1@bzopen_or_
; Line 1406
	cmp	DWORD PTR _writing$[ebp], 0
	je	SHORT $LN6@bzopen_or_
; Line 1408
	cmp	ebx, 1
	jge	SHORT $LN5@bzopen_or_
; Line 1411
	push	30					; 0000001eH
	push	0
	mov	ebx, 1
	push	ebx
	push	esi
	lea	ecx, DWORD PTR _bzerr$[ebp]
	push	ecx
	call	_BZ2_bzWriteOpen@20
; Line 1412
	jmp	SHORT $LN3@bzopen_or_
$LN5@bzopen_or_:
; Line 1409
	cmp	ebx, 9
	jle	SHORT $LN4@bzopen_or_
	mov	ebx, 9
$LN4@bzopen_or_:
; Line 1411
	push	30					; 0000001eH
	push	0
	push	ebx
	push	esi
	lea	ecx, DWORD PTR _bzerr$[ebp]
	push	ecx
	call	_BZ2_bzWriteOpen@20
; Line 1412
	jmp	SHORT $LN3@bzopen_or_
$LN6@bzopen_or_:
; Line 1414
	mov	eax, DWORD PTR _smallMode$[ebp]
	push	0
	lea	edx, DWORD PTR _unused$[ebp]
	push	edx
	push	eax
	push	0
	push	esi
	lea	ecx, DWORD PTR _bzerr$[ebp]
	push	ecx
	call	_BZ2_bzReadOpen@24
$LN3@bzopen_or_:
; Line 1416
	test	eax, eax
	jne	SHORT $LN42@bzopen_or_
; Line 1417
	call	edi
	cmp	esi, eax
	je	SHORT $LN1@bzopen_or_
	call	edi
	add	eax, 32					; 00000020H
	cmp	esi, eax
	je	SHORT $LN1@bzopen_or_
	push	esi
	call	DWORD PTR __imp__fclose
	add	esp, 4
$LN1@bzopen_or_:
; Line 1418
	xor	eax, eax
$LN42@bzopen_or_:
; Line 1421
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_bzopen_or_bzdopen ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzopen@8
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_BZ2_bzopen@8 PROC
; Line 1433
	push	ebp
	mov	ebp, esp
; Line 1434
	mov	eax, DWORD PTR _path$[ebp]
	mov	edx, DWORD PTR _mode$[ebp]
	push	0
	push	eax
	or	ecx, -1
	call	_bzopen_or_bzdopen
	add	esp, 8
; Line 1435
	pop	ebp
	ret	8
_BZ2_bzopen@8 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzdopen@8
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_mode$ = 12						; size = 4
_BZ2_bzdopen@8 PROC
; Line 1442
	push	ebp
	mov	ebp, esp
; Line 1443
	mov	edx, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR _fd$[ebp]
	push	1
	push	0
	call	_bzopen_or_bzdopen
	add	esp, 8
; Line 1444
	pop	ebp
	ret	8
_BZ2_bzdopen@8 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzwrite@12
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_b$ = 8							; size = 4
_buf$ = 12						; size = 4
_bzerr$ = 16						; size = 4
_len$ = 16						; size = 4
_BZ2_bzwrite@12 PROC
; Line 1463
	push	ebp
	mov	ebp, esp
; Line 1466
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	push	esi
	mov	esi, DWORD PTR _len$[ebp]
	push	esi
	push	eax
	push	ecx
	lea	edx, DWORD PTR _bzerr$[ebp]
	push	edx
	call	_BZ2_bzWrite@16
; Line 1467
	cmp	DWORD PTR _bzerr$[ebp], 0
	jne	SHORT $LN2@BZ2_bzwrit
; Line 1468
	mov	eax, esi
	pop	esi
; Line 1472
	pop	ebp
	ret	12					; 0000000cH
$LN2@BZ2_bzwrit:
; Line 1470
	or	eax, -1
	pop	esi
; Line 1472
	pop	ebp
	ret	12					; 0000000cH
_BZ2_bzwrite@12 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzflush@4
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_b$ = 8							; size = 4
_BZ2_bzflush@4 PROC
; Line 1479
	xor	eax, eax
; Line 1480
	ret	4
_BZ2_bzflush@4 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzerror@8
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_b$ = 8							; size = 4
_errnum$ = 12						; size = 4
_BZ2_bzerror@8 PROC
; Line 1530
	push	ebp
	mov	ebp, esp
; Line 1531
	mov	eax, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [eax+5060]
; Line 1533
	test	eax, eax
	jle	SHORT $LN1@BZ2_bzerro
	xor	eax, eax
$LN1@BZ2_bzerro:
; Line 1534
	mov	ecx, DWORD PTR _errnum$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1535
	lea	edx, DWORD PTR [eax*4]
	mov	eax, OFFSET _bzerrorstrings
	sub	eax, edx
	mov	eax, DWORD PTR [eax]
; Line 1536
	pop	ebp
	ret	8
_BZ2_bzerror@8 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bz__AssertH__fail
EXTRN	__imp__exit:PROC
EXTRN	__imp__fprintf:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_errcode$ = 8						; size = 4
_BZ2_bz__AssertH__fail PROC
; Line 12
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 24
	mov	esi, DWORD PTR _errcode$[ebp]
	push	edi
	mov	edi, DWORD PTR __imp____iob_func
	push	OFFSET $SG82853
	push	esi
	push	OFFSET $SG81728
	call	edi
	mov	ebx, DWORD PTR __imp__fprintf
	add	eax, 64					; 00000040H
	push	eax
	call	ebx
	add	esp, 16					; 00000010H
; Line 26
	cmp	esi, 1007				; 000003efH
	jne	SHORT $LN1@BZ2_bz__As
; Line 51
	push	OFFSET $SG81730
	call	edi
	add	eax, 64					; 00000040H
	push	eax
	call	ebx
	add	esp, 8
$LN1@BZ2_bz__As:
; Line 54
	push	3
	call	DWORD PTR __imp__exit
$LN7@BZ2_bz__As:
$LN6@BZ2_bz__As:
	int	3
_BZ2_bz__AssertH__fail ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzDecompress@4
EXTRN	_BZ2_decompress:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_BZ2_bzDecompress@4 PROC
; Line 779
	push	ebp
	mov	ebp, esp
; Line 782
	mov	eax, DWORD PTR _strm$[ebp]
	test	eax, eax
	jne	SHORT $LN21@BZ2_bzDeco@3
	mov	eax, -2					; fffffffeH
; Line 828
	pop	ebp
	ret	4
$LN21@BZ2_bzDeco@3:
	push	esi
; Line 783
	mov	esi, DWORD PTR [eax+32]
; Line 784
	test	esi, esi
	je	SHORT $LN41@BZ2_bzDeco@3
; Line 785
	cmp	DWORD PTR [esi], eax
	je	SHORT $LN31@BZ2_bzDeco@3
$LN41@BZ2_bzDeco@3:
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 828
	pop	ebp
	ret	4
$LN31@BZ2_bzDeco@3:
; Line 788
	mov	ecx, DWORD PTR [esi+4]
	push	ebx
	push	edi
	cmp	ecx, 1
	je	$LN32@BZ2_bzDeco@3
	mov	edi, DWORD PTR __imp__fprintf
	mov	ebx, DWORD PTR __imp____iob_func
$LL18@BZ2_bzDeco@3:
; Line 789
	cmp	ecx, 2
	jne	$LN7@BZ2_bzDeco@3
; Line 790
	cmp	BYTE PTR [esi+40], 0
	je	SHORT $LN14@BZ2_bzDeco@3
; Line 791
	call	_unRLE_obuf_to_output_SMALL
	jmp	SHORT $LN13@BZ2_bzDeco@3
$LN14@BZ2_bzDeco@3:
; Line 792
	mov	ecx, esi
	call	_unRLE_obuf_to_output_FAST
$LN13@BZ2_bzDeco@3:
; Line 793
	test	al, al
	jne	$LN34@BZ2_bzDeco@3
; Line 794
	mov	eax, DWORD PTR [esi+64064]
	inc	eax
	cmp	DWORD PTR [esi+1088], eax
	jne	$LN11@BZ2_bzDeco@3
	cmp	DWORD PTR [esi+12], 0
	jne	$LN11@BZ2_bzDeco@3
; Line 796
	cmp	DWORD PTR [esi+48], 3
	mov	eax, DWORD PTR [esi+3168]
	not	eax
	mov	DWORD PTR [esi+3168], eax
	jl	SHORT $LN10@BZ2_bzDeco@3
; Line 798
	mov	ecx, DWORD PTR [esi+3160]
	push	eax
	push	ecx
	push	OFFSET $SG82328
	call	ebx
	add	eax, 64					; 00000040H
	push	eax
	call	edi
	add	esp, 16					; 00000010H
$LN10@BZ2_bzDeco@3:
; Line 799
	cmp	DWORD PTR [esi+48], 2
	jl	SHORT $LN9@BZ2_bzDeco@3
	push	OFFSET $SG82330
	call	ebx
	add	eax, 64					; 00000040H
	push	eax
	call	edi
	add	esp, 8
$LN9@BZ2_bzDeco@3:
; Line 800
	mov	eax, DWORD PTR [esi+3168]
	cmp	eax, DWORD PTR [esi+3160]
	jne	SHORT $LN34@BZ2_bzDeco@3
; Line 804
	mov	edx, DWORD PTR [esi+3172]
	rol	edx, 1
; Line 805
	xor	edx, eax
	mov	DWORD PTR [esi+3172], edx
; Line 806
	mov	DWORD PTR [esi+4], 14			; 0000000eH
; Line 811
	jmp	SHORT $LN37@BZ2_bzDeco@3
$LN7@BZ2_bzDeco@3:
	cmp	ecx, 10					; 0000000aH
	jl	SHORT $LN2@BZ2_bzDeco@3
$LN37@BZ2_bzDeco@3:
; Line 812
	push	esi
	call	_BZ2_decompress
	add	esp, 4
; Line 813
	cmp	eax, 4
	je	SHORT $LN35@BZ2_bzDeco@3
; Line 821
	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, 2
	jne	SHORT $LN39@BZ2_bzDeco@3
$LN2@BZ2_bzDeco@3:
; Line 788
	cmp	DWORD PTR [esi+4], 1
	jne	$LL18@BZ2_bzDeco@3
$LN32@BZ2_bzDeco@3:
	pop	edi
	pop	ebx
	or	eax, -1
	pop	esi
; Line 828
	pop	ebp
	ret	4
$LN34@BZ2_bzDeco@3:
	pop	edi
	pop	ebx
; Line 801
	mov	eax, -4					; fffffffcH
	pop	esi
; Line 828
	pop	ebp
	ret	4
$LN11@BZ2_bzDeco@3:
	pop	edi
	pop	ebx
; Line 808
	xor	eax, eax
	pop	esi
; Line 828
	pop	ebp
	ret	4
$LN35@BZ2_bzDeco@3:
; Line 814
	cmp	DWORD PTR [esi+48], 3
	jl	SHORT $LN4@BZ2_bzDeco@3
; Line 816
	mov	eax, DWORD PTR [esi+3172]
	mov	ecx, DWORD PTR [esi+3164]
	push	eax
	push	ecx
	push	OFFSET $SG82337
	call	ebx
	add	eax, 64					; 00000040H
	push	eax
	call	edi
	add	esp, 16					; 00000010H
$LN4@BZ2_bzDeco@3:
; Line 817
	mov	edx, DWORD PTR [esi+3172]
	xor	eax, eax
	cmp	edx, DWORD PTR [esi+3164]
	sete	al
	lea	eax, DWORD PTR [eax*8-4]
$LN39@BZ2_bzDeco@3:
	pop	edi
	pop	ebx
	pop	esi
; Line 828
	pop	ebp
	ret	4
_BZ2_bzDecompress@4 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzWriteClose@20
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_bzerror$ = 8						; size = 4
_b$ = 12						; size = 4
_abandon$ = 16						; size = 4
_nbytes_in$ = 20					; size = 4
_nbytes_out$ = 24					; size = 4
_BZ2_bzWriteClose@20 PROC
; Line 985
	push	ebp
	mov	ebp, esp
; Line 987
	mov	eax, DWORD PTR _nbytes_out$[ebp]
	mov	ecx, DWORD PTR _nbytes_in$[ebp]
	mov	edx, DWORD PTR _abandon$[ebp]
	push	0
	push	eax
	mov	eax, DWORD PTR _b$[ebp]
	push	0
	push	ecx
	mov	ecx, DWORD PTR _bzerror$[ebp]
	push	edx
	push	eax
	push	ecx
	call	_BZ2_bzWriteClose64@28
; Line 988
	pop	ebp
	ret	20					; 00000014H
_BZ2_bzWriteClose@20 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzRead@16
EXTRN	__imp__fread:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_bzerror$ = 8						; size = 4
_b$ = 12						; size = 4
_buf$ = 16						; size = 4
_len$ = 20						; size = 4
_BZ2_bzRead@16 PROC
; Line 1136
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 1140
	mov	ebx, DWORD PTR _bzerror$[ebp]
	xor	edx, edx
	push	esi
	cmp	ebx, edx
	je	SHORT $LN33@BZ2_bzRead@4
	mov	DWORD PTR [ebx], edx
$LN33@BZ2_bzRead@4:
	mov	esi, DWORD PTR _b$[ebp]
	cmp	esi, edx
	je	$LN30@BZ2_bzRead@4
; Line 1142
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [esi+5060], edx
	cmp	eax, edx
	je	$LN30@BZ2_bzRead@4
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, edx
	jl	$LN30@BZ2_bzRead@4
; Line 1145
	cmp	BYTE PTR [esi+5008], dl
	je	SHORT $LN27@BZ2_bzRead@4
; Line 1146
	cmp	ebx, edx
	je	SHORT $LN53@BZ2_bzRead@4
	mov	DWORD PTR [ebx], -1
$LN53@BZ2_bzRead@4:
	mov	DWORD PTR [esi+5060], -1
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 1187
	pop	ebp
	ret	16					; 00000010H
$LN27@BZ2_bzRead@4:
; Line 1148
	cmp	ecx, edx
	jne	SHORT $LN24@BZ2_bzRead@4
; Line 1149
	cmp	ebx, edx
	je	SHORT $LN23@BZ2_bzRead@4
	mov	DWORD PTR [ebx], edx
$LN23@BZ2_bzRead@4:
	mov	DWORD PTR [esi+5060], edx
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 1187
	pop	ebp
	ret	16					; 00000010H
$LN24@BZ2_bzRead@4:
; Line 1152
	mov	DWORD PTR [esi+5028], eax
; Line 1156
	mov	eax, DWORD PTR [esi]
	push	edi
	push	eax
	mov	DWORD PTR [esi+5032], ecx
	call	DWORD PTR __imp__ferror
	add	esp, 4
	test	eax, eax
	jne	$LN56@BZ2_bzRead@4
$LL21@BZ2_bzRead@4:
; Line 1159
	cmp	DWORD PTR [esi+5016], 0
	jne	SHORT $LN54@BZ2_bzRead@4
	mov	edi, DWORD PTR [esi]
	push	edi
	call	DWORD PTR __imp__fgetc
	add	esp, 4
	cmp	eax, -1
	je	SHORT $LN54@BZ2_bzRead@4
	push	edi
	push	eax
	call	DWORD PTR __imp__ungetc
; Line 1161
	mov	ecx, DWORD PTR [esi]
	push	ecx
	push	5000					; 00001388H
	lea	edi, DWORD PTR [esi+4]
	push	1
	push	edi
	call	DWORD PTR __imp__fread
; Line 1162
	mov	edx, DWORD PTR [esi]
	push	edx
	mov	ebx, eax
	call	DWORD PTR __imp__ferror
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN44@BZ2_bzRead@4
; Line 1164
	mov	DWORD PTR [esi+5004], ebx
; Line 1165
	mov	DWORD PTR [esi+5016], ebx
; Line 1166
	mov	ebx, DWORD PTR _bzerror$[ebp]
	mov	DWORD PTR [esi+5012], edi
$LN54@BZ2_bzRead@4:
; Line 1169
	lea	eax, DWORD PTR [esi+5012]
	push	eax
	call	_BZ2_bzDecompress@4
; Line 1171
	test	eax, eax
	jne	SHORT $LN52@BZ2_bzRead@4
; Line 1175
	mov	edi, DWORD PTR [esi]
	push	edi
	call	DWORD PTR __imp__fgetc
	add	esp, 4
	cmp	eax, -1
	je	SHORT $LN51@BZ2_bzRead@4
	push	edi
	push	eax
	call	DWORD PTR __imp__ungetc
	add	esp, 8
	jmp	SHORT $LN9@BZ2_bzRead@4
$LN51@BZ2_bzRead@4:
	cmp	DWORD PTR [esi+5016], 0
	jne	SHORT $LN9@BZ2_bzRead@4
	cmp	DWORD PTR [esi+5032], 0
	ja	$LN46@BZ2_bzRead@4
$LN9@BZ2_bzRead@4:
; Line 1181
	cmp	DWORD PTR [esi+5032], 0
	je	$LN48@BZ2_bzRead@4
; Line 1156
	mov	ecx, DWORD PTR [esi]
	push	ecx
	call	DWORD PTR __imp__ferror
	add	esp, 4
	test	eax, eax
	je	$LL21@BZ2_bzRead@4
$LN56@BZ2_bzRead@4:
; Line 1157
	test	ebx, ebx
	je	SHORT $LN14@BZ2_bzRead@4
	mov	DWORD PTR [ebx], -6			; fffffffaH
$LN14@BZ2_bzRead@4:
	pop	edi
; Line 1163
	mov	DWORD PTR [esi+5060], -6		; fffffffaH
	pop	esi
; Line 1172
	xor	eax, eax
	pop	ebx
; Line 1187
	pop	ebp
	ret	16					; 00000010H
$LN52@BZ2_bzRead@4:
; Line 1171
	cmp	eax, 4
	jne	SHORT $LN45@BZ2_bzRead@4
; Line 1179
	test	ebx, ebx
	je	SHORT $LN5@BZ2_bzRead@4
	mov	DWORD PTR [ebx], eax
$LN5@BZ2_bzRead@4:
; Line 1180
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR [esi+5032]
	pop	edi
	mov	DWORD PTR [esi+5060], 4
	pop	esi
	pop	ebx
; Line 1187
	pop	ebp
	ret	16					; 00000010H
$LN44@BZ2_bzRead@4:
; Line 1163
	mov	eax, DWORD PTR _bzerror$[ebp]
	test	eax, eax
	je	SHORT $LN14@BZ2_bzRead@4
	mov	DWORD PTR [eax], -6			; fffffffaH
	pop	edi
	mov	DWORD PTR [esi+5060], -6		; fffffffaH
	pop	esi
; Line 1172
	xor	eax, eax
	pop	ebx
; Line 1187
	pop	ebp
	ret	16					; 00000010H
$LN45@BZ2_bzRead@4:
; Line 1172
	test	ebx, ebx
	je	SHORT $LN11@BZ2_bzRead@4
	mov	DWORD PTR [ebx], eax
$LN11@BZ2_bzRead@4:
	pop	edi
	mov	DWORD PTR [esi+5060], eax
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 1187
	pop	ebp
	ret	16					; 00000010H
$LN46@BZ2_bzRead@4:
; Line 1176
	test	ebx, ebx
	je	SHORT $LN8@BZ2_bzRead@4
	mov	DWORD PTR [ebx], -7			; fffffff9H
$LN8@BZ2_bzRead@4:
	pop	edi
	mov	DWORD PTR [esi+5060], -7		; fffffff9H
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 1187
	pop	ebp
	ret	16					; 00000010H
$LN48@BZ2_bzRead@4:
; Line 1182
	test	ebx, ebx
	je	SHORT $LN2@BZ2_bzRead@4
	mov	DWORD PTR [ebx], 0
$LN2@BZ2_bzRead@4:
	mov	eax, DWORD PTR _len$[ebp]
	pop	edi
	mov	DWORD PTR [esi+5060], 0
	pop	esi
	pop	ebx
; Line 1187
	pop	ebp
	ret	16					; 00000010H
$LN30@BZ2_bzRead@4:
; Line 1143
	cmp	ebx, edx
	je	SHORT $LN29@BZ2_bzRead@4
	mov	DWORD PTR [ebx], -2			; fffffffeH
$LN29@BZ2_bzRead@4:
	cmp	esi, edx
	je	SHORT $LN28@BZ2_bzRead@4
	mov	DWORD PTR [esi+5060], -2		; fffffffeH
$LN28@BZ2_bzRead@4:
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 1187
	pop	ebp
	ret	16					; 00000010H
_BZ2_bzRead@16 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzBuffToBuffDecompress@24
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = -48						; size = 48
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_source$ = 16						; size = 4
_sourceLen$ = 20					; size = 4
_small$ = 24						; size = 4
_verbosity$ = 28					; size = 4
_BZ2_bzBuffToBuffDecompress@24 PROC
; Line 1276
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
; Line 1283
	cmp	DWORD PTR _dest$[ebp], 0
	push	ebx
	push	esi
	je	$LN7@BZ2_bzBuff@2
	mov	ebx, DWORD PTR _destLen$[ebp]
	test	ebx, ebx
	je	$LN7@BZ2_bzBuff@2
	mov	esi, DWORD PTR _source$[ebp]
	test	esi, esi
	je	$LN7@BZ2_bzBuff@2
	mov	ecx, DWORD PTR _small$[ebp]
	test	ecx, ecx
	je	SHORT $LN6@BZ2_bzBuff@2
	cmp	ecx, 1
	jne	$LN7@BZ2_bzBuff@2
$LN6@BZ2_bzBuff@2:
	mov	eax, DWORD PTR _verbosity$[ebp]
	cmp	eax, 4
	ja	$LN7@BZ2_bzBuff@2
; Line 1289
	push	ecx
	push	eax
	lea	eax, DWORD PTR _strm$[ebp]
	push	eax
	mov	DWORD PTR _strm$[ebp+36], 0
	mov	DWORD PTR _strm$[ebp+40], 0
	mov	DWORD PTR _strm$[ebp+44], 0
	call	_BZ2_bzDecompressInit@12
; Line 1290
	test	eax, eax
	jne	$LN9@BZ2_bzBuff@2
; Line 1293
	mov	ecx, DWORD PTR _dest$[ebp]
; Line 1294
	mov	edx, DWORD PTR _sourceLen$[ebp]
; Line 1295
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR _strm$[ebp+16], ecx
; Line 1297
	lea	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	mov	DWORD PTR _strm$[ebp], esi
	mov	DWORD PTR _strm$[ebp+4], edx
	mov	DWORD PTR _strm$[ebp+20], eax
	call	_BZ2_bzDecompress@4
	mov	esi, eax
; Line 1298
	test	esi, esi
	jne	SHORT $LN4@BZ2_bzBuff@2
$output_overflow_or_eof$82846:
; Line 1307
	cmp	DWORD PTR _strm$[ebp+20], eax
	jbe	SHORT $LN2@BZ2_bzBuff@2
; Line 1308
	lea	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_BZ2_bzDecompressEnd@4
; Line 1309
	lea	eax, DWORD PTR [esi-7]
	pop	esi
	pop	ebx
; Line 1318
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$LN2@BZ2_bzBuff@2:
; Line 1311
	lea	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_BZ2_bzDecompressEnd@4
	pop	esi
; Line 1312
	mov	eax, -8					; fffffff8H
	pop	ebx
; Line 1318
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$LN4@BZ2_bzBuff@2:
; Line 1299
	cmp	esi, 4
	je	SHORT $LN3@BZ2_bzBuff@2
; Line 1316
	lea	ecx, DWORD PTR _strm$[ebp]
	push	ecx
$errhandler$82848:
	call	_BZ2_bzDecompressEnd@4
; Line 1317
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 1318
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$LN3@BZ2_bzBuff@2:
; Line 1302
	mov	edx, DWORD PTR _strm$[ebp+20]
	sub	DWORD PTR [ebx], edx
; Line 1303
	lea	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_BZ2_bzDecompressEnd@4
	pop	esi
; Line 1304
	xor	eax, eax
	pop	ebx
; Line 1318
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$LN7@BZ2_bzBuff@2:
; Line 1284
	mov	eax, -2					; fffffffeH
$LN9@BZ2_bzBuff@2:
	pop	esi
	pop	ebx
; Line 1318
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_BZ2_bzBuffToBuffDecompress@24 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzread@12
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_bzerr$ = 8						; size = 4
_b$ = 8							; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_BZ2_bzread@12 PROC
; Line 1449
	push	ebp
	mov	ebp, esp
; Line 1451
	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+5060], 4
	jne	SHORT $LN4@BZ2_bzread
	xor	eax, eax
; Line 1458
	pop	ebp
	ret	12					; 0000000cH
$LN4@BZ2_bzread:
; Line 1452
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _buf$[ebp]
	push	ecx
	push	edx
	push	eax
	lea	eax, DWORD PTR _bzerr$[ebp]
	push	eax
	call	_BZ2_bzRead@16
; Line 1453
	mov	ecx, DWORD PTR _bzerr$[ebp]
	test	ecx, ecx
	je	SHORT $LN1@BZ2_bzread
	cmp	ecx, 4
	je	SHORT $LN1@BZ2_bzread
; Line 1456
	or	eax, -1
$LN1@BZ2_bzread:
; Line 1458
	pop	ebp
	ret	12					; 0000000cH
_BZ2_bzread@12 ENDP
_TEXT	ENDS
PUBLIC	_BZ2_bzclose@4
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_bzerr$ = 8						; size = 4
_b$ = 8							; size = 4
_BZ2_bzclose@4 PROC
; Line 1485
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1489
	mov	esi, DWORD PTR _b$[ebp]
	test	esi, esi
	je	$LN1@BZ2_bzclos
; Line 1491
	cmp	BYTE PTR [esi+5008], 0
	push	edi
	mov	edi, DWORD PTR [esi]
; Line 1492
	lea	eax, DWORD PTR _bzerr$[ebp]
	je	SHORT $LN4@BZ2_bzclos
	push	0
	push	0
	push	0
	push	0
	push	0
	push	esi
	push	eax
	call	_BZ2_bzWriteClose64@28
; Line 1493
	cmp	DWORD PTR _bzerr$[ebp], 0
	je	SHORT $LN2@BZ2_bzclos
; Line 1494
	cmp	BYTE PTR [esi+5008], 0
	jne	SHORT $LN43@BZ2_bzclos
	mov	DWORD PTR [esi+5060], -1
	jmp	SHORT $LN2@BZ2_bzclos
$LN43@BZ2_bzclos:
	mov	ecx, DWORD PTR [esi]
	push	ecx
	call	DWORD PTR __imp__ferror
	add	esp, 4
	test	eax, eax
	je	SHORT $LN40@BZ2_bzclos
	mov	DWORD PTR [esi+5060], -6		; fffffffaH
	jmp	SHORT $LN2@BZ2_bzclos
$LN40@BZ2_bzclos:
	lea	edx, DWORD PTR [esi+5012]
	push	edx
	mov	DWORD PTR [esi+5060], 0
	call	_BZ2_bzCompressEnd@4
	push	esi
	call	DWORD PTR __imp__free
	add	esp, 4
; Line 1496
	jmp	SHORT $LN2@BZ2_bzclos
$LN4@BZ2_bzclos:
; Line 1497
	push	esi
	push	eax
	call	_BZ2_bzReadClose@8
$LN2@BZ2_bzclos:
; Line 1499
	mov	esi, DWORD PTR __imp____iob_func
	call	esi
	cmp	edi, eax
	je	SHORT $LN49@BZ2_bzclos
	call	esi
	add	eax, 32					; 00000020H
	cmp	edi, eax
	je	SHORT $LN49@BZ2_bzclos
; Line 1500
	push	edi
	call	DWORD PTR __imp__fclose
	add	esp, 4
$LN49@BZ2_bzclos:
	pop	edi
$LN1@BZ2_bzclos:
	pop	esi
; Line 1502
	pop	ebp
	ret	4
_BZ2_bzclose@4 ENDP
_TEXT	ENDS
END
