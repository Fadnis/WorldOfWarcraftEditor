; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\programovani\WoW Editor\Test\src\bzlib2\decompress.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG81910 DB	0aH, '    [%d: huff+mtf ', 00H
$SG82345 DB	'rt+rld', 00H
; Function compile flags: /Ogtp
_DATA	ENDS
_TEXT	SEGMENT
_makeMaps_d PROC
; _s$ = eax
; File c:\programovani\wow editor\test\src\bzlib2\decompress.c
; Line 31
	xor	ecx, ecx
	mov	DWORD PTR [eax+3176], 0
	lea	edx, DWORD PTR [ecx+1]
	push	esi
$LL4@makeMaps_d:
; Line 32
	cmp	BYTE PTR [eax+ecx+3180], 0
	je	SHORT $LN3@makeMaps_d
; Line 33
	mov	esi, DWORD PTR [eax+3176]
	mov	BYTE PTR [eax+esi+3452], cl
; Line 34
	add	DWORD PTR [eax+3176], edx
$LN3@makeMaps_d:
; Line 31
	add	ecx, edx
	cmp	ecx, 256				; 00000100H
	jl	SHORT $LL4@makeMaps_d
	pop	esi
; Line 36
	ret	0
_makeMaps_d ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_BZ2_decompress
EXTRN	_BZ2_bz__AssertH__fail:PROC
EXTRN	_BZ2_rNums:BYTE
EXTRN	_BZ2_indexIntoF:PROC
EXTRN	_BZ2_hbCreateDecodeTables:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_zt$ = -128						; size = 4
tv7124 = -124						; size = 4
tv7118 = -120						; size = 4
tv7114 = -116						; size = 4
_zj$ = -112						; size = 4
_gSel$ = -108						; size = 4
_nGroups$ = -104					; size = 4
_N$ = -100						; size = 4
tv2841 = -96						; size = 4
_EOB$ = -96						; size = 4
_gMinlen$ = -92						; size = 4
_nextSym$ = -88						; size = 4
_alphaSize$ = -84					; size = 4
_gLimit$ = -80						; size = 4
_gBase$ = -76						; size = 4
_groupPos$ = -72					; size = 4
_gPerm$ = -68						; size = 4
_curr$ = -64						; size = 4
_t$ = -60						; size = 4
_nSelectors$ = -56					; size = 4
_minLen$ = -52						; size = 4
_nblockMAX$ = -52					; size = 4
_es$ = -48						; size = 4
_j$ = -44						; size = 4
_zvec$ = -40						; size = 4
tv7029 = -36						; size = 4
tv6940 = -36						; size = 4
_groupNo$ = -36						; size = 4
_nblock$ = -32						; size = 4
_zn$ = -28						; size = 4
tv7129 = -24						; size = 4
tv6932 = -24						; size = 4
tv6759 = -24						; size = 4
tv6757 = -24						; size = 4
tv5756 = -24						; size = 4
_ii$82266 = -24						; size = 4
_ii$82167 = -24						; size = 4
_strm$ = -24						; size = 4
_tmp$82097 = -17					; size = 1
_uc$ = -17						; size = 1
_i$ = -16						; size = 4
tv6755 = -12						; size = 4
tv5516 = -12						; size = 4
_pos$82096 = -12					; size = 6
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_BZ2_decompress PROC
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _s$[ebp]
; Line 111
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR _strm$[ebp], eax
; Line 139
	mov	eax, DWORD PTR [ebx+4]
	push	esi
	push	edi
	cmp	eax, 10					; 0000000aH
	jne	$LN702@BZ2_decomp
; Line 141
	xor	ecx, ecx
	mov	DWORD PTR [ebx+64020], ecx
; Line 142
	mov	DWORD PTR [ebx+64024], ecx
; Line 143
	mov	DWORD PTR [ebx+64028], ecx
; Line 144
	mov	DWORD PTR [ebx+64032], ecx
; Line 145
	mov	DWORD PTR [ebx+64036], ecx
; Line 146
	mov	DWORD PTR [ebx+64040], ecx
; Line 147
	mov	DWORD PTR [ebx+64044], ecx
; Line 148
	mov	DWORD PTR [ebx+64048], ecx
; Line 149
	mov	DWORD PTR [ebx+64052], ecx
; Line 150
	mov	DWORD PTR [ebx+64056], ecx
; Line 151
	mov	DWORD PTR [ebx+64060], ecx
; Line 152
	mov	DWORD PTR [ebx+64064], ecx
; Line 153
	mov	DWORD PTR [ebx+64068], ecx
; Line 154
	mov	DWORD PTR [ebx+64072], ecx
; Line 155
	mov	DWORD PTR [ebx+64076], ecx
; Line 156
	mov	DWORD PTR [ebx+64080], ecx
; Line 157
	mov	DWORD PTR [ebx+64084], ecx
; Line 158
	mov	DWORD PTR [ebx+64088], ecx
; Line 159
	mov	DWORD PTR [ebx+64092], ecx
; Line 160
	mov	DWORD PTR [ebx+64096], ecx
; Line 161
	mov	DWORD PTR [ebx+64100], ecx
; Line 162
	mov	DWORD PTR [ebx+64104], ecx
; Line 163
	mov	DWORD PTR [ebx+64108], ecx
; Line 164
	mov	DWORD PTR [ebx+64112], ecx
$LN702@BZ2_decomp:
; Line 168
	mov	ecx, DWORD PTR [ebx+64020]
; Line 169
	mov	edx, DWORD PTR [ebx+64024]
	mov	DWORD PTR _i$[ebp], ecx
; Line 170
	mov	ecx, DWORD PTR [ebx+64028]
	mov	DWORD PTR _j$[ebp], edx
; Line 171
	mov	edx, DWORD PTR [ebx+64032]
	mov	DWORD PTR _t$[ebp], ecx
; Line 172
	mov	ecx, DWORD PTR [ebx+64036]
	mov	DWORD PTR _alphaSize$[ebp], edx
; Line 173
	mov	edx, DWORD PTR [ebx+64040]
	mov	DWORD PTR _nGroups$[ebp], ecx
; Line 174
	mov	ecx, DWORD PTR [ebx+64044]
	mov	DWORD PTR _nSelectors$[ebp], edx
; Line 175
	mov	edx, DWORD PTR [ebx+64048]
	mov	DWORD PTR _EOB$[ebp], ecx
; Line 176
	mov	ecx, DWORD PTR [ebx+64052]
	mov	DWORD PTR _groupNo$[ebp], edx
; Line 177
	mov	edx, DWORD PTR [ebx+64056]
	mov	DWORD PTR _groupPos$[ebp], ecx
; Line 178
	mov	ecx, DWORD PTR [ebx+64060]
	mov	DWORD PTR _nextSym$[ebp], edx
; Line 179
	mov	edx, DWORD PTR [ebx+64064]
	mov	DWORD PTR _nblockMAX$[ebp], ecx
; Line 180
	mov	ecx, DWORD PTR [ebx+64068]
	mov	DWORD PTR _nblock$[ebp], edx
; Line 181
	mov	edx, DWORD PTR [ebx+64072]
	mov	DWORD PTR _es$[ebp], ecx
; Line 182
	mov	ecx, DWORD PTR [ebx+64076]
	mov	DWORD PTR _N$[ebp], edx
; Line 183
	mov	edx, DWORD PTR [ebx+64080]
	mov	DWORD PTR _curr$[ebp], ecx
; Line 184
	mov	ecx, DWORD PTR [ebx+64084]
	mov	DWORD PTR _zt$[ebp], edx
; Line 185
	mov	edx, DWORD PTR [ebx+64088]
	mov	DWORD PTR _zn$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR [ebx+64092]
	mov	DWORD PTR _zvec$[ebp], edx
; Line 187
	mov	edx, DWORD PTR [ebx+64096]
	mov	DWORD PTR _zj$[ebp], ecx
; Line 188
	mov	ecx, DWORD PTR [ebx+64100]
	mov	DWORD PTR _gSel$[ebp], edx
; Line 189
	mov	edx, DWORD PTR [ebx+64104]
	mov	DWORD PTR _gMinlen$[ebp], ecx
; Line 190
	mov	ecx, DWORD PTR [ebx+64108]
	mov	DWORD PTR _gLimit$[ebp], edx
; Line 191
	mov	edx, DWORD PTR [ebx+64112]
; Line 195
	add	eax, -10				; fffffff6H
	xor	edi, edi
	mov	DWORD PTR _gBase$[ebp], ecx
	mov	DWORD PTR _gPerm$[ebp], edx
	cmp	eax, 40					; 00000028H
	ja	$LN3@BZ2_decomp
	lea	esi, DWORD PTR [edi+1]
	jmp	DWORD PTR $LN771@BZ2_decomp[eax*4]
$LN447@BZ2_decomp:
; Line 197
	mov	edi, 8
	mov	DWORD PTR [ebx+4], 10			; 0000000aH
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN671@BZ2_decomp
	npad	3
$LL446@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN442@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN442@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL446@BZ2_decomp
$LN671@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
; Line 198
	cmp	al, 66					; 00000042H
	je	SHORT $LN745@BZ2_decomp
$LN419@BZ2_decomp:
	mov	edi, -5					; fffffffbH
	jmp	$save_state_and_return$81782
$LN672@BZ2_decomp:
; Line 197
	mov	edi, 8
$LN745@BZ2_decomp:
; Line 200
	mov	DWORD PTR [ebx+4], 11			; 0000000bH
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN532@BZ2_decomp
$LL439@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN435@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN435@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL439@BZ2_decomp
$LN532@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
; Line 201
	cmp	al, 90					; 0000005aH
	je	SHORT $LN744@BZ2_decomp
	mov	edi, -5					; fffffffbH
	jmp	$save_state_and_return$81782
$LN673@BZ2_decomp:
; Line 200
	mov	edi, 8
$LN744@BZ2_decomp:
; Line 203
	mov	DWORD PTR [ebx+4], 12			; 0000000cH
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN534@BZ2_decomp
$LL432@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN428@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN428@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL432@BZ2_decomp
$LN534@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
; Line 204
	cmp	al, 104					; 00000068H
	je	SHORT $LN743@BZ2_decomp
	mov	edi, -5					; fffffffbH
	jmp	$save_state_and_return$81782
$LN674@BZ2_decomp:
; Line 203
	mov	edi, 8
$LN743@BZ2_decomp:
; Line 206
	mov	DWORD PTR [ebx+4], 13			; 0000000dH
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN536@BZ2_decomp
$LL425@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN421@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN421@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL425@BZ2_decomp
$LN536@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
	mov	DWORD PTR [ebx+36], eax
; Line 208
	cmp	eax, 49					; 00000031H
	jl	$LN419@BZ2_decomp
	cmp	eax, 57					; 00000039H
	jg	$LN419@BZ2_decomp
; Line 209
	add	eax, -48				; ffffffd0H
; Line 211
	cmp	BYTE PTR [ebx+40], 0
	mov	DWORD PTR [ebx+36], eax
; Line 212
	push	esi
	je	SHORT $LN418@BZ2_decomp
	mov	edi, DWORD PTR _strm$[ebp]
	imul	eax, 200000				; 00030d40H
	mov	ecx, DWORD PTR [edi+36]
	push	eax
	mov	eax, DWORD PTR [edi+44]
	push	eax
	call	ecx
; Line 215
	mov	edx, DWORD PTR [ebx+36]
	imul	edx, 100000				; 000186a0H
	add	edx, esi
	mov	DWORD PTR [ebx+3152], eax
	mov	eax, DWORD PTR [edi+44]
	mov	ecx, DWORD PTR [edi+36]
	push	esi
	sar	edx, 1
	push	edx
	push	eax
	call	ecx
	add	esp, 24					; 00000018H
; Line 216
	cmp	DWORD PTR [ebx+3152], 0
	mov	DWORD PTR [ebx+3156], eax
	je	SHORT $LN416@BZ2_decomp
	test	eax, eax
	jne	SHORT $LN703@BZ2_decomp
$LN416@BZ2_decomp:
	mov	edi, -3					; fffffffdH
	jmp	$save_state_and_return$81782
$LN418@BZ2_decomp:
; Line 218
	imul	eax, 400000				; 00061a80H
	push	eax
	mov	eax, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR [eax+36]
	push	edx
	call	eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ebx+3148], eax
; Line 219
	test	eax, eax
	jne	SHORT $LN703@BZ2_decomp
	lea	edi, DWORD PTR [eax-3]
	jmp	$save_state_and_return$81782
$LN703@BZ2_decomp:
; Line 222
	mov	ecx, 8
	mov	DWORD PTR [ebx+4], 14			; 0000000eH
	cmp	DWORD PTR [ebx+32], ecx
	jge	SHORT $LN538@BZ2_decomp
	npad	3
$LL412@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	edx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], ecx
	shl	edx, 8
	or	edx, edi
	mov	DWORD PTR [ebx+28], edx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN408@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN408@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], ecx
	jl	SHORT $LL412@BZ2_decomp
$LN538@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
; Line 224
	cmp	al, 23					; 00000017H
	je	$endhdr_2$81847
; Line 225
	cmp	al, 49					; 00000031H
	jne	$LN283@BZ2_decomp
$LN658@BZ2_decomp:
; Line 226
	mov	ecx, 8
	mov	DWORD PTR [ebx+4], 15			; 0000000fH
	cmp	DWORD PTR [ebx+32], ecx
	jge	SHORT $LN540@BZ2_decomp
$LL404@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	edx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], ecx
	shl	edx, 8
	or	edx, edi
	mov	DWORD PTR [ebx+28], edx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN400@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN400@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], ecx
	jl	SHORT $LL404@BZ2_decomp
$LN540@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
; Line 227
	cmp	al, 65					; 00000041H
	jne	$LN283@BZ2_decomp
$LN742@BZ2_decomp:
; Line 228
	mov	ecx, 8
	mov	DWORD PTR [ebx+4], 16			; 00000010H
	cmp	DWORD PTR [ebx+32], ecx
	jge	SHORT $LN542@BZ2_decomp
	npad	4
$LL397@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	edx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], ecx
	shl	edx, 8
	or	edx, edi
	mov	DWORD PTR [ebx+28], edx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN393@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN393@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], ecx
	jl	SHORT $LL397@BZ2_decomp
$LN542@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
; Line 229
	cmp	al, 89					; 00000059H
	jne	$LN283@BZ2_decomp
$LN735@BZ2_decomp:
; Line 230
	mov	ecx, 8
	mov	DWORD PTR [ebx+4], 17			; 00000011H
	cmp	DWORD PTR [ebx+32], ecx
	jge	SHORT $LN544@BZ2_decomp
	npad	6
$LL390@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	edx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], ecx
	shl	edx, 8
	or	edx, edi
	mov	DWORD PTR [ebx+28], edx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN386@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN386@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], ecx
	jl	SHORT $LL390@BZ2_decomp
$LN544@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
; Line 231
	cmp	al, 38					; 00000026H
	jne	$LN283@BZ2_decomp
$LN734@BZ2_decomp:
; Line 232
	mov	ecx, 8
	mov	DWORD PTR [ebx+4], 18			; 00000012H
	cmp	DWORD PTR [ebx+32], ecx
	jge	SHORT $LN546@BZ2_decomp
	npad	6
$LL383@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	edx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], ecx
	shl	edx, 8
	or	edx, edi
	mov	DWORD PTR [ebx+28], edx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN379@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN379@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], ecx
	jl	SHORT $LL383@BZ2_decomp
$LN546@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
; Line 233
	cmp	al, 83					; 00000053H
	jne	$LN283@BZ2_decomp
$LN741@BZ2_decomp:
; Line 234
	mov	ecx, 8
	mov	DWORD PTR [ebx+4], 19			; 00000013H
	cmp	DWORD PTR [ebx+32], ecx
	jge	SHORT $LN708@BZ2_decomp
	npad	6
$LL376@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	edx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], ecx
	shl	edx, 8
	or	edx, edi
	mov	DWORD PTR [ebx+28], edx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN372@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN372@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], ecx
	jl	SHORT $LL376@BZ2_decomp
$LN708@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
; Line 235
	cmp	al, 89					; 00000059H
	jne	$LN283@BZ2_decomp
; Line 237
	add	DWORD PTR [ebx+44], esi
; Line 238
	cmp	DWORD PTR [ebx+48], 2
	mov	eax, DWORD PTR [ebx+44]
	jl	SHORT $LN370@BZ2_decomp
; Line 239
	push	eax
	push	OFFSET $SG81910
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
$LN370@BZ2_decomp:
; Line 241
	mov	DWORD PTR [ebx+3160], 0
$LN369@BZ2_decomp:
; Line 242
	mov	edi, 8
	mov	DWORD PTR [ebx+4], 20			; 00000014H
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN675@BZ2_decomp
	npad	7
$LL368@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN364@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN364@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL368@BZ2_decomp
$LN675@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
; Line 243
	mov	ecx, DWORD PTR [ebx+3160]
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
	movzx	edx, al
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+3160], ecx
	jmp	SHORT $LN363@BZ2_decomp
$LN676@BZ2_decomp:
; Line 242
	mov	edi, 8
$LN363@BZ2_decomp:
; Line 244
	mov	DWORD PTR [ebx+4], 21			; 00000015H
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN552@BZ2_decomp
	npad	8
$LL362@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN358@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN358@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL362@BZ2_decomp
$LN552@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
; Line 245
	mov	ecx, DWORD PTR [ebx+3160]
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
	movzx	edx, al
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+3160], ecx
	jmp	SHORT $LN357@BZ2_decomp
$LN677@BZ2_decomp:
; Line 244
	mov	edi, 8
$LN357@BZ2_decomp:
; Line 246
	mov	DWORD PTR [ebx+4], 22			; 00000016H
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN554@BZ2_decomp
	npad	8
$LL356@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN352@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN352@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL356@BZ2_decomp
$LN554@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
; Line 247
	mov	ecx, DWORD PTR [ebx+3160]
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
	movzx	edx, al
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+3160], ecx
	jmp	SHORT $LN351@BZ2_decomp
$LN678@BZ2_decomp:
; Line 246
	mov	edi, 8
$LN351@BZ2_decomp:
; Line 248
	mov	DWORD PTR [ebx+4], 23			; 00000017H
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN556@BZ2_decomp
	npad	8
$LL350@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN346@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN346@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL350@BZ2_decomp
$LN556@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
; Line 249
	mov	ecx, DWORD PTR [ebx+3160]
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
	movzx	edx, al
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+3160], ecx
	jmp	SHORT $LN345@BZ2_decomp
$LN679@BZ2_decomp:
; Line 248
	mov	edi, 8
$LN345@BZ2_decomp:
; Line 251
	mov	DWORD PTR [ebx+4], 24			; 00000018H
	cmp	DWORD PTR [ebx+32], esi
	jge	SHORT $LN558@BZ2_decomp
	npad	8
$LL344@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN340@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN340@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], esi
	jl	SHORT $LL344@BZ2_decomp
$LN558@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-1]
	shr	eax, cl
; Line 253
	mov	DWORD PTR [ebx+52], 0
	and	eax, esi
	dec	edx
	mov	DWORD PTR [ebx+32], edx
	mov	BYTE PTR [ebx+16], al
	jmp	SHORT $LN339@BZ2_decomp
$LN680@BZ2_decomp:
; Line 251
	mov	edi, 8
$LN339@BZ2_decomp:
; Line 254
	mov	DWORD PTR [ebx+4], 25			; 00000019H
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN560@BZ2_decomp
	npad	7
$LL338@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN334@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN334@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL338@BZ2_decomp
$LN560@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
; Line 255
	mov	ecx, DWORD PTR [ebx+52]
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
	movzx	edx, al
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+52], ecx
	jmp	SHORT $LN333@BZ2_decomp
$LN681@BZ2_decomp:
; Line 254
	mov	edi, 8
$LN333@BZ2_decomp:
; Line 256
	mov	DWORD PTR [ebx+4], 26			; 0000001aH
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN562@BZ2_decomp
$LL332@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN328@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN328@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL332@BZ2_decomp
$LN562@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
; Line 257
	mov	ecx, DWORD PTR [ebx+52]
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
	movzx	edx, al
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+52], ecx
	jmp	SHORT $LN327@BZ2_decomp
$LN682@BZ2_decomp:
; Line 256
	mov	edi, 8
$LN327@BZ2_decomp:
; Line 258
	mov	DWORD PTR [ebx+4], 27			; 0000001bH
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN564@BZ2_decomp
$LL326@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN322@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN322@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL326@BZ2_decomp
$LN564@BZ2_decomp:
	mov	eax, DWORD PTR [ebx+32]
	mov	edx, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [eax-8]
	shr	edx, cl
	add	eax, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], eax
; Line 259
	mov	eax, DWORD PTR [ebx+52]
	and	edx, 255				; 000000ffH
	movzx	ecx, dl
	shl	eax, 8
	or	eax, ecx
	mov	DWORD PTR [ebx+52], eax
; Line 262
	jl	$LN283@BZ2_decomp
; Line 263
	mov	edx, DWORD PTR [ebx+36]
	imul	edx, 100000				; 000186a0H
	add	edx, 10					; 0000000aH
	cmp	eax, edx
; Line 264
	jg	$LN283@BZ2_decomp
; Line 267
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN319@BZ2_decomp
$LN683@BZ2_decomp:
; Line 258
	mov	edi, 8
$LN711@BZ2_decomp:
; Line 268
	mov	DWORD PTR [ebx+4], 28			; 0000001cH
	cmp	DWORD PTR [ebx+32], esi
	jge	SHORT $LN566@BZ2_decomp
	npad	8
$LL315@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN311@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN311@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], esi
	jl	SHORT $LL315@BZ2_decomp
$LN566@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-1]
	shr	eax, cl
	dec	edx
	mov	DWORD PTR [ebx+32], edx
	and	eax, esi
; Line 269
	cmp	al, 1
	mov	eax, DWORD PTR _i$[ebp]
	sete	cl
	mov	BYTE PTR [ebx+eax+3436], cl
	add	eax, esi
	mov	DWORD PTR _i$[ebp], eax
$LN319@BZ2_decomp:
; Line 267
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jl	SHORT $LN711@BZ2_decomp
; Line 274
	push	256					; 00000100H
	lea	eax, DWORD PTR [ebx+3180]
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 276
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN763@BZ2_decomp
$LN684@BZ2_decomp:
; Line 279
	mov	DWORD PTR [ebx+4], 29			; 0000001dH
	cmp	DWORD PTR [ebx+32], esi
	jge	SHORT $LN568@BZ2_decomp
$LL297@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	ecx, DWORD PTR [eax]
	movzx	ecx, BYTE PTR [ecx]
	mov	edx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], 8
	shl	edx, 8
	or	edx, ecx
	mov	DWORD PTR [ebx+28], edx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN293@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN293@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], esi
	jl	SHORT $LL297@BZ2_decomp
$LN568@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-1]
	shr	eax, cl
	dec	edx
	mov	DWORD PTR [ebx+32], edx
	and	eax, esi
; Line 280
	cmp	al, 1
	jne	SHORT $LN712@BZ2_decomp
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	shl	edx, 4
	add	edx, ebx
	mov	BYTE PTR [edx+eax+3180], 1
$LN712@BZ2_decomp:
; Line 278
	add	DWORD PTR _j$[ebp], esi
$LN301@BZ2_decomp:
	cmp	DWORD PTR _j$[ebp], 16			; 00000010H
	jl	SHORT $LN684@BZ2_decomp
$LN299@BZ2_decomp:
; Line 276
	add	DWORD PTR _i$[ebp], esi
$LN763@BZ2_decomp:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, 16					; 00000010H
	jge	SHORT $LN303@BZ2_decomp
; Line 277
	cmp	BYTE PTR [ebx+eax+3436], 0
	je	SHORT $LN299@BZ2_decomp
; Line 278
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN301@BZ2_decomp
$LN303@BZ2_decomp:
; Line 282
	mov	eax, ebx
	call	_makeMaps_d
; Line 283
	mov	eax, DWORD PTR [ebx+3176]
	test	eax, eax
	je	SHORT $LN283@BZ2_decomp
; Line 284
	add	eax, 2
	mov	DWORD PTR _alphaSize$[ebp], eax
$LN290@BZ2_decomp:
; Line 287
	mov	ecx, 3
	mov	DWORD PTR [ebx+4], 30			; 0000001eH
	cmp	DWORD PTR [ebx+32], ecx
	jge	SHORT $LN685@BZ2_decomp
$LL289@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	edx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], 8
	shl	edx, 8
	or	edx, edi
	mov	DWORD PTR [ebx+28], edx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	or	edx, -1
	add	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN285@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN285@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], ecx
	jl	SHORT $LL289@BZ2_decomp
	jmp	SHORT $LN759@BZ2_decomp
$LN685@BZ2_decomp:
	or	edx, -1
$LN759@BZ2_decomp:
	mov	edi, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edi-3]
	shr	eax, cl
	add	edi, -3					; fffffffdH
	mov	DWORD PTR [ebx+32], edi
	and	eax, 7
	mov	DWORD PTR _nGroups$[ebp], eax
; Line 288
	cmp	eax, 2
	jl	SHORT $LN283@BZ2_decomp
	cmp	eax, 6
	jle	SHORT $LN284@BZ2_decomp
$LN283@BZ2_decomp:
	mov	edi, -4					; fffffffcH
	jmp	$save_state_and_return$81782
$LN686@BZ2_decomp:
; Line 287
	or	edx, -1
$LN284@BZ2_decomp:
; Line 289
	mov	ecx, 15					; 0000000fH
	mov	DWORD PTR [ebx+4], 31			; 0000001fH
	cmp	DWORD PTR [ebx+32], ecx
	jge	SHORT $LN573@BZ2_decomp
	npad	9
$LL281@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	edx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], 8
	shl	edx, 8
	or	edx, edi
	mov	DWORD PTR [ebx+28], edx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	or	edx, -1
	add	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN277@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN277@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], ecx
	jl	SHORT $LL281@BZ2_decomp
$LN573@BZ2_decomp:
	mov	edi, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edi-15]
	shr	eax, cl
	add	edi, -15				; fffffff1H
	mov	DWORD PTR [ebx+32], edi
	and	eax, 32767				; 00007fffH
	mov	DWORD PTR _nSelectors$[ebp], eax
; Line 290
	cmp	eax, esi
	jl	$LN283@BZ2_decomp
; Line 291
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN275@BZ2_decomp
$LN687@BZ2_decomp:
; Line 289
	or	edx, -1
$LN272@BZ2_decomp:
; Line 294
	mov	DWORD PTR [ebx+4], 32			; 00000020H
	cmp	DWORD PTR [ebx+32], esi
	jge	SHORT $LN575@BZ2_decomp
	npad	8
$LL269@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], 8
	shl	ecx, 8
	or	ecx, edi
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN265@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN265@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], esi
	jl	SHORT $LL269@BZ2_decomp
$LN575@BZ2_decomp:
	mov	edi, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edi-1]
	shr	eax, cl
	dec	edi
	mov	DWORD PTR [ebx+32], edi
	and	eax, esi
; Line 295
	test	al, al
	jne	SHORT $LN264@BZ2_decomp
; Line 299
	mov	edi, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR _j$[ebp]
	mov	BYTE PTR [ebx+edi+25870], al
	add	edi, esi
	mov	DWORD PTR _i$[ebp], edi
$LN275@BZ2_decomp:
; Line 291
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _nSelectors$[ebp]
	jge	SHORT $LN273@BZ2_decomp
; Line 292
	mov	DWORD PTR _j$[ebp], 0
	jmp	$LN272@BZ2_decomp
$LN264@BZ2_decomp:
; Line 296
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, esi
	mov	DWORD PTR _j$[ebp], eax
; Line 297
	cmp	eax, DWORD PTR _nGroups$[ebp]
	jl	$LN272@BZ2_decomp
; Line 288
	mov	edi, -4					; fffffffcH
	jmp	$save_state_and_return$81782
$LN273@BZ2_decomp:
; Line 305
	mov	edi, DWORD PTR _nGroups$[ebp]
	xor	al, al
	test	edi, edi
	jle	SHORT $LN260@BZ2_decomp
	xor	ecx, ecx
	npad	3
$LL262@BZ2_decomp:
	mov	BYTE PTR _pos$82096[ebp+ecx], al
	inc	al
	movzx	ecx, al
	cmp	ecx, edi
	jl	SHORT $LL262@BZ2_decomp
$LN260@BZ2_decomp:
; Line 307
	xor	ecx, ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR _nSelectors$[ebp], ecx
	jle	SHORT $LN760@BZ2_decomp
	npad	9
$LL259@BZ2_decomp:
; Line 308
	mov	al, BYTE PTR [ebx+ecx+25870]
; Line 309
	movzx	edi, al
	mov	dl, BYTE PTR _pos$82096[ebp+edi]
	lea	edi, DWORD PTR _pos$82096[ebp+edi]
	mov	BYTE PTR _tmp$82097[ebp], dl
; Line 310
	test	al, al
	je	SHORT $LN255@BZ2_decomp
	npad	7
$LL256@BZ2_decomp:
	mov	dl, BYTE PTR [edi-1]
	mov	BYTE PTR [edi], dl
	sub	edi, esi
	dec	al
	jne	SHORT $LL256@BZ2_decomp
	mov	dl, BYTE PTR _tmp$82097[ebp]
$LN255@BZ2_decomp:
; Line 312
	mov	BYTE PTR [ebx+ecx+7868], dl
	add	ecx, esi
	mov	BYTE PTR _pos$82096[ebp], dl
	cmp	ecx, DWORD PTR _nSelectors$[ebp]
	jl	SHORT $LL259@BZ2_decomp
; Line 307
	mov	DWORD PTR _i$[ebp], ecx
	or	edx, -1
$LN760@BZ2_decomp:
; Line 317
	mov	DWORD PTR _t$[ebp], 0
	jmp	$LN254@BZ2_decomp
$LN688@BZ2_decomp:
; Line 294
	or	edx, -1
$LN232@BZ2_decomp:
; Line 324
	mov	DWORD PTR [ebx+4], 35			; 00000023H
	cmp	DWORD PTR [ebx+32], esi
	jge	SHORT $LN578@BZ2_decomp
$LL230@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], 8
	shl	ecx, 8
	or	ecx, edi
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN226@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN226@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], esi
	jl	SHORT $LL230@BZ2_decomp
$LN578@BZ2_decomp:
	mov	edi, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edi-1]
	shr	eax, cl
	dec	edi
	mov	DWORD PTR [ebx+32], edi
	and	eax, esi
; Line 325
	test	al, al
	jne	SHORT $LN225@BZ2_decomp
	add	DWORD PTR _curr$[ebp], esi
	jmp	SHORT $LN242@BZ2_decomp
$LN225@BZ2_decomp:
	sub	DWORD PTR _curr$[ebp], esi
$LN242@BZ2_decomp:
; Line 321
	mov	eax, DWORD PTR _curr$[ebp]
	cmp	eax, esi
	jl	$LN283@BZ2_decomp
	cmp	eax, 20					; 00000014H
	jg	$LN283@BZ2_decomp
	jmp	SHORT $LN240@BZ2_decomp
$LN689@BZ2_decomp:
	or	edx, -1
$LN240@BZ2_decomp:
; Line 322
	mov	DWORD PTR [ebx+4], 34			; 00000022H
	cmp	DWORD PTR [ebx+32], esi
	jge	SHORT $LN580@BZ2_decomp
	npad	2
$LL237@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], 8
	shl	ecx, 8
	or	ecx, edi
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN233@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN233@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], esi
	jl	SHORT $LL237@BZ2_decomp
$LN580@BZ2_decomp:
	mov	edi, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edi-1]
	shr	eax, cl
	dec	edi
	mov	DWORD PTR [ebx+32], edi
	and	eax, esi
; Line 323
	test	al, al
	jne	$LN232@BZ2_decomp
; Line 327
	mov	eax, DWORD PTR _t$[ebp]
	mov	edi, DWORD PTR _i$[ebp]
	imul	eax, 258				; 00000102H
	mov	cl, BYTE PTR _curr$[ebp]
	add	eax, ebx
	mov	BYTE PTR [eax+edi+43872], cl
	add	edi, esi
	mov	DWORD PTR _i$[ebp], edi
$LN245@BZ2_decomp:
; Line 319
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _alphaSize$[ebp]
	jl	$LN242@BZ2_decomp
; Line 317
	add	DWORD PTR _t$[ebp], esi
$LN254@BZ2_decomp:
	mov	ecx, DWORD PTR _t$[ebp]
	cmp	ecx, DWORD PTR _nGroups$[ebp]
	jl	$LN251@BZ2_decomp
; Line 332
	mov	eax, DWORD PTR _nGroups$[ebp]
	mov	DWORD PTR _t$[ebp], 0
	test	eax, eax
	jle	$LN221@BZ2_decomp
	lea	edx, DWORD PTR [ebx+63996]
	lea	ecx, DWORD PTR [ebx+43872]
	mov	DWORD PTR tv6932[ebp], edx
	lea	edi, DWORD PTR [ebx+51612]
	mov	DWORD PTR tv6940[ebp], ecx
	mov	DWORD PTR tv2841[ebp], eax
	mov	DWORD PTR _t$[ebp], eax
	npad	3
$LL691@BZ2_decomp:
; Line 335
	xor	eax, eax
	xor	ecx, ecx
	mov	DWORD PTR _minLen$[ebp], 32		; 00000020H
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR _alphaSize$[ebp], eax
	jle	SHORT $LN218@BZ2_decomp
$LL707@BZ2_decomp:
; Line 336
	mov	edx, DWORD PTR tv6940[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	cmp	eax, ecx
	jle	SHORT $LN217@BZ2_decomp
	mov	ecx, eax
$LN217@BZ2_decomp:
; Line 337
	cmp	eax, DWORD PTR _minLen$[ebp]
	jge	SHORT $LN219@BZ2_decomp
	mov	DWORD PTR _minLen$[ebp], eax
$LN219@BZ2_decomp:
; Line 335
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, esi
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _alphaSize$[ebp]
	jl	SHORT $LL707@BZ2_decomp
$LN218@BZ2_decomp:
; Line 345
	mov	eax, DWORD PTR _alphaSize$[ebp]
	mov	edx, DWORD PTR tv6940[ebp]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _minLen$[ebp]
	push	ecx
	push	edx
	lea	eax, DWORD PTR [edi+6192]
	push	eax
	lea	ecx, DWORD PTR [edi-6192]
	push	edi
	push	ecx
	call	_BZ2_hbCreateDecodeTables
; Line 346
	mov	eax, DWORD PTR tv6932[ebp]
	mov	edx, DWORD PTR _minLen$[ebp]
	add	DWORD PTR tv6940[ebp], 258		; 00000102H
	mov	DWORD PTR [eax], edx
	add	eax, 4
	add	esp, 28					; 0000001cH
	add	edi, 1032				; 00000408H
	sub	DWORD PTR tv2841[ebp], esi
	mov	DWORD PTR tv6932[ebp], eax
	jne	SHORT $LL691@BZ2_decomp
$LN221@BZ2_decomp:
; Line 351
	mov	eax, DWORD PTR [ebx+3176]
	add	eax, esi
	mov	DWORD PTR _EOB$[ebp], eax
; Line 352
	mov	eax, DWORD PTR [ebx+36]
	imul	eax, 100000				; 000186a0H
	mov	DWORD PTR _nblockMAX$[ebp], eax
; Line 356
	xor	eax, eax
	lea	edi, DWORD PTR [ebx+64]
	mov	ecx, 256				; 00000100H
	rep stosd
; Line 362
	mov	ecx, 15					; 0000000fH
	lea	eax, DWORD PTR [ebx+7864]
	mov	DWORD PTR _groupPos$[ebp], 0
	mov	DWORD PTR _i$[ebp], 256			; 00000100H
	mov	edi, 4095				; 00000fffH
	mov	DWORD PTR _ii$82167[ebp], ecx
	mov	DWORD PTR tv7029[ebp], eax
$LL706@BZ2_decomp:
; Line 363
	mov	eax, 15					; 0000000fH
	shl	cl, 4
	npad	8
$LL209@BZ2_decomp:
; Line 364
	lea	edx, DWORD PTR [ecx+eax]
	mov	BYTE PTR [edi+ebx+3708], dl
; Line 365
	sub	edi, esi
	sub	eax, esi
	jns	SHORT $LL209@BZ2_decomp
; Line 367
	mov	eax, DWORD PTR tv7029[ebp]
	lea	ecx, DWORD PTR [edi+1]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _ii$82167[ebp]
	sub	ecx, esi
	sub	eax, 4
	mov	DWORD PTR _ii$82167[ebp], ecx
	mov	DWORD PTR tv7029[ebp], eax
	test	ecx, ecx
	jns	SHORT $LL706@BZ2_decomp
; Line 373
	cmp	DWORD PTR _nSelectors$[ebp], 0
	mov	DWORD PTR _nblock$[ebp], 0
	mov	DWORD PTR _groupNo$[ebp], 0
	jle	$LN283@BZ2_decomp
	movzx	eax, BYTE PTR [ebx+7868]
	mov	ecx, DWORD PTR [ebx+eax*4+63996]
	mov	DWORD PTR _gSel$[ebp], eax
	imul	eax, 1032				; 00000408H
	add	eax, ebx
	lea	edx, DWORD PTR [eax+45420]
	mov	DWORD PTR _gLimit$[ebp], edx
	lea	edx, DWORD PTR [eax+57804]
	add	eax, 51612				; 0000c99cH
	mov	DWORD PTR _gMinlen$[ebp], ecx
	mov	DWORD PTR _gPerm$[ebp], edx
	mov	DWORD PTR _gBase$[ebp], eax
	mov	DWORD PTR _groupPos$[ebp], 49		; 00000031H
	mov	DWORD PTR _zn$[ebp], ecx
$LN204@BZ2_decomp:
	mov	edi, DWORD PTR _zn$[ebp]
	mov	DWORD PTR [ebx+4], 36			; 00000024H
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN692@BZ2_decomp
$LL203@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], 8
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN199@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN199@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL203@BZ2_decomp
$LN692@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	sub	edx, edi
	mov	ecx, edx
	shr	eax, cl
	mov	ecx, edi
	mov	edi, esi
	shl	edi, cl
	mov	DWORD PTR [ebx+32], edx
	sub	edi, esi
	and	eax, edi
	mov	DWORD PTR _zvec$[ebp], eax
	or	edi, -1
	jmp	$LN764@BZ2_decomp
$LN690@BZ2_decomp:
; Line 317
	or	edx, -1
$LN251@BZ2_decomp:
; Line 318
	cmp	DWORD PTR [ebx+32], 5
	mov	DWORD PTR [ebx+4], 33			; 00000021H
	jge	SHORT $LN582@BZ2_decomp
$LL250@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], 8
	shl	ecx, 8
	or	ecx, edi
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN246@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN246@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], 5
	jl	SHORT $LL250@BZ2_decomp
$LN582@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-5]
	shr	eax, cl
	add	edx, -5					; fffffffbH
	mov	DWORD PTR [ebx+32], edx
; Line 319
	mov	DWORD PTR _i$[ebp], 0
	and	eax, 31					; 0000001fH
	mov	DWORD PTR _curr$[ebp], eax
	or	edx, -1
	jmp	$LN245@BZ2_decomp
$LN693@BZ2_decomp:
; Line 373
	or	edi, -1
$LN194@BZ2_decomp:
	mov	DWORD PTR [ebx+4], 37			; 00000025H
	cmp	DWORD PTR [ebx+32], esi
	jge	SHORT $LN588@BZ2_decomp
$LL193@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], 8
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+4], edi
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN189@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN189@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], esi
	jl	SHORT $LL193@BZ2_decomp
$LN588@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-1]
	shr	eax, cl
	mov	ecx, DWORD PTR _zvec$[ebp]
	dec	edx
	mov	DWORD PTR [ebx+32], edx
	and	eax, esi
	lea	edx, DWORD PTR [ecx+ecx]
	or	edx, eax
	mov	DWORD PTR _zj$[ebp], eax
	mov	DWORD PTR _zvec$[ebp], edx
	mov	eax, edx
$LN764@BZ2_decomp:
	mov	ecx, DWORD PTR _zn$[ebp]
	cmp	ecx, 20					; 00000014H
	jg	$LN283@BZ2_decomp
	mov	edx, DWORD PTR _gLimit$[ebp]
	cmp	eax, DWORD PTR [edx+ecx*4]
	jle	SHORT $LN591@BZ2_decomp
	add	ecx, esi
	mov	DWORD PTR _zn$[ebp], ecx
	jmp	$LN194@BZ2_decomp
$LN591@BZ2_decomp:
	mov	edx, DWORD PTR _gBase$[ebp]
	sub	eax, DWORD PTR [edx+ecx*4]
	js	SHORT $LN187@BZ2_decomp
	cmp	eax, 258				; 00000102H
	jl	$LN765@BZ2_decomp
$LN187@BZ2_decomp:
	mov	edi, -4					; fffffffcH
	jmp	$save_state_and_return$81782
$LN694@BZ2_decomp:
; Line 476
	mov	DWORD PTR [ebx+4], 41			; 00000029H
	cmp	DWORD PTR [ebx+32], esi
	jge	SHORT $LN592@BZ2_decomp
	npad	9
$LL113@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], 8
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN109@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN109@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], esi
	jl	SHORT $LL113@BZ2_decomp
$LN592@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-1]
	shr	eax, cl
	mov	ecx, DWORD PTR _zvec$[ebp]
	dec	edx
	mov	DWORD PTR [ebx+32], edx
	and	eax, esi
	lea	edx, DWORD PTR [ecx+ecx]
	mov	DWORD PTR _zj$[ebp], eax
	or	eax, edx
	mov	DWORD PTR _zvec$[ebp], eax
$LN118@BZ2_decomp:
	mov	ecx, DWORD PTR _zn$[ebp]
	cmp	ecx, 20					; 00000014H
	jg	$LN283@BZ2_decomp
	mov	edx, DWORD PTR _gLimit$[ebp]
	cmp	eax, DWORD PTR [edx+ecx*4]
	jg	$LN115@BZ2_decomp
	mov	edx, DWORD PTR _gBase$[ebp]
	sub	eax, DWORD PTR [edx+ecx*4]
	js	$LN283@BZ2_decomp
	cmp	eax, 258				; 00000102H
	jge	$LN283@BZ2_decomp
$LN765@BZ2_decomp:
	mov	ecx, DWORD PTR _gPerm$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _nextSym$[ebp], edx
$LN186@BZ2_decomp:
; Line 377
	mov	edi, DWORD PTR _nextSym$[ebp]
	cmp	edi, DWORD PTR _EOB$[ebp]
	je	$LN605@BZ2_decomp
; Line 379
	test	edi, edi
	je	SHORT $LN665@BZ2_decomp
	cmp	edi, 1
	jne	$LN183@BZ2_decomp
$LN665@BZ2_decomp:
; Line 381
	mov	DWORD PTR _es$[ebp], -1
; Line 382
	mov	DWORD PTR _N$[ebp], 1
$LN181@BZ2_decomp:
; Line 384
	mov	eax, DWORD PTR _nextSym$[ebp]
	test	eax, eax
	jne	SHORT $LN178@BZ2_decomp
	mov	eax, DWORD PTR _N$[ebp]
	add	DWORD PTR _es$[ebp], eax
	jmp	SHORT $LN667@BZ2_decomp
$LN178@BZ2_decomp:
; Line 385
	cmp	eax, 1
	jne	SHORT $LN667@BZ2_decomp
	mov	ecx, DWORD PTR _es$[ebp]
	mov	edx, DWORD PTR _N$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _es$[ebp], eax
$LN667@BZ2_decomp:
; Line 386
	mov	ecx, DWORD PTR _N$[ebp]
	lea	edx, DWORD PTR [ecx+ecx]
; Line 387
	mov	ecx, DWORD PTR _groupPos$[ebp]
	mov	DWORD PTR _N$[ebp], edx
	test	ecx, ecx
	jne	SHORT $LN668@BZ2_decomp
	mov	eax, DWORD PTR _groupNo$[ebp]
	inc	eax
	mov	DWORD PTR _groupNo$[ebp], eax
	cmp	eax, DWORD PTR _nSelectors$[ebp]
	jge	$LN283@BZ2_decomp
	movzx	eax, BYTE PTR [ebx+eax+7868]
	mov	edx, DWORD PTR [ebx+eax*4+63996]
	mov	DWORD PTR _gSel$[ebp], eax
	imul	eax, 1032				; 00000408H
	add	eax, ebx
	mov	DWORD PTR _gMinlen$[ebp], edx
	lea	edx, DWORD PTR [eax+45420]
	mov	DWORD PTR _gLimit$[ebp], edx
	lea	edx, DWORD PTR [eax+57804]
	add	eax, 51612				; 0000c99cH
	mov	ecx, 50					; 00000032H
	mov	DWORD PTR _gPerm$[ebp], edx
	mov	DWORD PTR _gBase$[ebp], eax
$LN668@BZ2_decomp:
	mov	eax, DWORD PTR _gMinlen$[ebp]
	dec	ecx
	mov	DWORD PTR _groupPos$[ebp], ecx
	mov	DWORD PTR _zn$[ebp], eax
	mov	esi, 1
$LN173@BZ2_decomp:
	mov	ecx, DWORD PTR [ebx+32]
	mov	DWORD PTR [ebx+4], 38			; 00000026H
	cmp	ecx, DWORD PTR _zn$[ebp]
	jge	SHORT $LN594@BZ2_decomp
	mov	ecx, 8
	npad	7
$LL172@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	edx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], ecx
	shl	edx, 8
	or	edx, edi
	mov	DWORD PTR [ebx+28], edx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN168@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN168@BZ2_decomp:
	mov	eax, DWORD PTR _zn$[ebp]
	cmp	DWORD PTR [ebx+32], eax
	jl	SHORT $LL172@BZ2_decomp
$LN594@BZ2_decomp:
	mov	edi, DWORD PTR _zn$[ebp]
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	sub	edx, edi
	mov	ecx, edx
	shr	eax, cl
	mov	ecx, edi
	mov	edi, esi
	shl	edi, cl
	mov	DWORD PTR tv6757[ebp], esi
	mov	DWORD PTR [ebx+32], edx
	sub	edi, esi
	and	eax, edi
$LN766@BZ2_decomp:
	mov	ecx, DWORD PTR _zn$[ebp]
	mov	DWORD PTR _zvec$[ebp], eax
	cmp	ecx, 20					; 00000014H
	jg	$LN283@BZ2_decomp
	mov	edx, DWORD PTR _gLimit$[ebp]
	cmp	eax, DWORD PTR [edx+ecx*4]
	jle	SHORT $LN599@BZ2_decomp
	add	ecx, esi
	mov	DWORD PTR _zn$[ebp], ecx
$LN163@BZ2_decomp:
	mov	DWORD PTR [ebx+4], 39			; 00000027H
	cmp	DWORD PTR [ebx+32], esi
	jge	SHORT $LN596@BZ2_decomp
	mov	ecx, 8
	npad	6
$LL162@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	edx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], ecx
	shl	edx, 8
	or	edx, edi
	mov	DWORD PTR [ebx+28], edx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN158@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN158@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], esi
	jl	SHORT $LL162@BZ2_decomp
$LN596@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-1]
	shr	eax, cl
	mov	ecx, DWORD PTR _zvec$[ebp]
	dec	edx
	mov	DWORD PTR [ebx+32], edx
	and	eax, esi
	lea	edx, DWORD PTR [ecx+ecx]
	mov	DWORD PTR _zj$[ebp], eax
	or	eax, edx
	jmp	$LN766@BZ2_decomp
$LN599@BZ2_decomp:
	mov	edx, DWORD PTR _gBase$[ebp]
	sub	eax, DWORD PTR [edx+ecx*4]
	js	$LN283@BZ2_decomp
	cmp	eax, 258				; 00000102H
	jge	$LN283@BZ2_decomp
	mov	ecx, DWORD PTR _gPerm$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _nextSym$[ebp], eax
; Line 389
	test	eax, eax
	je	$LN181@BZ2_decomp
	cmp	eax, esi
	je	$LN181@BZ2_decomp
; Line 392
	mov	eax, DWORD PTR [ebx+7804]
	movzx	ecx, BYTE PTR [eax+ebx+3708]
	mov	cl, BYTE PTR [ecx+ebx+3452]
	mov	edx, DWORD PTR _es$[ebp]
	add	edx, esi
; Line 393
	movzx	eax, cl
	add	DWORD PTR [ebx+eax*4+64], edx
; Line 395
	cmp	BYTE PTR [ebx+40], 0
	mov	DWORD PTR _es$[ebp], edx
	je	SHORT $LN507@BZ2_decomp
; Line 396
	test	edx, edx
	jle	$LN186@BZ2_decomp
	mov	eax, DWORD PTR _nblock$[ebp]
$LL154@BZ2_decomp:
; Line 397
	cmp	eax, DWORD PTR _nblockMAX$[ebp]
	jge	$LN283@BZ2_decomp
; Line 398
	mov	edi, DWORD PTR [ebx+3152]
	movzx	edx, cl
	mov	WORD PTR [edi+eax*2], dx
; Line 400
	mov	edx, DWORD PTR _es$[ebp]
	sub	edx, esi
	add	eax, esi
	mov	DWORD PTR _nblock$[ebp], eax
	mov	DWORD PTR _es$[ebp], edx
	test	edx, edx
	jg	SHORT $LL154@BZ2_decomp
; Line 402
	jmp	$LN186@BZ2_decomp
$LN507@BZ2_decomp:
; Line 403
	test	edx, edx
	jle	$LN186@BZ2_decomp
	mov	ecx, DWORD PTR _nblock$[ebp]
	npad	8
$LL150@BZ2_decomp:
; Line 404
	cmp	ecx, DWORD PTR _nblockMAX$[ebp]
	jge	$LN283@BZ2_decomp
; Line 405
	mov	edi, DWORD PTR [ebx+3148]
; Line 407
	sub	edx, esi
	mov	DWORD PTR [edi+ecx*4], eax
	add	ecx, esi
	mov	DWORD PTR _nblock$[ebp], ecx
	mov	DWORD PTR _es$[ebp], edx
	test	edx, edx
	jg	SHORT $LL150@BZ2_decomp
; Line 208
	jmp	$LN186@BZ2_decomp
$LN183@BZ2_decomp:
; Line 414
	mov	eax, DWORD PTR _nblock$[ebp]
	cmp	eax, DWORD PTR _nblockMAX$[ebp]
	jge	$LN283@BZ2_decomp
; Line 420
	dec	edi
; Line 422
	cmp	edi, 16					; 00000010H
	jae	$LN145@BZ2_decomp
; Line 424
	mov	eax, DWORD PTR [ebx+7804]
; Line 425
	lea	esi, DWORD PTR [ebx+eax]
	mov	dl, BYTE PTR [edi+esi+3708]
	mov	DWORD PTR tv5516[ebp], esi
	mov	BYTE PTR _uc$[ebp], dl
; Line 426
	cmp	edi, 3
	jbe	$LN499@BZ2_decomp
; Line 428
	lea	ecx, DWORD PTR [ebx+3707]
	mov	edx, ebx
	sub	edx, ecx
	add	edx, 3708				; 00000e7cH
	mov	DWORD PTR tv7114[ebp], edx
	mov	edx, ebx
	sub	edx, ecx
	add	edx, 3706				; 00000e7aH
	mov	DWORD PTR tv7118[ebp], edx
	mov	edx, ebx
	sub	edx, ecx
	add	edx, 3704				; 00000e78H
	mov	DWORD PTR tv7124[ebp], edx
	mov	edx, ebx
	sub	edx, ecx
	add	eax, edi
	lea	esi, DWORD PTR [edi-4]
	add	edx, 3705				; 00000e79H
	shr	esi, 2
	add	eax, ecx
	mov	DWORD PTR tv7129[ebp], edx
	inc	esi
	npad	1
$LL144@BZ2_decomp:
	mov	cl, BYTE PTR [eax]
	mov	edx, DWORD PTR tv7114[ebp]
	mov	BYTE PTR [edx+eax], cl
; Line 429
	mov	ecx, DWORD PTR tv7118[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	BYTE PTR [eax], dl
; Line 430
	mov	edx, DWORD PTR tv7129[ebp]
	movzx	edx, BYTE PTR [edx+eax]
	mov	BYTE PTR [ecx+eax], dl
; Line 431
	mov	ecx, DWORD PTR tv7124[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	ecx, DWORD PTR tv7129[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 432
	sub	edi, 4
	sub	eax, 4
	dec	esi
	jne	SHORT $LL144@BZ2_decomp
; Line 426
	mov	esi, DWORD PTR tv5516[ebp]
	mov	dl, BYTE PTR _uc$[ebp]
$LN499@BZ2_decomp:
; Line 434
	test	edi, edi
	je	SHORT $LN141@BZ2_decomp
	lea	eax, DWORD PTR [edi+esi+3708]
$LL142@BZ2_decomp:
; Line 435
	mov	cl, BYTE PTR [eax-1]
	mov	BYTE PTR [eax], cl
	dec	eax
	dec	edi
	jne	SHORT $LL142@BZ2_decomp
$LN141@BZ2_decomp:
; Line 437
	mov	BYTE PTR [esi+3708], dl
; Line 438
	jmp	$LN661@BZ2_decomp
$LN145@BZ2_decomp:
; Line 440
	mov	esi, edi
	shr	esi, 4
; Line 442
	mov	ecx, DWORD PTR [ebx+esi*4+7804]
	lea	eax, DWORD PTR [ebx+esi*4+7804]
	and	edi, 15					; 0000000fH
	add	edi, ecx
; Line 443
	mov	dl, BYTE PTR [ebx+edi+3708]
	mov	BYTE PTR _uc$[ebp], dl
; Line 444
	cmp	edi, ecx
	jle	SHORT $LN700@BZ2_decomp
	npad	4
$LL139@BZ2_decomp:
; Line 445
	mov	cl, BYTE PTR [edi+ebx+3707]
	mov	BYTE PTR [edi+ebx+3708], cl
	dec	edi
	cmp	edi, DWORD PTR [eax]
	jg	SHORT $LL139@BZ2_decomp
$LN700@BZ2_decomp:
; Line 447
	inc	DWORD PTR [eax]
; Line 448
	test	esi, esi
	jle	SHORT $LN666@BZ2_decomp
	npad	7
$LL137@BZ2_decomp:
; Line 449
	dec	DWORD PTR [eax]
; Line 451
	mov	ecx, DWORD PTR [eax-4]
	mov	edi, DWORD PTR [eax]
	mov	cl, BYTE PTR [ecx+ebx+3723]
; Line 452
	dec	esi
	sub	eax, 4
	mov	BYTE PTR [ebx+edi+3708], cl
	test	esi, esi
	jg	SHORT $LL137@BZ2_decomp
$LN666@BZ2_decomp:
; Line 454
	dec	DWORD PTR [ebx+7804]
	mov	eax, DWORD PTR [ebx+7804]
; Line 455
	mov	BYTE PTR [ebx+eax+3708], dl
; Line 456
	cmp	DWORD PTR [ebx+7804], 0
	jne	$LN661@BZ2_decomp
; Line 457
	mov	edi, 4095				; 00000fffH
; Line 458
	mov	DWORD PTR _ii$82266[ebp], 15		; 0000000fH
	lea	esi, DWORD PTR [ebx+7864]
	npad	1
$LL660@BZ2_decomp:
; Line 459
	mov	eax, 15					; 0000000fH
	npad	11
$LL131@BZ2_decomp:
; Line 460
	mov	ecx, DWORD PTR [esi]
	lea	edx, DWORD PTR [ebx+eax]
	movzx	edx, BYTE PTR [edx+ecx+3708]
	mov	BYTE PTR [edi+ebx+3708], dl
	mov	edx, DWORD PTR [esi]
	lea	ecx, DWORD PTR [ebx+eax]
	movzx	ecx, BYTE PTR [ecx+edx+3707]
	mov	BYTE PTR [edi+ebx+3707], cl
	mov	ecx, DWORD PTR [esi]
	lea	edx, DWORD PTR [ebx+eax]
	movzx	edx, BYTE PTR [edx+ecx+3706]
	mov	BYTE PTR [edi+ebx+3706], dl
	mov	edx, DWORD PTR [esi]
	lea	ecx, DWORD PTR [ebx+eax]
	movzx	ecx, BYTE PTR [ecx+edx+3705]
	mov	BYTE PTR [edi+ebx+3705], cl
	sub	edi, 4
	sub	eax, 4
	jns	SHORT $LL131@BZ2_decomp
; Line 463
	mov	eax, DWORD PTR _ii$82266[ebp]
	lea	edx, DWORD PTR [edi+1]
	dec	eax
	mov	DWORD PTR [esi], edx
	sub	esi, 4
	mov	DWORD PTR _ii$82266[ebp], eax
	test	eax, eax
	jns	SHORT $LL660@BZ2_decomp
; Line 458
	mov	dl, BYTE PTR _uc$[ebp]
$LN661@BZ2_decomp:
; Line 470
	movzx	eax, dl
	movzx	ecx, BYTE PTR [eax+ebx+3452]
	inc	DWORD PTR [ebx+ecx*4+64]
; Line 471
	cmp	BYTE PTR [ebx+40], 0
; Line 472
	movzx	edx, BYTE PTR [eax+ebx+3452]
	lea	eax, DWORD PTR [eax+ebx+3452]
	lea	ecx, DWORD PTR [ebx+ecx*4+64]
	mov	ecx, DWORD PTR _nblock$[ebp]
	je	SHORT $LN128@BZ2_decomp
	mov	eax, DWORD PTR [ebx+3152]
	mov	WORD PTR [eax+ecx*2], dx
	jmp	SHORT $LN127@BZ2_decomp
$LN128@BZ2_decomp:
; Line 473
	mov	eax, DWORD PTR [ebx+3148]
	mov	DWORD PTR [eax+ecx*4], edx
$LN127@BZ2_decomp:
; Line 476
	mov	eax, DWORD PTR _groupPos$[ebp]
	inc	DWORD PTR _nblock$[ebp]
	test	eax, eax
	jne	SHORT $LN662@BZ2_decomp
	mov	ecx, DWORD PTR _groupNo$[ebp]
	inc	ecx
	mov	DWORD PTR _groupNo$[ebp], ecx
	cmp	ecx, DWORD PTR _nSelectors$[ebp]
	jge	$LN283@BZ2_decomp
	movzx	ecx, BYTE PTR [ebx+ecx+7868]
	mov	edx, DWORD PTR [ebx+ecx*4+63996]
	mov	DWORD PTR _gSel$[ebp], ecx
	imul	ecx, 1032				; 00000408H
	add	ecx, ebx
	mov	DWORD PTR _gMinlen$[ebp], edx
	lea	edx, DWORD PTR [ecx+45420]
	mov	DWORD PTR _gLimit$[ebp], edx
	lea	edx, DWORD PTR [ecx+57804]
	add	ecx, 51612				; 0000c99cH
	mov	eax, 50					; 00000032H
	mov	DWORD PTR _gPerm$[ebp], edx
	mov	DWORD PTR _gBase$[ebp], ecx
$LN662@BZ2_decomp:
	dec	eax
	mov	DWORD PTR _groupPos$[ebp], eax
	mov	eax, DWORD PTR _gMinlen$[ebp]
	mov	DWORD PTR _zn$[ebp], eax
	mov	esi, 1
$LN124@BZ2_decomp:
	mov	edi, DWORD PTR _zn$[ebp]
	mov	DWORD PTR [ebx+4], 40			; 00000028H
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN695@BZ2_decomp
$LL123@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], 8
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN119@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN119@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL123@BZ2_decomp
$LN695@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	sub	edx, edi
	mov	ecx, edx
	shr	eax, cl
	mov	ecx, edi
	mov	edi, esi
	shl	edi, cl
	mov	DWORD PTR tv6755[ebp], esi
	mov	DWORD PTR [ebx+32], edx
	sub	edi, esi
	and	eax, edi
	mov	DWORD PTR _zvec$[ebp], eax
	jmp	$LN118@BZ2_decomp
$LN115@BZ2_decomp:
	add	ecx, esi
	mov	DWORD PTR _zn$[ebp], ecx
	jmp	$LN694@BZ2_decomp
$LN605@BZ2_decomp:
; Line 484
	mov	eax, DWORD PTR [ebx+52]
	test	eax, eax
	js	$LN283@BZ2_decomp
	cmp	eax, DWORD PTR _nblock$[ebp]
	jge	$LN283@BZ2_decomp
; Line 488
	lea	eax, DWORD PTR [ebx+1096]
	lea	esi, DWORD PTR [ebx+64]
; Line 489
	mov	ecx, 256				; 00000100H
	mov	edi, eax
	mov	DWORD PTR [ebx+1092], 0
	rep movsd
; Line 490
	mov	ecx, 256				; 00000100H
$LL101@BZ2_decomp:
	mov	edx, DWORD PTR [eax-4]
	add	DWORD PTR [eax], edx
	add	eax, 4
	dec	ecx
	jne	SHORT $LL101@BZ2_decomp
; Line 491
	mov	edx, DWORD PTR _nblock$[ebp]
	xor	eax, eax
	mov	DWORD PTR _i$[ebp], eax
	lea	ecx, DWORD PTR [ebx+1092]
	xor	edi, edi
	npad	3
$LL98@BZ2_decomp:
; Line 492
	mov	esi, DWORD PTR [ecx]
	cmp	esi, edi
	jl	$LN762@BZ2_decomp
	cmp	esi, edx
	jg	$LN762@BZ2_decomp
; Line 491
	inc	eax
	add	ecx, 4
	cmp	eax, 256				; 00000100H
	jle	SHORT $LL98@BZ2_decomp
	mov	DWORD PTR _i$[ebp], eax
; Line 501
	mov	eax, 2
	mov	DWORD PTR [ebx+12], edi
	mov	BYTE PTR [ebx+8], 0
	mov	DWORD PTR [ebx+3168], -1
	mov	DWORD PTR [ebx+4], eax
; Line 502
	cmp	DWORD PTR [ebx+48], eax
	jl	SHORT $LN93@BZ2_decomp
	push	OFFSET $SG82345
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	mov	edx, DWORD PTR _nblock$[ebp]
	add	esp, 8
	xor	edi, edi
$LN93@BZ2_decomp:
; Line 504
	cmp	BYTE PTR [ebx+40], 0
	je	$LN92@BZ2_decomp
; Line 507
	lea	edi, DWORD PTR [ebx+2120]
	mov	ecx, 257				; 00000101H
	lea	esi, DWORD PTR [ebx+1092]
	rep movsd
; Line 510
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN86@BZ2_decomp
	npad	2
$LL88@BZ2_decomp:
	mov	eax, DWORD PTR [ebx+3152]
; Line 512
	movzx	esi, BYTE PTR [eax+ecx*2]
	mov	di, WORD PTR [ebx+esi*4+2120]
	lea	eax, DWORD PTR [eax+ecx*2]
	lea	esi, DWORD PTR [ebx+esi*4+2120]
	mov	WORD PTR [eax], di
	test	cl, 1
	jne	SHORT $LN85@BZ2_decomp
	mov	edi, DWORD PTR [ebx+3156]
	mov	eax, ecx
	sar	eax, 1
	add	edi, eax
	mov	al, BYTE PTR [edi]
	and	al, 240					; 000000f0H
	or	al, BYTE PTR [esi+2]
	mov	BYTE PTR [edi], al
	jmp	SHORT $LN84@BZ2_decomp
$LN762@BZ2_decomp:
; Line 491
	mov	DWORD PTR _i$[ebp], eax
; Line 494
	mov	edi, -4					; fffffffcH
	jmp	$save_state_and_return$81782
$LN85@BZ2_decomp:
; Line 512
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi]
	mov	edi, ecx
	sar	edi, 1
	add	edi, DWORD PTR [ebx+3156]
	sar	edx, 12					; 0000000cH
	xor	dl, BYTE PTR [edi]
	sar	eax, 12					; 0000000cH
	and	dl, 15					; 0000000fH
	xor	dl, al
	mov	BYTE PTR [edi], dl
	mov	edx, DWORD PTR _nblock$[ebp]
$LN84@BZ2_decomp:
; Line 513
	inc	DWORD PTR [esi]
	inc	ecx
	cmp	ecx, edx
	jl	SHORT $LL88@BZ2_decomp
$LN86@BZ2_decomp:
; Line 517
	mov	edx, DWORD PTR [ebx+52]
; Line 518
	mov	eax, DWORD PTR [ebx+3156]
	mov	ecx, edx
	sar	ecx, 1
	movzx	eax, BYTE PTR [ecx+eax]
	movzx	ecx, dl
	and	cl, 1
	add	cl, cl
	add	cl, cl
	shr	eax, cl
	mov	ecx, DWORD PTR [ebx+3152]
	movzx	ecx, WORD PTR [ecx+edx*2]
	and	eax, 15					; 0000000fH
	shl	eax, 16					; 00000010H
	or	eax, ecx
	npad	2
$LL83@BZ2_decomp:
; Line 520
	mov	ecx, DWORD PTR [ebx+3152]
	lea	ecx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR tv5756[ebp], ecx
	mov	ecx, DWORD PTR [ebx+3156]
	mov	edi, eax
	sar	edi, 1
	movzx	esi, BYTE PTR [edi+ecx]
	movzx	ecx, al
	and	cl, 1
	add	cl, cl
	add	cl, cl
	shr	esi, cl
	mov	ecx, DWORD PTR tv5756[ebp]
	movzx	ecx, WORD PTR [ecx]
	and	esi, 15					; 0000000fH
	shl	esi, 16					; 00000010H
	or	esi, ecx
; Line 521
	mov	ecx, DWORD PTR tv5756[ebp]
	mov	WORD PTR [ecx], dx
	add	edi, DWORD PTR [ebx+3156]
	test	al, 1
	jne	SHORT $LN80@BZ2_decomp
	mov	cl, BYTE PTR [edi]
	sar	edx, 16					; 00000010H
	and	cl, 240					; 000000f0H
	or	dl, cl
	mov	BYTE PTR [edi], dl
	jmp	SHORT $LN79@BZ2_decomp
$LN80@BZ2_decomp:
	mov	ecx, edx
	sar	ecx, 12					; 0000000cH
	xor	cl, BYTE PTR [edi]
	sar	edx, 12					; 0000000cH
	and	cl, 15					; 0000000fH
	xor	cl, dl
	mov	BYTE PTR [edi], cl
$LN79@BZ2_decomp:
; Line 522
	mov	edx, eax
; Line 523
	mov	eax, esi
; Line 525
	cmp	edx, DWORD PTR [ebx+52]
	jne	SHORT $LL83@BZ2_decomp
; Line 531
	mov	DWORD PTR _i$[ebp], edx
	mov	edx, DWORD PTR [ebx+36]
	xor	ecx, ecx
	imul	edx, 100000				; 000186a0H
	mov	DWORD PTR _j$[ebp], eax
	mov	eax, DWORD PTR [ebx+52]
	mov	DWORD PTR [ebx+56], eax
	mov	DWORD PTR [ebx+1088], ecx
	cmp	BYTE PTR [ebx+16], cl
	je	$LN78@BZ2_decomp
; Line 530
	mov	DWORD PTR [ebx+20], ecx
	mov	DWORD PTR [ebx+24], ecx
; Line 531
	cmp	eax, edx
	jb	SHORT $LN77@BZ2_decomp
$LN770@BZ2_decomp:
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx
; Line 621
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN77@BZ2_decomp:
; Line 531
	lea	ecx, DWORD PTR [ebx+1092]
	push	ecx
	push	eax
	call	_BZ2_indexIntoF
	mov	edx, DWORD PTR [ebx+56]
	mov	esi, DWORD PTR [ebx+3156]
	mov	ecx, edx
	shr	ecx, 1
	mov	DWORD PTR [ebx+60], eax
	movzx	esi, BYTE PTR [ecx+esi]
	movzx	ecx, dl
	and	cl, 1
	add	cl, cl
	add	cl, cl
	shr	esi, cl
	mov	ecx, DWORD PTR [ebx+3152]
	movzx	edx, WORD PTR [ecx+edx*2]
	inc	DWORD PTR [ebx+1088]
	and	esi, 15					; 0000000fH
	shl	esi, 16					; 00000010H
	or	esi, edx
	add	esp, 8
; Line 532
	cmp	DWORD PTR [ebx+20], 0
	mov	DWORD PTR [ebx+56], esi
	jne	SHORT $LN75@BZ2_decomp
	mov	ecx, DWORD PTR [ebx+24]
	mov	edx, DWORD PTR _BZ2_rNums[ecx*4]
	inc	ecx
	mov	DWORD PTR [ebx+20], edx
	mov	DWORD PTR [ebx+24], ecx
	cmp	ecx, 512				; 00000200H
	jne	SHORT $LN75@BZ2_decomp
	mov	DWORD PTR [ebx+24], 0
$LN75@BZ2_decomp:
	dec	DWORD PTR [ebx+20]
	xor	ecx, ecx
	cmp	DWORD PTR [ebx+20], 1
	sete	cl
	xor	ecx, eax
; Line 553
	mov	DWORD PTR [ebx+60], ecx
; Line 558
	xor	edi, edi
	jmp	$save_state_and_return$81782
$LN78@BZ2_decomp:
; Line 534
	cmp	eax, edx
	jae	$LN770@BZ2_decomp
	lea	ecx, DWORD PTR [ebx+1092]
	push	ecx
	push	eax
	call	_BZ2_indexIntoF
	mov	edx, DWORD PTR [ebx+3156]
	mov	DWORD PTR [ebx+60], eax
	mov	eax, DWORD PTR [ebx+56]
	mov	ecx, eax
	shr	ecx, 1
	movzx	edx, BYTE PTR [ecx+edx]
	movzx	ecx, al
	and	cl, 1
	add	cl, cl
	add	cl, cl
	shr	edx, cl
	mov	ecx, DWORD PTR [ebx+3152]
	movzx	eax, WORD PTR [ecx+eax*2]
	inc	DWORD PTR [ebx+1088]
	and	edx, 15					; 0000000fH
	shl	edx, 16					; 00000010H
	or	edx, eax
	add	esp, 8
	mov	DWORD PTR [ebx+56], edx
; Line 558
	xor	edi, edi
	jmp	$save_state_and_return$81782
$LN92@BZ2_decomp:
; Line 540
	xor	ecx, ecx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	edx, edi
	jle	SHORT $LN69@BZ2_decomp
	npad	2
$LL71@BZ2_decomp:
; Line 541
	mov	esi, DWORD PTR [ebx+3148]
; Line 542
	movzx	eax, BYTE PTR [esi+ecx*4]
	mov	edi, DWORD PTR [ebx+eax*4+1092]
	lea	eax, DWORD PTR [ebx+eax*4+1092]
	lea	esi, DWORD PTR [esi+edi*4]
	mov	edi, ecx
	shl	edi, 8
	or	DWORD PTR [esi], edi
; Line 543
	inc	DWORD PTR [eax]
	inc	ecx
	cmp	ecx, edx
	jl	SHORT $LL71@BZ2_decomp
; Line 540
	mov	DWORD PTR _i$[ebp], ecx
	xor	edi, edi
$LN69@BZ2_decomp:
; Line 546
	mov	ecx, DWORD PTR [ebx+52]
	mov	eax, DWORD PTR [ebx+3148]
	mov	edx, DWORD PTR [eax+ecx*4]
	shr	edx, 8
	mov	DWORD PTR [ebx+56], edx
; Line 550
	mov	ecx, edx
	mov	edx, DWORD PTR [ebx+36]
	imul	edx, 100000				; 000186a0H
	cmp	BYTE PTR [ebx+16], 0
	mov	DWORD PTR [ebx+1088], edi
	je	SHORT $LN68@BZ2_decomp
; Line 549
	mov	DWORD PTR [ebx+20], edi
	mov	DWORD PTR [ebx+24], edi
; Line 550
	cmp	ecx, edx
	jae	$LN770@BZ2_decomp
	mov	eax, DWORD PTR [eax+ecx*4]
	movzx	ecx, al
	mov	esi, 1
	mov	DWORD PTR [ebx+60], ecx
	mov	DWORD PTR [ebx+56], eax
	shr	DWORD PTR [ebx+56], 8
	mov	DWORD PTR [ebx+1088], esi
; Line 551
	mov	edx, DWORD PTR _BZ2_rNums
	xor	ecx, ecx
	mov	DWORD PTR [ebx+20], edx
	dec	DWORD PTR [ebx+20]
	cmp	DWORD PTR [ebx+20], esi
	mov	DWORD PTR [ebx+24], esi
	sete	cl
	xor	DWORD PTR [ebx+60], ecx
; Line 558
	xor	edi, edi
	jmp	$save_state_and_return$81782
$LN68@BZ2_decomp:
; Line 553
	cmp	ecx, edx
	jae	$LN770@BZ2_decomp
	mov	eax, DWORD PTR [eax+ecx*4]
	movzx	ecx, al
	mov	DWORD PTR [ebx+56], eax
	shr	DWORD PTR [ebx+56], 8
	mov	DWORD PTR [ebx+1088], 1
	mov	DWORD PTR [ebx+60], ecx
$LN64@BZ2_decomp:
; Line 558
	xor	edi, edi
	jmp	$save_state_and_return$81782
$endhdr_2$81847:
; Line 564
	mov	ecx, 8
	mov	DWORD PTR [ebx+4], 42			; 0000002aH
	cmp	DWORD PTR [ebx+32], ecx
	jge	SHORT $LN613@BZ2_decomp
	npad	5
$LL61@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	edx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], ecx
	shl	edx, 8
	or	edx, edi
	mov	DWORD PTR [ebx+28], edx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN57@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN57@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], ecx
	jl	SHORT $LL61@BZ2_decomp
$LN613@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
; Line 565
	cmp	al, 114					; 00000072H
	jne	$LN283@BZ2_decomp
$LN740@BZ2_decomp:
; Line 566
	mov	ecx, 8
	mov	DWORD PTR [ebx+4], 43			; 0000002bH
	cmp	DWORD PTR [ebx+32], ecx
	jge	SHORT $LN615@BZ2_decomp
	npad	10
$LL54@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	edx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], ecx
	shl	edx, 8
	or	edx, edi
	mov	DWORD PTR [ebx+28], edx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN50@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN50@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], ecx
	jl	SHORT $LL54@BZ2_decomp
$LN615@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
; Line 567
	cmp	al, 69					; 00000045H
	jne	$LN283@BZ2_decomp
$LN739@BZ2_decomp:
; Line 568
	mov	ecx, 8
	mov	DWORD PTR [ebx+4], 44			; 0000002cH
	cmp	DWORD PTR [ebx+32], ecx
	jge	SHORT $LN617@BZ2_decomp
	npad	6
$LL47@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	edx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], ecx
	shl	edx, 8
	or	edx, edi
	mov	DWORD PTR [ebx+28], edx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN43@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN43@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], ecx
	jl	SHORT $LL47@BZ2_decomp
$LN617@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
; Line 569
	cmp	al, 56					; 00000038H
	jne	$LN283@BZ2_decomp
$LN738@BZ2_decomp:
; Line 570
	mov	ecx, 8
	mov	DWORD PTR [ebx+4], 45			; 0000002dH
	cmp	DWORD PTR [ebx+32], ecx
	jge	SHORT $LN619@BZ2_decomp
	npad	6
$LL40@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	edx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], ecx
	shl	edx, 8
	or	edx, edi
	mov	DWORD PTR [ebx+28], edx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN36@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN36@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], ecx
	jl	SHORT $LL40@BZ2_decomp
$LN619@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
; Line 571
	cmp	al, 80					; 00000050H
	jne	$LN283@BZ2_decomp
$LN737@BZ2_decomp:
; Line 572
	mov	ecx, 8
	mov	DWORD PTR [ebx+4], 46			; 0000002eH
	cmp	DWORD PTR [ebx+32], ecx
	jge	SHORT $LN709@BZ2_decomp
	npad	6
$LL33@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edi, DWORD PTR [eax]
	movzx	edi, BYTE PTR [edi]
	mov	edx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], ecx
	shl	edx, 8
	or	edx, edi
	mov	DWORD PTR [ebx+28], edx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN29@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN29@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], ecx
	jl	SHORT $LL33@BZ2_decomp
$LN709@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
; Line 573
	cmp	al, 144					; 00000090H
	jne	$LN283@BZ2_decomp
; Line 575
	mov	DWORD PTR [ebx+3164], 0
$LN27@BZ2_decomp:
; Line 576
	mov	edi, 8
	mov	DWORD PTR [ebx+4], 47			; 0000002fH
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN696@BZ2_decomp
$LL26@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN22@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN22@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL26@BZ2_decomp
$LN696@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
; Line 577
	mov	ecx, DWORD PTR [ebx+3164]
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
	movzx	edx, al
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+3164], ecx
	jmp	SHORT $LN21@BZ2_decomp
$LN697@BZ2_decomp:
; Line 576
	mov	edi, 8
$LN21@BZ2_decomp:
; Line 578
	mov	DWORD PTR [ebx+4], 48			; 00000030H
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN625@BZ2_decomp
	npad	4
$LL20@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN16@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN16@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL20@BZ2_decomp
$LN625@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
; Line 579
	mov	ecx, DWORD PTR [ebx+3164]
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
	movzx	edx, al
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+3164], ecx
	jmp	SHORT $LN15@BZ2_decomp
$LN698@BZ2_decomp:
; Line 578
	mov	edi, 8
$LN15@BZ2_decomp:
; Line 580
	mov	DWORD PTR [ebx+4], 49			; 00000031H
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN627@BZ2_decomp
	npad	8
$LL14@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN10@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN10@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL14@BZ2_decomp
$LN627@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
; Line 581
	mov	ecx, DWORD PTR [ebx+3164]
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
	movzx	edx, al
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+3164], ecx
	jmp	SHORT $LN9@BZ2_decomp
$LN699@BZ2_decomp:
; Line 580
	mov	edi, 8
$LN9@BZ2_decomp:
; Line 582
	mov	DWORD PTR [ebx+4], 50			; 00000032H
	cmp	DWORD PTR [ebx+32], edi
	jge	SHORT $LN629@BZ2_decomp
	npad	8
$LL8@BZ2_decomp:
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN64@BZ2_decomp
	mov	edx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [edx]
	mov	ecx, DWORD PTR [ebx+28]
	add	DWORD PTR [ebx+32], edi
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+28], ecx
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [ebx]
	dec	DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ebx]
	add	DWORD PTR [eax+8], esi
	mov	eax, DWORD PTR [ebx]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@BZ2_decomp
	add	DWORD PTR [eax+12], esi
$LN4@BZ2_decomp:
	cmp	DWORD PTR [ebx+32], edi
	jl	SHORT $LL8@BZ2_decomp
$LN629@BZ2_decomp:
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, DWORD PTR [ebx+28]
	lea	ecx, DWORD PTR [edx-8]
	shr	eax, cl
; Line 583
	mov	ecx, DWORD PTR [ebx+3164]
	add	edx, -8					; fffffff8H
	mov	DWORD PTR [ebx+32], edx
	and	eax, 255				; 000000ffH
	movzx	edx, al
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [ebx+3164], ecx
; Line 585
	mov	DWORD PTR [ebx+4], esi
; Line 586
	mov	edi, 4
	jmp	SHORT $save_state_and_return$81782
$LN3@BZ2_decomp:
; Line 588
	push	4001					; 00000fa1H
	call	_BZ2_bz__AssertH__fail
; Line 591
	push	4002					; 00000fa2H
	call	_BZ2_bz__AssertH__fail
	add	esp, 8
$save_state_and_return$81782:
; Line 595
	mov	eax, DWORD PTR _i$[ebp]
; Line 596
	mov	ecx, DWORD PTR _j$[ebp]
; Line 597
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [ebx+64020], eax
; Line 598
	mov	eax, DWORD PTR _alphaSize$[ebp]
	mov	DWORD PTR [ebx+64024], ecx
; Line 599
	mov	ecx, DWORD PTR _nGroups$[ebp]
	mov	DWORD PTR [ebx+64032], eax
; Line 601
	mov	eax, DWORD PTR _EOB$[ebp]
	mov	DWORD PTR [ebx+64036], ecx
; Line 602
	mov	ecx, DWORD PTR _groupNo$[ebp]
	mov	DWORD PTR [ebx+64028], edx
	mov	edx, DWORD PTR _nSelectors$[ebp]
	mov	DWORD PTR [ebx+64044], eax
; Line 604
	mov	eax, DWORD PTR _nextSym$[ebp]
	mov	DWORD PTR [ebx+64048], ecx
; Line 605
	mov	ecx, DWORD PTR _nblockMAX$[ebp]
	mov	DWORD PTR [ebx+64040], edx
	mov	edx, DWORD PTR _groupPos$[ebp]
	mov	DWORD PTR [ebx+64056], eax
; Line 607
	mov	eax, DWORD PTR _es$[ebp]
	mov	DWORD PTR [ebx+64060], ecx
; Line 608
	mov	ecx, DWORD PTR _N$[ebp]
	mov	DWORD PTR [ebx+64052], edx
	mov	edx, DWORD PTR _nblock$[ebp]
	mov	DWORD PTR [ebx+64068], eax
; Line 610
	mov	eax, DWORD PTR _zt$[ebp]
	mov	DWORD PTR [ebx+64072], ecx
; Line 611
	mov	ecx, DWORD PTR _zn$[ebp]
	mov	DWORD PTR [ebx+64064], edx
	mov	edx, DWORD PTR _curr$[ebp]
	mov	DWORD PTR [ebx+64080], eax
; Line 613
	mov	eax, DWORD PTR _zj$[ebp]
	mov	DWORD PTR [ebx+64084], ecx
; Line 614
	mov	ecx, DWORD PTR _gSel$[ebp]
	mov	DWORD PTR [ebx+64076], edx
	mov	edx, DWORD PTR _zvec$[ebp]
	mov	DWORD PTR [ebx+64092], eax
; Line 616
	mov	eax, DWORD PTR _gLimit$[ebp]
	mov	DWORD PTR [ebx+64096], ecx
; Line 617
	mov	ecx, DWORD PTR _gBase$[ebp]
	mov	DWORD PTR [ebx+64088], edx
	mov	edx, DWORD PTR _gMinlen$[ebp]
	mov	DWORD PTR [ebx+64104], eax
	mov	DWORD PTR [ebx+64108], ecx
; Line 621
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	DWORD PTR [ebx+64100], edx
	mov	edx, DWORD PTR _gPerm$[ebp]
	mov	eax, edi
	pop	edi
	pop	esi
	mov	DWORD PTR [ebx+64112], edx
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN771@BZ2_decomp:
	DD	$LN447@BZ2_decomp
	DD	$LN672@BZ2_decomp
	DD	$LN673@BZ2_decomp
	DD	$LN674@BZ2_decomp
	DD	$LN703@BZ2_decomp
	DD	$LN658@BZ2_decomp
	DD	$LN742@BZ2_decomp
	DD	$LN735@BZ2_decomp
	DD	$LN734@BZ2_decomp
	DD	$LN741@BZ2_decomp
	DD	$LN369@BZ2_decomp
	DD	$LN676@BZ2_decomp
	DD	$LN677@BZ2_decomp
	DD	$LN678@BZ2_decomp
	DD	$LN679@BZ2_decomp
	DD	$LN680@BZ2_decomp
	DD	$LN681@BZ2_decomp
	DD	$LN682@BZ2_decomp
	DD	$LN683@BZ2_decomp
	DD	$LN684@BZ2_decomp
	DD	$LN290@BZ2_decomp
	DD	$LN686@BZ2_decomp
	DD	$LN687@BZ2_decomp
	DD	$LN690@BZ2_decomp
	DD	$LN689@BZ2_decomp
	DD	$LN688@BZ2_decomp
	DD	$LN204@BZ2_decomp
	DD	$LN693@BZ2_decomp
	DD	$LN173@BZ2_decomp
	DD	$LN163@BZ2_decomp
	DD	$LN124@BZ2_decomp
	DD	$LN694@BZ2_decomp
	DD	$endhdr_2$81847
	DD	$LN740@BZ2_decomp
	DD	$LN739@BZ2_decomp
	DD	$LN738@BZ2_decomp
	DD	$LN737@BZ2_decomp
	DD	$LN27@BZ2_decomp
	DD	$LN697@BZ2_decomp
	DD	$LN698@BZ2_decomp
	DD	$LN699@BZ2_decomp
_BZ2_decompress ENDP
_TEXT	ENDS
END
