; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\programovani\WoW Editor\Test\src\bzlib2\blocksort.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG81853 DB	'        bucket sorting ...', 0aH, 00H
$SG81882 DB	'        depth %6d has ', 00H
	ORG $+1
$SG81919 DB	'%6d unresolved strings', 0aH, 00H
$SG81923 DB	'        reconstructing block ...', 0aH, 00H
	ORG $+2
_incs	DD	01H
	DD	04H
	DD	0dH
	DD	028H
	DD	079H
	DD	016cH
	DD	0445H
	DD	0cd0H
	DD	02671H
	DD	07354H
	DD	0159fdH
	DD	040df8H
	DD	0c29e9H
	DD	0247dbcH
$SG82166 DB	'        main sort initialise ...', 0aH, 00H
	ORG $+2
$SG82185 DB	'        bucket sorting ...', 0aH, 00H
$SG82227 DB	'        qsort [0x%x, 0x%x]   done %d   this %d', 0aH, 00H
$SG82265 DB	'        %d pointers, %d sorted, %d scanned', 0aH, 00H
$SG82288 DB	'      %d work, %d block, ratio %5.2f', 0aH, 00H
	ORG $+2
$SG82291 DB	'    too repetitive; using fallback sorting algorithm', 0aH
	DB	00H
; Function compile flags: /Ogtp
_DATA	ENDS
_TEXT	SEGMENT
_ec_tmp$ = -12						; size = 4
_tmp$ = -8						; size = 4
_i$ = -4						; size = 4
_lo$ = 8						; size = 4
_fallbackSimpleSort PROC
; _fmap$ = eax
; _eclass$ = ebx
; _hi$ = esi
; File c:\programovani\wow editor\test\src\bzlib2\blocksort.c
; Line 36
	push	ebp
	mov	ebp, esp
; Line 40
	mov	ecx, DWORD PTR _lo$[ebp]
	sub	esp, 12					; 0000000cH
	cmp	ecx, esi
	je	$LN4@fallbackSi
; Line 42
	mov	edx, esi
	sub	edx, ecx
	push	edi
	cmp	edx, 3
	jle	SHORT $LN10@fallbackSi
; Line 43
	lea	edx, DWORD PTR [esi-4]
	mov	DWORD PTR _i$[ebp], edx
	cmp	edx, ecx
	jl	SHORT $LN10@fallbackSi
$LL12@fallbackSi:
; Line 44
	mov	edi, DWORD PTR [eax+edx*4]
; Line 45
	mov	ecx, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR _ec_tmp$[ebp], ecx
	lea	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _tmp$[ebp], edi
; Line 46
	cmp	ecx, esi
	jg	SHORT $LN7@fallbackSi
	npad	8
$LL9@fallbackSi:
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	edi, DWORD PTR _ec_tmp$[ebp]
	cmp	edi, DWORD PTR [ebx+edx*4]
	jbe	SHORT $LN25@fallbackSi
; Line 47
	mov	DWORD PTR [eax+ecx*4-16], edx
	add	ecx, 4
	cmp	ecx, esi
	jle	SHORT $LL9@fallbackSi
$LN25@fallbackSi:
; Line 46
	mov	edx, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR _tmp$[ebp]
$LN7@fallbackSi:
; Line 48
	dec	edx
	mov	DWORD PTR [eax+ecx*4-16], edi
	mov	DWORD PTR _i$[ebp], edx
	cmp	edx, DWORD PTR _lo$[ebp]
	jge	SHORT $LL12@fallbackSi
; Line 43
	mov	ecx, DWORD PTR _lo$[ebp]
$LN10@fallbackSi:
; Line 52
	lea	edx, DWORD PTR [esi-1]
	mov	DWORD PTR _i$[ebp], edx
	cmp	edx, ecx
	jl	SHORT $LN28@fallbackSi
$LL6@fallbackSi:
; Line 53
	mov	ecx, DWORD PTR [eax+edx*4]
; Line 54
	mov	edi, DWORD PTR [ebx+ecx*4]
	mov	DWORD PTR _tmp$[ebp], ecx
	lea	ecx, DWORD PTR [edx+1]
; Line 55
	cmp	ecx, esi
	jg	SHORT $LN1@fallbackSi
$LL3@fallbackSi:
	mov	edx, DWORD PTR [eax+ecx*4]
	cmp	edi, DWORD PTR [ebx+edx*4]
	jbe	SHORT $LN27@fallbackSi
; Line 56
	mov	DWORD PTR [eax+ecx*4-4], edx
	inc	ecx
	cmp	ecx, esi
	jle	SHORT $LL3@fallbackSi
$LN27@fallbackSi:
; Line 55
	mov	edx, DWORD PTR _i$[ebp]
$LN1@fallbackSi:
; Line 57
	mov	edi, DWORD PTR _tmp$[ebp]
	dec	edx
	mov	DWORD PTR [eax+ecx*4-4], edi
	mov	DWORD PTR _i$[ebp], edx
	cmp	edx, DWORD PTR _lo$[ebp]
	jge	SHORT $LL6@fallbackSi
$LN28@fallbackSi:
	pop	edi
$LN4@fallbackSi:
; Line 59
	mov	esp, ebp
	pop	ebp
	ret	0
_fallbackSimpleSort ENDP
_TEXT	ENDS
PUBLIC	_eclass$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	_BZ2_bz__AssertH__fail:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv468 = -840						; size = 4
_r$ = -836						; size = 4
_zztmp$81823 = -832					; size = 4
_zztmp$81816 = -832					; size = 4
_lo$ = -828						; size = 4
_eclass$GSCopy$ = -824					; size = 4
_gtHi$ = -820						; size = 4
_hi$ = -816						; size = 4
_sp$ = -812						; size = 4
_yyn$81819 = -808					; size = 4
_yyn$81812 = -808					; size = 4
_med$ = -808						; size = 4
_stackLo$ = -804					; size = 400
_stackHi$ = -404					; size = 400
__$ArrayPad$ = -4					; size = 4
_eclass$ = 8						; size = 4
_fallbackQSort3 PROC
; _fmap$ = edi
; _loSt$ = ecx
; _hiSt$ = edx
; Line 97
	push	ebp
	mov	ebp, esp
	sub	esp, 840				; 00000348H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 104
	mov	eax, DWORD PTR _eclass$[ebp]
	push	ebx
	push	esi
	mov	DWORD PTR _eclass$GSCopy$[ebp], eax
	mov	DWORD PTR _r$[ebp], 0
; Line 107
	mov	DWORD PTR _stackLo$[ebp], ecx
	mov	DWORD PTR _stackHi$[ebp], edx
	mov	esi, 1
	jmp	SHORT $LN28@fallbackQS
	npad	5
$LL56@fallbackQS:
	mov	esi, DWORD PTR _sp$[ebp]
$LN28@fallbackQS:
; Line 111
	cmp	esi, 99					; 00000063H
	jl	SHORT $LN26@fallbackQS
	push	1004					; 000003ecH
	call	_BZ2_bz__AssertH__fail
	add	esp, 4
$LN26@fallbackQS:
; Line 113
	mov	ecx, DWORD PTR _stackLo$[ebp+esi*4-4]
	dec	esi
	mov	DWORD PTR _sp$[ebp], esi
	mov	esi, DWORD PTR _stackHi$[ebp+esi*4]
; Line 114
	mov	eax, esi
	sub	eax, ecx
	mov	DWORD PTR _lo$[ebp], ecx
	mov	DWORD PTR _hi$[ebp], esi
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN25@fallbackQS
; Line 115
	mov	ebx, DWORD PTR _eclass$GSCopy$[ebp]
	push	ecx
	mov	eax, edi
	call	_fallbackSimpleSort
	add	esp, 4
; Line 116
	jmp	$LN61@fallbackQS
$LN25@fallbackQS:
; Line 126
	mov	ebx, DWORD PTR _r$[ebp]
	imul	ebx, 7621				; 00001dc5H
	inc	ebx
	and	ebx, 32767				; 00007fffH
; Line 127
	mov	eax, -1431655765			; aaaaaaabH
	mul	ebx
	shr	edx, 1
	lea	edx, DWORD PTR [edx+edx*2]
	mov	eax, ebx
	sub	eax, edx
	mov	DWORD PTR _r$[ebp], ebx
; Line 128
	jne	SHORT $LN24@fallbackQS
	mov	eax, DWORD PTR [edi+ecx*4]
	mov	edx, DWORD PTR _eclass$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _med$[ebp], eax
	jmp	SHORT $LN21@fallbackQS
$LN24@fallbackQS:
; Line 129
	cmp	eax, 1
	jne	SHORT $LN22@fallbackQS
	lea	edx, DWORD PTR [esi+ecx]
	sar	edx, 1
	mov	eax, DWORD PTR [edi+edx*4]
	mov	edx, DWORD PTR _eclass$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _med$[ebp], eax
	jmp	SHORT $LN21@fallbackQS
$LN22@fallbackQS:
; Line 130
	mov	edx, DWORD PTR [edi+esi*4]
	mov	eax, DWORD PTR _eclass$GSCopy$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _med$[ebp], edx
$LN21@fallbackQS:
; Line 132
	mov	ebx, ecx
; Line 133
	mov	DWORD PTR _gtHi$[ebp], esi
	mov	eax, esi
$LL20@fallbackQS:
; Line 137
	cmp	ecx, eax
	jg	SHORT $LN54@fallbackQS
	npad	11
$LL18@fallbackQS:
; Line 138
	mov	esi, DWORD PTR [edi+ecx*4]
	mov	edx, DWORD PTR _eclass$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+esi*4]
	sub	edx, DWORD PTR _med$[ebp]
; Line 139
	jne	$LN15@fallbackQS
; Line 140
	mov	edx, DWORD PTR [edi+ebx*4]
	mov	DWORD PTR [edi+ecx*4], edx
	mov	DWORD PTR [edi+ebx*4], esi
; Line 141
	inc	ecx
	inc	ebx
	cmp	ecx, eax
	jle	SHORT $LL18@fallbackQS
$LN60@fallbackQS:
; Line 146
	mov	esi, DWORD PTR _hi$[ebp]
$LN54@fallbackQS:
; Line 164
	cmp	DWORD PTR _gtHi$[ebp], ebx
	jl	$LN61@fallbackQS
; Line 166
	mov	edx, ecx
	sub	edx, ebx
	sub	ebx, DWORD PTR _lo$[ebp]
	mov	DWORD PTR tv468[ebp], edx
	cmp	ebx, edx
	jl	SHORT $LN32@fallbackQS
	mov	ebx, edx
$LN32@fallbackQS:
	mov	DWORD PTR _yyn$81812[ebp], ebx
	test	ebx, ebx
	jle	SHORT $LN5@fallbackQS
	mov	edx, DWORD PTR _lo$[ebp]
	mov	esi, ecx
	sub	esi, ebx
	lea	edx, DWORD PTR [edi+edx*4]
	lea	esi, DWORD PTR [edi+esi*4]
	npad	7
$LL6@fallbackQS:
	mov	ebx, DWORD PTR [edx]
	mov	DWORD PTR _zztmp$81816[ebp], ebx
	mov	ebx, DWORD PTR [esi]
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR _zztmp$81816[ebp]
	mov	DWORD PTR [esi], ebx
	mov	ebx, DWORD PTR _yyn$81812[ebp]
	dec	ebx
	add	edx, 4
	add	esi, 4
	mov	DWORD PTR _yyn$81812[ebp], ebx
	test	ebx, ebx
	jg	SHORT $LL6@fallbackQS
	mov	esi, DWORD PTR _hi$[ebp]
$LN5@fallbackQS:
; Line 167
	mov	ebx, DWORD PTR _gtHi$[ebp]
	mov	edx, esi
	sub	edx, DWORD PTR _gtHi$[ebp]
	sub	ebx, eax
	cmp	edx, ebx
	jl	SHORT $LN34@fallbackQS
	mov	edx, ebx
$LN34@fallbackQS:
	mov	DWORD PTR _yyn$81819[ebp], edx
	test	edx, edx
	jle	SHORT $LN3@fallbackQS
	mov	ebx, esi
	sub	ebx, edx
	lea	ecx, DWORD PTR [edi+ecx*4]
	lea	edx, DWORD PTR [edi+ebx*4+4]
	npad	4
$LL4@fallbackQS:
	mov	ebx, DWORD PTR [ecx]
	mov	DWORD PTR _zztmp$81823[ebp], ebx
	mov	ebx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], ebx
	mov	ebx, DWORD PTR _zztmp$81823[ebp]
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR _yyn$81819[ebp]
	dec	ebx
	add	ecx, 4
	add	edx, 4
	mov	DWORD PTR _yyn$81819[ebp], ebx
	test	ebx, ebx
	jg	SHORT $LL4@fallbackQS
$LN3@fallbackQS:
; Line 169
	mov	ecx, DWORD PTR tv468[ebp]
	mov	edx, DWORD PTR _lo$[ebp]
; Line 170
	sub	eax, DWORD PTR _gtHi$[ebp]
	lea	edx, DWORD PTR [ecx+edx-1]
; Line 172
	mov	ebx, edx
	sub	ebx, DWORD PTR _lo$[ebp]
	lea	eax, DWORD PTR [eax+esi+1]
	mov	ecx, esi
	sub	ecx, eax
	cmp	ebx, ecx
; Line 173
	mov	ecx, DWORD PTR _sp$[ebp]
	jle	$LN2@fallbackQS
	mov	DWORD PTR _stackHi$[ebp+ecx*4], edx
; Line 174
	mov	DWORD PTR _stackLo$[ebp+ecx*4+4], eax
	mov	DWORD PTR _stackHi$[ebp+ecx*4+4], esi
	add	ecx, 2
	mov	DWORD PTR _sp$[ebp], ecx
; Line 175
	jmp	$LN1@fallbackQS
$LN15@fallbackQS:
; Line 144
	test	edx, edx
	jle	SHORT $LN14@fallbackQS
; Line 148
	cmp	ecx, eax
	jg	$LN60@fallbackQS
	npad	2
$LL13@fallbackQS:
; Line 149
	mov	esi, DWORD PTR [edi+eax*4]
	mov	edx, DWORD PTR _eclass$GSCopy$[ebp]
	mov	edx, DWORD PTR [edx+esi*4]
	sub	edx, DWORD PTR _med$[ebp]
; Line 150
	jne	SHORT $LN10@fallbackQS
; Line 151
	mov	edx, DWORD PTR _gtHi$[ebp]
	mov	edx, DWORD PTR [edi+edx*4]
	mov	DWORD PTR [edi+eax*4], edx
	mov	edx, DWORD PTR _gtHi$[ebp]
	mov	DWORD PTR [edi+edx*4], esi
; Line 152
	dec	edx
	mov	DWORD PTR _gtHi$[ebp], edx
; Line 153
	jmp	SHORT $LN62@fallbackQS
$LN10@fallbackQS:
; Line 155
	test	edx, edx
	js	SHORT $LN47@fallbackQS
$LN62@fallbackQS:
; Line 156
	dec	eax
	cmp	ecx, eax
	jle	SHORT $LL13@fallbackQS
; Line 148
	jmp	$LN60@fallbackQS
$LN47@fallbackQS:
; Line 158
	cmp	ecx, eax
	jg	$LN60@fallbackQS
; Line 159
	mov	edx, DWORD PTR [edi+ecx*4]
	mov	DWORD PTR [edi+ecx*4], esi
; Line 160
	mov	esi, DWORD PTR _hi$[ebp]
	mov	DWORD PTR [edi+eax*4], edx
	inc	ecx
	dec	eax
	jmp	$LL20@fallbackQS
$LN14@fallbackQS:
; Line 146
	mov	esi, DWORD PTR _hi$[ebp]
	inc	ecx
	jmp	$LL20@fallbackQS
$LN2@fallbackQS:
; Line 176
	mov	DWORD PTR _stackLo$[ebp+ecx*4], eax
; Line 177
	mov	eax, DWORD PTR _lo$[ebp]
	mov	DWORD PTR _stackLo$[ebp+ecx*4+4], eax
	mov	DWORD PTR _stackHi$[ebp+ecx*4+4], edx
	add	ecx, 2
	mov	DWORD PTR _sp$[ebp], ecx
$LN61@fallbackQS:
	mov	ecx, DWORD PTR _sp$[ebp]
$LN1@fallbackQS:
; Line 109
	test	ecx, ecx
	jg	$LL56@fallbackQS
; Line 180
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_fallbackQSort3 ENDP
_TEXT	ENDS
PUBLIC	_nblock$GSCopy$
PUBLIC	_eclass$GSCopy$
PUBLIC	_fmap$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_cc$ = -2084						; size = 4
_l$ = -2080						; size = 4
_H$ = -2076						; size = 4
_nNotDone$ = -2072					; size = 4
_fmap$GSCopy$ = -2068					; size = 4
_eclass$GSCopy$ = -2064					; size = 4
_nblock$GSCopy$ = -2060					; size = 4
_ftabCopy$ = -2056					; size = 1024
_ftab$ = -1032						; size = 1028
__$ArrayPad$ = -4					; size = 4
_fmap$ = 8						; size = 4
_nblock$ = 12						; size = 4
_verb$ = 16						; size = 4
_fallbackSort PROC
; _eclass$ = ecx
; _bhtab$ = edx
; Line 217
	push	ebp
	mov	ebp, esp
	sub	esp, 2084				; 00000824H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 229
	cmp	DWORD PTR _verb$[ebp], 4
	mov	eax, DWORD PTR _fmap$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _nblock$[ebp]
	push	edi
; Line 312
	mov	DWORD PTR _fmap$GSCopy$[ebp], eax
	mov	DWORD PTR _eclass$GSCopy$[ebp], ecx
	mov	ebx, edx
	mov	DWORD PTR _nblock$GSCopy$[ebp], esi
	jl	SHORT $LN66@fallbackSo
; Line 230
	push	OFFSET $SG81853
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
$LN66@fallbackSo:
; Line 231
	xor	eax, eax
	mov	ecx, 257				; 00000101H
	lea	edi, DWORD PTR _ftab$[ebp]
	rep stosd
; Line 232
	test	esi, esi
	jle	SHORT $LN60@fallbackSo
$LL62@fallbackSo:
	mov	edx, DWORD PTR _eclass$GSCopy$[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	inc	DWORD PTR _ftab$[ebp+ecx*4]
	lea	ecx, DWORD PTR _ftab$[ebp+ecx*4]
	inc	eax
	cmp	eax, esi
	jl	SHORT $LL62@fallbackSo
$LN60@fallbackSo:
; Line 233
	mov	ecx, 256				; 00000100H
	lea	esi, DWORD PTR _ftab$[ebp]
	lea	edi, DWORD PTR _ftabCopy$[ebp]
	rep movsd
; Line 234
	mov	eax, 1
	npad	10
$LL56@fallbackSo:
	mov	ecx, DWORD PTR _ftab$[ebp+eax*4-4]
	add	DWORD PTR _ftab$[ebp+eax*4], ecx
	mov	ecx, DWORD PTR _ftab$[ebp+eax*4]
	add	DWORD PTR _ftab$[ebp+eax*4+4], ecx
	mov	ecx, DWORD PTR _ftab$[ebp+eax*4+4]
	add	DWORD PTR _ftab$[ebp+eax*4+8], ecx
	mov	ecx, DWORD PTR _ftab$[ebp+eax*4+8]
	add	DWORD PTR _ftab$[ebp+eax*4+12], ecx
	add	eax, 4
	cmp	eax, 257				; 00000101H
	jl	SHORT $LL56@fallbackSo
; Line 236
	mov	esi, DWORD PTR _nblock$GSCopy$[ebp]
	xor	ecx, ecx
	test	esi, esi
	jle	SHORT $LN51@fallbackSo
	npad	2
$LL53@fallbackSo:
; Line 237
	mov	edx, DWORD PTR _eclass$GSCopy$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
; Line 238
	lea	edx, DWORD PTR _ftab$[ebp+eax*4]
	mov	eax, DWORD PTR [edx]
	dec	eax
; Line 239
	mov	DWORD PTR [edx], eax
; Line 240
	mov	edx, DWORD PTR _fmap$GSCopy$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	inc	ecx
	cmp	ecx, esi
	jl	SHORT $LL53@fallbackSo
$LN51@fallbackSo:
; Line 243
	mov	eax, esi
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	add	eax, 2
; Line 244
	test	eax, eax
	jle	SHORT $LN50@fallbackSo
; Line 243
	mov	ecx, eax
	xor	eax, eax
	mov	edi, ebx
	rep stosd
$LN50@fallbackSo:
; Line 245
	xor	eax, eax
$LL125@fallbackSo:
	mov	ecx, DWORD PTR _ftab$[ebp+eax*4]
	mov	edx, ecx
	sar	edx, 5
	and	ecx, 31					; 0000001fH
	lea	edx, DWORD PTR [ebx+edx*4]
	mov	edi, 1
	shl	edi, cl
	mov	ecx, DWORD PTR _ftab$[ebp+eax*4+4]
	add	eax, 4
	or	DWORD PTR [edx], edi
	mov	edx, ecx
	and	ecx, 31					; 0000001fH
	sar	edx, 5
	lea	edx, DWORD PTR [ebx+edx*4]
	mov	edi, 1
	shl	edi, cl
	mov	ecx, DWORD PTR _ftab$[ebp+eax*4-8]
	or	DWORD PTR [edx], edi
	mov	edx, ecx
	and	ecx, 31					; 0000001fH
	sar	edx, 5
	mov	edi, 1
	shl	edi, cl
	mov	ecx, DWORD PTR _ftab$[ebp+eax*4-4]
	lea	edx, DWORD PTR [ebx+edx*4]
	or	DWORD PTR [edx], edi
	mov	edx, ecx
	and	ecx, 31					; 0000001fH
	mov	edi, 1
	shl	edi, cl
	sar	edx, 5
	lea	edx, DWORD PTR [ebx+edx*4]
	or	DWORD PTR [edx], edi
	cmp	eax, 256				; 00000100H
	jl	SHORT $LL125@fallbackSo
; Line 254
	mov	eax, esi
	mov	edi, 32					; 00000020H
	npad	3
$LL123@fallbackSo:
; Line 255
	mov	ecx, eax
	sar	ecx, 5
	lea	edx, DWORD PTR [ebx+ecx*4]
	mov	ecx, eax
	and	ecx, 31					; 0000001fH
	mov	esi, 1
	shl	esi, cl
	lea	ecx, DWORD PTR [eax+1]
	add	eax, 2
	or	DWORD PTR [edx], esi
; Line 256
	mov	edx, ecx
	and	ecx, 31					; 0000001fH
	mov	esi, 1
	shl	esi, cl
	sar	edx, 5
	lea	edx, DWORD PTR [ebx+edx*4]
	not	esi
	and	DWORD PTR [edx], esi
	dec	edi
	jne	SHORT $LL123@fallbackSo
; Line 260
	mov	eax, 1
	mov	DWORD PTR _H$[ebp], eax
$LL121@fallbackSo:
; Line 263
	cmp	DWORD PTR _verb$[ebp], 4
	mov	esi, DWORD PTR _nblock$GSCopy$[ebp]
	jl	SHORT $LN114@fallbackSo
; Line 264
	push	eax
	push	OFFSET $SG81882
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
$LN114@fallbackSo:
; Line 266
	xor	edi, edi
; Line 267
	xor	eax, eax
	lea	edx, DWORD PTR [edi+1]
	test	esi, esi
	jle	SHORT $LN36@fallbackSo
$LL122@fallbackSo:
; Line 268
	mov	ecx, eax
	sar	ecx, 5
	test	DWORD PTR [ebx+ecx*4], edx
	je	SHORT $LN35@fallbackSo
	mov	edi, eax
$LN35@fallbackSo:
; Line 269
	mov	ecx, DWORD PTR _fmap$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	sub	ecx, DWORD PTR _H$[ebp]
	jns	SHORT $LN34@fallbackSo
	add	ecx, esi
$LN34@fallbackSo:
; Line 270
	mov	esi, DWORD PTR _eclass$GSCopy$[ebp]
	mov	DWORD PTR [esi+ecx*4], edi
	mov	esi, DWORD PTR _nblock$GSCopy$[ebp]
	inc	eax
	rol	edx, 1
	cmp	eax, esi
	jl	SHORT $LL122@fallbackSo
$LN36@fallbackSo:
; Line 273
	mov	DWORD PTR _nNotDone$[ebp], 0
; Line 274
	or	esi, -1
$LL33@fallbackSo:
; Line 278
	lea	eax, DWORD PTR [esi+1]
; Line 279
	mov	ecx, eax
	and	ecx, 31					; 0000001fH
	mov	esi, 1
	shl	esi, cl
	mov	edx, eax
	sar	edx, 5
	test	DWORD PTR [ebx+edx*4], esi
	je	SHORT $LN115@fallbackSo
	npad	5
$LL31@fallbackSo:
	test	ecx, ecx
	je	SHORT $LN115@fallbackSo
	inc	eax
	mov	ecx, eax
	and	ecx, 31					; 0000001fH
	mov	esi, 1
	shl	esi, cl
	mov	edx, eax
	sar	edx, 5
	test	DWORD PTR [ebx+edx*4], esi
	jne	SHORT $LL31@fallbackSo
$LN115@fallbackSo:
; Line 280
	mov	ecx, eax
	sar	ecx, 5
	mov	edx, DWORD PTR [ebx+ecx*4]
	mov	ecx, eax
	and	ecx, 31					; 0000001fH
	mov	esi, 1
	shl	esi, cl
	test	esi, edx
	je	SHORT $LN117@fallbackSo
; Line 281
	cmp	edx, -1
	jne	SHORT $LN116@fallbackSo
$LL28@fallbackSo:
	add	eax, 32					; 00000020H
	mov	edx, eax
	sar	edx, 5
	cmp	DWORD PTR [ebx+edx*4], -1
	je	SHORT $LL28@fallbackSo
$LN116@fallbackSo:
	mov	ecx, eax
	mov	edx, 1
	rol	edx, cl
; Line 282
	and	ecx, 31					; 0000001fH
	mov	esi, 1
	shl	esi, cl
	mov	ecx, eax
	sar	ecx, 5
	test	esi, DWORD PTR [ebx+ecx*4]
	je	SHORT $LN117@fallbackSo
$LL26@fallbackSo:
	inc	eax
	mov	ecx, eax
	rol	edx, 1
	sar	ecx, 5
	test	DWORD PTR [ebx+ecx*4], edx
	jne	SHORT $LL26@fallbackSo
$LN117@fallbackSo:
; Line 285
	mov	esi, DWORD PTR _nblock$GSCopy$[ebp]
	lea	ecx, DWORD PTR [eax-1]
	mov	DWORD PTR _l$[ebp], ecx
	cmp	ecx, esi
	jge	$LN91@fallbackSo
; Line 286
	mov	ecx, eax
	and	ecx, 31					; 0000001fH
	mov	esi, 1
	shl	esi, cl
	mov	edx, eax
	sar	edx, 5
	test	DWORD PTR [ebx+edx*4], esi
	jne	SHORT $LN119@fallbackSo
	npad	3
$LL23@fallbackSo:
	test	ecx, ecx
	je	SHORT $LN119@fallbackSo
	inc	eax
	mov	ecx, eax
	and	ecx, 31					; 0000001fH
	mov	esi, 1
	shl	esi, cl
	mov	edx, eax
	sar	edx, 5
	test	DWORD PTR [ebx+edx*4], esi
	je	SHORT $LL23@fallbackSo
$LN119@fallbackSo:
; Line 287
	mov	ecx, eax
	sar	ecx, 5
	mov	edx, DWORD PTR [ebx+ecx*4]
	mov	ecx, eax
	and	ecx, 31					; 0000001fH
	mov	esi, 1
	shl	esi, cl
	test	esi, edx
	jne	SHORT $LN17@fallbackSo
; Line 288
	test	edx, edx
	jne	SHORT $LN86@fallbackSo
$LL20@fallbackSo:
	add	eax, 32					; 00000020H
	mov	edx, eax
	sar	edx, 5
	cmp	DWORD PTR [ebx+edx*4], 0
	je	SHORT $LL20@fallbackSo
$LN86@fallbackSo:
	mov	ecx, eax
	mov	edx, 1
	rol	edx, cl
; Line 289
	and	ecx, 31					; 0000001fH
	mov	esi, 1
	shl	esi, cl
	mov	ecx, eax
	sar	ecx, 5
	test	esi, DWORD PTR [ebx+ecx*4]
	jne	SHORT $LN17@fallbackSo
$LL18@fallbackSo:
	inc	eax
	mov	ecx, eax
	rol	edx, 1
	sar	ecx, 5
	test	DWORD PTR [ebx+ecx*4], edx
	je	SHORT $LL18@fallbackSo
$LN17@fallbackSo:
; Line 291
	lea	esi, DWORD PTR [eax-1]
; Line 292
	cmp	esi, DWORD PTR _nblock$GSCopy$[ebp]
	jge	$LN120@fallbackSo
; Line 295
	mov	ecx, DWORD PTR _l$[ebp]
	cmp	esi, ecx
	jle	$LL33@fallbackSo
; Line 296
	mov	eax, DWORD PTR _nNotDone$[ebp]
; Line 297
	mov	edi, DWORD PTR _fmap$GSCopy$[ebp]
	mov	edx, esi
	sub	edx, ecx
	lea	edx, DWORD PTR [eax+edx+1]
	mov	eax, DWORD PTR _eclass$GSCopy$[ebp]
	mov	DWORD PTR _nNotDone$[ebp], edx
	push	eax
	mov	edx, esi
	call	_fallbackQSort3
; Line 301
	mov	ecx, DWORD PTR _l$[ebp]
	add	esp, 4
	mov	eax, 1
	rol	eax, cl
	mov	DWORD PTR _cc$[ebp], -1
	mov	edx, ecx
	cmp	ecx, esi
	jg	$LL33@fallbackSo
	npad	8
$LL14@fallbackSo:
; Line 302
	mov	ecx, DWORD PTR _fmap$GSCopy$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	edi, DWORD PTR _eclass$GSCopy$[ebp]
	mov	edi, DWORD PTR [edi+ecx*4]
; Line 303
	cmp	DWORD PTR _cc$[ebp], edi
	je	SHORT $LN13@fallbackSo
	mov	ecx, edx
	sar	ecx, 5
	or	DWORD PTR [ebx+ecx*4], eax
	lea	ecx, DWORD PTR [ebx+ecx*4]
	mov	DWORD PTR _cc$[ebp], edi
$LN13@fallbackSo:
; Line 301
	inc	edx
	rol	eax, 1
	cmp	edx, esi
	jle	SHORT $LL14@fallbackSo
; Line 306
	jmp	$LL33@fallbackSo
$LN120@fallbackSo:
	mov	esi, DWORD PTR _nblock$GSCopy$[ebp]
$LN91@fallbackSo:
; Line 308
	mov	edi, DWORD PTR _verb$[ebp]
	cmp	edi, 4
	jl	SHORT $LN118@fallbackSo
; Line 309
	mov	edx, DWORD PTR _nNotDone$[ebp]
	push	edx
	push	OFFSET $SG81919
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
$LN118@fallbackSo:
; Line 311
	mov	eax, DWORD PTR _H$[ebp]
	add	eax, eax
	mov	DWORD PTR _H$[ebp], eax
; Line 312
	cmp	eax, esi
	jg	SHORT $LN93@fallbackSo
	cmp	DWORD PTR _nNotDone$[ebp], 0
	jne	$LL121@fallbackSo
	mov	esi, DWORD PTR _nblock$GSCopy$[ebp]
$LN93@fallbackSo:
; Line 320
	cmp	edi, 4
	jl	SHORT $LN7@fallbackSo
; Line 321
	push	OFFSET $SG81923
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
$LN7@fallbackSo:
; Line 322
	xor	eax, eax
; Line 323
	xor	edx, edx
	test	esi, esi
	jle	SHORT $LN1@fallbackSo
	lea	ecx, DWORD PTR _ftabCopy$[ebp]
$LL124@fallbackSo:
; Line 324
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN2@fallbackSo
	npad	7
$LL3@fallbackSo:
	inc	eax
	cmp	DWORD PTR _ftabCopy$[ebp+eax*4], 0
	je	SHORT $LL3@fallbackSo
$LN2@fallbackSo:
; Line 326
	mov	edi, DWORD PTR _fmap$GSCopy$[ebp]
	mov	edi, DWORD PTR [edi+edx*4]
	dec	DWORD PTR _ftabCopy$[ebp+eax*4]
	mov	ebx, DWORD PTR _eclass$GSCopy$[ebp]
	lea	ecx, DWORD PTR _ftabCopy$[ebp+eax*4]
	inc	edx
	mov	BYTE PTR [ebx+edi], al
	cmp	edx, esi
	jl	SHORT $LL124@fallbackSo
; Line 328
	cmp	eax, 256				; 00000100H
	jl	SHORT $LN1@fallbackSo
	push	1005					; 000003edH
	call	_BZ2_bz__AssertH__fail
	add	esp, 4
$LN1@fallbackSo:
; Line 329
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_fallbackSort ENDP
; Function compile flags: /Ogtp
_k$ = -4						; size = 4
_nblock$ = 8						; size = 4
_budget$ = 12						; size = 4
_mainGtU PROC
; _i1$ = eax
; _i2$ = edx
; _block$ = edi
; _quadrant$ = ecx
; Line 353
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, edx
; Line 360
	mov	dl, BYTE PTR [eax+edi]
	mov	bl, BYTE PTR [esi+edi]
; Line 361
	cmp	bl, dl
	je	SHORT $LN33@mainGtU
$LN70@mainGtU:
	sbb	eax, eax
	pop	esi
	neg	eax
	pop	ebx
; Line 469
	mov	esp, ebp
	pop	ebp
	ret	0
$LN33@mainGtU:
; Line 364
	mov	dl, BYTE PTR [eax+edi+1]
	mov	bl, BYTE PTR [esi+edi+1]
; Line 365
	cmp	bl, dl
	jne	SHORT $LN70@mainGtU
; Line 368
	mov	dl, BYTE PTR [eax+edi+2]
	mov	bl, BYTE PTR [esi+edi+2]
; Line 369
	cmp	bl, dl
	jne	SHORT $LN70@mainGtU
; Line 372
	mov	dl, BYTE PTR [eax+edi+3]
	mov	bl, BYTE PTR [esi+edi+3]
; Line 373
	cmp	bl, dl
	jne	SHORT $LN70@mainGtU
; Line 376
	mov	dl, BYTE PTR [eax+edi+4]
	mov	bl, BYTE PTR [esi+edi+4]
; Line 377
	cmp	bl, dl
	jne	SHORT $LN70@mainGtU
; Line 380
	mov	dl, BYTE PTR [eax+edi+5]
	mov	bl, BYTE PTR [esi+edi+5]
; Line 381
	cmp	bl, dl
	jne	SHORT $LN70@mainGtU
; Line 384
	mov	dl, BYTE PTR [eax+edi+6]
	mov	bl, BYTE PTR [esi+edi+6]
; Line 385
	cmp	bl, dl
	jne	SHORT $LN70@mainGtU
; Line 388
	mov	dl, BYTE PTR [eax+edi+7]
	mov	bl, BYTE PTR [esi+edi+7]
; Line 389
	cmp	bl, dl
	jne	SHORT $LN70@mainGtU
; Line 392
	mov	dl, BYTE PTR [eax+edi+8]
	mov	bl, BYTE PTR [esi+edi+8]
; Line 393
	cmp	bl, dl
	jne	SHORT $LN70@mainGtU
; Line 396
	mov	dl, BYTE PTR [eax+edi+9]
	mov	bl, BYTE PTR [esi+edi+9]
; Line 397
	cmp	bl, dl
	jne	SHORT $LN70@mainGtU
; Line 400
	mov	dl, BYTE PTR [eax+edi+10]
	mov	bl, BYTE PTR [esi+edi+10]
; Line 401
	cmp	bl, dl
	jne	$LN70@mainGtU
; Line 404
	mov	dl, BYTE PTR [eax+edi+11]
	mov	bl, BYTE PTR [esi+edi+11]
; Line 405
	cmp	bl, dl
	jne	$LN70@mainGtU
; Line 408
	mov	edx, DWORD PTR _nblock$[ebp]
	add	eax, 12					; 0000000cH
	add	esi, 12					; 0000000cH
	add	edx, 8
	mov	DWORD PTR _k$[ebp], edx
$LL21@mainGtU:
; Line 412
	mov	dl, BYTE PTR [eax+edi]
	mov	bl, BYTE PTR [esi+edi]
; Line 413
	cmp	bl, dl
	jne	$LN70@mainGtU
; Line 414
	movzx	edx, WORD PTR [ecx+eax*2]
	movzx	ebx, WORD PTR [ecx+esi*2]
; Line 415
	cmp	bx, dx
	jne	$LN70@mainGtU
; Line 418
	mov	dl, BYTE PTR [eax+edi+1]
	mov	bl, BYTE PTR [esi+edi+1]
; Line 419
	cmp	bl, dl
	jne	$LN70@mainGtU
; Line 420
	movzx	edx, WORD PTR [ecx+eax*2+2]
	movzx	ebx, WORD PTR [ecx+esi*2+2]
; Line 421
	cmp	bx, dx
	jne	$LN70@mainGtU
; Line 424
	mov	dl, BYTE PTR [eax+edi+2]
	mov	bl, BYTE PTR [esi+edi+2]
; Line 425
	cmp	bl, dl
	jne	$LN70@mainGtU
; Line 426
	movzx	edx, WORD PTR [ecx+eax*2+4]
	movzx	ebx, WORD PTR [ecx+esi*2+4]
; Line 427
	cmp	bx, dx
	jne	$LN70@mainGtU
; Line 430
	mov	dl, BYTE PTR [eax+edi+3]
	mov	bl, BYTE PTR [esi+edi+3]
; Line 431
	cmp	bl, dl
	jne	$LN70@mainGtU
; Line 432
	movzx	edx, WORD PTR [ecx+eax*2+6]
	movzx	ebx, WORD PTR [ecx+esi*2+6]
; Line 433
	cmp	bx, dx
	jne	$LN70@mainGtU
; Line 436
	mov	dl, BYTE PTR [eax+edi+4]
	mov	bl, BYTE PTR [esi+edi+4]
; Line 437
	cmp	bl, dl
	jne	$LN70@mainGtU
; Line 438
	movzx	edx, WORD PTR [ecx+eax*2+8]
	movzx	ebx, WORD PTR [ecx+esi*2+8]
; Line 439
	cmp	bx, dx
	jne	$LN70@mainGtU
; Line 442
	mov	dl, BYTE PTR [eax+edi+5]
	mov	bl, BYTE PTR [esi+edi+5]
; Line 443
	cmp	bl, dl
	jne	$LN70@mainGtU
; Line 444
	movzx	edx, WORD PTR [ecx+eax*2+10]
	movzx	ebx, WORD PTR [ecx+esi*2+10]
; Line 445
	cmp	bx, dx
	jne	$LN70@mainGtU
; Line 448
	mov	dl, BYTE PTR [eax+edi+6]
	mov	bl, BYTE PTR [esi+edi+6]
; Line 449
	cmp	bl, dl
	jne	$LN70@mainGtU
; Line 450
	movzx	edx, WORD PTR [ecx+eax*2+12]
	movzx	ebx, WORD PTR [ecx+esi*2+12]
; Line 451
	cmp	bx, dx
	jne	$LN70@mainGtU
; Line 454
	mov	dl, BYTE PTR [eax+edi+7]
	mov	bl, BYTE PTR [esi+edi+7]
; Line 455
	cmp	bl, dl
	jne	$LN70@mainGtU
; Line 456
	movzx	edx, WORD PTR [ecx+eax*2+14]
	movzx	ebx, WORD PTR [ecx+esi*2+14]
; Line 457
	cmp	bx, dx
	jne	$LN70@mainGtU
; Line 460
	mov	edx, DWORD PTR _nblock$[ebp]
	add	eax, 8
	add	esi, 8
	cmp	eax, edx
	jb	SHORT $LN2@mainGtU
	sub	eax, edx
$LN2@mainGtU:
; Line 461
	cmp	esi, edx
	jb	SHORT $LN1@mainGtU
	sub	esi, edx
$LN1@mainGtU:
; Line 463
	mov	edx, DWORD PTR _k$[ebp]
; Line 464
	mov	ebx, DWORD PTR _budget$[ebp]
	dec	DWORD PTR [ebx]
	sub	edx, 8
	mov	DWORD PTR _k$[ebp], edx
; Line 466
	test	edx, edx
	jns	$LL21@mainGtU
; Line 468
	pop	esi
	xor	al, al
	pop	ebx
; Line 469
	mov	esp, ebp
	pop	ebp
	ret	0
_mainGtU ENDP
; Function compile flags: /Ogtp
tv582 = -28						; size = 4
tv504 = -28						; size = 4
tv457 = -28						; size = 4
_hp$ = -24						; size = 4
tv332 = -20						; size = 4
_h$ = -16						; size = 4
_v$ = -12						; size = 4
_j$ = -8						; size = 4
tv722 = -4						; size = 4
_ptr$ = 8						; size = 4
_block$ = 12						; size = 4
_quadrant$ = 16						; size = 4
_nblock$ = 20						; size = 4
_lo$ = 24						; size = 4
_hi$ = 28						; size = 4
_budget$ = 32						; size = 4
_mainSimpleSort PROC
; _d$ = ebx
; Line 493
	push	ebp
	mov	ebp, esp
; Line 497
	mov	eax, DWORD PTR _hi$[ebp]
	sub	eax, DWORD PTR _lo$[ebp]
	sub	esp, 28					; 0000001cH
	inc	eax
; Line 498
	cmp	eax, 2
	jl	$LN37@mainSimple
; Line 500
	xor	ecx, ecx
; Line 501
	cmp	DWORD PTR _incs, eax
	jge	SHORT $LN19@mainSimple
$LL20@mainSimple:
	inc	ecx
	cmp	DWORD PTR _incs[ecx*4], eax
	jl	SHORT $LL20@mainSimple
$LN19@mainSimple:
; Line 502
	dec	ecx
	mov	DWORD PTR _hp$[ebp], ecx
; Line 504
	js	$LN37@mainSimple
	push	esi
	push	edi
	npad	10
$LL50@mainSimple:
; Line 505
	mov	eax, DWORD PTR _incs[ecx*4]
; Line 507
	mov	edx, DWORD PTR _lo$[ebp]
	lea	esi, DWORD PTR [eax+edx]
	mov	DWORD PTR _h$[ebp], eax
	mov	DWORD PTR tv332[ebp], esi
; Line 511
	cmp	esi, DWORD PTR _hi$[ebp]
	jg	$LN17@mainSimple
; Line 505
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	ecx, esi
	sub	ecx, eax
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv722[ebp], eax
	npad	7
$LL15@mainSimple:
; Line 512
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [ecx+esi*4]
; Line 516
	mov	ecx, DWORD PTR _nblock$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	DWORD PTR _v$[ebp], eax
	lea	edx, DWORD PTR [eax+ebx]
	mov	eax, DWORD PTR _budget$[ebp]
	push	eax
	mov	eax, DWORD PTR tv722[ebp]
	mov	eax, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _quadrant$[ebp]
	add	eax, ebx
	mov	DWORD PTR _j$[ebp], esi
	call	_mainGtU
	add	esp, 8
	test	al, al
	je	SHORT $LN41@mainSimple
; Line 512
	mov	ecx, DWORD PTR tv722[ebp]
	jmp	SHORT $LN12@mainSimple
$LL40@mainSimple:
	mov	ecx, DWORD PTR tv457[ebp]
$LN12@mainSimple:
; Line 517
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR [edi+eax*4], edx
; Line 518
	mov	edx, DWORD PTR _h$[ebp]
	sub	eax, edx
	add	edx, edx
	add	edx, edx
	sub	ecx, edx
; Line 519
	mov	edx, DWORD PTR tv332[ebp]
	dec	edx
	mov	DWORD PTR _j$[ebp], eax
	mov	DWORD PTR tv457[ebp], ecx
	cmp	eax, edx
	jle	SHORT $LN49@mainSimple
; Line 516
	mov	eax, DWORD PTR _budget$[ebp]
	mov	edx, DWORD PTR _nblock$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _quadrant$[ebp]
	push	edx
	mov	edx, DWORD PTR _v$[ebp]
	add	eax, ebx
	add	edx, ebx
	call	_mainGtU
	add	esp, 8
	test	al, al
	jne	SHORT $LL40@mainSimple
$LN41@mainSimple:
	mov	edi, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
$LN49@mainSimple:
; Line 521
	mov	ecx, DWORD PTR _v$[ebp]
; Line 522
	add	DWORD PTR tv722[ebp], 4
	inc	esi
	mov	DWORD PTR [edi+eax*4], ecx
; Line 525
	cmp	esi, DWORD PTR _hi$[ebp]
	jg	$LN46@mainSimple
; Line 530
	mov	eax, DWORD PTR _budget$[ebp]
	mov	edi, DWORD PTR [edi+esi*4]
	mov	ecx, DWORD PTR _nblock$[ebp]
	push	eax
	mov	eax, DWORD PTR tv722[ebp]
	mov	eax, DWORD PTR [eax]
	lea	edx, DWORD PTR [edi+ebx]
	push	ecx
	mov	ecx, DWORD PTR _quadrant$[ebp]
	mov	DWORD PTR _v$[ebp], edi
	mov	edi, DWORD PTR _block$[ebp]
	add	eax, ebx
	mov	DWORD PTR _j$[ebp], esi
	call	_mainGtU
	add	esp, 8
	test	al, al
	je	SHORT $LN43@mainSimple
; Line 526
	mov	ecx, DWORD PTR tv722[ebp]
	jmp	SHORT $LN8@mainSimple
	npad	5
$LL42@mainSimple:
	mov	ecx, DWORD PTR tv504[ebp]
$LN8@mainSimple:
; Line 531
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR [edi+eax*4], edx
; Line 532
	mov	edx, DWORD PTR _h$[ebp]
	sub	eax, edx
	add	edx, edx
	add	edx, edx
	sub	ecx, edx
; Line 533
	mov	edx, DWORD PTR tv332[ebp]
	dec	edx
	mov	DWORD PTR _j$[ebp], eax
	mov	DWORD PTR tv504[ebp], ecx
	cmp	eax, edx
	jle	SHORT $LN48@mainSimple
; Line 530
	mov	eax, DWORD PTR _budget$[ebp]
	mov	edx, DWORD PTR _nblock$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _quadrant$[ebp]
	push	edx
	mov	edx, DWORD PTR _v$[ebp]
	add	eax, ebx
	add	edx, ebx
	call	_mainGtU
	add	esp, 8
	test	al, al
	jne	SHORT $LL42@mainSimple
$LN43@mainSimple:
	mov	eax, DWORD PTR _j$[ebp]
$LN48@mainSimple:
; Line 535
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _ptr$[ebp]
; Line 536
	add	DWORD PTR tv722[ebp], 4
	inc	esi
	mov	DWORD PTR [edx+eax*4], ecx
; Line 539
	cmp	esi, DWORD PTR _hi$[ebp]
	jg	$LN46@mainSimple
; Line 544
	mov	ecx, DWORD PTR _budget$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, edx
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR _v$[ebp], eax
	lea	edx, DWORD PTR [eax+ebx]
	mov	eax, DWORD PTR _nblock$[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv722[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _quadrant$[ebp]
	add	eax, ebx
	mov	DWORD PTR _j$[ebp], esi
	call	_mainGtU
	add	esp, 8
	test	al, al
	je	SHORT $LN45@mainSimple
; Line 540
	mov	ecx, DWORD PTR tv722[ebp]
	jmp	SHORT $LN4@mainSimple
$LL44@mainSimple:
	mov	ecx, DWORD PTR tv582[ebp]
$LN4@mainSimple:
; Line 545
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _j$[ebp]
	mov	edi, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR [edi+eax*4], edx
; Line 546
	mov	edx, DWORD PTR _h$[ebp]
	sub	eax, edx
	add	edx, edx
	add	edx, edx
	sub	ecx, edx
; Line 547
	mov	edx, DWORD PTR tv332[ebp]
	dec	edx
	mov	DWORD PTR _j$[ebp], eax
	mov	DWORD PTR tv582[ebp], ecx
	cmp	eax, edx
	jle	SHORT $LN47@mainSimple
; Line 544
	mov	eax, DWORD PTR _budget$[ebp]
	mov	edx, DWORD PTR _nblock$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	push	eax
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _quadrant$[ebp]
	push	edx
	mov	edx, DWORD PTR _v$[ebp]
	add	eax, ebx
	add	edx, ebx
	call	_mainGtU
	add	esp, 8
	test	al, al
	jne	SHORT $LL44@mainSimple
$LN45@mainSimple:
	mov	eax, DWORD PTR _j$[ebp]
$LN47@mainSimple:
; Line 549
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _ptr$[ebp]
; Line 550
	add	DWORD PTR tv722[ebp], 4
	mov	DWORD PTR [edx+eax*4], ecx
; Line 552
	mov	eax, DWORD PTR _budget$[ebp]
	inc	esi
	cmp	DWORD PTR [eax], 0
	jl	SHORT $LN51@mainSimple
; Line 511
	cmp	esi, DWORD PTR _hi$[ebp]
	jle	$LL15@mainSimple
$LN46@mainSimple:
	mov	ecx, DWORD PTR _hp$[ebp]
$LN17@mainSimple:
; Line 504
	dec	ecx
	mov	DWORD PTR _hp$[ebp], ecx
	jns	$LL50@mainSimple
$LN51@mainSimple:
	pop	edi
	pop	esi
$LN37@mainSimple:
; Line 555
	mov	esp, ebp
	pop	ebp
	ret	0
_mainSimpleSort ENDP
; Function compile flags: /Ogtp
_mmed3	PROC
; _a$ = eax
; _b$ = ecx
; _c$ = ebx
; Line 586
	cmp	al, cl
	jbe	SHORT $LN3@mmed3
	mov	dl, al
	mov	al, cl
	mov	cl, dl
$LN3@mmed3:
; Line 587
	cmp	cl, bl
	jbe	SHORT $LN7@mmed3
; Line 589
	cmp	al, bl
	ja	SHORT $LN1@mmed3
; Line 591
	mov	al, bl
; Line 592
	ret	0
$LN7@mmed3:
; Line 591
	mov	al, cl
$LN1@mmed3:
; Line 592
	ret	0
_mmed3	ENDP
_TEXT	ENDS
PUBLIC	_block$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_nextD$ = -1280						; size = 12
_nextLo$ = -1268					; size = 12
_block$GSCopy$ = -1256					; size = 4
_gtHi$ = -1252						; size = 4
_nextHi$ = -1248					; size = 12
tv998 = -1236						; size = 4
tv933 = -1236						; size = 4
tv487 = -1236						; size = 4
tv535 = -1232						; size = 4
tv519 = -1232						; size = 4
tv501 = -1232						; size = 4
_hi$ = -1232						; size = 4
tv552 = -1228						; size = 4
_tz$82136 = -1228					; size = 4
_zztmp$82130 = -1228					; size = 4
_m$ = -1228						; size = 4
_zztmp$82123 = -1228					; size = 4
_n$ = -1224						; size = 4
_sp$ = -1224						; size = 4
_yyn$82126 = -1220					; size = 4
_yyn$82119 = -1220					; size = 4
_med$ = -1220						; size = 4
$T82516 = -1216						; size = 1
$T82517 = -1212						; size = 1
$T82518 = -1212						; size = 1
tv983 = -1208						; size = 4
tv918 = -1208						; size = 4
_ltLo$ = -1208						; size = 4
_stackD$ = -1204					; size = 400
_stackLo$ = -804					; size = 400
_stackHi$ = -404					; size = 400
__$ArrayPad$ = -4					; size = 4
_block$ = 8						; size = 4
_quadrant$ = 12						; size = 4
_nblock$ = 16						; size = 4
_dSt$ = 20						; size = 4
_budget$ = 24						; size = 4
_mainQSort3 PROC
; _ptr$ = esi
; _loSt$ = ecx
; _hiSt$ = edx
; Line 629
	push	ebp
	mov	ebp, esp
	sub	esp, 1280				; 00000500H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 644
	mov	eax, DWORD PTR _block$[ebp]
	push	ebx
	mov	DWORD PTR _block$GSCopy$[ebp], eax
	mov	eax, DWORD PTR _dSt$[ebp]
	push	edi
	mov	DWORD PTR _stackLo$[ebp], ecx
	mov	DWORD PTR _stackHi$[ebp], edx
	mov	DWORD PTR _stackD$[ebp], eax
	mov	edi, 1
$LL27@mainQSort3:
; Line 646
	cmp	edi, 98					; 00000062H
	jl	SHORT $LN25@mainQSort3
	push	1001					; 000003e9H
	call	_BZ2_bz__AssertH__fail
	add	esp, 4
$LN25@mainQSort3:
; Line 648
	mov	eax, DWORD PTR _stackHi$[ebp+edi*4-4]
	mov	ecx, DWORD PTR _stackLo$[ebp+edi*4-4]
	mov	ebx, DWORD PTR _stackD$[ebp+edi*4-4]
	dec	edi
; Line 650
	mov	edx, eax
	sub	edx, ecx
	mov	DWORD PTR _sp$[ebp], edi
	mov	DWORD PTR _hi$[ebp], eax
	cmp	edx, 20					; 00000014H
	jl	$LN23@mainQSort3
	cmp	ebx, 14					; 0000000eH
	jg	$LN23@mainQSort3
; Line 659
	mov	edi, DWORD PTR _block$GSCopy$[ebp]
	lea	edx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [esi+eax*4]
	sar	edx, 1
	mov	edx, DWORD PTR [esi+edx*4]
	add	edx, edi
	movzx	edx, BYTE PTR [edx+ebx]
	mov	BYTE PTR $T82518[ebp], dl
	lea	edx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR tv487[ebp], edx
	mov	edx, DWORD PTR [edx]
	add	eax, edi
	mov	al, BYTE PTR [eax+ebx]
	add	edx, edi
	mov	dl, BYTE PTR [edx+ebx]
	mov	BYTE PTR $T82516[ebp], dl
	cmp	dl, al
	jbe	SHORT $LN36@mainQSort3
	mov	BYTE PTR $T82516[ebp], al
	mov	al, dl
$LN36@mainQSort3:
	mov	dl, BYTE PTR $T82518[ebp]
	cmp	al, dl
	jbe	SHORT $LN34@mainQSort3
	mov	al, BYTE PTR $T82516[ebp]
	mov	BYTE PTR $T82517[ebp], dl
	cmp	al, dl
	ja	SHORT $LN34@mainQSort3
	mov	al, dl
$LN34@mainQSort3:
	movzx	eax, al
	mov	DWORD PTR _med$[ebp], eax
; Line 662
	mov	eax, DWORD PTR _hi$[ebp]
	mov	edx, ecx
	mov	DWORD PTR _ltLo$[ebp], edx
	mov	DWORD PTR _gtHi$[ebp], eax
	npad	1
$LL21@mainQSort3:
; Line 666
	cmp	ecx, eax
	jg	$LN58@mainQSort3
	npad	8
$LL19@mainQSort3:
; Line 667
	mov	edx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR tv501[ebp], edx
	add	edx, DWORD PTR _block$GSCopy$[ebp]
	movzx	edx, BYTE PTR [edx+ebx]
	sub	edx, DWORD PTR _med$[ebp]
; Line 668
	jne	SHORT $LN16@mainQSort3
; Line 669
	mov	edx, DWORD PTR _ltLo$[ebp]
	mov	edi, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [esi+ecx*4], edi
	mov	edi, DWORD PTR tv501[ebp]
	mov	DWORD PTR [esi+edx*4], edi
; Line 670
	inc	edx
	inc	ecx
	mov	DWORD PTR _ltLo$[ebp], edx
	cmp	ecx, eax
	jle	SHORT $LL19@mainQSort3
; Line 666
	jmp	SHORT $LN58@mainQSort3
$LN16@mainQSort3:
; Line 672
	test	edx, edx
	jle	$LN15@mainQSort3
; Line 676
	cmp	ecx, eax
	jg	SHORT $LN62@mainQSort3
	npad	6
$LL14@mainQSort3:
; Line 677
	mov	edx, DWORD PTR [esi+eax*4]
	mov	DWORD PTR tv519[ebp], edx
	add	edx, DWORD PTR _block$GSCopy$[ebp]
	movzx	edx, BYTE PTR [edx+ebx]
	sub	edx, DWORD PTR _med$[ebp]
; Line 678
	jne	SHORT $LN11@mainQSort3
; Line 679
	mov	edx, DWORD PTR _gtHi$[ebp]
	mov	edi, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [esi+eax*4], edi
	mov	edi, DWORD PTR tv519[ebp]
	mov	DWORD PTR [esi+edx*4], edi
; Line 680
	dec	edx
	mov	DWORD PTR _gtHi$[ebp], edx
	jmp	SHORT $LN71@mainQSort3
$LN11@mainQSort3:
; Line 682
	test	edx, edx
	js	SHORT $LN50@mainQSort3
$LN71@mainQSort3:
; Line 683
	dec	eax
	cmp	ecx, eax
	jle	SHORT $LL14@mainQSort3
$LN62@mainQSort3:
; Line 674
	mov	edx, DWORD PTR _ltLo$[ebp]
$LN58@mainQSort3:
; Line 691
	cmp	DWORD PTR _gtHi$[ebp], edx
	jge	SHORT $LN8@mainQSort3
; Line 692
	mov	edi, DWORD PTR _sp$[ebp]
	inc	ebx
	mov	DWORD PTR _stackD$[ebp+edi*4], ebx
	inc	edi
; Line 693
	jmp	$LN22@mainQSort3
$LN50@mainQSort3:
; Line 685
	cmp	ecx, eax
	jg	SHORT $LN62@mainQSort3
; Line 686
	mov	edx, DWORD PTR [esi+ecx*4]
	mov	edi, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [esi+ecx*4], edi
	mov	DWORD PTR [esi+eax*4], edx
; Line 687
	mov	edx, DWORD PTR _ltLo$[ebp]
	inc	ecx
	dec	eax
	jmp	$LL21@mainQSort3
$LN15@mainQSort3:
; Line 674
	mov	edx, DWORD PTR _ltLo$[ebp]
	inc	ecx
	jmp	$LL21@mainQSort3
$LN8@mainQSort3:
; Line 696
	mov	edi, ecx
	sub	edi, edx
	mov	DWORD PTR tv535[ebp], edi
	mov	edi, DWORD PTR _sp$[ebp]
	sub	edx, DWORD PTR _stackLo$[ebp+edi*4]
	mov	edi, DWORD PTR tv535[ebp]
	cmp	edx, edi
	jl	SHORT $LN31@mainQSort3
	mov	edx, edi
$LN31@mainQSort3:
	mov	DWORD PTR _yyn$82119[ebp], edx
	test	edx, edx
	jle	SHORT $LN6@mainQSort3
	mov	edi, DWORD PTR tv487[ebp]
	mov	DWORD PTR tv918[ebp], edi
	mov	edi, ecx
	sub	edi, edx
	lea	edx, DWORD PTR [esi+edi*4]
	mov	DWORD PTR tv933[ebp], edx
$LL7@mainQSort3:
	mov	edi, DWORD PTR tv918[ebp]
	mov	edi, DWORD PTR [edi]
	mov	edx, DWORD PTR [edx]
	dec	DWORD PTR _yyn$82119[ebp]
	mov	DWORD PTR _zztmp$82123[ebp], edi
	mov	edi, DWORD PTR tv918[ebp]
	add	DWORD PTR tv918[ebp], 4
	mov	DWORD PTR [edi], edx
	mov	edx, DWORD PTR tv933[ebp]
	mov	edi, DWORD PTR _zztmp$82123[ebp]
	mov	DWORD PTR [edx], edi
	add	edx, 4
	cmp	DWORD PTR _yyn$82119[ebp], 0
	mov	DWORD PTR tv933[ebp], edx
	jg	SHORT $LL7@mainQSort3
$LN6@mainQSort3:
; Line 697
	mov	edi, DWORD PTR _gtHi$[ebp]
	mov	edx, edi
	sub	edx, eax
	mov	DWORD PTR tv552[ebp], edx
	mov	edx, DWORD PTR _sp$[ebp]
	mov	edx, DWORD PTR _stackHi$[ebp+edx*4]
	sub	edx, edi
	mov	edi, DWORD PTR tv552[ebp]
	cmp	edx, edi
	jl	SHORT $LN33@mainQSort3
	mov	edx, edi
$LN33@mainQSort3:
	mov	edi, DWORD PTR _sp$[ebp]
	mov	DWORD PTR _yyn$82126[ebp], edx
	test	edx, edx
	jle	SHORT $LN4@mainQSort3
	lea	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR tv983[ebp], ecx
	mov	ecx, DWORD PTR _stackHi$[ebp+edi*4]
	sub	ecx, edx
	lea	ecx, DWORD PTR [esi+ecx*4+4]
	mov	DWORD PTR tv998[ebp], ecx
	npad	1
$LL5@mainQSort3:
	mov	edx, DWORD PTR tv983[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	dec	DWORD PTR _yyn$82126[ebp]
	mov	DWORD PTR _zztmp$82130[ebp], edx
	mov	edx, DWORD PTR tv983[ebp]
	add	DWORD PTR tv983[ebp], 4
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR tv998[ebp]
	mov	edx, DWORD PTR _zztmp$82130[ebp]
	mov	DWORD PTR [ecx], edx
	add	ecx, 4
	cmp	DWORD PTR _yyn$82126[ebp], 0
	mov	DWORD PTR tv998[ebp], ecx
	jg	SHORT $LL5@mainQSort3
$LN4@mainQSort3:
; Line 699
	mov	ecx, DWORD PTR _stackLo$[ebp+edi*4]
	mov	edx, DWORD PTR tv535[ebp]
; Line 700
	sub	eax, DWORD PTR _gtHi$[ebp]
	lea	edx, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR _n$[ebp], edx
	mov	edx, DWORD PTR _stackHi$[ebp+edi*4]
	lea	eax, DWORD PTR [eax+edx+1]
; Line 702
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _nextHi$[ebp], edx
; Line 703
	mov	edx, DWORD PTR _stackHi$[ebp+edi*4]
	mov	DWORD PTR _nextHi$[ebp+4], edx
; Line 704
	mov	edx, DWORD PTR _n$[ebp]
	inc	edx
	mov	DWORD PTR _nextLo$[ebp+8], edx
	lea	edx, DWORD PTR [eax-1]
	mov	DWORD PTR _nextHi$[ebp+8], edx
	lea	edx, DWORD PTR [ebx+1]
	mov	DWORD PTR _nextD$[ebp+8], edx
; Line 706
	mov	edx, DWORD PTR _stackHi$[ebp+edi*4]
	sub	edx, eax
	mov	DWORD PTR _m$[ebp], eax
	mov	DWORD PTR _nextLo$[ebp+4], eax
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _nextLo$[ebp], ecx
	mov	DWORD PTR _nextD$[ebp], ebx
	mov	DWORD PTR _nextD$[ebp+4], ebx
	cmp	eax, edx
	jge	SHORT $LN65@mainQSort3
	mov	eax, DWORD PTR _stackHi$[ebp+edi*4]
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR _nextHi$[ebp], eax
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _nextLo$[ebp], edx
	mov	DWORD PTR _nextLo$[ebp+4], ecx
	mov	DWORD PTR _nextHi$[ebp+4], eax
	mov	DWORD PTR _nextD$[ebp], ebx
	mov	DWORD PTR _nextD$[ebp+4], ebx
	jmp	SHORT $LN3@mainQSort3
$LN65@mainQSort3:
	mov	ecx, DWORD PTR _nextLo$[ebp+4]
$LN3@mainQSort3:
; Line 707
	mov	edx, DWORD PTR _nextHi$[ebp+8]
	mov	eax, DWORD PTR _nextHi$[ebp+4]
	sub	edx, DWORD PTR _nextLo$[ebp+8]
	sub	eax, ecx
	cmp	eax, edx
	jge	SHORT $LN66@mainQSort3
	mov	edx, DWORD PTR _nextHi$[ebp+8]
	mov	eax, ecx
	mov	ecx, DWORD PTR _nextLo$[ebp+8]
	mov	DWORD PTR _nextLo$[ebp+8], eax
	mov	eax, DWORD PTR _nextHi$[ebp+4]
	mov	DWORD PTR _nextHi$[ebp+8], eax
	mov	eax, DWORD PTR _nextD$[ebp+8]
	mov	DWORD PTR _nextLo$[ebp+4], ecx
	mov	DWORD PTR _nextHi$[ebp+4], edx
	mov	DWORD PTR _nextD$[ebp+4], eax
	mov	DWORD PTR _nextD$[ebp+8], ebx
$LN66@mainQSort3:
; Line 708
	mov	edx, DWORD PTR _nextHi$[ebp+4]
	mov	eax, DWORD PTR _nextLo$[ebp]
	sub	edx, ecx
	mov	ecx, DWORD PTR _nextHi$[ebp]
	sub	ecx, eax
	cmp	ecx, edx
	jge	SHORT $LN67@mainQSort3
	mov	edx, DWORD PTR _nextHi$[ebp]
	mov	DWORD PTR _tz$82136[ebp], edx
	mov	edx, DWORD PTR _nextHi$[ebp+4]
	mov	DWORD PTR _nextHi$[ebp], edx
	mov	edx, DWORD PTR _tz$82136[ebp]
	mov	ecx, eax
	mov	eax, DWORD PTR _nextLo$[ebp+4]
	mov	DWORD PTR _nextHi$[ebp+4], edx
	mov	edx, DWORD PTR _nextD$[ebp+4]
	jmp	SHORT $LN1@mainQSort3
$LN67@mainQSort3:
	mov	ecx, DWORD PTR _nextLo$[ebp+4]
	mov	ebx, DWORD PTR _nextD$[ebp+4]
	mov	edx, DWORD PTR _nextD$[ebp]
$LN1@mainQSort3:
; Line 713
	mov	DWORD PTR _stackLo$[ebp+edi*4], eax
	mov	eax, DWORD PTR _nextHi$[ebp]
; Line 714
	mov	DWORD PTR _stackLo$[ebp+edi*4+4], ecx
	mov	ecx, DWORD PTR _nextHi$[ebp+4]
	mov	DWORD PTR _stackHi$[ebp+edi*4], eax
; Line 715
	mov	eax, DWORD PTR _nextHi$[ebp+8]
	mov	DWORD PTR _stackD$[ebp+edi*4], edx
	mov	edx, DWORD PTR _nextLo$[ebp+8]
	mov	DWORD PTR _stackHi$[ebp+edi*4+4], ecx
	mov	ecx, DWORD PTR _nextD$[ebp+8]
	mov	DWORD PTR _stackD$[ebp+edi*4+4], ebx
	mov	DWORD PTR _stackLo$[ebp+edi*4+8], edx
	mov	DWORD PTR _stackHi$[ebp+edi*4+8], eax
	mov	DWORD PTR _stackD$[ebp+edi*4+8], ecx
	add	edi, 3
; Line 716
	jmp	SHORT $LN22@mainQSort3
$LN23@mainQSort3:
; Line 651
	mov	edx, DWORD PTR _budget$[ebp]
	push	edx
	mov	edx, DWORD PTR _block$GSCopy$[ebp]
	push	eax
	mov	eax, DWORD PTR _nblock$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _quadrant$[ebp]
	push	eax
	push	ecx
	push	edx
	push	esi
	call	_mainSimpleSort
; Line 652
	mov	eax, DWORD PTR _budget$[ebp]
	add	esp, 28					; 0000001cH
	cmp	DWORD PTR [eax], 0
	jl	SHORT $LN53@mainQSort3
$LN22@mainQSort3:
; Line 644
	test	edi, edi
	jg	$LL27@mainQSort3
$LN53@mainQSort3:
; Line 717
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_mainQSort3 ENDP
_TEXT	ENDS
PUBLIC	_nblock$GSCopy$
PUBLIC	_quadrant$GSCopy$
PUBLIC	_block$GSCopy$
PUBLIC	_ptr$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv2905 = -3380						; size = 4
tv1313 = -3376						; size = 4
tv1223 = -3376						; size = 4
tv1282 = -3372						; size = 4
_sb$ = -3372						; size = 4
_block$GSCopy$ = -3368					; size = 4
_quadrant$GSCopy$ = -3364				; size = 4
tv2089 = -3360						; size = 4
_ss$ = -3360						; size = 4
_vv$82199 = -3360					; size = 4
tv2096 = -3356						; size = 4
tv1249 = -3356						; size = 4
_j$ = -3356						; size = 4
_ptr$GSCopy$ = -3352					; size = 4
_nblock$GSCopy$ = -3348					; size = 4
tv2687 = -3344						; size = 4
_numQSorted$ = -3344					; size = 4
tv3101 = -3340						; size = 4
tv1244 = -3340						; size = 4
_lo$82223 = -3340					; size = 4
_h$82200 = -3340					; size = 4
_s$ = -3336						; size = 2
_i$ = -3336						; size = 4
_copyStart$ = -3332					; size = 1024
_copyEnd$ = -2308					; size = 1024
_runningOrder$ = -1284					; size = 1024
_bigDone$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_ptr$ = 8						; size = 4
_nblock$ = 12						; size = 4
_verb$ = 16						; size = 4
_budget$ = 20						; size = 4
_mainSort PROC
; _block$ = edx
; _quadrant$ = ecx
; _ftab$ = ebx
; Line 758
	push	ebp
	mov	ebp, esp
	sub	esp, 3380				; 00000d34H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 767
	cmp	DWORD PTR _verb$[ebp], 4
; Line 1010
	mov	eax, DWORD PTR _ptr$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _nblock$[ebp]
	mov	esi, edx
	mov	DWORD PTR _ptr$GSCopy$[ebp], eax
	mov	DWORD PTR _block$GSCopy$[ebp], esi
	mov	DWORD PTR _quadrant$GSCopy$[ebp], ecx
	mov	DWORD PTR _nblock$GSCopy$[ebp], edi
	jl	SHORT $LN77@mainSort
; Line 767
	push	OFFSET $SG82166
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
$LN77@mainSort:
; Line 770
	mov	eax, 65536				; 00010000H
	npad	8
$LL76@mainSort:
	dec	eax
	mov	DWORD PTR [ebx+eax*4+4], 0
	jns	SHORT $LL76@mainSort
; Line 772
	movzx	ecx, BYTE PTR [esi]
; Line 773
	lea	edx, DWORD PTR [edi-1]
	shl	ecx, 8
; Line 774
	cmp	edx, 3
	jl	SHORT $LN71@mainSort
; Line 772
	mov	eax, DWORD PTR _quadrant$GSCopy$[ebp]
	lea	edi, DWORD PTR [eax+edx*2-4]
$LL73@mainSort:
; Line 775
	xor	eax, eax
	mov	WORD PTR [edi+4], ax
; Line 776
	movzx	eax, BYTE PTR [esi+edx]
	sar	ecx, 8
	shl	eax, 8
	or	eax, ecx
; Line 777
	inc	DWORD PTR [ebx+eax*4]
; Line 778
	xor	ecx, ecx
	mov	WORD PTR [edi+2], cx
; Line 779
	movzx	ecx, BYTE PTR [esi+edx-1]
	shl	ecx, 8
	sar	eax, 8
	or	ecx, eax
; Line 780
	inc	DWORD PTR [ebx+ecx*4]
; Line 781
	xor	eax, eax
	mov	WORD PTR [edi], ax
; Line 782
	movzx	eax, BYTE PTR [esi+edx-2]
	sar	ecx, 8
	shl	eax, 8
	or	eax, ecx
; Line 783
	inc	DWORD PTR [ebx+eax*4]
; Line 784
	xor	ecx, ecx
	mov	WORD PTR [edi-2], cx
; Line 785
	movzx	ecx, BYTE PTR [esi+edx-3]
	shl	ecx, 8
	sar	eax, 8
	or	ecx, eax
; Line 786
	inc	DWORD PTR [ebx+ecx*4]
	sub	edx, 4
	sub	edi, 8
	cmp	edx, 3
	jge	SHORT $LL73@mainSort
$LN71@mainSort:
; Line 788
	mov	edi, DWORD PTR _quadrant$GSCopy$[ebp]
	test	edx, edx
	js	SHORT $LN68@mainSort
	npad	2
$LL70@mainSort:
; Line 789
	xor	eax, eax
	mov	WORD PTR [edi+edx*2], ax
; Line 790
	movzx	eax, BYTE PTR [esi+edx]
	shl	eax, 8
	sar	ecx, 8
	or	ecx, eax
; Line 791
	inc	DWORD PTR [ebx+ecx*4]
	dec	edx
	jns	SHORT $LL70@mainSort
$LN68@mainSort:
; Line 795
	mov	ecx, DWORD PTR _nblock$GSCopy$[ebp]
	xor	eax, eax
	lea	edi, DWORD PTR [edi+ecx*2]
; Line 797
	add	ecx, esi
$LL67@mainSort:
; Line 796
	mov	dl, BYTE PTR [esi+eax]
	mov	BYTE PTR [ecx+eax], dl
; Line 797
	xor	edx, edx
	mov	WORD PTR [edi], dx
	inc	eax
	add	edi, 2
	cmp	eax, 34					; 00000022H
	jl	SHORT $LL67@mainSort
; Line 800
	cmp	DWORD PTR _verb$[ebp], 4
	jl	SHORT $LN64@mainSort
	push	OFFSET $SG82185
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
$LN64@mainSort:
; Line 803
	lea	eax, DWORD PTR [ebx+8]
	mov	edx, 16384				; 00004000H
	npad	1
$LL63@mainSort:
	mov	ecx, DWORD PTR [eax-8]
	add	DWORD PTR [eax-4], ecx
	mov	ecx, DWORD PTR [eax-4]
	add	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [eax]
	add	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [eax+4]
	add	DWORD PTR [eax+8], ecx
	add	eax, 16					; 00000010H
	dec	edx
	jne	SHORT $LL63@mainSort
; Line 805
	movzx	edx, BYTE PTR [esi]
; Line 806
	mov	ecx, DWORD PTR _nblock$GSCopy$[ebp]
	shl	dx, 8
	dec	ecx
	movzx	edx, dx
; Line 807
	cmp	ecx, 3
	jl	$LN58@mainSort
	or	edi, -1
	sub	edi, esi
	mov	DWORD PTR tv2089[ebp], edi
	mov	edi, -2					; fffffffeH
	sub	edi, esi
	lea	eax, DWORD PTR [esi+ecx-1]
	mov	DWORD PTR tv2096[ebp], edi
$LL153@mainSort:
; Line 808
	movzx	esi, BYTE PTR [eax+1]
	shr	dx, 8
	shl	si, 8
	or	si, dx
	movzx	edx, si
; Line 809
	movzx	esi, dx
	mov	edi, DWORD PTR [ebx+esi*4]
	dec	edi
; Line 810
	mov	DWORD PTR [ebx+esi*4], edi
; Line 812
	shr	dx, 8
	lea	esi, DWORD PTR [ebx+esi*4]
	mov	esi, DWORD PTR _ptr$GSCopy$[ebp]
	mov	DWORD PTR [esi+edi*4], ecx
	movzx	edi, BYTE PTR [eax]
	shl	di, 8
	or	di, dx
	movzx	edx, di
	mov	DWORD PTR _s$[ebp], edx
; Line 813
	movzx	edx, dx
	lea	edi, DWORD PTR [ebx+edx*4]
	mov	edx, DWORD PTR [edi]
	dec	edx
; Line 814
	mov	DWORD PTR [edi], edx
	lea	edi, DWORD PTR [ecx-1]
; Line 815
	mov	DWORD PTR [esi+edx*4], edi
; Line 816
	movzx	edi, BYTE PTR [eax-1]
	mov	edx, DWORD PTR _s$[ebp]
	shr	dx, 8
	shl	di, 8
	or	di, dx
	movzx	edx, di
	mov	DWORD PTR _s$[ebp], edx
; Line 817
	movzx	edx, dx
	lea	edi, DWORD PTR [ebx+edx*4]
	mov	edx, DWORD PTR [edi]
	dec	edx
; Line 818
	mov	DWORD PTR [edi], edx
; Line 819
	mov	edi, DWORD PTR tv2089[ebp]
	add	edi, eax
	mov	DWORD PTR [esi+edx*4], edi
; Line 820
	movzx	edi, BYTE PTR [eax-2]
	mov	edx, DWORD PTR _s$[ebp]
	shr	dx, 8
	shl	di, 8
	or	di, dx
	movzx	edx, di
	mov	DWORD PTR _s$[ebp], edx
; Line 821
	movzx	edx, dx
	lea	edi, DWORD PTR [ebx+edx*4]
	mov	edx, DWORD PTR [edi]
	dec	edx
; Line 822
	mov	DWORD PTR [edi], edx
	mov	edi, DWORD PTR tv2096[ebp]
	add	edi, eax
	sub	ecx, 4
	sub	eax, 4
; Line 823
	mov	DWORD PTR [esi+edx*4], edi
	mov	edx, DWORD PTR _s$[ebp]
	cmp	ecx, 3
	jge	$LL153@mainSort
$LN58@mainSort:
; Line 825
	test	ecx, ecx
	js	SHORT $LN55@mainSort
	mov	edi, DWORD PTR _ptr$GSCopy$[ebp]
	npad	7
$LL57@mainSort:
; Line 826
	mov	eax, DWORD PTR _block$GSCopy$[ebp]
	movzx	eax, BYTE PTR [eax+ecx]
	shl	ax, 8
	shr	dx, 8
	or	ax, dx
	movzx	edx, ax
; Line 827
	movzx	eax, dx
	lea	esi, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR [esi]
	dec	eax
; Line 828
	mov	DWORD PTR [esi], eax
; Line 829
	mov	DWORD PTR [edi+eax*4], ecx
	dec	ecx
	jns	SHORT $LL57@mainSort
$LN55@mainSort:
; Line 838
	push	256					; 00000100H
	xor	esi, esi
	lea	ecx, DWORD PTR _bigDone$[ebp]
	push	esi
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LL54@mainSort:
; Line 839
	mov	DWORD PTR _runningOrder$[ebp+esi*4], esi
	inc	esi
	cmp	esi, 255				; 000000ffH
	jle	SHORT $LL54@mainSort
; Line 844
	mov	edi, 1
	npad	11
$LL51@mainSort:
; Line 845
	lea	edi, DWORD PTR [edi+edi*2+1]
	cmp	edi, 256				; 00000100H
	jle	SHORT $LL51@mainSort
	npad	4
$LL48@mainSort:
; Line 847
	mov	eax, 1431655766				; 55555556H
	imul	edi
	mov	edi, edx
	shr	edi, 31					; 0000001fH
	add	edi, edx
; Line 848
	mov	ecx, edi
	mov	DWORD PTR _h$82200[ebp], edi
	mov	DWORD PTR _i$[ebp], ecx
	cmp	edi, 255				; 000000ffH
	jg	$LN47@mainSort
; Line 847
	lea	edx, DWORD PTR _runningOrder$[ebp]
	mov	DWORD PTR tv2687[ebp], edx
	npad	12
$LL45@mainSort:
; Line 849
	mov	edx, DWORD PTR _runningOrder$[ebp+ecx*4]
	mov	DWORD PTR _vv$82199[ebp], edx
; Line 851
	shl	edx, 10					; 0000000aH
	mov	eax, ecx
	lea	ecx, DWORD PTR [edx+ebx]
	mov	edx, DWORD PTR [ecx+1024]
	sub	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv2687[ebp]
	mov	ecx, DWORD PTR [ecx]
	shl	ecx, 10					; 0000000aH
	mov	esi, DWORD PTR [ecx+ebx+1024]
	sub	esi, DWORD PTR [ecx+ebx]
	cmp	esi, edx
	jbe	SHORT $LN155@mainSort
; Line 849
	mov	ecx, DWORD PTR tv2687[ebp]
	npad	4
$LL42@mainSort:
; Line 852
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR _runningOrder$[ebp+eax*4], esi
; Line 853
	lea	esi, DWORD PTR [edi*4]
	sub	ecx, esi
	sub	eax, edi
; Line 854
	lea	esi, DWORD PTR [edi-1]
	cmp	eax, esi
	jle	SHORT $LN155@mainSort
; Line 851
	mov	esi, DWORD PTR [ecx]
	shl	esi, 10					; 0000000aH
	mov	edi, DWORD PTR [esi+ebx+1024]
	sub	edi, DWORD PTR [esi+ebx]
	cmp	edi, edx
	mov	edi, DWORD PTR _h$82200[ebp]
	ja	SHORT $LL42@mainSort
$LN155@mainSort:
	mov	ecx, DWORD PTR _i$[ebp]
; Line 857
	mov	edx, DWORD PTR _vv$82199[ebp]
	add	DWORD PTR tv2687[ebp], 4
	inc	ecx
$zero$82214:
	mov	DWORD PTR _runningOrder$[ebp+eax*4], edx
	mov	DWORD PTR _i$[ebp], ecx
	cmp	ecx, 255				; 000000ffH
	jle	$LL45@mainSort
$LN47@mainSort:
; Line 859
	cmp	edi, 1
	jne	$LL48@mainSort
; Line 866
	xor	eax, eax
	mov	DWORD PTR _numQSorted$[ebp], eax
; Line 868
	mov	DWORD PTR _i$[ebp], eax
	npad	8
$LL39@mainSort:
; Line 876
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _runningOrder$[ebp+eax*4]
; Line 886
	xor	edx, edx
	mov	DWORD PTR _ss$[ebp], esi
	mov	DWORD PTR _j$[ebp], edx
	npad	5
$LL36@mainSort:
; Line 887
	cmp	edx, esi
	je	$LN35@mainSort
; Line 888
	mov	eax, esi
	shl	eax, 8
	add	eax, edx
; Line 889
	mov	ecx, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR _sb$[ebp], eax
	test	ecx, 2097152				; 00200000H
	jne	$LN157@mainSort
; Line 891
	mov	edi, DWORD PTR [ebx+eax*4+4]
	and	edi, -2097153				; ffdfffffH
	and	ecx, -2097153				; ffdfffffH
	dec	edi
	mov	DWORD PTR _lo$82223[ebp], ecx
; Line 892
	cmp	edi, ecx
	jle	$LN157@mainSort
; Line 893
	cmp	DWORD PTR _verb$[ebp], 4
	jl	SHORT $LN30@mainSort
; Line 896
	mov	eax, edi
	sub	eax, ecx
	mov	ecx, DWORD PTR _numQSorted$[ebp]
	inc	eax
	push	eax
	push	ecx
	push	edx
	push	esi
	push	OFFSET $SG82227
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 24					; 00000018H
$LN30@mainSort:
; Line 900
	mov	edx, DWORD PTR _budget$[ebp]
	mov	eax, DWORD PTR _nblock$GSCopy$[ebp]
	mov	ecx, DWORD PTR _quadrant$GSCopy$[ebp]
	mov	esi, DWORD PTR _ptr$GSCopy$[ebp]
	push	edx
	mov	edx, DWORD PTR _block$GSCopy$[ebp]
	push	2
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _lo$82223[ebp]
	push	edx
	mov	edx, edi
	call	_mainQSort3
; Line 901
	sub	edi, DWORD PTR _lo$82223[ebp]
	mov	eax, DWORD PTR _numQSorted$[ebp]
; Line 902
	mov	edx, DWORD PTR _budget$[ebp]
	add	esp, 20					; 00000014H
	cmp	DWORD PTR [edx], 0
	lea	ecx, DWORD PTR [eax+edi+1]
	mov	DWORD PTR _numQSorted$[ebp], ecx
	jl	$LN1@mainSort
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _sb$[ebp]
	mov	esi, DWORD PTR _ss$[ebp]
$LN157@mainSort:
; Line 905
	or	DWORD PTR [ebx+eax*4], 2097152		; 00200000H
$LN35@mainSort:
; Line 886
	inc	edx
	mov	DWORD PTR _j$[ebp], edx
	cmp	edx, 255				; 000000ffH
	jle	$LL36@mainSort
; Line 909
	cmp	BYTE PTR _bigDone$[ebp+esi], 0
	lea	eax, DWORD PTR _bigDone$[ebp+esi]
	mov	DWORD PTR tv1223[ebp], eax
	je	SHORT $LN28@mainSort
	push	1006					; 000003eeH
	call	_BZ2_bz__AssertH__fail
	add	esp, 4
$LN28@mainSort:
; Line 919
	lea	ecx, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR tv2905[ebp], ecx
	xor	eax, eax
	npad	2
$LL27@mainSort:
; Line 920
	mov	edx, DWORD PTR [ecx]
	and	edx, -2097153				; ffdfffffH
	mov	DWORD PTR _copyStart$[ebp+eax], edx
; Line 921
	mov	edx, DWORD PTR [ecx+4]
	and	edx, -2097153				; ffdfffffH
	dec	edx
	mov	DWORD PTR _copyEnd$[ebp+eax], edx
	add	eax, 4
	add	ecx, 1024				; 00000400H
	cmp	eax, 1020				; 000003fcH
	jle	SHORT $LL27@mainSort
; Line 923
	mov	edi, DWORD PTR _ptr$GSCopy$[ebp]
	mov	eax, esi
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR [eax+ebx]
	add	eax, ebx
	mov	DWORD PTR tv1244[ebp], eax
	lea	eax, DWORD PTR _copyStart$[ebp+esi*4]
	and	ecx, -2097153				; ffdfffffH
	mov	DWORD PTR tv1249[ebp], eax
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN22@mainSort
	npad	3
$LL160@mainSort:
; Line 924
	mov	eax, DWORD PTR [edi+ecx*4]
	dec	eax
	jns	SHORT $LN21@mainSort
	add	eax, DWORD PTR _nblock$GSCopy$[ebp]
$LN21@mainSort:
; Line 926
	mov	edx, DWORD PTR _block$GSCopy$[ebp]
	movzx	edx, BYTE PTR [edx+eax]
	cmp	BYTE PTR _bigDone$[ebp+edx], 0
	jne	SHORT $LN23@mainSort
; Line 927
	mov	esi, DWORD PTR _copyStart$[ebp+edx*4]
	lea	edx, DWORD PTR _copyStart$[ebp+edx*4]
	mov	DWORD PTR [edi+esi*4], eax
	inc	esi
	mov	DWORD PTR [edx], esi
	mov	esi, DWORD PTR _ss$[ebp]
$LN23@mainSort:
; Line 923
	mov	eax, DWORD PTR tv1249[ebp]
	inc	ecx
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LL160@mainSort
$LN22@mainSort:
; Line 929
	mov	ecx, DWORD PTR tv1244[ebp]
	mov	ecx, DWORD PTR [ecx+1024]
	and	ecx, -2097153				; ffdfffffH
	lea	esi, DWORD PTR _copyEnd$[ebp+esi*4]
	dec	ecx
	mov	DWORD PTR tv1282[ebp], esi
	cmp	ecx, DWORD PTR [esi]
	jle	SHORT $LN17@mainSort
	npad	7
$LL19@mainSort:
; Line 930
	mov	eax, DWORD PTR [edi+ecx*4]
	dec	eax
	jns	SHORT $LN16@mainSort
	add	eax, DWORD PTR _nblock$GSCopy$[ebp]
$LN16@mainSort:
; Line 932
	mov	edx, DWORD PTR _block$GSCopy$[ebp]
	movzx	edx, BYTE PTR [edx+eax]
	cmp	BYTE PTR _bigDone$[ebp+edx], 0
	jne	SHORT $LN18@mainSort
; Line 933
	mov	edi, DWORD PTR _copyEnd$[ebp+edx*4]
	mov	esi, DWORD PTR _ptr$GSCopy$[ebp]
	lea	edx, DWORD PTR _copyEnd$[ebp+edx*4]
	mov	DWORD PTR [esi+edi*4], eax
	mov	esi, DWORD PTR tv1282[ebp]
	dec	edi
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR _ptr$GSCopy$[ebp]
$LN18@mainSort:
; Line 929
	dec	ecx
	cmp	ecx, DWORD PTR [esi]
	jg	SHORT $LL19@mainSort
$LN17@mainSort:
; Line 944
	mov	eax, DWORD PTR tv1249[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esi, DWORD PTR [esi]
	lea	ecx, DWORD PTR [eax-1]
	cmp	ecx, esi
	je	SHORT $LN14@mainSort
	test	eax, eax
	jne	SHORT $LN13@mainSort
	mov	eax, DWORD PTR _nblock$GSCopy$[ebp]
	dec	eax
	cmp	esi, eax
	je	SHORT $LN14@mainSort
$LN13@mainSort:
	push	1007					; 000003efH
	call	_BZ2_bz__AssertH__fail
	add	esp, 4
$LN14@mainSort:
; Line 946
	mov	eax, DWORD PTR tv2905[ebp]
	mov	ecx, 256				; 00000100H
$LL12@mainSort:
	or	DWORD PTR [eax], 2097152		; 00200000H
	add	eax, 1024				; 00000400H
	dec	ecx
	jne	SHORT $LL12@mainSort
; Line 989
	cmp	DWORD PTR _i$[ebp], 255			; 000000ffH
	mov	edx, DWORD PTR tv1223[ebp]
	mov	BYTE PTR [edx], 1
	jge	$LN38@mainSort
; Line 990
	mov	eax, DWORD PTR tv1244[ebp]
	mov	esi, DWORD PTR [eax]
; Line 991
	mov	eax, DWORD PTR [eax+1024]
	and	esi, -2097153				; ffdfffffH
	and	eax, -2097153				; ffdfffffH
	sub	eax, esi
; Line 994
	cmp	eax, 65534				; 0000fffeH
	jle	SHORT $LN7@mainSort
	npad	4
$LL8@mainSort:
	inc	ecx
	mov	edx, eax
	sar	edx, cl
	cmp	edx, 65534				; 0000fffeH
	jg	SHORT $LL8@mainSort
$LN7@mainSort:
; Line 996
	dec	eax
	mov	DWORD PTR tv1313[ebp], eax
	mov	edx, eax
	js	SHORT $LN4@mainSort
	mov	eax, DWORD PTR _ptr$GSCopy$[ebp]
	add	esi, edx
	lea	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR tv3101[ebp], eax
	npad	7
$LL6@mainSort:
; Line 997
	mov	eax, DWORD PTR tv3101[ebp]
	mov	eax, DWORD PTR [eax]
; Line 998
	mov	esi, edx
	sar	esi, cl
	movzx	edi, si
; Line 999
	mov	esi, DWORD PTR _quadrant$GSCopy$[ebp]
	mov	WORD PTR [esi+eax*2], di
; Line 1000
	cmp	eax, 34					; 00000022H
	jge	SHORT $LN5@mainSort
; Line 1001
	mov	esi, DWORD PTR _nblock$GSCopy$[ebp]
	add	esi, eax
	mov	eax, DWORD PTR _quadrant$GSCopy$[ebp]
	mov	WORD PTR [eax+esi*2], di
$LN5@mainSort:
; Line 996
	sub	DWORD PTR tv3101[ebp], 4
	dec	edx
	jns	SHORT $LL6@mainSort
	mov	eax, DWORD PTR tv1313[ebp]
$LN4@mainSort:
; Line 1003
	sar	eax, cl
	cmp	eax, 65535				; 0000ffffH
	jle	SHORT $LN38@mainSort
	push	1002					; 000003eaH
	call	_BZ2_bz__AssertH__fail
	add	esp, 4
$LN38@mainSort:
; Line 868
	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, 255				; 000000ffH
	jle	$LL39@mainSort
; Line 1008
	cmp	DWORD PTR _verb$[ebp], 4
	jl	SHORT $LN1@mainSort
; Line 1010
	mov	ecx, DWORD PTR _nblock$GSCopy$[ebp]
	mov	eax, DWORD PTR _numQSorted$[ebp]
	mov	edx, ecx
	sub	edx, eax
	push	edx
	push	eax
	push	ecx
	push	OFFSET $SG82265
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
$LN1@mainSort:
; Line 1011
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_mainSort ENDP
_TEXT	ENDS
PUBLIC	_BZ2_blockSort
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv229 = -20						; size = 4
_quadrant$ = -20					; size = 4
_ptr$ = -16						; size = 4
_ftab$ = -12						; size = 4
tv132 = -8						; size = 4
_nblock$ = -8						; size = 4
_verb$ = -4						; size = 4
_budget$ = 8						; size = 4
_i$ = 8							; size = 4
_s$ = 8							; size = 4
_BZ2_blockSort PROC
; Line 1032
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
; Line 1033
	mov	esi, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [esi+32]
; Line 1036
	mov	ecx, DWORD PTR [esi+68]
	mov	edx, DWORD PTR [esi+24]
; Line 1037
	mov	ebx, DWORD PTR [esi+616]
	mov	DWORD PTR _ptr$[ebp], eax
; Line 1038
	mov	eax, DWORD PTR [esi+48]
	mov	DWORD PTR _ftab$[ebp], edx
	mov	DWORD PTR _nblock$[ebp], ecx
	mov	DWORD PTR _verb$[ebp], ebx
; Line 1044
	cmp	ecx, 10000				; 00002710H
	jge	SHORT $LN13@BZ2_blockS
; Line 1045
	push	ebx
	push	ecx
	mov	ecx, DWORD PTR [esi+16]
	push	ecx
; Line 1046
	jmp	$LN23@BZ2_blockS
$LN13@BZ2_blockS:
; Line 1052
	lea	edx, DWORD PTR [ecx+34]
	mov	DWORD PTR _i$[ebp], edx
; Line 1053
	test	dl, 1
	je	SHORT $LN11@BZ2_blockS
	inc	edx
	mov	DWORD PTR _i$[ebp], edx
$LN11@BZ2_blockS:
; Line 1054
	push	edi
	mov	edi, DWORD PTR _i$[ebp]
	add	edi, DWORD PTR [esi+36]
	mov	DWORD PTR _quadrant$[ebp], edi
; Line 1063
	cmp	eax, 1
	jge	SHORT $LN10@BZ2_blockS
	mov	eax, 1
; Line 1064
	jmp	SHORT $LN9@BZ2_blockS
$LN10@BZ2_blockS:
	cmp	eax, 100				; 00000064H
	jle	SHORT $LN9@BZ2_blockS
	mov	eax, 100				; 00000064H
$LN9@BZ2_blockS:
; Line 1065
	lea	edx, DWORD PTR [eax-1]
	mov	eax, 1431655766				; 55555556H
	imul	edx
; Line 1068
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	edi, edx
	shr	edi, 31					; 0000001fH
	add	edi, edx
	imul	edi, ecx
	lea	edx, DWORD PTR _budget$[ebp]
	push	edx
	mov	edx, DWORD PTR [esi+36]
	push	ebx
	mov	ebx, DWORD PTR _ftab$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _quadrant$[ebp]
	push	eax
	mov	DWORD PTR _budget$[ebp], edi
	call	_mainSort
; Line 1074
	mov	ebx, DWORD PTR _nblock$[ebp]
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _verb$[ebp], 3
	jl	SHORT $LN8@BZ2_blockS
	mov	DWORD PTR tv132[ebp], 1
	test	ebx, ebx
	je	SHORT $LN17@BZ2_blockS
	mov	DWORD PTR tv132[ebp], ebx
$LN17@BZ2_blockS:
	sub	edi, DWORD PTR _budget$[ebp]
	sub	esp, 8
	mov	DWORD PTR tv229[ebp], edi
	fild	DWORD PTR tv229[ebp]
	fidiv	DWORD PTR tv132[ebp]
	fstp	QWORD PTR [esp]
	push	ebx
	push	edi
	push	OFFSET $SG82288
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 24					; 00000018H
$LN8@BZ2_blockS:
; Line 1075
	cmp	DWORD PTR _budget$[ebp], 0
	pop	edi
	jge	SHORT $LN22@BZ2_blockS
; Line 1076
	cmp	DWORD PTR _verb$[ebp], 2
	jl	SHORT $LN6@BZ2_blockS
; Line 1078
	push	OFFSET $SG82291
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
$LN6@BZ2_blockS:
; Line 1079
	mov	ecx, DWORD PTR _verb$[ebp]
	mov	edx, DWORD PTR [esi+16]
	push	ecx
	push	ebx
	push	edx
	mov	edx, DWORD PTR _ftab$[ebp]
$LN23@BZ2_blockS:
	mov	ecx, DWORD PTR [esi+20]
	call	_fallbackSort
	add	esp, 12					; 0000000cH
$LN22@BZ2_blockS:
; Line 1083
	or	ecx, -1
; Line 1084
	xor	eax, eax
	mov	DWORD PTR [esi+28], ecx
	cmp	DWORD PTR [esi+68], eax
	jle	SHORT $LN3@BZ2_blockS
	mov	edx, DWORD PTR _ptr$[ebp]
	npad	4
$LL5@BZ2_blockS:
; Line 1085
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN19@BZ2_blockS
; Line 1084
	inc	eax
	cmp	eax, DWORD PTR [esi+68]
	jl	SHORT $LL5@BZ2_blockS
; Line 1085
	jmp	SHORT $LN3@BZ2_blockS
$LN19@BZ2_blockS:
; Line 1086
	mov	DWORD PTR [esi+28], eax
$LN3@BZ2_blockS:
; Line 1088
	cmp	DWORD PTR [esi+28], ecx
	pop	esi
	pop	ebx
	jne	SHORT $LN1@BZ2_blockS
	push	1003					; 000003ebH
	call	_BZ2_bz__AssertH__fail
	add	esp, 4
$LN1@BZ2_blockS:
; Line 1089
	mov	esp, ebp
	pop	ebp
	ret	0
_BZ2_blockSort ENDP
_TEXT	ENDS
END
