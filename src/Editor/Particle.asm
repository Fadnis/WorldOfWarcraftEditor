; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\programovani\WoW Editor\Test\src\Editor\Particle.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	_cosf
EXTRN	__fltused:DWORD
EXTRN	__CIcos:PROC
; Function compile flags: /Ogtp
;	COMDAT _cosf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
; Line 410
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR __X$[ebp]
	call	__CIcos
	fstp	DWORD PTR tv69[ebp]
	fld	DWORD PTR tv69[ebp]
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
PUBLIC	_expf
EXTRN	__CIexp:PROC
; Function compile flags: /Ogtp
;	COMDAT _expf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_expf	PROC						; COMDAT
; Line 414
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR __X$[ebp]
	call	__CIexp
	fstp	DWORD PTR tv69[ebp]
	fld	DWORD PTR tv69[ebp]
	pop	ebp
	ret	0
_expf	ENDP
_TEXT	ENDS
PUBLIC	_sinf
EXTRN	__CIsin:PROC
; Function compile flags: /Ogtp
;	COMDAT _sinf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT
; Line 430
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR __X$[ebp]
	call	__CIsin
	fstp	DWORD PTR tv69[ebp]
	fld	DWORD PTR tv69[ebp]
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
PUBLIC	_sqrtf
EXTRN	__CIsqrt:PROC
; Function compile flags: /Ogtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT
; Line 434
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR __X$[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv69[ebp]
	fld	DWORD PTR tv69[ebp]
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
; Function compile flags: /Ogtp
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
tv73 = 8						; size = 4
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT
; Line 542
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR __X$[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
; Line 345
	push	ebp
	mov	ebp, esp
	push	esi
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
; Line 346
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
; Line 354
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
; Line 355
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN6@scalar
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@scalar:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
; Line 56
	push	ebp
	mov	ebp, esp
; Line 57
	mov	eax, DWORD PTR __Where$[ebp]
; Line 58
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT
; Line 62
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 49
	ret	4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??0Vec3D@@QAE@MMM@Z				; Vec3D::Vec3D
; Function compile flags: /Ogtp
;	COMDAT ??0Vec3D@@QAE@MMM@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
??0Vec3D@@QAE@MMM@Z PROC				; Vec3D::Vec3D, COMDAT
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\vec3d.h
; Line 12
	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _y0$[ebp]
	mov	eax, ecx
	mov	ecx, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _z0$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	pop	ebp
	ret	12					; 0000000cH
??0Vec3D@@QAE@MMM@Z ENDP				; Vec3D::Vec3D
_TEXT	ENDS
PUBLIC	??0Vec3D@@QAE@ABV0@@Z				; Vec3D::Vec3D
; Function compile flags: /Ogtp
;	COMDAT ??0Vec3D@@QAE@ABV0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??0Vec3D@@QAE@ABV0@@Z PROC				; Vec3D::Vec3D, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
	pop	ebp
	ret	4
??0Vec3D@@QAE@ABV0@@Z ENDP				; Vec3D::Vec3D
_TEXT	ENDS
PUBLIC	??4Vec3D@@QAEAAV0@ABV0@@Z			; Vec3D::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4Vec3D@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??4Vec3D@@QAEAAV0@ABV0@@Z PROC				; Vec3D::operator=, COMDAT
; _this$ = ecx
; Line 17
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
; Line 18
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 19
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 20
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
; Line 22
	pop	ebp
	ret	4
??4Vec3D@@QAEAAV0@ABV0@@Z ENDP				; Vec3D::operator=
_TEXT	ENDS
PUBLIC	??HVec3D@@QBE?AV0@ABV0@@Z			; Vec3D::operator+
; Function compile flags: /Ogtp
;	COMDAT ??HVec3D@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HVec3D@@QBE?AV0@ABV0@@Z PROC				; Vec3D::operator+, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
; Line 26
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fadd	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [edx+4]
	fadd	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [edx+8]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
; Line 28
	pop	ebp
	ret	8
??HVec3D@@QBE?AV0@ABV0@@Z ENDP				; Vec3D::operator+
_TEXT	ENDS
PUBLIC	??GVec3D@@QBE?AV0@ABV0@@Z			; Vec3D::operator-
; Function compile flags: /Ogtp
;	COMDAT ??GVec3D@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GVec3D@@QBE?AV0@ABV0@@Z PROC				; Vec3D::operator-, COMDAT
; _this$ = ecx
; Line 31
	push	ebp
	mov	ebp, esp
; Line 32
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR [edx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR [edx+4]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+8]
	fsub	DWORD PTR [edx+8]
	fstp	DWORD PTR [eax+8]
; Line 34
	pop	ebp
	ret	8
??GVec3D@@QBE?AV0@ABV0@@Z ENDP				; Vec3D::operator-
_TEXT	ENDS
PUBLIC	??DVec3D@@QBE?AV0@M@Z				; Vec3D::operator*
; Function compile flags: /Ogtp
;	COMDAT ??DVec3D@@QBE?AV0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_d$ = 12						; size = 4
??DVec3D@@QBE?AV0@M@Z PROC				; Vec3D::operator*, COMDAT
; _this$ = ecx
; Line 42
	push	ebp
	mov	ebp, esp
; Line 43
	fld	DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fld	DWORD PTR _d$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
; Line 45
	pop	ebp
	ret	8
??DVec3D@@QBE?AV0@M@Z ENDP				; Vec3D::operator*
_TEXT	ENDS
PUBLIC	??D@YA?AVVec3D@@MABV0@@Z			; operator*
; Function compile flags: /Ogtp
;	COMDAT ??D@YA?AVVec3D@@MABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_d$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AVVec3D@@MABV0@@Z PROC				; operator*, COMDAT
; Line 48
	push	ebp
	mov	ebp, esp
; Line 49
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fld	DWORD PTR _d$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
; Line 50
	pop	ebp
	ret	0
??D@YA?AVVec3D@@MABV0@@Z ENDP				; operator*
_TEXT	ENDS
PUBLIC	??LVec3D@@QBE?AV0@ABV0@@Z			; Vec3D::operator%
; Function compile flags: /Ogtp
;	COMDAT ??LVec3D@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??LVec3D@@QBE?AV0@ABV0@@Z PROC				; Vec3D::operator%, COMDAT
; _this$ = ecx
; Line 53
	push	ebp
	mov	ebp, esp
; Line 54
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fmul	DWORD PTR [ecx+4]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [ecx+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [edx+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [ecx]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR [ecx+4]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [eax+8]
; Line 56
	pop	ebp
	ret	8
??LVec3D@@QBE?AV0@ABV0@@Z ENDP				; Vec3D::operator%
_TEXT	ENDS
PUBLIC	??YVec3D@@QAEAAV0@ABV0@@Z			; Vec3D::operator+=
; Function compile flags: /Ogtp
;	COMDAT ??YVec3D@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??YVec3D@@QAEAAV0@ABV0@@Z PROC				; Vec3D::operator+=, COMDAT
; _this$ = ecx
; Line 59
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
; Line 60
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR [eax]
; Line 61
	fld	DWORD PTR [ecx+4]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR [eax+4]
; Line 62
	fld	DWORD PTR [ecx+8]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR [eax+8]
; Line 64
	pop	ebp
	ret	4
??YVec3D@@QAEAAV0@ABV0@@Z ENDP				; Vec3D::operator+=
_TEXT	ENDS
PUBLIC	??ZVec3D@@QAEAAV0@ABV0@@Z			; Vec3D::operator-=
; Function compile flags: /Ogtp
;	COMDAT ??ZVec3D@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??ZVec3D@@QAEAAV0@ABV0@@Z PROC				; Vec3D::operator-=, COMDAT
; _this$ = ecx
; Line 67
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
; Line 68
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
; Line 69
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
; Line 70
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
; Line 72
	pop	ebp
	ret	4
??ZVec3D@@QAEAAV0@ABV0@@Z ENDP				; Vec3D::operator-=
_TEXT	ENDS
PUBLIC	??XVec3D@@QAEAAV0@M@Z				; Vec3D::operator*=
; Function compile flags: /Ogtp
;	COMDAT ??XVec3D@@QAEAAV0@M@Z
_TEXT	SEGMENT
_d$ = 8							; size = 4
??XVec3D@@QAEAAV0@M@Z PROC				; Vec3D::operator*=, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
; Line 76
	fld	DWORD PTR [eax]
	fld	DWORD PTR _d$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [eax]
; Line 77
	fld	DWORD PTR [eax+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [eax+4]
; Line 78
	fmul	DWORD PTR [eax+8]
	fstp	DWORD PTR [eax+8]
; Line 80
	pop	ebp
	ret	4
??XVec3D@@QAEAAV0@M@Z ENDP				; Vec3D::operator*=
_TEXT	ENDS
PUBLIC	?lengthSquared@Vec3D@@QBEMXZ			; Vec3D::lengthSquared
; Function compile flags: /Ogtp
;	COMDAT ?lengthSquared@Vec3D@@QBEMXZ
_TEXT	SEGMENT
tv133 = -4						; size = 4
?lengthSquared@Vec3D@@QBEMXZ PROC			; Vec3D::lengthSquared, COMDAT
; _this$ = ecx
; Line 83
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 84
	fld	DWORD PTR [ecx+4]
	fld	DWORD PTR [ecx]
	fld	DWORD PTR [ecx+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv133[ebp]
	fld	DWORD PTR tv133[ebp]
; Line 85
	mov	esp, ebp
	pop	ebp
	ret	0
?lengthSquared@Vec3D@@QBEMXZ ENDP			; Vec3D::lengthSquared
_TEXT	ENDS
PUBLIC	?length@Vec3D@@QBEMXZ				; Vec3D::length
; Function compile flags: /Ogtp
;	COMDAT ?length@Vec3D@@QBEMXZ
_TEXT	SEGMENT
tv170 = -4						; size = 4
tv161 = -4						; size = 4
?length@Vec3D@@QBEMXZ PROC				; Vec3D::length, COMDAT
; _this$ = ecx
; Line 88
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 89
	fld	DWORD PTR [ecx+4]
	fld	DWORD PTR [ecx]
	fld	DWORD PTR [ecx+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv170[ebp]
	fld	DWORD PTR tv170[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv161[ebp]
	fld	DWORD PTR tv161[ebp]
; Line 90
	mov	esp, ebp
	pop	ebp
	ret	0
?length@Vec3D@@QBEMXZ ENDP				; Vec3D::length
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	?normalize@Vec3D@@QAEAAV1@XZ			; Vec3D::normalize
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?normalize@Vec3D@@QAEAAV1@XZ
_TEXT	SEGMENT
tv206 = -4						; size = 4
tv196 = -4						; size = 4
$T89376 = -4						; size = 4
?normalize@Vec3D@@QAEAAV1@XZ PROC			; Vec3D::normalize, COMDAT
; _this$ = ecx
; Line 93
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
; Line 94
	fld	DWORD PTR [esi+4]
	fld	DWORD PTR [esi]
	fld	DWORD PTR [esi+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv206[ebp]
	fld	DWORD PTR tv206[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv196[ebp]
	fld	DWORD PTR tv196[ebp]
; Line 95
	mov	eax, esi
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR $T89376[ebp]
	fld	DWORD PTR [esi]
	fld	DWORD PTR $T89376[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [esi]
	fld	ST(0)
	fmul	DWORD PTR [esi+4]
	fstp	DWORD PTR [esi+4]
	fmul	DWORD PTR [esi+8]
	fstp	DWORD PTR [esi+8]
	pop	esi
; Line 96
	mov	esp, ebp
	pop	ebp
	ret	0
?normalize@Vec3D@@QAEAAV1@XZ ENDP			; Vec3D::normalize
_TEXT	ENDS
PUBLIC	??BVec3D@@QAEPAMXZ				; Vec3D::operator float *
; Function compile flags: /Ogtp
;	COMDAT ??BVec3D@@QAEPAMXZ
_TEXT	SEGMENT
??BVec3D@@QAEPAMXZ PROC					; Vec3D::operator float *, COMDAT
; _this$ = ecx
; Line 112
	mov	eax, ecx
; Line 114
	ret	0
??BVec3D@@QAEPAMXZ ENDP					; Vec3D::operator float *
_TEXT	ENDS
PUBLIC	??0Vec2D@@QAE@MM@Z				; Vec2D::Vec2D
; Function compile flags: /Ogtp
;	COMDAT ??0Vec2D@@QAE@MM@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
??0Vec2D@@QAE@MM@Z PROC					; Vec2D::Vec2D, COMDAT
; _this$ = ecx
; Line 122
	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _y0$[ebp]
	mov	eax, ecx
	mov	ecx, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	pop	ebp
	ret	8
??0Vec2D@@QAE@MM@Z ENDP					; Vec2D::Vec2D
_TEXT	ENDS
PUBLIC	??0Vec2D@@QAE@ABV0@@Z				; Vec2D::Vec2D
; Function compile flags: /Ogtp
;	COMDAT ??0Vec2D@@QAE@ABV0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??0Vec2D@@QAE@ABV0@@Z PROC				; Vec2D::Vec2D, COMDAT
; _this$ = ecx
; Line 124
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	pop	ebp
	ret	4
??0Vec2D@@QAE@ABV0@@Z ENDP				; Vec2D::Vec2D
_TEXT	ENDS
PUBLIC	??4Vec2D@@QAEAAV0@ABV0@@Z			; Vec2D::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4Vec2D@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??4Vec2D@@QAEAAV0@ABV0@@Z PROC				; Vec2D::operator=, COMDAT
; _this$ = ecx
; Line 127
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
; Line 128
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 129
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
; Line 131
	pop	ebp
	ret	4
??4Vec2D@@QAEAAV0@ABV0@@Z ENDP				; Vec2D::operator=
_TEXT	ENDS
PUBLIC	??BVec2D@@QAEPAMXZ				; Vec2D::operator float *
; Function compile flags: /Ogtp
;	COMDAT ??BVec2D@@QAEPAMXZ
_TEXT	SEGMENT
??BVec2D@@QAEPAMXZ PROC					; Vec2D::operator float *, COMDAT
; _this$ = ecx
; Line 212
	mov	eax, ecx
; Line 214
	ret	0
??BVec2D@@QAEPAMXZ ENDP					; Vec2D::operator float *
_TEXT	ENDS
PUBLIC	?getBuffer@MPQFile@@QAEPADXZ			; MPQFile::getBuffer
; Function compile flags: /Ogtp
;	COMDAT ?getBuffer@MPQFile@@QAEPADXZ
_TEXT	SEGMENT
?getBuffer@MPQFile@@QAEPADXZ PROC			; MPQFile::getBuffer, COMDAT
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\mpq.h
; Line 48
	mov	eax, DWORD PTR [ecx+1028]
	ret	0
?getBuffer@MPQFile@@QAEPADXZ ENDP			; MPQFile::getBuffer
_TEXT	ENDS
PUBLIC	??0Vec4D@@QAE@MMMM@Z				; Vec4D::Vec4D
; Function compile flags: /Ogtp
;	COMDAT ??0Vec4D@@QAE@MMMM@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
??0Vec4D@@QAE@MMMM@Z PROC				; Vec4D::Vec4D, COMDAT
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\quaternion.h
; Line 12
	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _y0$[ebp]
	mov	eax, ecx
	mov	ecx, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _z0$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _w0$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	pop	ebp
	ret	16					; 00000010H
??0Vec4D@@QAE@MMMM@Z ENDP				; Vec4D::Vec4D
_TEXT	ENDS
PUBLIC	??0Vec4D@@QAE@ABV0@@Z				; Vec4D::Vec4D
; Function compile flags: /Ogtp
;	COMDAT ??0Vec4D@@QAE@ABV0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??0Vec4D@@QAE@ABV0@@Z PROC				; Vec4D::Vec4D, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
	pop	ebp
	ret	4
??0Vec4D@@QAE@ABV0@@Z ENDP				; Vec4D::Vec4D
_TEXT	ENDS
PUBLIC	??0Vec4D@@QAE@ABVVec3D@@M@Z			; Vec4D::Vec4D
; Function compile flags: /Ogtp
;	COMDAT ??0Vec4D@@QAE@ABVVec3D@@M@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
_w0$ = 12						; size = 4
??0Vec4D@@QAE@ABVVec3D@@M@Z PROC			; Vec4D::Vec4D, COMDAT
; _this$ = ecx
; Line 16
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _w0$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	pop	ebp
	ret	8
??0Vec4D@@QAE@ABVVec3D@@M@Z ENDP			; Vec4D::Vec4D
_TEXT	ENDS
PUBLIC	??4Vec4D@@QAEAAV0@ABV0@@Z			; Vec4D::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4Vec4D@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??4Vec4D@@QAEAAV0@ABV0@@Z PROC				; Vec4D::operator=, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
; Line 20
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 21
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 22
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
; Line 23
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
; Line 25
	pop	ebp
	ret	4
??4Vec4D@@QAEAAV0@ABV0@@Z ENDP				; Vec4D::operator=
_TEXT	ENDS
PUBLIC	??HVec4D@@QBE?BV0@ABV0@@Z			; Vec4D::operator+
; Function compile flags: /Ogtp
;	COMDAT ??HVec4D@@QBE?BV0@ABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HVec4D@@QBE?BV0@ABV0@@Z PROC				; Vec4D::operator+, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
; Line 29
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fadd	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [edx+4]
	fadd	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [edx+8]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
	fld	DWORD PTR [edx+12]
	fadd	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]
; Line 31
	pop	ebp
	ret	8
??HVec4D@@QBE?BV0@ABV0@@Z ENDP				; Vec4D::operator+
_TEXT	ENDS
PUBLIC	??DVec4D@@QBE?BV0@M@Z				; Vec4D::operator*
; Function compile flags: /Ogtp
;	COMDAT ??DVec4D@@QBE?BV0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_d$ = 12						; size = 4
??DVec4D@@QBE?BV0@M@Z PROC				; Vec4D::operator*, COMDAT
; _this$ = ecx
; Line 40
	push	ebp
	mov	ebp, esp
; Line 41
	fld	DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fld	DWORD PTR _d$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+8]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [eax+8]
	fmul	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]
; Line 43
	pop	ebp
	ret	8
??DVec4D@@QBE?BV0@M@Z ENDP				; Vec4D::operator*
_TEXT	ENDS
PUBLIC	??BVec4D@@QAEPAMXZ				; Vec4D::operator float *
; Function compile flags: /Ogtp
;	COMDAT ??BVec4D@@QAEPAMXZ
_TEXT	SEGMENT
??BVec4D@@QAEPAMXZ PROC					; Vec4D::operator float *, COMDAT
; _this$ = ecx
; Line 99
	mov	eax, ecx
; Line 101
	ret	0
??BVec4D@@QAEPAMXZ ENDP					; Vec4D::operator float *
_TEXT	ENDS
PUBLIC	??0Matrix@@QAE@XZ				; Matrix::Matrix
; Function compile flags: /Ogtp
;	COMDAT ??0Matrix@@QAE@XZ
_TEXT	SEGMENT
??0Matrix@@QAE@XZ PROC					; Matrix::Matrix, COMDAT
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\matrix.h
; Line 12
	mov	eax, ecx
; Line 14
	ret	0
??0Matrix@@QAE@XZ ENDP					; Matrix::Matrix
_TEXT	ENDS
PUBLIC	??0Matrix@@QAE@ABV0@@Z				; Matrix::Matrix
; Function compile flags: /Ogtp
;	COMDAT ??0Matrix@@QAE@ABV0@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??0Matrix@@QAE@ABV0@@Z PROC				; Matrix::Matrix, COMDAT
; _this$ = ecx
; Line 16
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
; Line 22
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+52], edx
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	ecx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+60], ecx
; Line 25
	pop	ebp
	ret	4
??0Matrix@@QAE@ABV0@@Z ENDP				; Matrix::Matrix
_TEXT	ENDS
PUBLIC	?zero@Matrix@@QAEXXZ				; Matrix::zero
; Function compile flags: /Ogtp
;	COMDAT ?zero@Matrix@@QAEXXZ
_TEXT	SEGMENT
?zero@Matrix@@QAEXXZ PROC				; Matrix::zero, COMDAT
; _this$ = ecx
; Line 45
	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], eax
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+36], eax
	mov	DWORD PTR [ecx+40], eax
	mov	DWORD PTR [ecx+44], eax
	mov	DWORD PTR [ecx+48], eax
	mov	DWORD PTR [ecx+52], eax
	mov	DWORD PTR [ecx+56], eax
	mov	DWORD PTR [ecx+60], eax
; Line 48
	ret	0
?zero@Matrix@@QAEXXZ ENDP				; Matrix::zero
_TEXT	ENDS
PUBLIC	?unit@Matrix@@QAEXXZ				; Matrix::unit
; Function compile flags: /Ogtp
;	COMDAT ?unit@Matrix@@QAEXXZ
_TEXT	SEGMENT
?unit@Matrix@@QAEXXZ PROC				; Matrix::unit, COMDAT
; _this$ = ecx
; Line 52
	xor	eax, eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], eax
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+36], eax
	mov	DWORD PTR [ecx+44], eax
	mov	DWORD PTR [ecx+48], eax
	mov	DWORD PTR [ecx+52], eax
	mov	DWORD PTR [ecx+56], eax
; Line 53
	mov	eax, 1065353216				; 3f800000H
	mov	DWORD PTR [ecx+60], eax
	mov	DWORD PTR [ecx+40], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx], eax
; Line 54
	ret	0
?unit@Matrix@@QAEXXZ ENDP				; Matrix::unit
_TEXT	ENDS
PUBLIC	??DMatrix@@QBE?AVVec3D@@ABV1@@Z			; Matrix::operator*
; Function compile flags: /Ogtp
;	COMDAT ??DMatrix@@QBE?AVVec3D@@ABV1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??DMatrix@@QBE?AVVec3D@@ABV1@@Z PROC			; Matrix::operator*, COMDAT
; _this$ = ecx
; Line 179
	push	ebp
	mov	ebp, esp
; Line 181
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR [edx+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR [ecx]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax]
; Line 182
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+4]
	fld	DWORD PTR [ecx+16]
	fmul	DWORD PTR [edx]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [ecx+24]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [ecx+28]
	fstp	DWORD PTR [eax+4]
; Line 183
	fld	DWORD PTR [ecx+36]
	fmul	DWORD PTR [edx+4]
	fld	DWORD PTR [ecx+32]
	fmul	DWORD PTR [edx]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [ecx+40]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [ecx+44]
	fstp	DWORD PTR [eax+8]
; Line 185
	pop	ebp
	ret	8
??DMatrix@@QBE?AVVec3D@@ABV1@@Z ENDP			; Matrix::operator*
_TEXT	ENDS
PUBLIC	?determinant@Matrix@@QBEMXZ			; Matrix::determinant
; Function compile flags: /Ogtp
;	COMDAT ?determinant@Matrix@@QBEMXZ
_TEXT	SEGMENT
tv455 = -4						; size = 4
?determinant@Matrix@@QBEMXZ PROC			; Matrix::determinant, COMDAT
; _this$ = ecx
; Line 214
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 220
	fld	DWORD PTR [ecx+60]
	fmul	DWORD PTR [ecx+40]
	fld	DWORD PTR [ecx+56]
	fmul	DWORD PTR [ecx+44]
	fsubp	ST(1), ST(0)
	fld	DWORD PTR [ecx+36]
	fmul	DWORD PTR [ecx+60]
	fld	DWORD PTR [ecx+52]
	fmul	DWORD PTR [ecx+44]
	fsubp	ST(1), ST(0)
	fld	DWORD PTR [ecx+56]
	fmul	DWORD PTR [ecx+36]
	fld	DWORD PTR [ecx+52]
	fmul	DWORD PTR [ecx+40]
	fsubp	ST(1), ST(0)
	fld	DWORD PTR [ecx+32]
	fmul	DWORD PTR [ecx+60]
	fld	DWORD PTR [ecx+44]
	fmul	DWORD PTR [ecx+48]
	fsubp	ST(1), ST(0)
	fld	DWORD PTR [ecx+32]
	fmul	DWORD PTR [ecx+56]
	fld	DWORD PTR [ecx+48]
	fmul	DWORD PTR [ecx+40]
	fsubp	ST(1), ST(0)
	fld	DWORD PTR [ecx+32]
	fmul	DWORD PTR [ecx+52]
	fld	DWORD PTR [ecx+36]
	fmul	DWORD PTR [ecx+48]
	fsubp	ST(1), ST(0)
	fld	DWORD PTR [ecx+20]
	fmul	ST(0), ST(6)
	fld	DWORD PTR [ecx+24]
	fmul	ST(0), ST(6)
	fsubp	ST(1), ST(0)
	fld	DWORD PTR [ecx+28]
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fmul	DWORD PTR [ecx]
	fld	DWORD PTR [ecx+16]
	fmulp	ST(7), ST(0)
	fld	DWORD PTR [ecx+24]
	fmul	ST(0), ST(4)
	fsubp	ST(7), ST(0)
	fld	DWORD PTR [ecx+28]
	fmul	ST(0), ST(3)
	faddp	ST(7), ST(0)
	fld	DWORD PTR [ecx+4]
	fmulp	ST(7), ST(0)
	fsubrp	ST(6), ST(0)
	fld	DWORD PTR [ecx+16]
	fmulp	ST(5), ST(0)
	fld	DWORD PTR [ecx+20]
	fmulp	ST(3), ST(0)
	fxch	ST(4)
	fsubrp	ST(2), ST(0)
	fld	DWORD PTR [ecx+28]
	fmul	ST(0), ST(4)
	faddp	ST(2), ST(0)
	fld	DWORD PTR [ecx+8]
	fmulp	ST(2), ST(0)
	fxch	ST(4)
	faddp	ST(1), ST(0)
	fld	DWORD PTR [ecx+16]
	fmulp	ST(2), ST(0)
	fld	DWORD PTR [ecx+20]
	fmulp	ST(4), ST(0)
	fxch	ST(1)
	fsubrp	ST(3), ST(0)
	fld	DWORD PTR [ecx+24]
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fmul	DWORD PTR [ecx+12]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv455[ebp]
	fld	DWORD PTR tv455[ebp]
; Line 222
	mov	esp, ebp
	pop	ebp
	ret	0
?determinant@Matrix@@QBEMXZ ENDP			; Matrix::determinant
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?minor@Matrix@@QBE?BMII@Z			; Matrix::minor
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?minor@Matrix@@QBE?BMII@Z
_TEXT	SEGMENT
tv790 = -44						; size = 4
_s$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?minor@Matrix@@QBE?BMII@Z PROC				; Matrix::minor, COMDAT
; _this$ = ecx
; Line 225
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 229
	mov	edx, DWORD PTR _y$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _x$[ebp]
	xor	eax, eax
	push	edi
	test	edx, edx
	je	SHORT $LN7@minor
; Line 232
	test	esi, esi
	je	SHORT $LN3@minor
; Line 234
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR _s$[ebp], eax
	mov	eax, 1
$LN3@minor:
; Line 232
	cmp	esi, 1
	je	SHORT $LN19@minor
; Line 234
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR _s$[ebp+eax*4], edi
	inc	eax
$LN19@minor:
; Line 232
	cmp	esi, 2
	je	SHORT $LN21@minor
; Line 234
	mov	edi, DWORD PTR [ecx+8]
	mov	DWORD PTR _s$[ebp+eax*4], edi
	inc	eax
$LN21@minor:
; Line 232
	cmp	esi, 3
	je	SHORT $LN23@minor
; Line 234
	mov	edi, DWORD PTR [ecx+12]
	mov	DWORD PTR _s$[ebp+eax*4], edi
$LN23@minor:
; Line 237
	mov	eax, 1
$LN7@minor:
; Line 229
	cmp	edx, 1
	je	SHORT $LN48@minor
; Line 230
	xor	edx, edx
; Line 232
	test	esi, esi
	je	SHORT $LN39@minor
; Line 234
	mov	edi, DWORD PTR [ecx+16]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	DWORD PTR _s$[ebp+edx*4], edi
	mov	edx, 1
$LN39@minor:
; Line 232
	cmp	esi, 1
	je	SHORT $LN41@minor
; Line 234
	mov	ebx, DWORD PTR [ecx+20]
	lea	edi, DWORD PTR [edx+eax*2]
	add	edi, eax
	mov	DWORD PTR _s$[ebp+edi*4], ebx
	inc	edx
$LN41@minor:
; Line 232
	cmp	esi, 2
	je	SHORT $LN43@minor
; Line 234
	mov	ebx, DWORD PTR [ecx+24]
	lea	edi, DWORD PTR [edx+eax*2]
	add	edi, eax
	mov	DWORD PTR _s$[ebp+edi*4], ebx
	inc	edx
$LN43@minor:
; Line 232
	cmp	esi, 3
	je	SHORT $LN45@minor
; Line 234
	mov	edi, DWORD PTR [ecx+28]
	lea	edx, DWORD PTR [edx+eax*2]
	add	edx, eax
	mov	DWORD PTR _s$[ebp+edx*4], edi
$LN45@minor:
; Line 237
	mov	edx, DWORD PTR _y$[ebp]
	inc	eax
$LN48@minor:
; Line 229
	cmp	edx, 2
	je	SHORT $LN60@minor
; Line 230
	xor	edx, edx
; Line 232
	test	esi, esi
	je	SHORT $LN51@minor
; Line 234
	mov	edi, DWORD PTR [ecx+32]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	DWORD PTR _s$[ebp+edx*4], edi
	mov	edx, 1
$LN51@minor:
; Line 232
	cmp	esi, 1
	je	SHORT $LN53@minor
; Line 234
	mov	ebx, DWORD PTR [ecx+36]
	lea	edi, DWORD PTR [edx+eax*2]
	add	edi, eax
	mov	DWORD PTR _s$[ebp+edi*4], ebx
	inc	edx
$LN53@minor:
; Line 232
	cmp	esi, 2
	je	SHORT $LN55@minor
; Line 234
	mov	ebx, DWORD PTR [ecx+40]
	lea	edi, DWORD PTR [edx+eax*2]
	add	edi, eax
	mov	DWORD PTR _s$[ebp+edi*4], ebx
	inc	edx
$LN55@minor:
; Line 232
	cmp	esi, 3
	je	SHORT $LN57@minor
; Line 234
	mov	edi, DWORD PTR [ecx+44]
	lea	edx, DWORD PTR [edx+eax*2]
	add	edx, eax
	mov	DWORD PTR _s$[ebp+edx*4], edi
$LN57@minor:
; Line 237
	mov	edx, DWORD PTR _y$[ebp]
	inc	eax
$LN60@minor:
; Line 229
	cmp	edx, 3
	je	SHORT $LN69@minor
; Line 230
	xor	edx, edx
; Line 232
	test	esi, esi
	je	SHORT $LN63@minor
; Line 234
	mov	edi, DWORD PTR [ecx+48]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	DWORD PTR _s$[ebp+edx*4], edi
	mov	edx, 1
$LN63@minor:
; Line 232
	cmp	esi, 1
	je	SHORT $LN65@minor
; Line 234
	mov	ebx, DWORD PTR [ecx+52]
	lea	edi, DWORD PTR [edx+eax*2]
	add	edi, eax
	mov	DWORD PTR _s$[ebp+edi*4], ebx
	inc	edx
$LN65@minor:
; Line 232
	cmp	esi, 2
	je	SHORT $LN67@minor
; Line 234
	mov	ebx, DWORD PTR [ecx+56]
	lea	edi, DWORD PTR [edx+eax*2]
	add	edi, eax
	mov	DWORD PTR _s$[ebp+edi*4], ebx
	inc	edx
$LN67@minor:
; Line 232
	cmp	esi, 3
	je	SHORT $LN69@minor
; Line 234
	lea	edx, DWORD PTR [edx+eax*2]
	add	edx, eax
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR _s$[ebp+edx*4], eax
$LN69@minor:
; Line 240
	fld	DWORD PTR _s$[ebp+32]
; Line 242
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fld	ST(0)
	pop	edi
	fld	DWORD PTR _s$[ebp+16]
	pop	esi
	fld	ST(0)
	xor	ecx, ebp
	fmulp	ST(2), ST(0)
	pop	ebx
	fld	DWORD PTR _s$[ebp+20]
	fld	ST(0)
	fld	DWORD PTR _s$[ebp+28]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(4)
	fsubrp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp]
	fld	DWORD PTR _s$[ebp+12]
	fld	ST(0)
	fmulp	ST(6), ST(0)
	fld	DWORD PTR _s$[ebp+24]
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fxch	ST(6)
	fsubrp	ST(3), ST(0)
	fld	DWORD PTR _s$[ebp+4]
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fmulp	ST(3), ST(0)
	fxch	ST(3)
	fmulp	ST(1), ST(0)
	fsubp	ST(1), ST(0)
	fmul	DWORD PTR _s$[ebp+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv790[ebp]
	fld	DWORD PTR tv790[ebp]
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?minor@Matrix@@QBE?BMII@Z ENDP				; Matrix::minor
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__real@bf800000
PUBLIC	?adjoint@Matrix@@QBE?BV1@XZ			; Matrix::adjoint
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?adjoint@Matrix@@QBE?BV1@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv76 = -8						; size = 4
tv238 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?adjoint@Matrix@@QBE?BV1@XZ PROC			; Matrix::adjoint, COMDAT
; _this$ = ecx
; Line 245
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 247
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	ebx, ebx
	mov	DWORD PTR tv238[ebp], eax
$LL17@adjoint:
; Line 249
	mov	edi, DWORD PTR tv238[ebp]
	xor	esi, esi
	npad	7
$LL18@adjoint:
; Line 251
	lea	ecx, DWORD PTR [esi+ebx]
	test	cl, 1
	je	SHORT $LN9@adjoint
	fld	DWORD PTR __real@bf800000
	jmp	SHORT $LN19@adjoint
$LN9@adjoint:
	fld1
$LN19@adjoint:
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR tv76[ebp]
	push	ebx
	push	esi
	call	?minor@Matrix@@QBE?BMII@Z		; Matrix::minor
	fmul	DWORD PTR tv76[ebp]
	inc	esi
	add	edi, 16					; 00000010H
	fstp	DWORD PTR [edi-16]
	cmp	esi, 4
	jb	SHORT $LL18@adjoint
; Line 247
	add	DWORD PTR tv238[ebp], 4
	inc	ebx
	cmp	ebx, 4
	jb	SHORT $LL17@adjoint
; Line 254
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 255
	mov	esp, ebp
	pop	ebp
	ret	4
?adjoint@Matrix@@QBE?BV1@XZ ENDP			; Matrix::adjoint
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?invert@Matrix@@QAEXXZ				; Matrix::invert
; Function compile flags: /Ogtp
;	COMDAT ?invert@Matrix@@QAEXXZ
_TEXT	SEGMENT
_invdet$ = -72						; size = 4
_adj$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?invert@Matrix@@QAEXXZ PROC				; Matrix::invert, COMDAT
; _this$ = ecx
; Line 258
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
; Line 259
	lea	eax, DWORD PTR _adj$[ebp]
	push	eax
	mov	esi, ecx
	call	?adjoint@Matrix@@QBE?BV1@XZ		; Matrix::adjoint
; Line 260
	mov	ecx, esi
	call	?determinant@Matrix@@QBEMXZ		; Matrix::determinant
	fld1
	fdivrp	ST(1), ST(0)
; Line 267
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	fstp	DWORD PTR _invdet$[ebp]
	fld	DWORD PTR _adj$[ebp]
	fld	DWORD PTR _invdet$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [esi]
	fld	DWORD PTR _adj$[ebp+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esi+4]
	fld	DWORD PTR _adj$[ebp+8]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esi+8]
	fld	DWORD PTR _adj$[ebp+12]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esi+12]
	fld	DWORD PTR _adj$[ebp+16]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esi+16]
	fld	DWORD PTR _adj$[ebp+20]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esi+20]
	fld	DWORD PTR _adj$[ebp+24]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esi+24]
	fld	DWORD PTR _adj$[ebp+28]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esi+28]
	fld	DWORD PTR _adj$[ebp+32]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esi+32]
	fld	DWORD PTR _adj$[ebp+36]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esi+36]
	fld	DWORD PTR _adj$[ebp+40]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esi+40]
	fld	DWORD PTR _adj$[ebp+44]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esi+44]
	fld	DWORD PTR _adj$[ebp+48]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esi+48]
	fld	DWORD PTR _adj$[ebp+52]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esi+52]
	fld	DWORD PTR _adj$[ebp+56]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esi+56]
	fmul	DWORD PTR _adj$[ebp+60]
	fstp	DWORD PTR [esi+60]
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?invert@Matrix@@QAEXXZ ENDP				; Matrix::invert
_TEXT	ENDS
PUBLIC	?transpose@Matrix@@QAEXXZ			; Matrix::transpose
; Function compile flags: /Ogtp
;	COMDAT ?transpose@Matrix@@QAEXXZ
_TEXT	SEGMENT
_i$68928 = -12						; size = 4
tv1369 = -8						; size = 4
_this$ = -4						; size = 4
?transpose@Matrix@@QAEXXZ PROC				; Matrix::transpose, COMDAT
; _this$ = ecx
; Line 270
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	mov	eax, ecx
	push	esi
; Line 271
	lea	edx, DWORD PTR [eax+16]
	push	edi
	mov	DWORD PTR _this$[ebp], eax
	mov	ebx, 1
	mov	DWORD PTR tv1369[ebp], edx
	npad	7
$LL6@transpose:
; Line 273
	xor	edi, edi
	cmp	ebx, 4
	jl	SHORT $LC14@transpose
	lea	esi, DWORD PTR [ebx-4]
	shr	esi, 2
	inc	esi
	lea	ecx, DWORD PTR [esi*4]
	lea	eax, DWORD PTR [eax+ebx*4+32]
	mov	DWORD PTR _i$68928[ebp], ecx
	npad	4
$LL15@transpose:
; Line 276
	mov	ecx, DWORD PTR [eax-32]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax-16]
; Line 277
	mov	DWORD PTR [eax-32], edi
	mov	edi, DWORD PTR [edx+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [eax-16], edi
	mov	edi, DWORD PTR [edx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [edx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	DWORD PTR [eax+16], edi
	add	eax, 64					; 00000040H
	add	edx, 16					; 00000010H
	dec	esi
	jne	SHORT $LL15@transpose
; Line 273
	mov	edi, DWORD PTR _i$68928[ebp]
	mov	eax, DWORD PTR _this$[ebp]
$LC14@transpose:
	cmp	edi, ebx
	jae	SHORT $LN5@transpose
	lea	edx, DWORD PTR [edi+ebx*4]
	lea	ecx, DWORD PTR [ebx+edi*4]
	mov	esi, ebx
	lea	edx, DWORD PTR [eax+edx*4]
	lea	eax, DWORD PTR [eax+ecx*4]
	sub	esi, edi
	npad	1
$LC3@transpose:
; Line 276
	mov	ecx, DWORD PTR [eax]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR [edx], ecx
; Line 277
	mov	DWORD PTR [eax], edi
	add	eax, 16					; 00000010H
	add	edx, 4
	dec	esi
	jne	SHORT $LC3@transpose
; Line 273
	mov	eax, DWORD PTR _this$[ebp]
$LN5@transpose:
; Line 271
	mov	edx, DWORD PTR tv1369[ebp]
	inc	ebx
	add	edx, 16					; 00000010H
	mov	DWORD PTR tv1369[ebp], edx
	cmp	ebx, 4
	jb	$LL6@transpose
	pop	edi
	pop	esi
	pop	ebx
; Line 280
	mov	esp, ebp
	pop	ebp
	ret	0
?transpose@Matrix@@QAEXXZ ENDP				; Matrix::transpose
_TEXT	ENDS
PUBLIC	__real@40dfffc000000000
PUBLIC	?conv@ShortToFloat@@SA?BMF@Z			; ShortToFloat::conv
;	COMDAT __real@40dfffc000000000
; File c:\programovani\wow editor\test\src\editor\animated.h
CONST	SEGMENT
__real@40dfffc000000000 DQ 040dfffc000000000r	; 32767
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?conv@ShortToFloat@@SA?BMF@Z
_TEXT	SEGMENT
tv128 = 8						; size = 4
tv70 = 8						; size = 4
_t$ = 8							; size = 2
?conv@ShortToFloat@@SA?BMF@Z PROC			; ShortToFloat::conv, COMDAT
; Line 72
	push	ebp
	mov	ebp, esp
; Line 73
	movsx	eax, WORD PTR _t$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	fild	DWORD PTR tv70[ebp]
	fdiv	QWORD PTR __real@40dfffc000000000
	fstp	DWORD PTR tv128[ebp]
	fld	DWORD PTR tv128[ebp]
; Line 74
	pop	ebp
	ret	0
?conv@ShortToFloat@@SA?BMF@Z ENDP			; ShortToFloat::conv
_TEXT	ENDS
PUBLIC	??_7ParticleEmitter@@6B@			; ParticleEmitter::`vftable'
PUBLIC	??0ParticleEmitter@@QAE@PAVParticleSystem@@@Z	; ParticleEmitter::ParticleEmitter
PUBLIC	??_R4ParticleEmitter@@6B@			; ParticleEmitter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVParticleEmitter@@@8			; ParticleEmitter `RTTI Type Descriptor'
PUBLIC	??_R3ParticleEmitter@@8				; ParticleEmitter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ParticleEmitter@@8				; ParticleEmitter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ParticleEmitter@@8		; ParticleEmitter::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@ParticleEmitter@@8
; File c:\programovani\wow editor\test\src\editor\particle.h
rdata$r	SEGMENT
??_R1A@?0A@EA@ParticleEmitter@@8 DD FLAT:??_R0?AVParticleEmitter@@@8 ; ParticleEmitter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ParticleEmitter@@8
rdata$r	ENDS
;	COMDAT ??_R2ParticleEmitter@@8
rdata$r	SEGMENT
??_R2ParticleEmitter@@8 DD FLAT:??_R1A@?0A@EA@ParticleEmitter@@8 ; ParticleEmitter::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ParticleEmitter@@8
rdata$r	SEGMENT
??_R3ParticleEmitter@@8 DD 00H				; ParticleEmitter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ParticleEmitter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVParticleEmitter@@@8
_DATA	SEGMENT
??_R0?AVParticleEmitter@@@8 DD FLAT:??_7type_info@@6B@	; ParticleEmitter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVParticleEmitter@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ParticleEmitter@@6B@
rdata$r	SEGMENT
??_R4ParticleEmitter@@6B@ DD 00H			; ParticleEmitter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVParticleEmitter@@@8
	DD	FLAT:??_R3ParticleEmitter@@8
rdata$r	ENDS
;	COMDAT ??_7ParticleEmitter@@6B@
CONST	SEGMENT
??_7ParticleEmitter@@6B@ DD FLAT:??_R4ParticleEmitter@@6B@ ; ParticleEmitter::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0ParticleEmitter@@QAE@PAVParticleSystem@@@Z
_TEXT	SEGMENT
_sys$ = 8						; size = 4
??0ParticleEmitter@@QAE@PAVParticleSystem@@@Z PROC	; ParticleEmitter::ParticleEmitter, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR _sys$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ParticleEmitter@@6B@
	mov	DWORD PTR [eax+4], ecx
	pop	ebp
	ret	4
??0ParticleEmitter@@QAE@PAVParticleSystem@@@Z ENDP	; ParticleEmitter::ParticleEmitter
_TEXT	ENDS
PUBLIC	??_7PlaneParticleEmitter@@6B@			; PlaneParticleEmitter::`vftable'
PUBLIC	??0PlaneParticleEmitter@@QAE@PAVParticleSystem@@@Z ; PlaneParticleEmitter::PlaneParticleEmitter
PUBLIC	??_R4PlaneParticleEmitter@@6B@			; PlaneParticleEmitter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPlaneParticleEmitter@@@8		; PlaneParticleEmitter `RTTI Type Descriptor'
PUBLIC	??_R3PlaneParticleEmitter@@8			; PlaneParticleEmitter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PlaneParticleEmitter@@8			; PlaneParticleEmitter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PlaneParticleEmitter@@8		; PlaneParticleEmitter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?newParticle@PlaneParticleEmitter@@UAE?AUParticle@@HH@Z ; PlaneParticleEmitter::newParticle
;	COMDAT ??_R1A@?0A@EA@PlaneParticleEmitter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PlaneParticleEmitter@@8 DD FLAT:??_R0?AVPlaneParticleEmitter@@@8 ; PlaneParticleEmitter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PlaneParticleEmitter@@8
rdata$r	ENDS
;	COMDAT ??_R2PlaneParticleEmitter@@8
rdata$r	SEGMENT
??_R2PlaneParticleEmitter@@8 DD FLAT:??_R1A@?0A@EA@PlaneParticleEmitter@@8 ; PlaneParticleEmitter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ParticleEmitter@@8
rdata$r	ENDS
;	COMDAT ??_R3PlaneParticleEmitter@@8
rdata$r	SEGMENT
??_R3PlaneParticleEmitter@@8 DD 00H			; PlaneParticleEmitter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2PlaneParticleEmitter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPlaneParticleEmitter@@@8
_DATA	SEGMENT
??_R0?AVPlaneParticleEmitter@@@8 DD FLAT:??_7type_info@@6B@ ; PlaneParticleEmitter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPlaneParticleEmitter@@', 00H
_DATA	ENDS
;	COMDAT ??_R4PlaneParticleEmitter@@6B@
rdata$r	SEGMENT
??_R4PlaneParticleEmitter@@6B@ DD 00H			; PlaneParticleEmitter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPlaneParticleEmitter@@@8
	DD	FLAT:??_R3PlaneParticleEmitter@@8
rdata$r	ENDS
;	COMDAT ??_7PlaneParticleEmitter@@6B@
CONST	SEGMENT
??_7PlaneParticleEmitter@@6B@ DD FLAT:??_R4PlaneParticleEmitter@@6B@ ; PlaneParticleEmitter::`vftable'
	DD	FLAT:?newParticle@PlaneParticleEmitter@@UAE?AUParticle@@HH@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0PlaneParticleEmitter@@QAE@PAVParticleSystem@@@Z
_TEXT	SEGMENT
_sys$ = 8						; size = 4
??0PlaneParticleEmitter@@QAE@PAVParticleSystem@@@Z PROC	; PlaneParticleEmitter::PlaneParticleEmitter, COMDAT
; _this$ = ecx
; Line 35
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR _sys$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax], OFFSET ??_7PlaneParticleEmitter@@6B@
	pop	ebp
	ret	4
??0PlaneParticleEmitter@@QAE@PAVParticleSystem@@@Z ENDP	; PlaneParticleEmitter::PlaneParticleEmitter
_TEXT	ENDS
PUBLIC	??_7SphereParticleEmitter@@6B@			; SphereParticleEmitter::`vftable'
PUBLIC	??0SphereParticleEmitter@@QAE@PAVParticleSystem@@@Z ; SphereParticleEmitter::SphereParticleEmitter
PUBLIC	??_R4SphereParticleEmitter@@6B@			; SphereParticleEmitter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSphereParticleEmitter@@@8		; SphereParticleEmitter `RTTI Type Descriptor'
PUBLIC	??_R3SphereParticleEmitter@@8			; SphereParticleEmitter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SphereParticleEmitter@@8			; SphereParticleEmitter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SphereParticleEmitter@@8		; SphereParticleEmitter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?newParticle@SphereParticleEmitter@@UAE?AUParticle@@HH@Z ; SphereParticleEmitter::newParticle
;	COMDAT ??_R1A@?0A@EA@SphereParticleEmitter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SphereParticleEmitter@@8 DD FLAT:??_R0?AVSphereParticleEmitter@@@8 ; SphereParticleEmitter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SphereParticleEmitter@@8
rdata$r	ENDS
;	COMDAT ??_R2SphereParticleEmitter@@8
rdata$r	SEGMENT
??_R2SphereParticleEmitter@@8 DD FLAT:??_R1A@?0A@EA@SphereParticleEmitter@@8 ; SphereParticleEmitter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ParticleEmitter@@8
rdata$r	ENDS
;	COMDAT ??_R3SphereParticleEmitter@@8
rdata$r	SEGMENT
??_R3SphereParticleEmitter@@8 DD 00H			; SphereParticleEmitter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SphereParticleEmitter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSphereParticleEmitter@@@8
_DATA	SEGMENT
??_R0?AVSphereParticleEmitter@@@8 DD FLAT:??_7type_info@@6B@ ; SphereParticleEmitter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSphereParticleEmitter@@', 00H
_DATA	ENDS
;	COMDAT ??_R4SphereParticleEmitter@@6B@
rdata$r	SEGMENT
??_R4SphereParticleEmitter@@6B@ DD 00H			; SphereParticleEmitter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSphereParticleEmitter@@@8
	DD	FLAT:??_R3SphereParticleEmitter@@8
rdata$r	ENDS
;	COMDAT ??_7SphereParticleEmitter@@6B@
CONST	SEGMENT
??_7SphereParticleEmitter@@6B@ DD FLAT:??_R4SphereParticleEmitter@@6B@ ; SphereParticleEmitter::`vftable'
	DD	FLAT:?newParticle@SphereParticleEmitter@@UAE?AUParticle@@HH@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0SphereParticleEmitter@@QAE@PAVParticleSystem@@@Z
_TEXT	SEGMENT
_sys$ = 8						; size = 4
??0SphereParticleEmitter@@QAE@PAVParticleSystem@@@Z PROC ; SphereParticleEmitter::SphereParticleEmitter, COMDAT
; _this$ = ecx
; Line 42
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR _sys$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax], OFFSET ??_7SphereParticleEmitter@@6B@
	pop	ebp
	ret	4
??0SphereParticleEmitter@@QAE@PAVParticleSystem@@@Z ENDP ; SphereParticleEmitter::SphereParticleEmitter
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	edi
	mov	edi, DWORD PTR ___n$[ebp]
	dec	edi
	js	SHORT $LN1@vector
	push	ebx
	mov	ebx, DWORD PTR ___f$[ebp]
	push	esi
	mov	esi, DWORD PTR ___t$[ebp]
$LL2@vector:
	mov	ecx, esi
	call	ebx
	add	esi, DWORD PTR ___s$[ebp]
	dec	edi
	jns	SHORT $LL2@vector
	pop	esi
	pop	ebx
$LN1@vector:
	pop	edi
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	__real@406fe00000000000
PUBLIC	?fromARGB@@YA?AVVec4D@@I@Z			; fromARGB
;	COMDAT __real@4f800000
; File c:\programovani\wow editor\test\src\editor\quaternion.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
; Function compile flags: /Ogtp
CONST	ENDS
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
tv177 = 12						; size = 4
tv174 = 12						; size = 4
tv171 = 12						; size = 4
tv168 = 12						; size = 4
_color$ = 12						; size = 4
?fromARGB@@YA?AVVec4D@@I@Z PROC				; fromARGB
; File c:\programovani\wow editor\test\src\editor\particle.cpp
; Line 7
	push	ebp
	mov	ebp, esp
; Line 12
	mov	ecx, DWORD PTR _color$[ebp]
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	DWORD PTR tv177[ebp], eax
	fild	DWORD PTR tv177[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fld	QWORD PTR __real@406fe00000000000
	mov	edx, ecx
	shr	edx, 8
	fdiv	ST(1), ST(0)
	and	edx, 255				; 000000ffH
	mov	DWORD PTR tv174[ebp], edx
	movzx	edx, cl
	shr	ecx, 24					; 00000018H
	fxch	ST(1)
	fstp	DWORD PTR [eax]
	fild	DWORD PTR tv174[ebp]
	mov	DWORD PTR tv171[ebp], edx
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [eax+4]
	fild	DWORD PTR tv171[ebp]
	mov	DWORD PTR tv168[ebp], ecx
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [eax+8]
	fild	DWORD PTR tv168[ebp]
	test	ecx, ecx
	jns	SHORT $LN5@fromARGB
	fadd	DWORD PTR __real@4f800000
$LN5@fromARGB:
; Line 8
	fdivrp	ST(1), ST(0)
; Line 12
	fstp	DWORD PTR [eax+12]
; Line 13
	pop	ebp
	ret	0
?fromARGB@@YA?AVVec4D@@I@Z ENDP				; fromARGB
_TEXT	ENDS
PUBLIC	??_FVec2D@@QAEXXZ				; Vec2D::`default constructor closure'
; Function compile flags: /Ogtp
;	COMDAT ??_FVec2D@@QAEXXZ
_TEXT	SEGMENT
??_FVec2D@@QAEXXZ PROC					; Vec2D::`default constructor closure', COMDAT
; _this$ = ecx
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	ret	0
??_FVec2D@@QAEXXZ ENDP					; Vec2D::`default constructor closure'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?initTile@ParticleSystem@@AAEXPAVVec2D@@H@Z	; ParticleSystem::initTile
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_a$ = -24						; size = 8
tv370 = -20						; size = 4
tv526 = -16						; size = 4
_y$ = -16						; size = 4
_b$ = -12						; size = 8
tv535 = -8						; size = 4
_x$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_tc$ = 8						; size = 4
_num$ = 12						; size = 4
?initTile@ParticleSystem@@AAEXPAVVec2D@@H@Z PROC	; ParticleSystem::initTile
; _this$ = ecx
; Line 82
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 85
	mov	eax, DWORD PTR _num$[ebp]
	cdq
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR [ecx+1088]
	idiv	edi
	mov	DWORD PTR tv370[ebp], edi
	mov	esi, DWORD PTR _tc$[ebp]
; Line 87
	fild	DWORD PTR tv370[ebp]
	fld1
	fld	ST(0)
	fdivrp	ST(2), ST(0)
	mov	DWORD PTR _x$[ebp], edx
	mov	DWORD PTR _y$[ebp], eax
; Line 88
	inc	edx
; Line 90
	inc	eax
	fild	DWORD PTR _x$[ebp]
	mov	DWORD PTR tv535[ebp], edx
	fmul	ST(0), ST(2)
	fstp	DWORD PTR _a$[ebp]
	fild	DWORD PTR tv535[ebp]
; Line 101
	mov	edx, DWORD PTR _a$[ebp]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR _b$[ebp]
	mov	ebx, DWORD PTR _b$[ebp]
	fidiv	DWORD PTR [ecx+1084]
	fild	DWORD PTR _y$[ebp]
	mov	DWORD PTR tv526[ebp], eax
	mov	eax, DWORD PTR [ecx+1068]
	neg	eax
	and	eax, 3
	fmul	ST(0), ST(1)
	mov	DWORD PTR [esi+eax*8], edx
	lea	eax, DWORD PTR [esi+eax*8]
	fstp	DWORD PTR _a$[ebp+4]
	mov	edi, DWORD PTR _a$[ebp+4]
	fimul	DWORD PTR tv526[ebp]
	mov	DWORD PTR [eax+4], edi
	mov	eax, 1
	sub	eax, DWORD PTR [ecx+1068]
	and	eax, 3
	mov	DWORD PTR [esi+eax*8], ebx
	lea	eax, DWORD PTR [esi+eax*8]
	mov	DWORD PTR [eax+4], edi
	fstp	DWORD PTR _b$[ebp+4]
	mov	edi, DWORD PTR _b$[ebp+4]
	mov	eax, -2					; fffffffeH
	sub	eax, DWORD PTR [ecx+1068]
	and	eax, 3
	lea	eax, DWORD PTR [esi+eax*8]
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], edi
	or	eax, -1
	sub	eax, DWORD PTR [ecx+1068]
; Line 103
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	and	eax, 3
	lea	eax, DWORD PTR [esi+eax*8]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], edi
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?initTile@ParticleSystem@@AAEXPAVVec2D@@H@Z ENDP	; ParticleSystem::initTile
_TEXT	ENDS
PUBLIC	?setup@ParticleSystem@@QAEXHH@Z			; ParticleSystem::setup
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_anim$ = 8						; size = 4
_time$ = 12						; size = 4
?setup@ParticleSystem@@QAEXHH@Z PROC			; ParticleSystem::setup
; _this$ = ecx
; Line 163
	push	ebp
	mov	ebp, esp
; Line 164
	mov	eax, DWORD PTR _anim$[ebp]
; Line 165
	mov	edx, DWORD PTR _time$[ebp]
	mov	DWORD PTR [ecx+1076], eax
	mov	DWORD PTR [ecx+1080], edx
; Line 185
	pop	ebp
	ret	8
?setup@ParticleSystem@@QAEXHH@Z ENDP			; ParticleSystem::setup
_TEXT	ENDS
PUBLIC	??0Particle@@QAE@XZ				; Particle::Particle
; Function compile flags: /Ogtp
;	COMDAT ??0Particle@@QAE@XZ
_TEXT	SEGMENT
??0Particle@@QAE@XZ PROC				; Particle::Particle, COMDAT
; _this$ = ecx
	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], ecx
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], ecx
	mov	DWORD PTR [eax+40], ecx
	mov	DWORD PTR [eax+44], ecx
	mov	DWORD PTR [eax+64], ecx
	mov	DWORD PTR [eax+68], ecx
	mov	DWORD PTR [eax+72], ecx
	mov	DWORD PTR [eax+76], ecx
	ret	0
??0Particle@@QAE@XZ ENDP				; Particle::Particle
_TEXT	ENDS
PUBLIC	??0Particle@@QAE@ABU0@@Z			; Particle::Particle
; Function compile flags: /Ogtp
;	COMDAT ??0Particle@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0Particle@@QAE@ABU0@@Z PROC				; Particle::Particle, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+52], edx
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+60], edx
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+64], edx
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+68], edx
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	ecx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], ecx
	pop	ebp
	ret	4
??0Particle@@QAE@ABU0@@Z ENDP				; Particle::Particle
_TEXT	ENDS
PUBLIC	??0RibbonSegment@@QAE@XZ			; RibbonSegment::RibbonSegment
; Function compile flags: /Ogtp
;	COMDAT ??0RibbonSegment@@QAE@XZ
_TEXT	SEGMENT
??0RibbonSegment@@QAE@XZ PROC				; RibbonSegment::RibbonSegment, COMDAT
; _this$ = ecx
	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], ecx
	mov	DWORD PTR [eax+32], ecx
	ret	0
??0RibbonSegment@@QAE@XZ ENDP				; RibbonSegment::RibbonSegment
_TEXT	ENDS
PUBLIC	?size@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QBEIXZ ; std::list<Particle,std::allocator<Particle> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QBEIXZ PROC ; std::list<Particle,std::allocator<Particle> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 877
	mov	eax, DWORD PTR [ecx+4]
; Line 878
	ret	0
?size@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QBEIXZ ENDP ; std::list<Particle,std::allocator<Particle> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEAAUTexCoordSet@@I@Z ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEAAUTexCoordSet@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEAAUTexCoordSet@@I@Z PROC ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 928
	push	ebp
	mov	ebp, esp
; Line 940
	mov	eax, DWORD PTR __Pos$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR [ecx]
; Line 941
	pop	ebp
	ret	4
??A?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEAAUTexCoordSet@@I@Z ENDP ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::operator[]
_TEXT	ENDS
PUBLIC	?size@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QBEIXZ ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QBEIXZ PROC ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 877
	mov	eax, DWORD PTR [ecx+4]
; Line 878
	ret	0
?size@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QBEIXZ ENDP ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEAAU?$pair@II@1@I@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEAAU?$pair@II@1@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEAAU?$pair@II@1@I@Z PROC ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::operator[], COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 928
	push	ebp
	mov	ebp, esp
; Line 940
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [eax+ecx*8]
; Line 941
	pop	ebp
	ret	4
??A?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEAAU?$pair@II@1@I@Z ENDP ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::operator[]
_TEXT	ENDS
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx
; Line 879
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; Line 880
	ret	0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z PROC	; std::vector<int,std::allocator<int> >::operator[], COMDAT
; _this$ = ecx
; Line 928
	push	ebp
	mov	ebp, esp
; Line 940
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
; Line 941
	pop	ebp
	ret	4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ENDP	; std::vector<int,std::allocator<int> >::operator[]
_TEXT	ENDS
PUBLIC	?size@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QBEIXZ ; std::vector<Vec3D,std::allocator<Vec3D> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QBEIXZ PROC ; std::vector<Vec3D,std::allocator<Vec3D> >::size, COMDAT
; _this$ = ecx
; Line 879
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR [ecx]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; Line 880
	ret	0
?size@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QBEIXZ ENDP ; std::vector<Vec3D,std::allocator<Vec3D> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEAAVVec3D@@I@Z ; std::vector<Vec3D,std::allocator<Vec3D> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEAAVVec3D@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEAAVVec3D@@I@Z PROC ; std::vector<Vec3D,std::allocator<Vec3D> >::operator[], COMDAT
; _this$ = ecx
; Line 928
	push	ebp
	mov	ebp, esp
; Line 940
	mov	eax, DWORD PTR __Pos$[ebp]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ecx+eax*4]
; Line 941
	pop	ebp
	ret	4
??A?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEAAVVec3D@@I@Z ENDP ; std::vector<Vec3D,std::allocator<Vec3D> >::operator[]
_TEXT	ENDS
PUBLIC	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ PROC	; std::vector<float,std::allocator<float> >::size, COMDAT
; _this$ = ecx
; Line 879
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; Line 880
	ret	0
?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ENDP	; std::vector<float,std::allocator<float> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z ; std::vector<float,std::allocator<float> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z PROC	; std::vector<float,std::allocator<float> >::operator[], COMDAT
; _this$ = ecx
; Line 928
	push	ebp
	mov	ebp, esp
; Line 940
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
; Line 941
	pop	ebp
	ret	4
??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z ENDP	; std::vector<float,std::allocator<float> >::operator[]
_TEXT	ENDS
PUBLIC	?_Nextnode@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@PAU342@@Z ; std::_List_val<Particle,std::allocator<Particle> >::_Nextnode
; Function compile flags: /Ogtp
;	COMDAT ?_Nextnode@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@PAU342@@Z PROC ; std::_List_val<Particle,std::allocator<Particle> >::_Nextnode, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 560
	push	ebp
	mov	ebp, esp
; Line 561
	mov	eax, DWORD PTR __Pnode$[ebp]
; Line 562
	pop	ebp
	ret	0
?_Nextnode@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@PAU342@@Z ENDP ; std::_List_val<Particle,std::allocator<Particle> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@PAU342@@Z ; std::_List_val<Particle,std::allocator<Particle> >::_Prevnode
; Function compile flags: /Ogtp
;	COMDAT ?_Prevnode@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@PAU342@@Z PROC ; std::_List_val<Particle,std::allocator<Particle> >::_Prevnode, COMDAT
; Line 565
	push	ebp
	mov	ebp, esp
; Line 566
	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4
; Line 567
	pop	ebp
	ret	0
?_Prevnode@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@PAU342@@Z ENDP ; std::_List_val<Particle,std::allocator<Particle> >::_Prevnode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@I@Z ; std::allocator<std::_List_nod<Particle,std::allocator<Particle> >::_Node>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<Particle,std::allocator<Particle> >::_Node>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 181
	push	ebp
	mov	ebp, esp
; Line 182
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 183
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<Particle,std::allocator<Particle> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IBE_NPBUTexCoordSet@@@Z ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IBE_NPBUTexCoordSet@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IBE_NPBUTexCoordSet@@@Z PROC ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1285
	push	ebp
	mov	ebp, esp
; Line 1286
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@Inside
	cmp	DWORD PTR [ecx], eax
	ja	SHORT $LN3@Inside
	mov	eax, 1
; Line 1287
	pop	ebp
	ret	4
$LN3@Inside:
; Line 1286
	xor	eax, eax
; Line 1287
	pop	ebp
	ret	4
?_Inside@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IBE_NPBUTexCoordSet@@@Z ENDP ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IBEXPAUTexCoordSet@@0@Z ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IBEXPAUTexCoordSet@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IBEXPAUTexCoordSet@@0@Z PROC ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Orphan_range, COMDAT
; _this$ = ecx
; Line 1454
	ret	8
?_Orphan_range@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IBEXPAUTexCoordSet@@0@Z ENDP ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Orphan_range
_TEXT	ENDS
PUBLIC	?_Nextnode@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@SAAAPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@PAU342@@Z ; std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >::_Nextnode
; Function compile flags: /Ogtp
;	COMDAT ?_Nextnode@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@SAAAPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@SAAAPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@PAU342@@Z PROC ; std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >::_Nextnode, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 560
	push	ebp
	mov	ebp, esp
; Line 561
	mov	eax, DWORD PTR __Pnode$[ebp]
; Line 562
	pop	ebp
	ret	0
?_Nextnode@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@SAAAPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@PAU342@@Z ENDP ; std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@SAAAPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@PAU342@@Z ; std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >::_Prevnode
; Function compile flags: /Ogtp
;	COMDAT ?_Prevnode@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@SAAAPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@SAAAPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@PAU342@@Z PROC ; std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >::_Prevnode, COMDAT
; Line 565
	push	ebp
	mov	ebp, esp
; Line 566
	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4
; Line 567
	pop	ebp
	ret	0
?_Prevnode@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@SAAAPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@PAU342@@Z ENDP ; std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >::_Prevnode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@I@Z ; std::allocator<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 181
	push	ebp
	mov	ebp, esp
; Line 182
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 183
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator++, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 221
	mov	eax, ecx
; Line 237
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 239
	ret	0
??E?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator++
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator++, COMDAT
; _this$ = ecx
; Line 242
	push	ebp
	mov	ebp, esp
; Line 243
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
; Line 244
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], edx
; Line 246
	pop	ebp
	ret	8
??E?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator==, COMDAT
; _this$ = ecx
; Line 281
	push	ebp
	mov	ebp, esp
; Line 295
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	sete	al
; Line 296
	pop	ebp
	ret	4
??8?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<Particle,std::allocator<Particle> >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Ogtp
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<Particle,std::allocator<Particle> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx
; Line 93
	mov	eax, DWORD PTR [ecx]
; Line 94
	ret	0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<Particle,std::allocator<Particle> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator++, COMDAT
; _this$ = ecx
; Line 221
	mov	eax, ecx
; Line 237
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 239
	ret	0
??E?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator++
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator++, COMDAT
; _this$ = ecx
; Line 242
	push	ebp
	mov	ebp, esp
; Line 243
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
; Line 244
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], edx
; Line 246
	pop	ebp
	ret	8
??E?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator++
_TEXT	ENDS
PUBLIC	??F?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator--
; Function compile flags: /Ogtp
;	COMDAT ??F?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator--, COMDAT
; _this$ = ecx
; Line 249
	mov	eax, ecx
; Line 267
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
; Line 271
	ret	0
??F?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator--
_TEXT	ENDS
PUBLIC	??8?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator==, COMDAT
; _this$ = ecx
; Line 281
	push	ebp
	mov	ebp, esp
; Line 295
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	sete	al
; Line 296
	pop	ebp
	ret	4
??8?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Ogtp
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx
; Line 93
	mov	eax, DWORD PTR [ecx]
; Line 94
	ret	0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	??4?$pair@II@std@@QAEAAU01@ABU01@@Z		; std::pair<unsigned int,unsigned int>::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4?$pair@II@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$pair@II@std@@QAEAAU01@ABU01@@Z PROC		; std::pair<unsigned int,unsigned int>::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 215
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
; Line 216
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 217
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
; Line 219
	pop	ebp
	ret	4
??4?$pair@II@std@@QAEAAU01@ABU01@@Z ENDP		; std::pair<unsigned int,unsigned int>::operator=
_TEXT	ENDS
PUBLIC	?conv@?$Identity@VVec3D@@@@SAABVVec3D@@ABV2@@Z	; Identity<Vec3D>::conv
; Function compile flags: /Ogtp
;	COMDAT ?conv@?$Identity@VVec3D@@@@SAABVVec3D@@ABV2@@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
?conv@?$Identity@VVec3D@@@@SAABVVec3D@@ABV2@@Z PROC	; Identity<Vec3D>::conv, COMDAT
; File c:\programovani\wow editor\test\src\editor\animated.h
; Line 61
	push	ebp
	mov	ebp, esp
; Line 62
	mov	eax, DWORD PTR _t$[ebp]
; Line 63
	pop	ebp
	ret	0
?conv@?$Identity@VVec3D@@@@SAABVVec3D@@ABV2@@Z ENDP	; Identity<Vec3D>::conv
_TEXT	ENDS
PUBLIC	?conv@?$Identity@M@@SAABMABM@Z			; Identity<float>::conv
; Function compile flags: /Ogtp
;	COMDAT ?conv@?$Identity@M@@SAABMABM@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
?conv@?$Identity@M@@SAABMABM@Z PROC			; Identity<float>::conv, COMDAT
; Line 61
	push	ebp
	mov	ebp, esp
; Line 62
	mov	eax, DWORD PTR _t$[ebp]
; Line 63
	pop	ebp
	ret	0
?conv@?$Identity@M@@SAABMABM@Z ENDP			; Identity<float>::conv
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IBE_NPBU?$pair@II@2@@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IBE_NPBU?$pair@II@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IBE_NPBU?$pair@II@2@@Z PROC ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1285
	push	ebp
	mov	ebp, esp
; Line 1286
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@Inside@2
	cmp	DWORD PTR [ecx], eax
	ja	SHORT $LN3@Inside@2
	mov	eax, 1
; Line 1287
	pop	ebp
	ret	4
$LN3@Inside@2:
; Line 1286
	xor	eax, eax
; Line 1287
	pop	ebp
	ret	4
?_Inside@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IBE_NPBU?$pair@II@2@@Z ENDP ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IBEXPAU?$pair@II@2@0@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IBEXPAU?$pair@II@2@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IBEXPAU?$pair@II@2@0@Z PROC ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Orphan_range, COMDAT
; _this$ = ecx
; Line 1454
	ret	8
?_Orphan_range@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IBEXPAU?$pair@II@2@0@Z ENDP ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Orphan_range
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@2@I@Z ; std::allocator<std::pair<unsigned int,unsigned int> >::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@2@I@Z PROC ; std::allocator<std::pair<unsigned int,unsigned int> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 181
	push	ebp
	mov	ebp, esp
; Line 182
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 183
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@2@I@Z ENDP ; std::allocator<std::pair<unsigned int,unsigned int> >::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ; std::vector<int,std::allocator<int> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z PROC ; std::vector<int,std::allocator<int> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1285
	push	ebp
	mov	ebp, esp
; Line 1286
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@Inside@3
	cmp	DWORD PTR [ecx], eax
	ja	SHORT $LN3@Inside@3
	mov	eax, 1
; Line 1287
	pop	ebp
	ret	4
$LN3@Inside@3:
; Line 1286
	xor	eax, eax
; Line 1287
	pop	ebp
	ret	4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ENDP ; std::vector<int,std::allocator<int> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT
; _this$ = ecx
; Line 1454
	ret	8
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 181
	push	ebp
	mov	ebp, esp
; Line 182
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 183
	pop	ebp
	ret	8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IBE_NPBVVec3D@@@Z ; std::vector<Vec3D,std::allocator<Vec3D> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IBE_NPBVVec3D@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IBE_NPBVVec3D@@@Z PROC ; std::vector<Vec3D,std::allocator<Vec3D> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1285
	push	ebp
	mov	ebp, esp
; Line 1286
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@Inside@4
	cmp	DWORD PTR [ecx], eax
	ja	SHORT $LN3@Inside@4
	mov	eax, 1
; Line 1287
	pop	ebp
	ret	4
$LN3@Inside@4:
; Line 1286
	xor	eax, eax
; Line 1287
	pop	ebp
	ret	4
?_Inside@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IBE_NPBVVec3D@@@Z ENDP ; std::vector<Vec3D,std::allocator<Vec3D> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IBEXPAVVec3D@@0@Z ; std::vector<Vec3D,std::allocator<Vec3D> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IBEXPAVVec3D@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IBEXPAVVec3D@@0@Z PROC ; std::vector<Vec3D,std::allocator<Vec3D> >::_Orphan_range, COMDAT
; _this$ = ecx
; Line 1454
	ret	8
?_Orphan_range@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IBEXPAVVec3D@@0@Z ENDP ; std::vector<Vec3D,std::allocator<Vec3D> >::_Orphan_range
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@I@Z ; std::allocator<Vec3D>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@I@Z PROC ; std::allocator<Vec3D>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 181
	push	ebp
	mov	ebp, esp
; Line 182
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 183
	pop	ebp
	ret	8
?deallocate@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@I@Z ENDP ; std::allocator<Vec3D>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@MV?$allocator@M@std@@@std@@IBE_NPBM@Z ; std::vector<float,std::allocator<float> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@MV?$allocator@M@std@@@std@@IBE_NPBM@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@MV?$allocator@M@std@@@std@@IBE_NPBM@Z PROC ; std::vector<float,std::allocator<float> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1285
	push	ebp
	mov	ebp, esp
; Line 1286
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@Inside@5
	cmp	DWORD PTR [ecx], eax
	ja	SHORT $LN3@Inside@5
	mov	eax, 1
; Line 1287
	pop	ebp
	ret	4
$LN3@Inside@5:
; Line 1286
	xor	eax, eax
; Line 1287
	pop	ebp
	ret	4
?_Inside@?$vector@MV?$allocator@M@std@@@std@@IBE_NPBM@Z ENDP ; std::vector<float,std::allocator<float> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@IBEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@IBEXPAM0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@IBEXPAM0@Z PROC ; std::vector<float,std::allocator<float> >::_Orphan_range, COMDAT
; _this$ = ecx
; Line 1454
	ret	8
?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@IBEXPAM0@Z ENDP ; std::vector<float,std::allocator<float> >::_Orphan_range
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@M@std@@QAEXPAMI@Z	; std::allocator<float>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@M@std@@QAEXPAMI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@M@std@@QAEXPAMI@Z PROC		; std::allocator<float>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 181
	push	ebp
	mov	ebp, esp
; Line 182
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 183
	pop	ebp
	ret	8
?deallocate@?$allocator@M@std@@QAEXPAMI@Z ENDP		; std::allocator<float>::deallocate
_TEXT	ENDS
PUBLIC	?_Myval@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@SAAAUParticle@@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@@Z ; std::_List_val<Particle,std::allocator<Particle> >::_Myval
; Function compile flags: /Ogtp
;	COMDAT ?_Myval@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@SAAAUParticle@@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@SAAAUParticle@@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@@Z PROC ; std::_List_val<Particle,std::allocator<Particle> >::_Myval, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 570
	push	ebp
	mov	ebp, esp
; Line 571
	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8
; Line 572
	pop	ebp
	ret	0
?_Myval@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@SAAAUParticle@@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@@Z ENDP ; std::_List_val<Particle,std::allocator<Particle> >::_Myval
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QBEIXZ ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::capacity
; Function compile flags: /Ogtp
;	COMDAT ?capacity@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QBEIXZ PROC ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 777
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 5
; Line 778
	ret	0
?capacity@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QBEIXZ ENDP ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QBEIXZ ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QBEIXZ PROC ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::size, COMDAT
; _this$ = ecx
; Line 879
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 5
; Line 880
	ret	0
?size@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QBEIXZ ENDP ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::size
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IBEXXZ ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IBEXXZ PROC ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Xlen, COMDAT
; _this$ = ecx
; Line 1427
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
	int	3
?_Xlen@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IBEXXZ ENDP ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Xlen
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@I@Z ; std::allocator<TexCoordSet>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@I@Z PROC ; std::allocator<TexCoordSet>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 181
	push	ebp
	mov	ebp, esp
; Line 182
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 183
	pop	ebp
	ret	8
?deallocate@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@I@Z ENDP ; std::allocator<TexCoordSet>::deallocate
_TEXT	ENDS
PUBLIC	?_Myval@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@SAAAURibbonSegment@@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@@Z ; std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >::_Myval
; Function compile flags: /Ogtp
;	COMDAT ?_Myval@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@SAAAURibbonSegment@@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@SAAAURibbonSegment@@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@@Z PROC ; std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >::_Myval, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 570
	push	ebp
	mov	ebp, esp
; Line 571
	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8
; Line 572
	pop	ebp
	ret	0
?_Myval@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@SAAAURibbonSegment@@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@@Z ENDP ; std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@II@std@@QAE@XZ			; std::_Pair_base<unsigned int,unsigned int>::_Pair_base<unsigned int,unsigned int>
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Pair_base@II@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Pair_base@II@std@@QAE@XZ PROC			; std::_Pair_base<unsigned int,unsigned int>::_Pair_base<unsigned int,unsigned int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 126
	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 127
	ret	0
??0?$_Pair_base@II@std@@QAE@XZ ENDP			; std::_Pair_base<unsigned int,unsigned int>::_Pair_base<unsigned int,unsigned int>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::capacity
; Function compile flags: /Ogtp
;	COMDAT ?capacity@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 777
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3
; Line 778
	ret	0
?capacity@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::size, COMDAT
; _this$ = ecx
; Line 879
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3
; Line 880
	ret	0
?size@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IBEXXZ ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Xlen
; Function compile flags: /Ogtp
;	COMDAT ?_Xlen@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IBEXXZ PROC ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Xlen, COMDAT
; _this$ = ecx
; Line 1427
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
	int	3
?_Xlen@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IBEXXZ ENDP ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Xlen
_TEXT	ENDS
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
; Function compile flags: /Ogtp
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx
; Line 777
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; Line 778
	ret	0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int> >::_Xlen
; Function compile flags: /Ogtp
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT
; _this$ = ecx
; Line 1427
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@3:
$LN3@Xlen@3:
	int	3
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
_TEXT	ENDS
PUBLIC	?capacity@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QBEIXZ ; std::vector<Vec3D,std::allocator<Vec3D> >::capacity
; Function compile flags: /Ogtp
;	COMDAT ?capacity@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QBEIXZ PROC ; std::vector<Vec3D,std::allocator<Vec3D> >::capacity, COMDAT
; _this$ = ecx
; Line 777
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; Line 778
	ret	0
?capacity@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QBEIXZ ENDP ; std::vector<Vec3D,std::allocator<Vec3D> >::capacity
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IBEXXZ ; std::vector<Vec3D,std::allocator<Vec3D> >::_Xlen
; Function compile flags: /Ogtp
;	COMDAT ?_Xlen@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IBEXXZ PROC ; std::vector<Vec3D,std::allocator<Vec3D> >::_Xlen, COMDAT
; _this$ = ecx
; Line 1427
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@4:
$LN3@Xlen@4:
	int	3
?_Xlen@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IBEXXZ ENDP ; std::vector<Vec3D,std::allocator<Vec3D> >::_Xlen
_TEXT	ENDS
PUBLIC	?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::capacity
; Function compile flags: /Ogtp
;	COMDAT ?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ PROC ; std::vector<float,std::allocator<float> >::capacity, COMDAT
; _this$ = ecx
; Line 777
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; Line 778
	ret	0
?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ENDP ; std::vector<float,std::allocator<float> >::capacity
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@MV?$allocator@M@std@@@std@@IBEXXZ ; std::vector<float,std::allocator<float> >::_Xlen
; Function compile flags: /Ogtp
;	COMDAT ?_Xlen@?$vector@MV?$allocator@M@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@MV?$allocator@M@std@@@std@@IBEXXZ PROC	; std::vector<float,std::allocator<float> >::_Xlen, COMDAT
; _this$ = ecx
; Line 1427
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@5:
$LN3@Xlen@5:
	int	3
?_Xlen@?$vector@MV?$allocator@M@std@@@std@@IBEXXZ ENDP	; std::vector<float,std::allocator<float> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UTexCoordSet@@@std@@QBEIXZ ; std::allocator<TexCoordSet>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@UTexCoordSet@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UTexCoordSet@@@std@@QBEIXZ PROC	; std::allocator<TexCoordSet>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 219
	mov	eax, 134217727				; 07ffffffH
; Line 220
	ret	0
?max_size@?$allocator@UTexCoordSet@@@std@@QBEIXZ ENDP	; std::allocator<TexCoordSet>::max_size
_TEXT	ENDS
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@1@PBV?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<Particle,std::allocator<Particle> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<Particle,std::allocator<Particle> >,std::_Iterator_base0>
; Function compile flags: /Ogtp
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@1@PBV?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@1@PBV?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<Particle,std::allocator<Particle> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<Particle,std::allocator<Particle> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 41
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 43
	pop	ebp
	ret	8
??0?$_List_unchecked_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@1@PBV?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<Particle,std::allocator<Particle> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<Particle,std::allocator<Particle> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@PBV?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >,std::_Iterator_base0>
; Function compile flags: /Ogtp
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@PBV?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@PBV?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 43
	pop	ebp
	ret	8
??0?$_List_unchecked_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@PBV?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@II@std@@@std@@QBEIXZ ; std::allocator<std::pair<unsigned int,unsigned int> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@U?$pair@II@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@II@std@@@std@@QBEIXZ PROC	; std::allocator<std::pair<unsigned int,unsigned int> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 219
	mov	eax, 536870911				; 1fffffffH
; Line 220
	ret	0
?max_size@?$allocator@U?$pair@II@std@@@std@@QBEIXZ ENDP	; std::allocator<std::pair<unsigned int,unsigned int> >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@H@std@@QBEIXZ		; std::allocator<int>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx
; Line 219
	mov	eax, 1073741823				; 3fffffffH
; Line 220
	ret	0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@VVec3D@@@std@@QBEIXZ	; std::allocator<Vec3D>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@VVec3D@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@VVec3D@@@std@@QBEIXZ PROC		; std::allocator<Vec3D>::max_size, COMDAT
; _this$ = ecx
; Line 219
	mov	eax, 357913941				; 15555555H
; Line 220
	ret	0
?max_size@?$allocator@VVec3D@@@std@@QBEIXZ ENDP		; std::allocator<Vec3D>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@M@std@@QBEIXZ		; std::allocator<float>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@M@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@M@std@@QBEIXZ PROC		; std::allocator<float>::max_size, COMDAT
; _this$ = ecx
; Line 219
	mov	eax, 1073741823				; 3fffffffH
; Line 220
	ret	0
?max_size@?$allocator@M@std@@QBEIXZ ENDP		; std::allocator<float>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UParticle@@@std@@QBEIXZ	; std::allocator<Particle>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@UParticle@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UParticle@@@std@@QBEIXZ PROC	; std::allocator<Particle>::max_size, COMDAT
; _this$ = ecx
; Line 219
	mov	eax, 53687091				; 03333333H
; Line 220
	ret	0
?max_size@?$allocator@UParticle@@@std@@QBEIXZ ENDP	; std::allocator<Particle>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@URibbonSegment@@@std@@QBEIXZ ; std::allocator<RibbonSegment>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@URibbonSegment@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@URibbonSegment@@@std@@QBEIXZ PROC	; std::allocator<RibbonSegment>::max_size, COMDAT
; _this$ = ecx
; Line 219
	mov	eax, 97612893				; 05d1745dH
; Line 220
	ret	0
?max_size@?$allocator@URibbonSegment@@@std@@QBEIXZ ENDP	; std::allocator<RibbonSegment>::max_size
_TEXT	ENDS
PUBLIC	??$interpolate@VVec3D@@@@YA?AVVec3D@@MABV0@0@Z	; interpolate<Vec3D>
; Function compile flags: /Ogtp
;	COMDAT ??$interpolate@VVec3D@@@@YA?AVVec3D@@MABV0@0@Z
_TEXT	SEGMENT
$T90029 = -24						; size = 12
$T90028 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_r$ = 12						; size = 4
_v1$ = 16						; size = 4
$T90054 = 20						; size = 4
_v2$ = 20						; size = 4
??$interpolate@VVec3D@@@@YA?AVVec3D@@MABV0@0@Z PROC	; interpolate<Vec3D>, COMDAT
; File c:\programovani\wow editor\test\src\editor\animated.h
; Line 17
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 18
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax]
	fld	DWORD PTR _r$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T90029[ebp]
	fld	DWORD PTR [eax+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T90029[ebp+4]
	fld	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _v1$[ebp]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T90029[ebp+8]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR $T90054[ebp]
	fld	DWORD PTR [eax]
	fld	DWORD PTR $T90054[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T90028[ebp]
	fld	DWORD PTR [eax+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T90028[ebp+4]
	fmul	DWORD PTR [eax+8]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fstp	DWORD PTR $T90028[ebp+8]
	fld	DWORD PTR $T90028[ebp]
	fadd	DWORD PTR $T90029[ebp]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR $T90029[ebp+4]
	fadd	DWORD PTR $T90028[ebp+4]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR $T90028[ebp+8]
	fadd	DWORD PTR $T90029[ebp+8]
	fstp	DWORD PTR [eax+8]
; Line 19
	mov	esp, ebp
	pop	ebp
	ret	0
??$interpolate@VVec3D@@@@YA?AVVec3D@@MABV0@0@Z ENDP	; interpolate<Vec3D>
_TEXT	ENDS
PUBLIC	__real@4008000000000000
PUBLIC	??$interpolateHermite@VVec3D@@@@YA?AVVec3D@@MABV0@000@Z ; interpolateHermite<Vec3D>
;	COMDAT __real@4008000000000000
; File c:\programovani\wow editor\test\src\editor\vec3d.h
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??$interpolateHermite@VVec3D@@@@YA?AVVec3D@@MABV0@000@Z
_TEXT	SEGMENT
$T90074 = -72						; size = 12
$T90072 = -60						; size = 12
$T90071 = -48						; size = 12
$T90073 = -36						; size = 12
$T90070 = -36						; size = 12
$T90069 = -24						; size = 12
_h1$ = -12						; size = 4
_h2$ = -8						; size = 4
_h3$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_h4$ = 12						; size = 4
_r$ = 12						; size = 4
_v1$ = 16						; size = 4
_v2$ = 20						; size = 4
_in$ = 24						; size = 4
_out$ = 28						; size = 4
??$interpolateHermite@VVec3D@@@@YA?AVVec3D@@MABV0@000@Z PROC ; interpolateHermite<Vec3D>, COMDAT
; File c:\programovani\wow editor\test\src\editor\animated.h
; Line 23
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
; Line 28
	fld	DWORD PTR _r$[ebp]
; Line 34
	mov	eax, DWORD PTR _out$[ebp]
	fld	ST(0)
	fadd	ST(0), ST(1)
	fmul	ST(0), ST(1)
	fld	ST(1)
	fmul	ST(0), ST(1)
	fld	ST(2)
	fmul	QWORD PTR __real@4008000000000000
	fmul	ST(0), ST(3)
	fld	ST(1)
	fsub	ST(0), ST(1)
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR _h1$[ebp]
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR _h2$[ebp]
	fld	ST(1)
	fmul	ST(0), ST(0)
	fld	ST(2)
	fmul	ST(0), ST(1)
	fld	ST(0)
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	faddp	ST(3), ST(0)
	fxch	ST(2)
	fstp	DWORD PTR _h3$[ebp]
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR _h4$[ebp]
	fld	DWORD PTR [eax]
	fld	DWORD PTR _h4$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T90074[ebp]
	fld	DWORD PTR [eax+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T90074[ebp+4]
	fmul	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _in$[ebp]
	fstp	DWORD PTR $T90074[ebp+8]
	fld	DWORD PTR [eax]
	fld	DWORD PTR _h3$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T90072[ebp]
	fld	DWORD PTR [eax+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T90072[ebp+4]
	fmul	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _v2$[ebp]
	fstp	DWORD PTR $T90072[ebp+8]
	fld	DWORD PTR [eax]
	fld	DWORD PTR _h2$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T90070[ebp]
	fld	DWORD PTR [eax+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T90070[ebp+4]
	fmul	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _v1$[ebp]
	fstp	DWORD PTR $T90070[ebp+8]
	fld	DWORD PTR [eax]
	fld	DWORD PTR _h1$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T90069[ebp]
	fld	DWORD PTR [eax+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T90069[ebp+4]
	fmul	DWORD PTR [eax+8]
	fstp	DWORD PTR $T90069[ebp+8]
	fld	DWORD PTR $T90069[ebp]
	fadd	DWORD PTR $T90070[ebp]
	fstp	DWORD PTR $T90071[ebp]
	fld	DWORD PTR $T90069[ebp+4]
	fadd	DWORD PTR $T90070[ebp+4]
	fstp	DWORD PTR $T90071[ebp+4]
	fld	DWORD PTR $T90069[ebp+8]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fadd	DWORD PTR $T90070[ebp+8]
	fstp	DWORD PTR $T90071[ebp+8]
	fld	DWORD PTR $T90071[ebp]
	fadd	DWORD PTR $T90072[ebp]
	fstp	DWORD PTR $T90073[ebp]
	fld	DWORD PTR $T90071[ebp+4]
	fadd	DWORD PTR $T90072[ebp+4]
	fstp	DWORD PTR $T90073[ebp+4]
	fld	DWORD PTR $T90071[ebp+8]
	fadd	DWORD PTR $T90072[ebp+8]
	fstp	DWORD PTR $T90073[ebp+8]
	fld	DWORD PTR $T90073[ebp]
	fadd	DWORD PTR $T90074[ebp]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR $T90073[ebp+4]
	fadd	DWORD PTR $T90074[ebp+4]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR $T90073[ebp+8]
	fadd	DWORD PTR $T90074[ebp+8]
	fstp	DWORD PTR [eax+8]
; Line 35
	mov	esp, ebp
	pop	ebp
	ret	0
??$interpolateHermite@VVec3D@@@@YA?AVVec3D@@MABV0@000@Z ENDP ; interpolateHermite<Vec3D>
_TEXT	ENDS
PUBLIC	??$interpolate@M@@YAMMABM0@Z			; interpolate<float>
; Function compile flags: /Ogtp
;	COMDAT ??$interpolate@M@@YAMMABM0@Z
_TEXT	SEGMENT
tv135 = 8						; size = 4
_r$ = 8							; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$interpolate@M@@YAMMABM0@Z PROC			; interpolate<float>, COMDAT
; Line 17
	push	ebp
	mov	ebp, esp
; Line 18
	fld	DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	fld	ST(0)
	fld1
	fsubrp	ST(1), ST(0)
	fmul	DWORD PTR [eax]
	fld	DWORD PTR [ecx]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv135[ebp]
	fld	DWORD PTR tv135[ebp]
; Line 19
	pop	ebp
	ret	0
??$interpolate@M@@YAMMABM0@Z ENDP			; interpolate<float>
_TEXT	ENDS
PUBLIC	??$interpolateHermite@M@@YAMMABM000@Z		; interpolateHermite<float>
; Function compile flags: /Ogtp
;	COMDAT ??$interpolateHermite@M@@YAMMABM000@Z
_TEXT	SEGMENT
tv237 = 8						; size = 4
tv233 = 8						; size = 4
tv228 = 8						; size = 4
tv203 = 8						; size = 4
tv198 = 8						; size = 4
_r$ = 8							; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_in$ = 20						; size = 4
_out$ = 24						; size = 4
??$interpolateHermite@M@@YAMMABM000@Z PROC		; interpolateHermite<float>, COMDAT
; Line 23
	push	ebp
	mov	ebp, esp
; Line 28
	fld	DWORD PTR _r$[ebp]
; Line 34
	mov	eax, DWORD PTR _v1$[ebp]
	fld	ST(0)
	mov	ecx, DWORD PTR _v2$[ebp]
	fadd	ST(0), ST(1)
	mov	edx, DWORD PTR _in$[ebp]
	fmul	ST(0), ST(1)
	fld	ST(1)
	fmul	ST(0), ST(1)
	fld	ST(2)
	fmul	QWORD PTR __real@4008000000000000
	fmul	ST(0), ST(3)
	fld	ST(3)
	fmul	ST(0), ST(0)
	fld	ST(4)
	fmul	ST(0), ST(1)
	fld	ST(3)
	fsub	ST(0), ST(3)
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv237[ebp]
	fld	DWORD PTR tv237[ebp]
	fmul	DWORD PTR [eax]
	mov	eax, DWORD PTR _out$[ebp]
	fxch	ST(3)
	fsubrp	ST(4), ST(0)
	fxch	ST(3)
	fstp	DWORD PTR tv233[ebp]
	fld	DWORD PTR tv233[ebp]
	fmul	DWORD PTR [ecx]
	faddp	ST(2), ST(0)
	fld	ST(2)
	fsubrp	ST(4), ST(0)
	fxch	ST(3)
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fstp	DWORD PTR tv228[ebp]
	fld	DWORD PTR tv228[ebp]
	fmul	DWORD PTR [edx]
	faddp	ST(3), ST(0)
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR tv203[ebp]
	fld	DWORD PTR tv203[ebp]
	fmul	DWORD PTR [eax]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv198[ebp]
	fld	DWORD PTR tv198[ebp]
; Line 35
	pop	ebp
	ret	0
??$interpolateHermite@M@@YAMMABM000@Z ENDP		; interpolateHermite<float>
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUTexCoordSet@@@std@@YAPBUTexCoordSet@@ABU1@@Z ; std::addressof<TexCoordSet const >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@$$CBUTexCoordSet@@@std@@YAPBUTexCoordSet@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUTexCoordSet@@@std@@YAPBUTexCoordSet@@ABU1@@Z PROC ; std::addressof<TexCoordSet const >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 110
	push	ebp
	mov	ebp, esp
; Line 111
	mov	eax, DWORD PTR __Val$[ebp]
; Line 112
	pop	ebp
	ret	0
??$addressof@$$CBUTexCoordSet@@@std@@YAPBUTexCoordSet@@ABU1@@Z ENDP ; std::addressof<TexCoordSet const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBU?$pair@II@std@@@std@@YAPBU?$pair@II@0@ABU10@@Z ; std::addressof<std::pair<unsigned int,unsigned int> const >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@$$CBU?$pair@II@std@@@std@@YAPBU?$pair@II@0@ABU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBU?$pair@II@std@@@std@@YAPBU?$pair@II@0@ABU10@@Z PROC ; std::addressof<std::pair<unsigned int,unsigned int> const >, COMDAT
; Line 110
	push	ebp
	mov	ebp, esp
; Line 111
	mov	eax, DWORD PTR __Val$[ebp]
; Line 112
	pop	ebp
	ret	0
??$addressof@$$CBU?$pair@II@std@@@std@@YAPBU?$pair@II@0@ABU10@@Z ENDP ; std::addressof<std::pair<unsigned int,unsigned int> const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBH@std@@YAPBHABH@Z		; std::addressof<int const >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@$$CBH@std@@YAPBHABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBH@std@@YAPBHABH@Z PROC			; std::addressof<int const >, COMDAT
; Line 110
	push	ebp
	mov	ebp, esp
; Line 111
	mov	eax, DWORD PTR __Val$[ebp]
; Line 112
	pop	ebp
	ret	0
??$addressof@$$CBH@std@@YAPBHABH@Z ENDP			; std::addressof<int const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBVVec3D@@@std@@YAPBVVec3D@@ABV1@@Z ; std::addressof<Vec3D const >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@$$CBVVec3D@@@std@@YAPBVVec3D@@ABV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBVVec3D@@@std@@YAPBVVec3D@@ABV1@@Z PROC	; std::addressof<Vec3D const >, COMDAT
; Line 110
	push	ebp
	mov	ebp, esp
; Line 111
	mov	eax, DWORD PTR __Val$[ebp]
; Line 112
	pop	ebp
	ret	0
??$addressof@$$CBVVec3D@@@std@@YAPBVVec3D@@ABV1@@Z ENDP	; std::addressof<Vec3D const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBM@std@@YAPBMABM@Z		; std::addressof<float const >
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@$$CBM@std@@YAPBMABM@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBM@std@@YAPBMABM@Z PROC			; std::addressof<float const >, COMDAT
; Line 110
	push	ebp
	mov	ebp, esp
; Line 111
	mov	eax, DWORD PTR __Val$[ebp]
; Line 112
	pop	ebp
	ret	0
??$addressof@$$CBM@std@@YAPBMABM@Z ENDP			; std::addressof<float const >
_TEXT	ENDS
PUBLIC	??$addressof@UParticle@@@std@@YAPAUParticle@@AAU1@@Z ; std::addressof<Particle>
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@UParticle@@@std@@YAPAUParticle@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UParticle@@@std@@YAPAUParticle@@AAU1@@Z PROC ; std::addressof<Particle>, COMDAT
; Line 110
	push	ebp
	mov	ebp, esp
; Line 111
	mov	eax, DWORD PTR __Val$[ebp]
; Line 112
	pop	ebp
	ret	0
??$addressof@UParticle@@@std@@YAPAUParticle@@AAU1@@Z ENDP ; std::addressof<Particle>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<Particle,std::allocator<Particle> >::_Node>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T90181 = -12						; size = 12
$T90186 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<Particle,std::allocator<Particle> >::_Node>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 30
	push	ebp
	mov	ebp, esp
; Line 33
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
; Line 35
	je	SHORT $LN5@Allocate
; Line 36
	cmp	ecx, 48806446				; 02e8ba2eH
	ja	SHORT $LN1@Allocate
	imul	ecx, 88					; 00000058H
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
; Line 39
	jne	SHORT $LN5@Allocate
$LN1@Allocate:
; Line 37
	lea	eax, DWORD PTR $T90186[ebp]
	push	eax
	lea	ecx, DWORD PTR $T90181[ebp]
	mov	DWORD PTR $T90186[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T90181[ebp]
	push	ecx
	mov	DWORD PTR $T90181[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@Allocate:
??$_Allocate@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<Particle,std::allocator<Particle> >::_Node>
_TEXT	ENDS
PUBLIC	??$addressof@URibbonSegment@@@std@@YAPAURibbonSegment@@AAU1@@Z ; std::addressof<RibbonSegment>
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@URibbonSegment@@@std@@YAPAURibbonSegment@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@URibbonSegment@@@std@@YAPAURibbonSegment@@AAU1@@Z PROC ; std::addressof<RibbonSegment>, COMDAT
; Line 110
	push	ebp
	mov	ebp, esp
; Line 111
	mov	eax, DWORD PTR __Val$[ebp]
; Line 112
	pop	ebp
	ret	0
??$addressof@URibbonSegment@@@std@@YAPAURibbonSegment@@AAU1@@Z ENDP ; std::addressof<RibbonSegment>
_TEXT	ENDS
PUBLIC	??$_Allocate@UTexCoordSet@@@std@@YAPAUTexCoordSet@@IPAU1@@Z ; std::_Allocate<TexCoordSet>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@UTexCoordSet@@@std@@YAPAUTexCoordSet@@IPAU1@@Z
_TEXT	SEGMENT
$T90193 = -12						; size = 12
$T90197 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UTexCoordSet@@@std@@YAPAUTexCoordSet@@IPAU1@@Z PROC ; std::_Allocate<TexCoordSet>, COMDAT
; Line 30
	push	ebp
	mov	ebp, esp
; Line 33
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
; Line 35
	je	SHORT $LN5@Allocate@2
; Line 36
	cmp	ecx, 134217727				; 07ffffffH
	ja	SHORT $LN1@Allocate@2
	shl	ecx, 5
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
; Line 39
	jne	SHORT $LN5@Allocate@2
$LN1@Allocate@2:
; Line 37
	lea	eax, DWORD PTR $T90197[ebp]
	push	eax
	lea	ecx, DWORD PTR $T90193[ebp]
	mov	DWORD PTR $T90197[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T90193[ebp]
	push	ecx
	mov	DWORD PTR $T90193[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@Allocate@2:
??$_Allocate@UTexCoordSet@@@std@@YAPAUTexCoordSet@@IPAU1@@Z ENDP ; std::_Allocate<TexCoordSet>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T90202 = -12						; size = 12
$T90206 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>, COMDAT
; Line 30
	push	ebp
	mov	ebp, esp
; Line 33
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
; Line 35
	je	SHORT $LN5@Allocate@3
; Line 36
	cmp	ecx, 82595524				; 04ec4ec4H
	ja	SHORT $LN1@Allocate@3
	imul	ecx, 52					; 00000034H
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
; Line 39
	jne	SHORT $LN5@Allocate@3
$LN1@Allocate@3:
; Line 37
	lea	eax, DWORD PTR $T90206[ebp]
	push	eax
	lea	ecx, DWORD PTR $T90202[ebp]
	mov	DWORD PTR $T90206[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T90202[ebp]
	push	ecx
	mov	DWORD PTR $T90202[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN10@Allocate@3:
$LN5@Allocate@3:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@Allocate@3:
??$_Allocate@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Allocate@U?$pair@II@std@@@std@@YAPAU?$pair@II@0@IPAU10@@Z ; std::_Allocate<std::pair<unsigned int,unsigned int> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@U?$pair@II@std@@@std@@YAPAU?$pair@II@0@IPAU10@@Z
_TEXT	SEGMENT
$T90211 = -12						; size = 12
$T90215 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$pair@II@std@@@std@@YAPAU?$pair@II@0@IPAU10@@Z PROC ; std::_Allocate<std::pair<unsigned int,unsigned int> >, COMDAT
; Line 30
	push	ebp
	mov	ebp, esp
; Line 33
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
; Line 35
	je	SHORT $LN5@Allocate@4
; Line 36
	cmp	ecx, 536870911				; 1fffffffH
	ja	SHORT $LN1@Allocate@4
	lea	eax, DWORD PTR [ecx*8]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
; Line 39
	jne	SHORT $LN5@Allocate@4
$LN1@Allocate@4:
; Line 37
	lea	ecx, DWORD PTR $T90215[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T90211[ebp]
	mov	DWORD PTR $T90215[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T90211[ebp]
	push	edx
	mov	DWORD PTR $T90211[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN10@Allocate@4:
$LN5@Allocate@4:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@Allocate@4:
??$_Allocate@U?$pair@II@std@@@std@@YAPAU?$pair@II@0@IPAU10@@Z ENDP ; std::_Allocate<std::pair<unsigned int,unsigned int> >
_TEXT	ENDS
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
$T90220 = -12						; size = 12
$T90224 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT
; Line 30
	push	ebp
	mov	ebp, esp
; Line 33
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
; Line 35
	je	SHORT $LN5@Allocate@5
; Line 36
	cmp	ecx, 1073741823				; 3fffffffH
	ja	SHORT $LN1@Allocate@5
	lea	eax, DWORD PTR [ecx*4]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
; Line 39
	jne	SHORT $LN5@Allocate@5
$LN1@Allocate@5:
; Line 37
	lea	ecx, DWORD PTR $T90224[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T90220[ebp]
	mov	DWORD PTR $T90224[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T90220[ebp]
	push	edx
	mov	DWORD PTR $T90220[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN10@Allocate@5:
$LN5@Allocate@5:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@Allocate@5:
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
_TEXT	ENDS
PUBLIC	??$_Allocate@VVec3D@@@std@@YAPAVVec3D@@IPAV1@@Z	; std::_Allocate<Vec3D>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@VVec3D@@@std@@YAPAVVec3D@@IPAV1@@Z
_TEXT	SEGMENT
$T90229 = -12						; size = 12
$T90233 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VVec3D@@@std@@YAPAVVec3D@@IPAV1@@Z PROC	; std::_Allocate<Vec3D>, COMDAT
; Line 30
	push	ebp
	mov	ebp, esp
; Line 33
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
; Line 35
	je	SHORT $LN5@Allocate@6
; Line 36
	cmp	ecx, 357913941				; 15555555H
	ja	SHORT $LN1@Allocate@6
	lea	eax, DWORD PTR [ecx+ecx*2]
	add	eax, eax
	add	eax, eax
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
; Line 39
	jne	SHORT $LN5@Allocate@6
$LN1@Allocate@6:
; Line 37
	lea	ecx, DWORD PTR $T90233[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T90229[ebp]
	mov	DWORD PTR $T90233[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T90229[ebp]
	push	edx
	mov	DWORD PTR $T90229[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN10@Allocate@6:
$LN5@Allocate@6:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@Allocate@6:
??$_Allocate@VVec3D@@@std@@YAPAVVec3D@@IPAV1@@Z ENDP	; std::_Allocate<Vec3D>
_TEXT	ENDS
PUBLIC	??$_Allocate@M@std@@YAPAMIPAM@Z			; std::_Allocate<float>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@M@std@@YAPAMIPAM@Z
_TEXT	SEGMENT
$T90238 = -12						; size = 12
$T90242 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@M@std@@YAPAMIPAM@Z PROC			; std::_Allocate<float>, COMDAT
; Line 30
	push	ebp
	mov	ebp, esp
; Line 33
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
; Line 35
	je	SHORT $LN5@Allocate@7
; Line 36
	cmp	ecx, 1073741823				; 3fffffffH
	ja	SHORT $LN1@Allocate@7
	lea	eax, DWORD PTR [ecx*4]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
; Line 39
	jne	SHORT $LN5@Allocate@7
$LN1@Allocate@7:
; Line 37
	lea	ecx, DWORD PTR $T90242[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T90238[ebp]
	mov	DWORD PTR $T90242[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T90238[ebp]
	push	edx
	mov	DWORD PTR $T90238[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN10@Allocate@7:
$LN5@Allocate@7:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@Allocate@7:
??$_Allocate@M@std@@YAPAMIPAM@Z ENDP			; std::_Allocate<float>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogtp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$interpolate@VVec4D@@@@YA?AVVec4D@@MABV0@0@Z	; interpolate<Vec4D>
; Function compile flags: /Ogtp
;	COMDAT ??$interpolate@VVec4D@@@@YA?AVVec4D@@MABV0@0@Z
_TEXT	SEGMENT
$T90251 = -32						; size = 16
$T90250 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_r$ = 12						; size = 4
_v1$ = 16						; size = 4
$T90278 = 20						; size = 4
_v2$ = 20						; size = 4
??$interpolate@VVec4D@@@@YA?AVVec4D@@MABV0@0@Z PROC	; interpolate<Vec4D>, COMDAT
; File c:\programovani\wow editor\test\src\editor\animated.h
; Line 17
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 18
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax]
	fld	DWORD PTR _r$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T90251[ebp]
	fld	DWORD PTR [eax+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T90251[ebp+4]
	fld	DWORD PTR [eax+8]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T90251[ebp+8]
	fld	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _v1$[ebp]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T90251[ebp+12]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR $T90278[ebp]
	fld	DWORD PTR [eax]
	fld	DWORD PTR $T90278[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T90250[ebp]
	fld	DWORD PTR [eax+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T90250[ebp+4]
	fld	DWORD PTR [eax+8]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T90250[ebp+8]
	fmul	DWORD PTR [eax+12]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fstp	DWORD PTR $T90250[ebp+12]
	fld	DWORD PTR $T90250[ebp]
	fadd	DWORD PTR $T90251[ebp]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR $T90250[ebp+4]
	fadd	DWORD PTR $T90251[ebp+4]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR $T90250[ebp+8]
	fadd	DWORD PTR $T90251[ebp+8]
	fstp	DWORD PTR [eax+8]
	fld	DWORD PTR $T90250[ebp+12]
	fadd	DWORD PTR $T90251[ebp+12]
	fstp	DWORD PTR [eax+12]
; Line 19
	mov	esp, ebp
	pop	ebp
	ret	0
??$interpolate@VVec4D@@@@YA?AVVec4D@@MABV0@0@Z ENDP	; interpolate<Vec4D>
_TEXT	ENDS
PUBLIC	??$forward@AAUTexCoordSet@@@std@@YAAAUTexCoordSet@@AAU1@@Z ; std::forward<TexCoordSet &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAUTexCoordSet@@@std@@YAAAUTexCoordSet@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUTexCoordSet@@@std@@YAAAUTexCoordSet@@AAU1@@Z PROC ; std::forward<TexCoordSet &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@AAUTexCoordSet@@@std@@YAAAUTexCoordSet@@AAU1@@Z ENDP ; std::forward<TexCoordSet &>
_TEXT	ENDS
PUBLIC	??$forward@ABUTexCoordSet@@@std@@YAABUTexCoordSet@@ABU1@@Z ; std::forward<TexCoordSet const &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@ABUTexCoordSet@@@std@@YAABUTexCoordSet@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUTexCoordSet@@@std@@YAABUTexCoordSet@@ABU1@@Z PROC ; std::forward<TexCoordSet const &>, COMDAT
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@ABUTexCoordSet@@@std@@YAABUTexCoordSet@@ABU1@@Z ENDP ; std::forward<TexCoordSet const &>
_TEXT	ENDS
PUBLIC	??$forward@AAU?$pair@II@std@@@std@@YAAAU?$pair@II@0@AAU10@@Z ; std::forward<std::pair<unsigned int,unsigned int> &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAU?$pair@II@std@@@std@@YAAAU?$pair@II@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$pair@II@std@@@std@@YAAAU?$pair@II@0@AAU10@@Z PROC ; std::forward<std::pair<unsigned int,unsigned int> &>, COMDAT
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@AAU?$pair@II@std@@@std@@YAAAU?$pair@II@0@AAU10@@Z ENDP ; std::forward<std::pair<unsigned int,unsigned int> &>
_TEXT	ENDS
PUBLIC	??$forward@ABU?$pair@II@std@@@std@@YAABU?$pair@II@0@ABU10@@Z ; std::forward<std::pair<unsigned int,unsigned int> const &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@ABU?$pair@II@std@@@std@@YAABU?$pair@II@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU?$pair@II@std@@@std@@YAABU?$pair@II@0@ABU10@@Z PROC ; std::forward<std::pair<unsigned int,unsigned int> const &>, COMDAT
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@ABU?$pair@II@std@@@std@@YAABU?$pair@II@0@ABU10@@Z ENDP ; std::forward<std::pair<unsigned int,unsigned int> const &>
_TEXT	ENDS
PUBLIC	??$forward@AAH@std@@YAAAHAAH@Z			; std::forward<int &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAH@std@@YAAAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAH@std@@YAAAHAAH@Z PROC			; std::forward<int &>, COMDAT
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@AAH@std@@YAAAHAAH@Z ENDP			; std::forward<int &>
_TEXT	ENDS
PUBLIC	??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z ; std::allocator<int>::construct<int &>
; Function compile flags: /Ogtp
;	COMDAT ??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z PROC	; std::allocator<int>::construct<int &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 206
	push	ebp
	mov	ebp, esp
; Line 208
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@construct:
; Line 209
	pop	ebp
	ret	8
??$construct@AAH@?$allocator@H@std@@QAEXPAHAAH@Z ENDP	; std::allocator<int>::construct<int &>
_TEXT	ENDS
PUBLIC	??$forward@ABH@std@@YAABHABH@Z			; std::forward<int const &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@ABH@std@@YAABHABH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABH@std@@YAABHABH@Z PROC			; std::forward<int const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@ABH@std@@YAABHABH@Z ENDP			; std::forward<int const &>
_TEXT	ENDS
PUBLIC	??$forward@AAVVec3D@@@std@@YAAAVVec3D@@AAV1@@Z	; std::forward<Vec3D &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAVVec3D@@@std@@YAAAVVec3D@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAVVec3D@@@std@@YAAAVVec3D@@AAV1@@Z PROC	; std::forward<Vec3D &>, COMDAT
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@AAVVec3D@@@std@@YAAAVVec3D@@AAV1@@Z ENDP	; std::forward<Vec3D &>
_TEXT	ENDS
PUBLIC	??$construct@AAVVec3D@@@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@AAV2@@Z ; std::allocator<Vec3D>::construct<Vec3D &>
; Function compile flags: /Ogtp
;	COMDAT ??$construct@AAVVec3D@@@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@AAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAVVec3D@@@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@AAV2@@Z PROC ; std::allocator<Vec3D>::construct<Vec3D &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 206
	push	ebp
	mov	ebp, esp
; Line 208
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN3@construct@2
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
$LN3@construct@2:
; Line 209
	pop	ebp
	ret	8
??$construct@AAVVec3D@@@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@AAV2@@Z ENDP ; std::allocator<Vec3D>::construct<Vec3D &>
_TEXT	ENDS
PUBLIC	??$forward@ABVVec3D@@@std@@YAABVVec3D@@ABV1@@Z	; std::forward<Vec3D const &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@ABVVec3D@@@std@@YAABVVec3D@@ABV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVVec3D@@@std@@YAABVVec3D@@ABV1@@Z PROC	; std::forward<Vec3D const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@ABVVec3D@@@std@@YAABVVec3D@@ABV1@@Z ENDP	; std::forward<Vec3D const &>
_TEXT	ENDS
PUBLIC	??$forward@AAM@std@@YAAAMAAM@Z			; std::forward<float &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAM@std@@YAAAMAAM@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAM@std@@YAAAMAAM@Z PROC			; std::forward<float &>, COMDAT
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@AAM@std@@YAAAMAAM@Z ENDP			; std::forward<float &>
_TEXT	ENDS
PUBLIC	??$construct@AAM@?$allocator@M@std@@QAEXPAMAAM@Z ; std::allocator<float>::construct<float &>
; Function compile flags: /Ogtp
;	COMDAT ??$construct@AAM@?$allocator@M@std@@QAEXPAMAAM@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAM@?$allocator@M@std@@QAEXPAMAAM@Z PROC	; std::allocator<float>::construct<float &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 206
	push	ebp
	mov	ebp, esp
; Line 208
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN3@construct@3
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@construct@3:
; Line 209
	pop	ebp
	ret	8
??$construct@AAM@?$allocator@M@std@@QAEXPAMAAM@Z ENDP	; std::allocator<float>::construct<float &>
_TEXT	ENDS
PUBLIC	??$forward@ABM@std@@YAABMABM@Z			; std::forward<float const &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@ABM@std@@YAABMABM@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABM@std@@YAABMABM@Z PROC			; std::forward<float const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@ABM@std@@YAABMABM@Z ENDP			; std::forward<float const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@U?$pair@II@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@II@0@0@Z ; std::_Ptr_cat<std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Ptr_cat@U?$pair@II@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@II@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@U?$pair@II@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@II@0@0@Z PROC ; std::_Ptr_cat<std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 528
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 530
	mov	al, BYTE PTR __Cat$[ebp]
; Line 531
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@U?$pair@II@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@II@0@0@Z ENDP ; std::_Ptr_cat<std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int> >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
; Function compile flags: /Ogtp
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT
; Line 528
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 530
	mov	al, BYTE PTR __Cat$[ebp]
; Line 531
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 105
	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@VVec3D@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVVec3D@@0@Z ; std::_Ptr_cat<Vec3D,Vec3D>
; Function compile flags: /Ogtp
;	COMDAT ??$_Ptr_cat@VVec3D@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVVec3D@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VVec3D@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVVec3D@@0@Z PROC ; std::_Ptr_cat<Vec3D,Vec3D>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 528
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 530
	mov	al, BYTE PTR __Cat$[ebp]
; Line 531
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@VVec3D@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVVec3D@@0@Z ENDP ; std::_Ptr_cat<Vec3D,Vec3D>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@MM@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAM0@Z ; std::_Ptr_cat<float,float>
; Function compile flags: /Ogtp
;	COMDAT ??$_Ptr_cat@MM@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAM0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@MM@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAM0@Z PROC ; std::_Ptr_cat<float,float>, COMDAT
; Line 528
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 530
	mov	al, BYTE PTR __Cat$[ebp]
; Line 531
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@MM@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAM0@Z ENDP ; std::_Ptr_cat<float,float>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<float> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<float> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 105
	ret	0
??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<float> >
_TEXT	ENDS
PUBLIC	??$forward@ABUParticle@@@std@@YAABUParticle@@ABU1@@Z ; std::forward<Particle const &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@ABUParticle@@@std@@YAABUParticle@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUParticle@@@std@@YAABUParticle@@ABU1@@Z PROC ; std::forward<Particle const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@ABUParticle@@@std@@YAABUParticle@@ABU1@@Z ENDP ; std::forward<Particle const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UTexCoordSet@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTexCoordSet@@0@Z ; std::_Ptr_cat<TexCoordSet,TexCoordSet>
; Function compile flags: /Ogtp
;	COMDAT ??$_Ptr_cat@UTexCoordSet@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTexCoordSet@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UTexCoordSet@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTexCoordSet@@0@Z PROC ; std::_Ptr_cat<TexCoordSet,TexCoordSet>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 528
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 530
	mov	al, BYTE PTR __Cat$[ebp]
; Line 531
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@UTexCoordSet@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUTexCoordSet@@0@Z ENDP ; std::_Ptr_cat<TexCoordSet,TexCoordSet>
_TEXT	ENDS
PUBLIC	??$forward@ABURibbonSegment@@@std@@YAABURibbonSegment@@ABU1@@Z ; std::forward<RibbonSegment const &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@ABURibbonSegment@@@std@@YAABURibbonSegment@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABURibbonSegment@@@std@@YAABURibbonSegment@@ABU1@@Z PROC ; std::forward<RibbonSegment const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@ABURibbonSegment@@@std@@YAABURibbonSegment@@ABU1@@Z ENDP ; std::forward<RibbonSegment const &>
_TEXT	ENDS
PUBLIC	??$_Construct@HABH@std@@YAXPAHABH@Z		; std::_Construct<int,int const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@HABH@std@@YAXPAHABH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@HABH@std@@YAXPAHABH@Z PROC		; std::_Construct<int,int const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 46
	push	ebp
	mov	ebp, esp
; Line 48
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN3@Construct
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@Construct:
; Line 49
	pop	ebp
	ret	0
??$_Construct@HABH@std@@YAXPAHABH@Z ENDP		; std::_Construct<int,int const &>
_TEXT	ENDS
PUBLIC	??$_Construct@VVec3D@@ABV1@@std@@YAXPAVVec3D@@ABV1@@Z ; std::_Construct<Vec3D,Vec3D const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@VVec3D@@ABV1@@std@@YAXPAVVec3D@@ABV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@VVec3D@@ABV1@@std@@YAXPAVVec3D@@ABV1@@Z PROC ; std::_Construct<Vec3D,Vec3D const &>, COMDAT
; Line 46
	push	ebp
	mov	ebp, esp
; Line 48
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN3@Construct@2
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
$LN3@Construct@2:
; Line 49
	pop	ebp
	ret	0
??$_Construct@VVec3D@@ABV1@@std@@YAXPAVVec3D@@ABV1@@Z ENDP ; std::_Construct<Vec3D,Vec3D const &>
_TEXT	ENDS
PUBLIC	??$_Construct@MABM@std@@YAXPAMABM@Z		; std::_Construct<float,float const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@MABM@std@@YAXPAMABM@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@MABM@std@@YAXPAMABM@Z PROC		; std::_Construct<float,float const &>, COMDAT
; Line 46
	push	ebp
	mov	ebp, esp
; Line 48
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN3@Construct@3
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@Construct@3:
; Line 49
	pop	ebp
	ret	0
??$_Construct@MABM@std@@YAXPAMABM@Z ENDP		; std::_Construct<float,float const &>
_TEXT	ENDS
PUBLIC	??$_Construct@UParticle@@ABU1@@std@@YAXPAUParticle@@ABU1@@Z ; std::_Construct<Particle,Particle const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@UParticle@@ABU1@@std@@YAXPAUParticle@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UParticle@@ABU1@@std@@YAXPAUParticle@@ABU1@@Z PROC ; std::_Construct<Particle,Particle const &>, COMDAT
; Line 46
	push	ebp
	mov	ebp, esp
; Line 48
	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@Construct@4
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??0Particle@@QAE@ABU0@@Z
$LN3@Construct@4:
; Line 49
	pop	ebp
	ret	0
??$_Construct@UParticle@@ABU1@@std@@YAXPAUParticle@@ABU1@@Z ENDP ; std::_Construct<Particle,Particle const &>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<Particle,std::allocator<Particle> >::_Node>
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<Particle,std::allocator<Particle> >::_Node>, COMDAT
; Line 64
	ret	0
??$_Destroy@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<Particle,std::allocator<Particle> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>, COMDAT
; Line 64
	ret	0
??$_Destroy@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>
_TEXT	ENDS
PUBLIC	??0RibbonSegment@@QAE@ABU0@@Z			; RibbonSegment::RibbonSegment
; Function compile flags: /Ogtp
;	COMDAT ??0RibbonSegment@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0RibbonSegment@@QAE@ABU0@@Z PROC			; RibbonSegment::RibbonSegment, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], ecx
	pop	ebp
	ret	4
??0RibbonSegment@@QAE@ABU0@@Z ENDP			; RibbonSegment::RibbonSegment
_TEXT	ENDS
PUBLIC	??__G@YGXPAX0IHP6EPAX00@Z@Z			; `vector copy constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??__G@YGXPAX0IHP6EPAX00@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___u$ = 12						; size = 4
___s$ = 16						; size = 4
___n$ = 20						; size = 4
___f$ = 24						; size = 4
??__G@YGXPAX0IHP6EPAX00@Z@Z PROC			; `vector copy constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ebx, DWORD PTR ___n$[ebp]
	dec	ebx
	js	SHORT $LN1@vector@2
	push	esi
	mov	esi, DWORD PTR ___u$[ebp]
	push	edi
	mov	edi, DWORD PTR ___t$[ebp]
	sub	edi, esi
$LL2@vector@2:
	push	esi
	lea	ecx, DWORD PTR [edi+esi]
	call	DWORD PTR ___f$[ebp]
	add	esi, DWORD PTR ___s$[ebp]
	dec	ebx
	jns	SHORT $LL2@vector@2
	pop	edi
	pop	esi
$LN1@vector@2:
	pop	ebx
	pop	ebp
	ret	20					; 00000014H
??__G@YGXPAX0IHP6EPAX00@Z@Z ENDP			; `vector copy constructor iterator'
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@II@std@@QAE@ABU01@@Z		; std::_Pair_base<unsigned int,unsigned int>::_Pair_base<unsigned int,unsigned int>
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Pair_base@II@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Pair_base@II@std@@QAE@ABU01@@Z PROC		; std::_Pair_base<unsigned int,unsigned int>::_Pair_base<unsigned int,unsigned int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 131
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
; Line 132
	pop	ebp
	ret	4
??0?$_Pair_base@II@std@@QAE@ABU01@@Z ENDP		; std::_Pair_base<unsigned int,unsigned int>::_Pair_base<unsigned int,unsigned int>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUTexCoordSet@@@std@@YAPAUTexCoordSet@@PAU1@@Z ; std::_Val_type<TexCoordSet *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Val_type@PAUTexCoordSet@@@std@@YAPAUTexCoordSet@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUTexCoordSet@@@std@@YAPAUTexCoordSet@@PAU1@@Z PROC ; std::_Val_type<TexCoordSet *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 802
	xor	eax, eax
; Line 803
	ret	0
??$_Val_type@PAUTexCoordSet@@@std@@YAPAUTexCoordSet@@PAU1@@Z ENDP ; std::_Val_type<TexCoordSet *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAU?$pair@II@std@@@std@@YAPAU?$pair@II@0@PAU10@@Z ; std::_Val_type<std::pair<unsigned int,unsigned int> *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Val_type@PAU?$pair@II@std@@@std@@YAPAU?$pair@II@0@PAU10@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAU?$pair@II@std@@@std@@YAPAU?$pair@II@0@PAU10@@Z PROC ; std::_Val_type<std::pair<unsigned int,unsigned int> *>, COMDAT
; Line 802
	xor	eax, eax
; Line 803
	ret	0
??$_Val_type@PAU?$pair@II@std@@@std@@YAPAU?$pair@II@0@PAU10@@Z ENDP ; std::_Val_type<std::pair<unsigned int,unsigned int> *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAH@std@@YAPAHPAH@Z		; std::_Val_type<int *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Val_type@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAH@std@@YAPAHPAH@Z PROC			; std::_Val_type<int *>, COMDAT
; Line 802
	xor	eax, eax
; Line 803
	ret	0
??$_Val_type@PAH@std@@YAPAHPAH@Z ENDP			; std::_Val_type<int *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<int,int,int>
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<int,int,int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
; Line 456
	push	ebp
	mov	ebp, esp
; Line 459
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, ecx
	push	esi
	sar	eax, 2
; Line 461
	lea	esi, DWORD PTR [eax*4]
	mov	eax, DWORD PTR __Dest$[ebp]
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 462
	pop	ebp
	ret	0
??$_Uninit_move@HHH@std@@YAPAHPAH00AAV?$allocator@H@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<int,int,int>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAVVec3D@@@std@@YAPAVVec3D@@PAV1@@Z ; std::_Val_type<Vec3D *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Val_type@PAVVec3D@@@std@@YAPAVVec3D@@PAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAVVec3D@@@std@@YAPAVVec3D@@PAV1@@Z PROC	; std::_Val_type<Vec3D *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 802
	xor	eax, eax
; Line 803
	ret	0
??$_Val_type@PAVVec3D@@@std@@YAPAVVec3D@@PAV1@@Z ENDP	; std::_Val_type<Vec3D *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAM@std@@YAPAMPAM@Z		; std::_Val_type<float *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Val_type@PAM@std@@YAPAMPAM@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAM@std@@YAPAMPAM@Z PROC			; std::_Val_type<float *>, COMDAT
; Line 802
	xor	eax, eax
; Line 803
	ret	0
??$_Val_type@PAM@std@@YAPAMPAM@Z ENDP			; std::_Val_type<float *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@MMM@std@@YAPAMPAM00AAV?$allocator@M@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<float,float,float>
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninit_move@MMM@std@@YAPAMPAM00AAV?$allocator@M@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@MMM@std@@YAPAMPAM00AAV?$allocator@M@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<float,float,float>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
; Line 456
	push	ebp
	mov	ebp, esp
; Line 459
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, ecx
	push	esi
	sar	eax, 2
; Line 461
	lea	esi, DWORD PTR [eax*4]
	mov	eax, DWORD PTR __Dest$[ebp]
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 462
	pop	ebp
	ret	0
??$_Uninit_move@MMM@std@@YAPAMPAM00AAV?$allocator@M@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<float,float,float>
_TEXT	ENDS
PUBLIC	??$_Destroy@U?$pair@II@std@@@std@@YAXPAU?$pair@II@0@@Z ; std::_Destroy<std::pair<unsigned int,unsigned int> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@U?$pair@II@std@@@std@@YAXPAU?$pair@II@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U?$pair@II@std@@@std@@YAXPAU?$pair@II@0@@Z PROC ; std::_Destroy<std::pair<unsigned int,unsigned int> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 64
	ret	0
??$_Destroy@U?$pair@II@std@@@std@@YAXPAU?$pair@II@0@@Z ENDP ; std::_Destroy<std::pair<unsigned int,unsigned int> >
_TEXT	ENDS
PUBLIC	??$_Destroy@VVec3D@@@std@@YAXPAVVec3D@@@Z	; std::_Destroy<Vec3D>
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@VVec3D@@@std@@YAXPAVVec3D@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@VVec3D@@@std@@YAXPAVVec3D@@@Z PROC		; std::_Destroy<Vec3D>, COMDAT
; Line 64
	ret	0
??$_Destroy@VVec3D@@@std@@YAXPAVVec3D@@@Z ENDP		; std::_Destroy<Vec3D>
_TEXT	ENDS
PUBLIC	??$_Destroy@UTexCoordSet@@@std@@YAXPAUTexCoordSet@@@Z ; std::_Destroy<TexCoordSet>
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@UTexCoordSet@@@std@@YAXPAUTexCoordSet@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UTexCoordSet@@@std@@YAXPAUTexCoordSet@@@Z PROC ; std::_Destroy<TexCoordSet>, COMDAT
; Line 64
	ret	0
??$_Destroy@UTexCoordSet@@@std@@YAXPAUTexCoordSet@@@Z ENDP ; std::_Destroy<TexCoordSet>
_TEXT	ENDS
PUBLIC	??$forward@AAI@std@@YAAAIAAI@Z			; std::forward<unsigned int &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAI@std@@YAAAIAAI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAI@std@@YAAAIAAI@Z PROC			; std::forward<unsigned int &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@AAI@std@@YAAAIAAI@Z ENDP			; std::forward<unsigned int &>
_TEXT	ENDS
PUBLIC	??$forward@UTexCoordSet@@@std@@YA$$QAUTexCoordSet@@AAU1@@Z ; std::forward<TexCoordSet>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@UTexCoordSet@@@std@@YA$$QAUTexCoordSet@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UTexCoordSet@@@std@@YA$$QAUTexCoordSet@@AAU1@@Z PROC ; std::forward<TexCoordSet>, COMDAT
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@UTexCoordSet@@@std@@YA$$QAUTexCoordSet@@AAU1@@Z ENDP ; std::forward<TexCoordSet>
_TEXT	ENDS
PUBLIC	??$forward@U?$pair@II@std@@@std@@YA$$QAU?$pair@II@0@AAU10@@Z ; std::forward<std::pair<unsigned int,unsigned int> >
; Function compile flags: /Ogtp
;	COMDAT ??$forward@U?$pair@II@std@@@std@@YA$$QAU?$pair@II@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@II@std@@@std@@YA$$QAU?$pair@II@0@AAU10@@Z PROC ; std::forward<std::pair<unsigned int,unsigned int> >, COMDAT
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@U?$pair@II@std@@@std@@YA$$QAU?$pair@II@0@AAU10@@Z ENDP ; std::forward<std::pair<unsigned int,unsigned int> >
_TEXT	ENDS
PUBLIC	??$forward@VVec3D@@@std@@YA$$QAVVec3D@@AAV1@@Z	; std::forward<Vec3D>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@VVec3D@@@std@@YA$$QAVVec3D@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@VVec3D@@@std@@YA$$QAVVec3D@@AAV1@@Z PROC	; std::forward<Vec3D>, COMDAT
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@VVec3D@@@std@@YA$$QAVVec3D@@AAV1@@Z ENDP	; std::forward<Vec3D>
_TEXT	ENDS
PUBLIC	??$forward@I@std@@YA$$QAIAAI@Z			; std::forward<unsigned int>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@I@std@@YA$$QAIAAI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@I@std@@YA$$QAIAAI@Z PROC			; std::forward<unsigned int>, COMDAT
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@I@std@@YA$$QAIAAI@Z ENDP			; std::forward<unsigned int>
_TEXT	ENDS
PUBLIC	??$move@AAI@std@@YA$$QAIAAI@Z			; std::move<unsigned int &>
; Function compile flags: /Ogtp
;	COMDAT ??$move@AAI@std@@YA$$QAIAAI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAI@std@@YA$$QAIAAI@Z PROC			; std::move<unsigned int &>, COMDAT
; Line 86
	push	ebp
	mov	ebp, esp
; Line 87
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 88
	pop	ebp
	ret	0
??$move@AAI@std@@YA$$QAIAAI@Z ENDP			; std::move<unsigned int &>
_TEXT	ENDS
PUBLIC	??0TexCoordSet@@QAE@XZ				; TexCoordSet::TexCoordSet
; Function compile flags: /Ogtp
;	COMDAT ??0TexCoordSet@@QAE@XZ
_TEXT	SEGMENT
??0TexCoordSet@@QAE@XZ PROC				; TexCoordSet::TexCoordSet, COMDAT
; _this$ = ecx
	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], ecx
	ret	0
??0TexCoordSet@@QAE@XZ ENDP				; TexCoordSet::TexCoordSet
_TEXT	ENDS
PUBLIC	??E?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator++, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 369
	mov	eax, ecx
; Line 370
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 372
	ret	0
??E?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator++
_TEXT	ENDS
PUBLIC	??E?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator++, COMDAT
; _this$ = ecx
; Line 375
	push	ebp
	mov	ebp, esp
; Line 376
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
; Line 377
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], edx
; Line 379
	pop	ebp
	ret	8
??E?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator!=, COMDAT
; _this$ = ecx
; Line 299
	push	ebp
	mov	ebp, esp
; Line 300
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setne	al
; Line 301
	pop	ebp
	ret	4
??9?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator!=
_TEXT	ENDS
PUBLIC	??E?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator++, COMDAT
; _this$ = ecx
; Line 369
	mov	eax, ecx
; Line 370
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 372
	ret	0
??E?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator++
_TEXT	ENDS
PUBLIC	??E?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator++, COMDAT
; _this$ = ecx
; Line 375
	push	ebp
	mov	ebp, esp
; Line 376
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
; Line 377
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], edx
; Line 379
	pop	ebp
	ret	8
??E?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator++
_TEXT	ENDS
PUBLIC	??F?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator--
; Function compile flags: /Ogtp
;	COMDAT ??F?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator--, COMDAT
; _this$ = ecx
; Line 382
	mov	eax, ecx
; Line 383
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
; Line 385
	ret	0
??F?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator--
_TEXT	ENDS
PUBLIC	??9?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator!=, COMDAT
; _this$ = ecx
; Line 299
	push	ebp
	mov	ebp, esp
; Line 300
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setne	al
; Line 301
	pop	ebp
	ret	4
??9?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator!=
_TEXT	ENDS
PUBLIC	??D?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBEABUParticle@@XZ ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBEABUParticle@@XZ
_TEXT	SEGMENT
??D?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBEABUParticle@@XZ PROC ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator*, COMDAT
; _this$ = ecx
; Line 217
	mov	eax, DWORD PTR [ecx]
	add	eax, 8
; Line 218
	ret	0
??D?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBEABUParticle@@XZ ENDP ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator*
_TEXT	ENDS
PUBLIC	??D?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBEABURibbonSegment@@XZ ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBEABURibbonSegment@@XZ
_TEXT	SEGMENT
??D?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBEABURibbonSegment@@XZ PROC ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator*, COMDAT
; _this$ = ecx
; Line 217
	mov	eax, DWORD PTR [ecx]
	add	eax, 8
; Line 218
	ret	0
??D?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBEABURibbonSegment@@XZ ENDP ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator*
_TEXT	ENDS
PUBLIC	??0?$pair@II@std@@QAE@XZ			; std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int>
; Function compile flags: /Ogtp
;	COMDAT ??0?$pair@II@std@@QAE@XZ
_TEXT	SEGMENT
??0?$pair@II@std@@QAE@XZ PROC				; std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 183
	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 184
	ret	0
??0?$pair@II@std@@QAE@XZ ENDP				; std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int>
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@I@Z ; std::allocator<std::_List_nod<Particle,std::allocator<Particle> >::_Node>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@I@Z
_TEXT	SEGMENT
$T90639 = -12						; size = 12
$T90631 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<Particle,std::allocator<Particle> >::_Node>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 186
	push	ebp
	mov	ebp, esp
; Line 187
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $LN1@allocate
	cmp	ecx, 48806446				; 02e8ba2eH
	ja	SHORT $LN3@allocate
	imul	ecx, 88					; 00000058H
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@allocate
$LN3@allocate:
	lea	eax, DWORD PTR $T90631[ebp]
	push	eax
	lea	ecx, DWORD PTR $T90639[ebp]
	mov	DWORD PTR $T90631[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T90639[ebp]
	push	ecx
	mov	DWORD PTR $T90639[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN13@allocate:
$LN1@allocate:
; Line 188
	mov	esp, ebp
	pop	ebp
	ret	4
$LN12@allocate:
?allocate@?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<Particle,std::allocator<Particle> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QBEIXZ ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QBEIXZ PROC ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 884
	mov	eax, 134217727				; 07ffffffH
; Line 885
	ret	0
?max_size@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QBEIXZ ENDP ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IBEII@Z ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IBEII@Z PROC ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Grow_to, COMDAT
; _this$ = ecx
; Line 1274
	push	ebp
	mov	ebp, esp
; Line 1275
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
; Line 1278
	mov	edx, 134217727				; 07ffffffH
	sar	eax, 5
	mov	ecx, eax
	shr	ecx, 1
	sub	edx, ecx
	cmp	edx, eax
	jae	SHORT $LN4@Grow_to
	xor	eax, eax
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	add	eax, ecx
$LN5@Grow_to:
; Line 1279
	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	eax, ecx
	jae	SHORT $LN1@Grow_to
; Line 1281
	mov	eax, ecx
$LN1@Grow_to:
; Line 1282
	pop	ebp
	ret	4
?_Grow_to@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IBEII@Z ENDP ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@1@PBV?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@1@PBV?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@1@PBV?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 184
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 185
	pop	ebp
	ret	8
??0?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@1@PBV?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >::_List_const_iterator<std::_List_val<Particle,std::allocator<Particle> > >
_TEXT	ENDS
PUBLIC	??0?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@PBV?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@PBV?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@PBV?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >, COMDAT
; _this$ = ecx
; Line 184
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 185
	pop	ebp
	ret	8
??0?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@PBV?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::_List_const_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 884
	mov	eax, 536870911				; 1fffffffH
; Line 885
	ret	0
?max_size@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IBEII@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IBEII@Z PROC ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Grow_to, COMDAT
; _this$ = ecx
; Line 1274
	push	ebp
	mov	ebp, esp
; Line 1275
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
; Line 1278
	mov	edx, 536870911				; 1fffffffH
	sar	eax, 3
	mov	ecx, eax
	shr	ecx, 1
	sub	edx, ecx
	cmp	edx, eax
	jae	SHORT $LN4@Grow_to@2
	xor	eax, eax
	jmp	SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
	add	eax, ecx
$LN5@Grow_to@2:
; Line 1279
	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	eax, ecx
	jae	SHORT $LN1@Grow_to@2
; Line 1281
	mov	eax, ecx
$LN1@Grow_to@2:
; Line 1282
	pop	ebp
	ret	4
?_Grow_to@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IBEII@Z ENDP ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Grow_to
_TEXT	ENDS
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx
; Line 884
	mov	eax, 1073741823				; 3fffffffH
; Line 885
	ret	0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ; std::vector<int,std::allocator<int> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z PROC ; std::vector<int,std::allocator<int> >::_Grow_to, COMDAT
; _this$ = ecx
; Line 1274
	push	ebp
	mov	ebp, esp
; Line 1275
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
; Line 1278
	mov	edx, 1073741823				; 3fffffffH
	sar	eax, 2
	mov	ecx, eax
	shr	ecx, 1
	sub	edx, ecx
	cmp	edx, eax
	jae	SHORT $LN4@Grow_to@3
	xor	eax, eax
	jmp	SHORT $LN5@Grow_to@3
$LN4@Grow_to@3:
	add	eax, ecx
$LN5@Grow_to@3:
; Line 1279
	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	eax, ecx
	jae	SHORT $LN1@Grow_to@3
; Line 1281
	mov	eax, ecx
$LN1@Grow_to@3:
; Line 1282
	pop	ebp
	ret	4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ENDP ; std::vector<int,std::allocator<int> >::_Grow_to
_TEXT	ENDS
PUBLIC	?max_size@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QBEIXZ ; std::vector<Vec3D,std::allocator<Vec3D> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QBEIXZ PROC ; std::vector<Vec3D,std::allocator<Vec3D> >::max_size, COMDAT
; _this$ = ecx
; Line 884
	mov	eax, 357913941				; 15555555H
; Line 885
	ret	0
?max_size@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QBEIXZ ENDP ; std::vector<Vec3D,std::allocator<Vec3D> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IBEII@Z ; std::vector<Vec3D,std::allocator<Vec3D> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IBEII@Z PROC ; std::vector<Vec3D,std::allocator<Vec3D> >::_Grow_to, COMDAT
; _this$ = ecx
; Line 1274
	push	ebp
	mov	ebp, esp
; Line 1275
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; Line 1278
	mov	ecx, eax
	shr	ecx, 1
	mov	edx, 357913941				; 15555555H
	sub	edx, ecx
	cmp	edx, eax
	jae	SHORT $LN4@Grow_to@4
	xor	eax, eax
	jmp	SHORT $LN5@Grow_to@4
$LN4@Grow_to@4:
	add	eax, ecx
$LN5@Grow_to@4:
; Line 1279
	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	eax, ecx
	jae	SHORT $LN1@Grow_to@4
; Line 1281
	mov	eax, ecx
$LN1@Grow_to@4:
; Line 1282
	pop	ebp
	ret	4
?_Grow_to@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IBEII@Z ENDP ; std::vector<Vec3D,std::allocator<Vec3D> >::_Grow_to
_TEXT	ENDS
PUBLIC	?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ PROC ; std::vector<float,std::allocator<float> >::max_size, COMDAT
; _this$ = ecx
; Line 884
	mov	eax, 1073741823				; 3fffffffH
; Line 885
	ret	0
?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ENDP ; std::vector<float,std::allocator<float> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@MV?$allocator@M@std@@@std@@IBEII@Z ; std::vector<float,std::allocator<float> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@MV?$allocator@M@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@MV?$allocator@M@std@@@std@@IBEII@Z PROC ; std::vector<float,std::allocator<float> >::_Grow_to, COMDAT
; _this$ = ecx
; Line 1274
	push	ebp
	mov	ebp, esp
; Line 1275
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
; Line 1278
	mov	edx, 1073741823				; 3fffffffH
	sar	eax, 2
	mov	ecx, eax
	shr	ecx, 1
	sub	edx, ecx
	cmp	edx, eax
	jae	SHORT $LN4@Grow_to@5
	xor	eax, eax
	jmp	SHORT $LN5@Grow_to@5
$LN4@Grow_to@5:
	add	eax, ecx
$LN5@Grow_to@5:
; Line 1279
	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	eax, ecx
	jae	SHORT $LN1@Grow_to@5
; Line 1281
	mov	eax, ecx
$LN1@Grow_to@5:
; Line 1282
	pop	ebp
	ret	4
?_Grow_to@?$vector@MV?$allocator@M@std@@@std@@IBEII@Z ENDP ; std::vector<float,std::allocator<float> >::_Grow_to
_TEXT	ENDS
PUBLIC	?max_size@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QBEIXZ ; std::list<Particle,std::allocator<Particle> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QBEIXZ PROC ; std::list<Particle,std::allocator<Particle> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 882
	mov	eax, 53687091				; 03333333H
; Line 883
	ret	0
?max_size@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QBEIXZ ENDP ; std::list<Particle,std::allocator<Particle> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UTexCoordSet@@@std@@QAEPAUTexCoordSet@@I@Z ; std::allocator<TexCoordSet>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@UTexCoordSet@@@std@@QAEPAUTexCoordSet@@I@Z
_TEXT	SEGMENT
$T90866 = -12						; size = 12
$T90860 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UTexCoordSet@@@std@@QAEPAUTexCoordSet@@I@Z PROC ; std::allocator<TexCoordSet>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 186
	push	ebp
	mov	ebp, esp
; Line 187
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $LN1@allocate@2
	cmp	ecx, 134217727				; 07ffffffH
	ja	SHORT $LN3@allocate@2
	shl	ecx, 5
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@allocate@2
$LN3@allocate@2:
	lea	eax, DWORD PTR $T90860[ebp]
	push	eax
	lea	ecx, DWORD PTR $T90866[ebp]
	mov	DWORD PTR $T90860[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T90866[ebp]
	push	ecx
	mov	DWORD PTR $T90866[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN13@allocate@2:
$LN1@allocate@2:
; Line 188
	mov	esp, ebp
	pop	ebp
	ret	4
$LN12@allocate@2:
?allocate@?$allocator@UTexCoordSet@@@std@@QAEPAUTexCoordSet@@I@Z ENDP ; std::allocator<TexCoordSet>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QBEIXZ ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QBEIXZ PROC ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 882
	mov	eax, 97612893				; 05d1745dH
; Line 883
	ret	0
?max_size@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QBEIXZ ENDP ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@I@Z ; std::allocator<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@I@Z
_TEXT	SEGMENT
$T90902 = -12						; size = 12
$T90894 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 186
	push	ebp
	mov	ebp, esp
; Line 187
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $LN1@allocate@3
	cmp	ecx, 82595524				; 04ec4ec4H
	ja	SHORT $LN3@allocate@3
	imul	ecx, 52					; 00000034H
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@allocate@3
$LN3@allocate@3:
	lea	eax, DWORD PTR $T90894[ebp]
	push	eax
	lea	ecx, DWORD PTR $T90902[ebp]
	mov	DWORD PTR $T90894[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T90902[ebp]
	push	ecx
	mov	DWORD PTR $T90902[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN13@allocate@3:
$LN1@allocate@3:
; Line 188
	mov	esp, ebp
	pop	ebp
	ret	4
$LN12@allocate@3:
?allocate@?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U?$pair@II@std@@@std@@QAEPAU?$pair@II@2@I@Z ; std::allocator<std::pair<unsigned int,unsigned int> >::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@U?$pair@II@std@@@std@@QAEPAU?$pair@II@2@I@Z
_TEXT	SEGMENT
$T90919 = -12						; size = 12
$T90917 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$pair@II@std@@@std@@QAEPAU?$pair@II@2@I@Z PROC ; std::allocator<std::pair<unsigned int,unsigned int> >::allocate, COMDAT
; _this$ = ecx
; Line 186
	push	ebp
	mov	ebp, esp
; Line 187
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $LN1@allocate@4
	cmp	ecx, 536870911				; 1fffffffH
	ja	SHORT $LN3@allocate@4
	lea	eax, DWORD PTR [ecx*8]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@allocate@4
$LN3@allocate@4:
	lea	ecx, DWORD PTR $T90917[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T90919[ebp]
	mov	DWORD PTR $T90917[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T90919[ebp]
	push	edx
	mov	DWORD PTR $T90919[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN13@allocate@4:
$LN1@allocate@4:
; Line 188
	mov	esp, ebp
	pop	ebp
	ret	4
$LN12@allocate@4:
?allocate@?$allocator@U?$pair@II@std@@@std@@QAEPAU?$pair@II@2@I@Z ENDP ; std::allocator<std::pair<unsigned int,unsigned int> >::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
$T90942 = -12						; size = 12
$T90940 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx
; Line 186
	push	ebp
	mov	ebp, esp
; Line 187
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $LN1@allocate@5
	cmp	ecx, 1073741823				; 3fffffffH
	ja	SHORT $LN3@allocate@5
	lea	eax, DWORD PTR [ecx*4]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@allocate@5
$LN3@allocate@5:
	lea	ecx, DWORD PTR $T90940[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T90942[ebp]
	mov	DWORD PTR $T90940[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T90942[ebp]
	push	edx
	mov	DWORD PTR $T90942[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN13@allocate@5:
$LN1@allocate@5:
; Line 188
	mov	esp, ebp
	pop	ebp
	ret	4
$LN12@allocate@5:
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@VVec3D@@@std@@QAEPAVVec3D@@I@Z ; std::allocator<Vec3D>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@VVec3D@@@std@@QAEPAVVec3D@@I@Z
_TEXT	SEGMENT
$T90971 = -12						; size = 12
$T90963 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@VVec3D@@@std@@QAEPAVVec3D@@I@Z PROC ; std::allocator<Vec3D>::allocate, COMDAT
; _this$ = ecx
; Line 186
	push	ebp
	mov	ebp, esp
; Line 187
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $LN1@allocate@6
	cmp	ecx, 357913941				; 15555555H
	ja	SHORT $LN3@allocate@6
	lea	eax, DWORD PTR [ecx+ecx*2]
	add	eax, eax
	add	eax, eax
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@allocate@6
$LN3@allocate@6:
	lea	ecx, DWORD PTR $T90963[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T90971[ebp]
	mov	DWORD PTR $T90963[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T90971[ebp]
	push	edx
	mov	DWORD PTR $T90971[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN13@allocate@6:
$LN1@allocate@6:
; Line 188
	mov	esp, ebp
	pop	ebp
	ret	4
$LN12@allocate@6:
?allocate@?$allocator@VVec3D@@@std@@QAEPAVVec3D@@I@Z ENDP ; std::allocator<Vec3D>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@M@std@@QAEPAMI@Z		; std::allocator<float>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@M@std@@QAEPAMI@Z
_TEXT	SEGMENT
$T90994 = -12						; size = 12
$T90986 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@M@std@@QAEPAMI@Z PROC		; std::allocator<float>::allocate, COMDAT
; _this$ = ecx
; Line 186
	push	ebp
	mov	ebp, esp
; Line 187
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $LN1@allocate@7
	cmp	ecx, 1073741823				; 3fffffffH
	ja	SHORT $LN3@allocate@7
	lea	eax, DWORD PTR [ecx*4]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@allocate@7
$LN3@allocate@7:
	lea	ecx, DWORD PTR $T90986[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T90994[ebp]
	mov	DWORD PTR $T90986[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T90994[ebp]
	push	edx
	mov	DWORD PTR $T90994[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN13@allocate@7:
$LN1@allocate@7:
; Line 188
	mov	esp, ebp
	pop	ebp
	ret	4
$LN12@allocate@7:
?allocate@?$allocator@M@std@@QAEPAMI@Z ENDP		; std::allocator<float>::allocate
_TEXT	ENDS
PUBLIC	??$lifeRamp@M@@YAMMMABM00@Z			; lifeRamp<float>
; Function compile flags: /Ogtp
;	COMDAT ??$lifeRamp@M@@YAMMMABM00@Z
_TEXT	SEGMENT
tv175 = 8						; size = 4
tv167 = 8						; size = 4
$T91011 = 8						; size = 4
$T91007 = 8						; size = 4
_life$ = 8						; size = 4
_mid$ = 12						; size = 4
_a$ = 16						; size = 4
_b$ = 20						; size = 4
_c$ = 24						; size = 4
??$lifeRamp@M@@YAMMMABM00@Z PROC			; lifeRamp<float>, COMDAT
; File c:\programovani\wow editor\test\src\editor\particle.cpp
; Line 17
	push	ebp
	mov	ebp, esp
; Line 18
	fld	DWORD PTR _life$[ebp]
	fld	DWORD PTR _mid$[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN2@lifeRamp
	fdivp	ST(1), ST(0)
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	DWORD PTR $T91007[ebp]
	fld	DWORD PTR $T91007[ebp]
	fld	ST(0)
	fld1
	fsubrp	ST(1), ST(0)
	fmul	DWORD PTR [eax]
	fld	DWORD PTR [ecx]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv175[ebp]
	fld	DWORD PTR tv175[ebp]
; Line 20
	pop	ebp
	ret	0
$LN2@lifeRamp:
; Line 19
	fld	ST(0)
	mov	edx, DWORD PTR _b$[ebp]
	fsubp	ST(2), ST(0)
	mov	eax, DWORD PTR _c$[ebp]
	fld1
	fld	ST(0)
	fsubrp	ST(2), ST(0)
	fxch	ST(2)
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR $T91011[ebp]
	fld	DWORD PTR $T91011[ebp]
	fld	ST(0)
	fsubp	ST(2), ST(0)
	fld	DWORD PTR [edx]
	fmulp	ST(2), ST(0)
	fmul	DWORD PTR [eax]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv167[ebp]
	fld	DWORD PTR tv167[ebp]
; Line 20
	pop	ebp
	ret	0
??$lifeRamp@M@@YAMMMABM00@Z ENDP			; lifeRamp<float>
_TEXT	ENDS
PUBLIC	??$lifeRamp@VVec4D@@@@YA?AVVec4D@@MMABV0@00@Z	; lifeRamp<Vec4D>
; Function compile flags: /Ogtp
;	COMDAT ??$lifeRamp@VVec4D@@@@YA?AVVec4D@@MMABV0@00@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
tv163 = 12						; size = 4
tv91 = 12						; size = 4
_life$ = 12						; size = 4
_mid$ = 16						; size = 4
_a$ = 20						; size = 4
_b$ = 24						; size = 4
_c$ = 28						; size = 4
??$lifeRamp@VVec4D@@@@YA?AVVec4D@@MMABV0@00@Z PROC	; lifeRamp<Vec4D>, COMDAT
; Line 17
	push	ebp
	mov	ebp, esp
; Line 18
	fld	DWORD PTR _life$[ebp]
	push	esi
	fld	DWORD PTR _mid$[ebp]
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	mov	eax, DWORD PTR _b$[ebp]
	jne	SHORT $LN2@lifeRamp@2
	fdivp	ST(1), ST(0)
	mov	ecx, DWORD PTR _a$[ebp]
	push	eax
	push	ecx
; Line 19
	push	ecx
	fstp	DWORD PTR tv163[ebp]
	fld	DWORD PTR tv163[ebp]
	fstp	DWORD PTR [esp]
	push	esi
	call	??$interpolate@VVec4D@@@@YA?AVVec4D@@MABV0@0@Z ; interpolate<Vec4D>
	add	esp, 16					; 00000010H
	mov	eax, esi
	pop	esi
; Line 20
	pop	ebp
	ret	0
$LN2@lifeRamp@2:
; Line 19
	fld	ST(0)
	mov	edx, DWORD PTR _c$[ebp]
	fsubp	ST(2), ST(0)
	push	edx
	fld1
	push	eax
	fsubrp	ST(1), ST(0)
	push	ecx
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR tv91[ebp]
	fld	DWORD PTR tv91[ebp]
	fstp	DWORD PTR [esp]
	push	esi
	call	??$interpolate@VVec4D@@@@YA?AVVec4D@@MABV0@0@Z ; interpolate<Vec4D>
	add	esp, 16					; 00000010H
	mov	eax, esi
	pop	esi
; Line 20
	pop	ebp
	ret	0
??$lifeRamp@VVec4D@@@@YA?AVVec4D@@MMABV0@00@Z ENDP	; lifeRamp<Vec4D>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z ; std::_Cons_val<std::allocator<int>,int,int &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z PROC ; std::_Cons_val<std::allocator<int>,int,int &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Pdest$[ebp]
	test	eax, eax
	je	SHORT $LN7@Cons_val
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN7@Cons_val:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@H@std@@HAAH@std@@YAXAAV?$allocator@H@0@PAHAAH@Z ENDP ; std::_Cons_val<std::allocator<int>,int,int &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VVec3D@@@std@@VVec3D@@AAV3@@std@@YAXAAV?$allocator@VVec3D@@@0@PAVVec3D@@AAV2@@Z ; std::_Cons_val<std::allocator<Vec3D>,Vec3D,Vec3D &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@VVec3D@@@std@@VVec3D@@AAV3@@std@@YAXAAV?$allocator@VVec3D@@@0@PAVVec3D@@AAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VVec3D@@@std@@VVec3D@@AAV3@@std@@YAXAAV?$allocator@VVec3D@@@0@PAVVec3D@@AAV2@@Z PROC ; std::_Cons_val<std::allocator<Vec3D>,Vec3D,Vec3D &>, COMDAT
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Pdest$[ebp]
	test	eax, eax
	je	SHORT $LN7@Cons_val@2
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
$LN7@Cons_val@2:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@VVec3D@@@std@@VVec3D@@AAV3@@std@@YAXAAV?$allocator@VVec3D@@@0@PAVVec3D@@AAV2@@Z ENDP ; std::_Cons_val<std::allocator<Vec3D>,Vec3D,Vec3D &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@M@std@@MAAM@std@@YAXAAV?$allocator@M@0@PAMAAM@Z ; std::_Cons_val<std::allocator<float>,float,float &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@M@std@@MAAM@std@@YAXAAV?$allocator@M@0@PAMAAM@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@M@std@@MAAM@std@@YAXAAV?$allocator@M@0@PAMAAM@Z PROC ; std::_Cons_val<std::allocator<float>,float,float &>, COMDAT
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Pdest$[ebp]
	test	eax, eax
	je	SHORT $LN7@Cons_val@3
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN7@Cons_val@3:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@M@std@@MAAM@std@@YAXAAV?$allocator@M@0@PAMAAM@Z ENDP ; std::_Cons_val<std::allocator<float>,float,float &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT
; Line 89
	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@@Z PROC ; std::_Destroy_range<std::allocator<float> >, COMDAT
; Line 89
	ret	0
??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@@Z ENDP ; std::_Destroy_range<std::allocator<float> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@H@std@@QAEXPAHABH@Z	; std::allocator<int>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@H@std@@QAEXPAHABH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@H@std@@QAEXPAHABH@Z PROC		; std::allocator<int>::construct, COMDAT
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
; Line 197
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN5@construct@4
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN5@construct@4:
; Line 198
	pop	ebp
	ret	8
?construct@?$allocator@H@std@@QAEXPAHABH@Z ENDP		; std::allocator<int>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@ABV3@@Z ; std::allocator<Vec3D>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@ABV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@ABV3@@Z PROC ; std::allocator<Vec3D>::construct, COMDAT
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
; Line 197
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN5@construct@5
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
$LN5@construct@5:
; Line 198
	pop	ebp
	ret	8
?construct@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@ABV3@@Z ENDP ; std::allocator<Vec3D>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@M@std@@QAEXPAMABM@Z	; std::allocator<float>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@M@std@@QAEXPAMABM@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@M@std@@QAEXPAMABM@Z PROC		; std::allocator<float>::construct, COMDAT
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
; Line 197
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN5@construct@6
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN5@construct@6:
; Line 198
	pop	ebp
	ret	8
?construct@?$allocator@M@std@@QAEXPAMABM@Z ENDP		; std::allocator<float>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UParticle@@@std@@QAEXPAUParticle@@ABU3@@Z ; std::allocator<Particle>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UParticle@@@std@@QAEXPAUParticle@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UParticle@@@std@@QAEXPAUParticle@@ABU3@@Z PROC ; std::allocator<Particle>::construct, COMDAT
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
; Line 197
	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN5@construct@7
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??0Particle@@QAE@ABU0@@Z
$LN5@construct@7:
; Line 198
	pop	ebp
	ret	8
?construct@?$allocator@UParticle@@@std@@QAEXPAUParticle@@ABU3@@Z ENDP ; std::allocator<Particle>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@@Z ; std::allocator<std::_List_nod<Particle,std::allocator<Particle> >::_Node>::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<Particle,std::allocator<Particle> >::_Node>::destroy, COMDAT
; _this$ = ecx
; Line 214
	ret	4
?destroy@?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<Particle,std::allocator<Particle> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@@Z ; std::allocator<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>::destroy, COMDAT
; _this$ = ecx
; Line 214
	ret	4
?destroy@?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,int *,std::allocator<int> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_move<int *,int *,std::allocator<int> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
; Line 469
	push	ebp
	mov	ebp, esp
; Line 471
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, ecx
	push	esi
	sar	eax, 2
	lea	esi, DWORD PTR [eax*4]
	mov	eax, DWORD PTR __Dest$[ebp]
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 472
	pop	ebp
	ret	0
??$_Uninitialized_move@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_move<int *,int *,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAMPAMV?$allocator@M@std@@@std@@YAPAMPAM00AAV?$allocator@M@0@@Z ; std::_Uninitialized_move<float *,float *,std::allocator<float> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninitialized_move@PAMPAMV?$allocator@M@std@@@std@@YAPAMPAM00AAV?$allocator@M@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAMPAMV?$allocator@M@std@@@std@@YAPAMPAM00AAV?$allocator@M@0@@Z PROC ; std::_Uninitialized_move<float *,float *,std::allocator<float> >, COMDAT
; Line 469
	push	ebp
	mov	ebp, esp
; Line 471
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, ecx
	push	esi
	sar	eax, 2
	lea	esi, DWORD PTR [eax*4]
	mov	eax, DWORD PTR __Dest$[ebp]
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 472
	pop	ebp
	ret	0
??$_Uninitialized_move@PAMPAMV?$allocator@M@std@@@std@@YAPAMPAM00AAV?$allocator@M@0@@Z ENDP ; std::_Uninitialized_move<float *,float *,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??$_Construct@URibbonSegment@@ABU1@@std@@YAXPAURibbonSegment@@ABU1@@Z ; std::_Construct<RibbonSegment,RibbonSegment const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@URibbonSegment@@ABU1@@std@@YAXPAURibbonSegment@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@URibbonSegment@@ABU1@@std@@YAXPAURibbonSegment@@ABU1@@Z PROC ; std::_Construct<RibbonSegment,RibbonSegment const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 46
	push	ebp
	mov	ebp, esp
; Line 48
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN3@Construct@5
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], ecx
$LN3@Construct@5:
; Line 49
	pop	ebp
	ret	0
??$_Construct@URibbonSegment@@ABU1@@std@@YAXPAURibbonSegment@@ABU1@@Z ENDP ; std::_Construct<RibbonSegment,RibbonSegment const &>
_TEXT	ENDS
PUBLIC	??0TexCoordSet@@QAE@ABU0@@Z			; TexCoordSet::TexCoordSet
; Function compile flags: /Ogtp
;	COMDAT ??0TexCoordSet@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0TexCoordSet@@QAE@ABU0@@Z PROC			; TexCoordSet::TexCoordSet, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], ecx
	pop	ebp
	ret	4
??0TexCoordSet@@QAE@ABU0@@Z ENDP			; TexCoordSet::TexCoordSet
_TEXT	ENDS
PUBLIC	??0?$pair@II@std@@QAE@ABU01@@Z			; std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int>
; Function compile flags: /Ogtp
;	COMDAT ??0?$pair@II@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$pair@II@std@@QAE@ABU01@@Z PROC			; std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	pop	ebp
	ret	4
??0?$pair@II@std@@QAE@ABU01@@Z ENDP			; std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@2@@Z ; std::allocator<std::pair<unsigned int,unsigned int> >::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@2@@Z PROC ; std::allocator<std::pair<unsigned int,unsigned int> >::destroy, COMDAT
; _this$ = ecx
; Line 214
	ret	4
?destroy@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@2@@Z ENDP ; std::allocator<std::pair<unsigned int,unsigned int> >::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@@Z ; std::allocator<Vec3D>::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@@Z PROC ; std::allocator<Vec3D>::destroy, COMDAT
; _this$ = ecx
; Line 214
	ret	4
?destroy@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@@Z ENDP ; std::allocator<Vec3D>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@@Z ; std::allocator<TexCoordSet>::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@@Z PROC ; std::allocator<TexCoordSet>::destroy, COMDAT
; _this$ = ecx
; Line 214
	ret	4
?destroy@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@@Z ENDP ; std::allocator<TexCoordSet>::destroy
_TEXT	ENDS
PUBLIC	??$?0AAIAAI@?$_Pair_base@II@std@@QAE@AAI0@Z	; std::_Pair_base<unsigned int,unsigned int>::_Pair_base<unsigned int,unsigned int><unsigned int &,unsigned int &>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAIAAI@?$_Pair_base@II@std@@QAE@AAI0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAIAAI@?$_Pair_base@II@std@@QAE@AAI0@Z PROC	; std::_Pair_base<unsigned int,unsigned int>::_Pair_base<unsigned int,unsigned int><unsigned int &,unsigned int &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 163
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR __Val1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[ebp]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx
; Line 164
	pop	ebp
	ret	8
??$?0AAIAAI@?$_Pair_base@II@std@@QAE@AAI0@Z ENDP	; std::_Pair_base<unsigned int,unsigned int>::_Pair_base<unsigned int,unsigned int><unsigned int &,unsigned int &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@$$QAV3@@Z ; std::allocator<Vec3D>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@$$QAV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@$$QAV3@@Z PROC ; std::allocator<Vec3D>::construct, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 201
	push	ebp
	mov	ebp, esp
; Line 202
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN3@construct@8
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
$LN3@construct@8:
; Line 203
	pop	ebp
	ret	8
?construct@?$allocator@VVec3D@@@std@@QAEXPAVVec3D@@$$QAV3@@Z ENDP ; std::allocator<Vec3D>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@$$QAU3@@Z ; std::allocator<TexCoordSet>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@$$QAU3@@Z PROC ; std::allocator<TexCoordSet>::construct, COMDAT
; _this$ = ecx
; Line 201
	push	ebp
	mov	ebp, esp
; Line 202
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN20@construct@9
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], ecx
$LN20@construct@9:
; Line 203
	pop	ebp
	ret	8
?construct@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@$$QAU3@@Z ENDP ; std::allocator<TexCoordSet>::construct
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@II@std@@QAE@$$QAI0@Z		; std::_Pair_base<unsigned int,unsigned int>::_Pair_base<unsigned int,unsigned int>
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Pair_base@II@std@@QAE@$$QAI0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$_Pair_base@II@std@@QAE@$$QAI0@Z PROC		; std::_Pair_base<unsigned int,unsigned int>::_Pair_base<unsigned int,unsigned int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 145
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR __Val1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[ebp]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx
; Line 146
	pop	ebp
	ret	8
??0?$_Pair_base@II@std@@QAE@$$QAI0@Z ENDP		; std::_Pair_base<unsigned int,unsigned int>::_Pair_base<unsigned int,unsigned int>
_TEXT	ENDS
PUBLIC	?getValue@?$Animated@VVec3D@@V1@V?$Identity@VVec3D@@@@@@QAE?AVVec3D@@HH@Z ; Animated<Vec3D,Vec3D,Identity<Vec3D> >::getValue
EXTRN	?globalTime@@3HA:DWORD				; globalTime
; Function compile flags: /Ogtp
;	COMDAT ?getValue@?$Animated@VVec3D@@V1@V?$Identity@VVec3D@@@@@@QAE?AVVec3D@@HH@Z
_TEXT	SEGMENT
_range$78231 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
tv643 = 12						; size = 4
tv640 = 12						; size = 4
_r$78245 = 12						; size = 4
_anim$ = 12						; size = 4
_time$ = 16						; size = 4
?getValue@?$Animated@VVec3D@@V1@V?$Identity@VVec3D@@@@@@QAE?AVVec3D@@HH@Z PROC ; Animated<Vec3D,Vec3D,Identity<Vec3D> >::getValue, COMDAT
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\animated.h
; Line 102
	push	ebp
	mov	ebp, esp
; Line 103
	mov	eax, DWORD PTR [ecx+4]
	sub	esp, 8
	test	eax, eax
	je	$LN14@getValue
; Line 108
	mov	eax, DWORD PTR [ecx+8]
	push	ebx
	push	esi
	push	edi
	cmp	eax, -1
	je	SHORT $LN13@getValue
; Line 110
	mov	edx, DWORD PTR [ecx+12]
	mov	esi, DWORD PTR [edx+eax*4]
	test	esi, esi
	jne	SHORT $LN12@getValue
	xor	edi, edi
	jmp	SHORT $LN11@getValue
$LN12@getValue:
; Line 111
	mov	eax, DWORD PTR ?globalTime@@3HA		; globalTime
	cdq
	idiv	esi
	mov	edi, edx
$LN11@getValue:
; Line 113
	mov	edx, DWORD PTR [ecx+52]
	sub	edx, DWORD PTR [ecx+48]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 1
	mov	eax, edx
	xor	esi, esi
	shr	eax, 31					; 0000001fH
	lea	ebx, DWORD PTR [edx+eax-1]
	mov	DWORD PTR _range$78231[ebp+4], ebx
; Line 115
	jmp	SHORT $LN10@getValue
$LN13@getValue:
; Line 117
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _anim$[ebp]
	mov	esi, DWORD PTR [edx+eax*8]
; Line 118
	mov	edi, DWORD PTR [ecx+32]
	mov	ebx, DWORD PTR [ecx+36]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _time$[ebp]
	sub	ebx, edi
	mov	DWORD PTR _range$78231[ebp+4], edx
	sar	ebx, 2
	cdq
	idiv	DWORD PTR [edi+ebx*4-4]
	mov	ebx, DWORD PTR _range$78231[ebp+4]
	mov	edi, edx
$LN10@getValue:
; Line 121
	cmp	esi, ebx
	je	$LN9@getValue
; Line 124
	xor	eax, eax
; Line 125
	mov	edx, esi
	cmp	esi, ebx
	jae	SHORT $LN62@getValue
; Line 124
	mov	ebx, DWORD PTR [ecx+32]
	lea	esi, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR _range$78231[ebp+4]
$LL63@getValue:
; Line 127
	cmp	edi, DWORD PTR [esi]
	jl	SHORT $LN7@getValue
	cmp	edi, DWORD PTR [esi+4]
	jl	SHORT $LN60@getValue
$LN7@getValue:
; Line 125
	inc	edx
	add	esi, 4
	cmp	edx, ebx
	jb	SHORT $LL63@getValue
; Line 127
	jmp	SHORT $LN62@getValue
$LN60@getValue:
; Line 129
	mov	eax, edx
$LN62@getValue:
; Line 133
	mov	edx, DWORD PTR [ecx+32]
	mov	esi, DWORD PTR [edx+eax*4]
	lea	edx, DWORD PTR [edx+eax*4]
; Line 135
	mov	edx, DWORD PTR [edx+4]
	sub	edi, esi
	mov	DWORD PTR tv643[ebp], edi
	fild	DWORD PTR tv643[ebp]
	sub	edx, esi
; Line 137
	cmp	DWORD PTR [ecx+4], 1
	mov	DWORD PTR tv640[ebp], edx
	fidiv	DWORD PTR tv640[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	fstp	DWORD PTR _r$78245[ebp]
	jne	SHORT $LN4@getValue
	mov	ecx, DWORD PTR [ecx+48]
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	lea	edx, DWORD PTR [eax+12]
	push	edx
	push	eax
	mov	eax, DWORD PTR _r$78245[ebp]
	push	ecx
	mov	DWORD PTR [esp], eax
	push	esi
	call	??$interpolate@VVec3D@@@@YA?AVVec3D@@MABV0@0@Z ; interpolate<Vec3D>
	add	esp, 16					; 00000010H
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN4@getValue:
; Line 141
	mov	esi, DWORD PTR [ecx+80]
	mov	edx, DWORD PTR [ecx+48]
	mov	ecx, DWORD PTR [ecx+64]
	add	eax, eax
	add	eax, eax
	add	esi, eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	add	ecx, eax
	push	ecx
	add	edx, eax
	lea	eax, DWORD PTR [edx+12]
	push	eax
	push	edx
	push	ecx
	mov	ecx, DWORD PTR _r$78245[ebp]
	mov	DWORD PTR [esp], ecx
	push	esi
	call	??$interpolateHermite@VVec3D@@@@YA?AVVec3D@@MABV0@000@Z ; interpolateHermite<Vec3D>
	add	esp, 24					; 00000018H
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN9@getValue:
; Line 145
	mov	eax, DWORD PTR [ecx+48]
	lea	edx, DWORD PTR [esi+esi*2]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	pop	edi
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	pop	esi
	mov	DWORD PTR [eax+8], ecx
	pop	ebx
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN14@getValue:
; Line 151
	mov	ecx, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getValue@?$Animated@VVec3D@@V1@V?$Identity@VVec3D@@@@@@QAE?AVVec3D@@HH@Z ENDP ; Animated<Vec3D,Vec3D,Identity<Vec3D> >::getValue
_TEXT	ENDS
PUBLIC	?getValue@?$Animated@MFVShortToFloat@@@@QAEMHH@Z ; Animated<float,short,ShortToFloat>::getValue
; Function compile flags: /Ogtp
;	COMDAT ?getValue@?$Animated@MFVShortToFloat@@@@QAEMHH@Z
_TEXT	SEGMENT
_range$78333 = -8					; size = 8
tv653 = 8						; size = 4
tv650 = 8						; size = 4
tv645 = 8						; size = 4
_r$78347 = 8						; size = 4
_pos$78341 = 8						; size = 4
_anim$ = 8						; size = 4
_time$ = 12						; size = 4
?getValue@?$Animated@MFVShortToFloat@@@@QAEMHH@Z PROC	; Animated<float,short,ShortToFloat>::getValue, COMDAT
; _this$ = ecx
; Line 102
	push	ebp
	mov	ebp, esp
; Line 103
	mov	eax, DWORD PTR [ecx+4]
	sub	esp, 8
	test	eax, eax
	je	$LN14@getValue@2
; Line 108
	mov	eax, DWORD PTR [ecx+8]
	push	esi
	push	edi
	cmp	eax, -1
	je	SHORT $LN13@getValue@2
; Line 110
	mov	edx, DWORD PTR [ecx+12]
	mov	esi, DWORD PTR [edx+eax*4]
	test	esi, esi
	jne	SHORT $LN12@getValue@2
; Line 113
	mov	esi, DWORD PTR [ecx+52]
	sub	esi, DWORD PTR [ecx+48]
	xor	edx, edx
	sar	esi, 2
	xor	eax, eax
	dec	esi
; Line 115
	jmp	SHORT $LN10@getValue@2
$LN12@getValue@2:
; Line 111
	mov	eax, DWORD PTR ?globalTime@@3HA		; globalTime
	cdq
	idiv	esi
; Line 113
	mov	esi, DWORD PTR [ecx+52]
	sub	esi, DWORD PTR [ecx+48]
	xor	eax, eax
	sar	esi, 2
	dec	esi
; Line 115
	jmp	SHORT $LN10@getValue@2
$LN13@getValue@2:
; Line 117
	mov	edx, DWORD PTR _anim$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	esi, DWORD PTR [eax+edx*8+4]
; Line 118
	mov	edi, DWORD PTR [ecx+32]
	lea	eax, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _time$[ebp]
	push	ebx
	mov	ebx, DWORD PTR [ecx+36]
	mov	DWORD PTR _range$78333[ebp], edx
	sub	ebx, edi
	cdq
	sar	ebx, 2
	idiv	DWORD PTR [edi+ebx*4-4]
	mov	eax, DWORD PTR _range$78333[ebp]
	pop	ebx
$LN10@getValue@2:
; Line 121
	cmp	eax, esi
	je	$LN9@getValue@2
; Line 124
	xor	edi, edi
	mov	DWORD PTR _pos$78341[ebp], edi
; Line 125
	cmp	eax, esi
	jae	SHORT $LN60@getValue@2
; Line 124
	mov	edi, DWORD PTR [ecx+32]
	lea	edi, DWORD PTR [edi+eax*4]
	npad	4
$LL8@getValue@2:
; Line 127
	cmp	edx, DWORD PTR [edi]
	jl	SHORT $LN7@getValue@2
	cmp	edx, DWORD PTR [edi+4]
	jl	SHORT $LN58@getValue@2
$LN7@getValue@2:
; Line 125
	inc	eax
	add	edi, 4
	cmp	eax, esi
	jb	SHORT $LL8@getValue@2
; Line 127
	mov	edi, DWORD PTR _pos$78341[ebp]
	jmp	SHORT $LN60@getValue@2
$LN58@getValue@2:
; Line 129
	mov	edi, eax
$LN60@getValue@2:
; Line 133
	mov	esi, DWORD PTR [ecx+32]
	lea	eax, DWORD PTR [edi*4]
	mov	edi, DWORD PTR [esi+eax]
; Line 135
	sub	edx, edi
	mov	DWORD PTR tv653[ebp], edx
	fild	DWORD PTR tv653[ebp]
	mov	edx, DWORD PTR [esi+eax+4]
	sub	edx, edi
; Line 137
	cmp	DWORD PTR [ecx+4], 1
	mov	DWORD PTR tv650[ebp], edx
	fidiv	DWORD PTR tv650[ebp]
	fstp	DWORD PTR _r$78347[ebp]
	jne	SHORT $LN4@getValue@2
	fld	DWORD PTR _r$78347[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	fld	ST(0)
	pop	edi
	fld1
	pop	esi
	fsubrp	ST(1), ST(0)
	fmul	DWORD PTR [eax+ecx]
	fld	DWORD PTR [eax+ecx+4]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv645[ebp]
	fld	DWORD PTR tv645[ebp]
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	8
$LN4@getValue@2:
; Line 141
	mov	esi, DWORD PTR [ecx+80]
	mov	edx, DWORD PTR [ecx+48]
	mov	ecx, DWORD PTR [ecx+64]
	add	esi, eax
	add	ecx, eax
	push	esi
	add	edx, eax
	push	ecx
	lea	eax, DWORD PTR [edx+4]
	push	eax
	push	edx
	push	ecx
	mov	ecx, DWORD PTR _r$78347[ebp]
	mov	DWORD PTR [esp], ecx
	call	??$interpolateHermite@M@@YAMMABM000@Z	; interpolateHermite<float>
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	8
$LN9@getValue@2:
; Line 145
	mov	edx, DWORD PTR [ecx+48]
	fld	DWORD PTR [edx+eax*4]
	pop	edi
	pop	esi
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	8
$LN14@getValue@2:
; Line 151
	mov	eax, DWORD PTR [ecx+48]
	fld	DWORD PTR [eax]
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	8
?getValue@?$Animated@MFVShortToFloat@@@@QAEMHH@Z ENDP	; Animated<float,short,ShortToFloat>::getValue
_TEXT	ENDS
PUBLIC	?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z ; Animated<float,float,Identity<float> >::getValue
; Function compile flags: /Ogtp
;	COMDAT ?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z
_TEXT	SEGMENT
_range$78428 = -8					; size = 8
tv653 = 8						; size = 4
tv650 = 8						; size = 4
tv645 = 8						; size = 4
_r$78442 = 8						; size = 4
_pos$78436 = 8						; size = 4
_anim$ = 8						; size = 4
_time$ = 12						; size = 4
?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z PROC	; Animated<float,float,Identity<float> >::getValue, COMDAT
; _this$ = ecx
; Line 102
	push	ebp
	mov	ebp, esp
; Line 103
	mov	eax, DWORD PTR [ecx+4]
	sub	esp, 8
	test	eax, eax
	je	$LN14@getValue@3
; Line 108
	mov	eax, DWORD PTR [ecx+8]
	push	esi
	push	edi
	cmp	eax, -1
	je	SHORT $LN13@getValue@3
; Line 110
	mov	edx, DWORD PTR [ecx+12]
	mov	esi, DWORD PTR [edx+eax*4]
	test	esi, esi
	jne	SHORT $LN12@getValue@3
; Line 113
	mov	esi, DWORD PTR [ecx+52]
	sub	esi, DWORD PTR [ecx+48]
	xor	edx, edx
	sar	esi, 2
	xor	eax, eax
	dec	esi
; Line 115
	jmp	SHORT $LN10@getValue@3
$LN12@getValue@3:
; Line 111
	mov	eax, DWORD PTR ?globalTime@@3HA		; globalTime
	cdq
	idiv	esi
; Line 113
	mov	esi, DWORD PTR [ecx+52]
	sub	esi, DWORD PTR [ecx+48]
	xor	eax, eax
	sar	esi, 2
	dec	esi
; Line 115
	jmp	SHORT $LN10@getValue@3
$LN13@getValue@3:
; Line 117
	mov	edx, DWORD PTR _anim$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	esi, DWORD PTR [eax+edx*8+4]
; Line 118
	mov	edi, DWORD PTR [ecx+32]
	lea	eax, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _time$[ebp]
	push	ebx
	mov	ebx, DWORD PTR [ecx+36]
	mov	DWORD PTR _range$78428[ebp], edx
	sub	ebx, edi
	cdq
	sar	ebx, 2
	idiv	DWORD PTR [edi+ebx*4-4]
	mov	eax, DWORD PTR _range$78428[ebp]
	pop	ebx
$LN10@getValue@3:
; Line 121
	cmp	eax, esi
	je	$LN9@getValue@3
; Line 124
	xor	edi, edi
	mov	DWORD PTR _pos$78436[ebp], edi
; Line 125
	cmp	eax, esi
	jae	SHORT $LN60@getValue@3
; Line 124
	mov	edi, DWORD PTR [ecx+32]
	lea	edi, DWORD PTR [edi+eax*4]
	npad	4
$LL8@getValue@3:
; Line 127
	cmp	edx, DWORD PTR [edi]
	jl	SHORT $LN7@getValue@3
	cmp	edx, DWORD PTR [edi+4]
	jl	SHORT $LN58@getValue@3
$LN7@getValue@3:
; Line 125
	inc	eax
	add	edi, 4
	cmp	eax, esi
	jb	SHORT $LL8@getValue@3
; Line 127
	mov	edi, DWORD PTR _pos$78436[ebp]
	jmp	SHORT $LN60@getValue@3
$LN58@getValue@3:
; Line 129
	mov	edi, eax
$LN60@getValue@3:
; Line 133
	mov	esi, DWORD PTR [ecx+32]
	lea	eax, DWORD PTR [edi*4]
	mov	edi, DWORD PTR [esi+eax]
; Line 135
	sub	edx, edi
	mov	DWORD PTR tv653[ebp], edx
	fild	DWORD PTR tv653[ebp]
	mov	edx, DWORD PTR [esi+eax+4]
	sub	edx, edi
; Line 137
	cmp	DWORD PTR [ecx+4], 1
	mov	DWORD PTR tv650[ebp], edx
	fidiv	DWORD PTR tv650[ebp]
	fstp	DWORD PTR _r$78442[ebp]
	jne	SHORT $LN4@getValue@3
	fld	DWORD PTR _r$78442[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	fld	ST(0)
	pop	edi
	fld1
	pop	esi
	fsubrp	ST(1), ST(0)
	fmul	DWORD PTR [eax+ecx]
	fld	DWORD PTR [eax+ecx+4]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv645[ebp]
	fld	DWORD PTR tv645[ebp]
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	8
$LN4@getValue@3:
; Line 141
	mov	esi, DWORD PTR [ecx+80]
	mov	edx, DWORD PTR [ecx+48]
	mov	ecx, DWORD PTR [ecx+64]
	add	esi, eax
	add	ecx, eax
	push	esi
	add	edx, eax
	push	ecx
	lea	eax, DWORD PTR [edx+4]
	push	eax
	push	edx
	push	ecx
	mov	ecx, DWORD PTR _r$78442[ebp]
	mov	DWORD PTR [esp], ecx
	call	??$interpolateHermite@M@@YAMMABM000@Z	; interpolateHermite<float>
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	8
$LN9@getValue@3:
; Line 145
	mov	edx, DWORD PTR [ecx+48]
	fld	DWORD PTR [edx+eax*4]
	pop	edi
	pop	esi
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	8
$LN14@getValue@3:
; Line 151
	mov	eax, DWORD PTR [ecx+48]
	fld	DWORD PTR [eax]
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	8
?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z ENDP	; Animated<float,float,Identity<float> >::getValue
_TEXT	ENDS
PUBLIC	??D?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBEAAUParticle@@XZ ; std::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBEAAUParticle@@XZ
_TEXT	SEGMENT
??D?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBEAAUParticle@@XZ PROC ; std::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator*, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 360
	mov	eax, DWORD PTR [ecx]
	add	eax, 8
; Line 361
	ret	0
??D?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBEAAUParticle@@XZ ENDP ; std::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator*
_TEXT	ENDS
PUBLIC	??C?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBEPAUParticle@@XZ ; std::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator->
; Function compile flags: /Ogtp
;	COMDAT ??C?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBEPAUParticle@@XZ
_TEXT	SEGMENT
??C?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBEPAUParticle@@XZ PROC ; std::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator->, COMDAT
; _this$ = ecx
; Line 365
	mov	eax, DWORD PTR [ecx]
	add	eax, 8
; Line 366
	ret	0
??C?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QBEPAUParticle@@XZ ENDP ; std::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >::operator->
_TEXT	ENDS
PUBLIC	??D?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBEAAURibbonSegment@@XZ ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBEAAURibbonSegment@@XZ
_TEXT	SEGMENT
??D?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBEAAURibbonSegment@@XZ PROC ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator*, COMDAT
; _this$ = ecx
; Line 360
	mov	eax, DWORD PTR [ecx]
	add	eax, 8
; Line 361
	ret	0
??D?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBEAAURibbonSegment@@XZ ENDP ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator*
_TEXT	ENDS
PUBLIC	??C?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBEPAURibbonSegment@@XZ ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator->
; Function compile flags: /Ogtp
;	COMDAT ??C?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBEPAURibbonSegment@@XZ
_TEXT	SEGMENT
??C?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBEPAURibbonSegment@@XZ PROC ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator->, COMDAT
; _this$ = ecx
; Line 365
	mov	eax, DWORD PTR [ecx]
	add	eax, 8
; Line 366
	ret	0
??C?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QBEPAURibbonSegment@@XZ ENDP ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::operator->
_TEXT	ENDS
PUBLIC	??0?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@1@PBV?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@1@PBV?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@1@PBV?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >, COMDAT
; _this$ = ecx
; Line 342
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 343
	pop	ebp
	ret	8
??0?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@1@PBV?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >::_List_iterator<std::_List_val<Particle,std::allocator<Particle> > >
_TEXT	ENDS
PUBLIC	??0?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@PBV?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@PBV?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@PBV?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >, COMDAT
; _this$ = ecx
; Line 342
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 343
	pop	ebp
	ret	8
??0?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@PBV?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >::_List_iterator<std::_List_val<RibbonSegment,std::allocator<RibbonSegment> > >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1271
	ret	8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z PROC ; std::vector<float,std::allocator<float> >::_Destroy, COMDAT
; _this$ = ecx
; Line 1271
	ret	8
?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ENDP ; std::vector<float,std::allocator<float> >::_Destroy
_TEXT	ENDS
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Incsize@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEXI@Z ; std::list<Particle,std::allocator<Particle> >::_Incsize
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Incsize@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Incsize@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEXI@Z PROC ; std::list<Particle,std::allocator<Particle> >::_Incsize, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 1519
	push	ebp
	mov	ebp, esp
; Line 1520
	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, 53687090				; 03333332H
	sub	esi, eax
	cmp	esi, edx
	pop	esi
	jae	SHORT $LN1@Incsize
; Line 1521
	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN11@Incsize:
$LN1@Incsize:
; Line 1522
	add	eax, edx
	mov	DWORD PTR [ecx+4], eax
; Line 1523
	pop	ebp
	ret	4
$LN10@Incsize:
?_Incsize@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEXI@Z ENDP ; std::list<Particle,std::allocator<Particle> >::_Incsize
_TEXT	ENDS
PUBLIC	?_Incsize@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEXI@Z ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::_Incsize
; Function compile flags: /Ogtp
;	COMDAT ?_Incsize@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Incsize@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEXI@Z PROC ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::_Incsize, COMDAT
; _this$ = ecx
; Line 1519
	push	ebp
	mov	ebp, esp
; Line 1520
	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, 97612892				; 05d1745cH
	sub	esi, eax
	cmp	esi, edx
	pop	esi
	jae	SHORT $LN1@Incsize@2
; Line 1521
	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN11@Incsize@2:
$LN1@Incsize@2:
; Line 1522
	add	eax, edx
	mov	DWORD PTR [ecx+4], eax
; Line 1523
	pop	ebp
	ret	4
$LN10@Incsize@2:
?_Incsize@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEXI@Z ENDP ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::_Incsize
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@0@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::_List_nod<Particle,std::allocator<Particle> >::_Node>,std::_List_nod<Particle,std::allocator<Particle> >::_Node>
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@0@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@0@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@0@@Z PROC ; std::_Dest_val<std::allocator<std::_List_nod<Particle,std::allocator<Particle> >::_Node>,std::_List_nod<Particle,std::allocator<Particle> >::_Node>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 288
	ret	0
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@std@@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@std@@@0@PAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_List_nod<Particle,std::allocator<Particle> >::_Node>,std::_List_nod<Particle,std::allocator<Particle> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@0@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>,std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@0@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@0@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@0@@Z PROC ; std::_Dest_val<std::allocator<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>,std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>, COMDAT
; Line 288
	ret	0
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@std@@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@0@PAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>,std::_List_nod<RibbonSegment,std::allocator<RibbonSegment> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ; std::_Cons_val<std::allocator<int>,int,int const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z PROC ; std::_Cons_val<std::allocator<int>,int,int const &>, COMDAT
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Pdest$[ebp]
	test	eax, eax
	je	SHORT $LN9@Cons_val@4
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN9@Cons_val@4:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@H@std@@HABH@std@@YAXAAV?$allocator@H@0@PAHABH@Z ENDP ; std::_Cons_val<std::allocator<int>,int,int const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VVec3D@@@std@@VVec3D@@ABV3@@std@@YAXAAV?$allocator@VVec3D@@@0@PAVVec3D@@ABV2@@Z ; std::_Cons_val<std::allocator<Vec3D>,Vec3D,Vec3D const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@VVec3D@@@std@@VVec3D@@ABV3@@std@@YAXAAV?$allocator@VVec3D@@@0@PAVVec3D@@ABV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VVec3D@@@std@@VVec3D@@ABV3@@std@@YAXAAV?$allocator@VVec3D@@@0@PAVVec3D@@ABV2@@Z PROC ; std::_Cons_val<std::allocator<Vec3D>,Vec3D,Vec3D const &>, COMDAT
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Pdest$[ebp]
	test	eax, eax
	je	SHORT $LN9@Cons_val@5
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
$LN9@Cons_val@5:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@VVec3D@@@std@@VVec3D@@ABV3@@std@@YAXAAV?$allocator@VVec3D@@@0@PAVVec3D@@ABV2@@Z ENDP ; std::_Cons_val<std::allocator<Vec3D>,Vec3D,Vec3D const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@M@std@@MABM@std@@YAXAAV?$allocator@M@0@PAMABM@Z ; std::_Cons_val<std::allocator<float>,float,float const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@M@std@@MABM@std@@YAXAAV?$allocator@M@0@PAMABM@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@M@std@@MABM@std@@YAXAAV?$allocator@M@0@PAMABM@Z PROC ; std::_Cons_val<std::allocator<float>,float,float const &>, COMDAT
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Pdest$[ebp]
	test	eax, eax
	je	SHORT $LN9@Cons_val@6
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN9@Cons_val@6:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@M@std@@MABM@std@@YAXAAV?$allocator@M@0@PAMABM@Z ENDP ; std::_Cons_val<std::allocator<float>,float,float const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UParticle@@@std@@UParticle@@ABU3@@std@@YAXAAV?$allocator@UParticle@@@0@PAUParticle@@ABU2@@Z ; std::_Cons_val<std::allocator<Particle>,Particle,Particle const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UParticle@@@std@@UParticle@@ABU3@@std@@YAXAAV?$allocator@UParticle@@@0@PAUParticle@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UParticle@@@std@@UParticle@@ABU3@@std@@YAXAAV?$allocator@UParticle@@@0@PAUParticle@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<Particle>,Particle,Particle const &>, COMDAT
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	ecx, DWORD PTR __Pdest$[ebp]
	test	ecx, ecx
	je	SHORT $LN9@Cons_val@7
	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??0Particle@@QAE@ABU0@@Z
$LN9@Cons_val@7:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@UParticle@@@std@@UParticle@@ABU3@@std@@YAXAAV?$allocator@UParticle@@@0@PAUParticle@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<Particle>,Particle,Particle const &>
_TEXT	ENDS
PUBLIC	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1322
	push	ebp
	mov	ebp, esp
; Line 1325
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, ecx
	push	esi
	sar	eax, 2
	lea	esi, DWORD PTR [eax*4]
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 1326
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int *>
_TEXT	ENDS
PUBLIC	??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Umove<float *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z PROC ; std::vector<float,std::allocator<float> >::_Umove<float *>, COMDAT
; _this$ = ecx
; Line 1322
	push	ebp
	mov	ebp, esp
; Line 1325
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, ecx
	push	esi
	sar	eax, 2
	lea	esi, DWORD PTR [eax*4]
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 1326
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ENDP ; std::vector<float,std::allocator<float> >::_Umove<float *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@URibbonSegment@@@std@@QAEXPAURibbonSegment@@ABU3@@Z ; std::allocator<RibbonSegment>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@URibbonSegment@@@std@@QAEXPAURibbonSegment@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@URibbonSegment@@@std@@QAEXPAURibbonSegment@@ABU3@@Z PROC ; std::allocator<RibbonSegment>::construct, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 196
	push	ebp
	mov	ebp, esp
; Line 197
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN5@construct@10
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], ecx
$LN5@construct@10:
; Line 198
	pop	ebp
	ret	8
?construct@?$allocator@URibbonSegment@@@std@@QAEXPAURibbonSegment@@ABU3@@Z ENDP ; std::allocator<RibbonSegment>::construct
_TEXT	ENDS
PUBLIC	??$construct@AAUTexCoordSet@@@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@AAU2@@Z ; std::allocator<TexCoordSet>::construct<TexCoordSet &>
; Function compile flags: /Ogtp
;	COMDAT ??$construct@AAUTexCoordSet@@@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUTexCoordSet@@@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@AAU2@@Z PROC ; std::allocator<TexCoordSet>::construct<TexCoordSet &>, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
; Line 208
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN20@construct@11
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], ecx
$LN20@construct@11:
; Line 209
	pop	ebp
	ret	8
??$construct@AAUTexCoordSet@@@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@AAU2@@Z ENDP ; std::allocator<TexCoordSet>::construct<TexCoordSet &>
_TEXT	ENDS
PUBLIC	??$_Construct@U?$pair@II@std@@ABU12@@std@@YAXPAU?$pair@II@0@ABU10@@Z ; std::_Construct<std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int> const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@U?$pair@II@std@@ABU12@@std@@YAXPAU?$pair@II@0@ABU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@U?$pair@II@std@@ABU12@@std@@YAXPAU?$pair@II@0@ABU10@@Z PROC ; std::_Construct<std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int> const &>, COMDAT
; Line 46
	push	ebp
	mov	ebp, esp
; Line 48
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN3@Construct@6
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN3@Construct@6:
; Line 49
	pop	ebp
	ret	0
??$_Construct@U?$pair@II@std@@ABU12@@std@@YAXPAU?$pair@II@0@ABU10@@Z ENDP ; std::_Construct<std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int> const &>
_TEXT	ENDS
PUBLIC	??$_Construct@UTexCoordSet@@ABU1@@std@@YAXPAUTexCoordSet@@ABU1@@Z ; std::_Construct<TexCoordSet,TexCoordSet const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@UTexCoordSet@@ABU1@@std@@YAXPAUTexCoordSet@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UTexCoordSet@@ABU1@@std@@YAXPAUTexCoordSet@@ABU1@@Z PROC ; std::_Construct<TexCoordSet,TexCoordSet const &>, COMDAT
; Line 46
	push	ebp
	mov	ebp, esp
; Line 48
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN20@Construct@7
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], ecx
$LN20@Construct@7:
; Line 49
	pop	ebp
	ret	0
??$_Construct@UTexCoordSet@@ABU1@@std@@YAXPAUTexCoordSet@@ABU1@@Z ENDP ; std::_Construct<TexCoordSet,TexCoordSet const &>
_TEXT	ENDS
PUBLIC	??$?0II@?$pair@II@std@@QAE@AAU01@@Z		; std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int><unsigned int,unsigned int>
; Function compile flags: /Ogtp
;	COMDAT ??$?0II@?$pair@II@std@@QAE@AAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0II@?$pair@II@std@@QAE@AAU01@@Z PROC		; std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int><unsigned int,unsigned int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 195
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
; Line 196
	pop	ebp
	ret	4
??$?0II@?$pair@II@std@@QAE@AAU01@@Z ENDP		; std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int><unsigned int,unsigned int>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U?$pair@II@std@@@std@@U?$pair@II@2@@std@@YAXAAV?$allocator@U?$pair@II@std@@@0@PAU?$pair@II@0@@Z ; std::_Dest_val<std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@U?$pair@II@std@@@std@@U?$pair@II@2@@std@@YAXAAV?$allocator@U?$pair@II@std@@@0@PAU?$pair@II@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U?$pair@II@std@@@std@@U?$pair@II@2@@std@@YAXAAV?$allocator@U?$pair@II@std@@@0@PAU?$pair@II@0@@Z PROC ; std::_Dest_val<std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 288
	ret	0
??$_Dest_val@V?$allocator@U?$pair@II@std@@@std@@U?$pair@II@2@@std@@YAXAAV?$allocator@U?$pair@II@std@@@0@PAU?$pair@II@0@@Z ENDP ; std::_Dest_val<std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@VVec3D@@@std@@VVec3D@@@std@@YAXAAV?$allocator@VVec3D@@@0@PAVVec3D@@@Z ; std::_Dest_val<std::allocator<Vec3D>,Vec3D>
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@VVec3D@@@std@@VVec3D@@@std@@YAXAAV?$allocator@VVec3D@@@0@PAVVec3D@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@VVec3D@@@std@@VVec3D@@@std@@YAXAAV?$allocator@VVec3D@@@0@PAVVec3D@@@Z PROC ; std::_Dest_val<std::allocator<Vec3D>,Vec3D>, COMDAT
; Line 288
	ret	0
??$_Dest_val@V?$allocator@VVec3D@@@std@@VVec3D@@@std@@YAXAAV?$allocator@VVec3D@@@0@PAVVec3D@@@Z ENDP ; std::_Dest_val<std::allocator<Vec3D>,Vec3D>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UTexCoordSet@@@std@@UTexCoordSet@@@std@@YAXAAV?$allocator@UTexCoordSet@@@0@PAUTexCoordSet@@@Z ; std::_Dest_val<std::allocator<TexCoordSet>,TexCoordSet>
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@UTexCoordSet@@@std@@UTexCoordSet@@@std@@YAXAAV?$allocator@UTexCoordSet@@@0@PAUTexCoordSet@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UTexCoordSet@@@std@@UTexCoordSet@@@std@@YAXAAV?$allocator@UTexCoordSet@@@0@PAUTexCoordSet@@@Z PROC ; std::_Dest_val<std::allocator<TexCoordSet>,TexCoordSet>, COMDAT
; Line 288
	ret	0
??$_Dest_val@V?$allocator@UTexCoordSet@@@std@@UTexCoordSet@@@std@@YAXAAV?$allocator@UTexCoordSet@@@0@PAUTexCoordSet@@@Z ENDP ; std::_Dest_val<std::allocator<TexCoordSet>,TexCoordSet>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UTexCoordSet@@@std@@UTexCoordSet@@U3@@std@@YAXAAV?$allocator@UTexCoordSet@@@0@PAUTexCoordSet@@$$QAU2@@Z ; std::_Cons_val<std::allocator<TexCoordSet>,TexCoordSet,TexCoordSet>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UTexCoordSet@@@std@@UTexCoordSet@@U3@@std@@YAXAAV?$allocator@UTexCoordSet@@@0@PAUTexCoordSet@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UTexCoordSet@@@std@@UTexCoordSet@@U3@@std@@YAXAAV?$allocator@UTexCoordSet@@@0@PAUTexCoordSet@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<TexCoordSet>,TexCoordSet,TexCoordSet>, COMDAT
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Pdest$[ebp]
	test	eax, eax
	je	SHORT $LN23@Cons_val@8
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], ecx
$LN23@Cons_val@8:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@UTexCoordSet@@@std@@UTexCoordSet@@U3@@std@@YAXAAV?$allocator@UTexCoordSet@@@0@PAUTexCoordSet@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<TexCoordSet>,TexCoordSet,TexCoordSet>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VVec3D@@@std@@VVec3D@@V3@@std@@YAXAAV?$allocator@VVec3D@@@0@PAVVec3D@@$$QAV2@@Z ; std::_Cons_val<std::allocator<Vec3D>,Vec3D,Vec3D>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@VVec3D@@@std@@VVec3D@@V3@@std@@YAXAAV?$allocator@VVec3D@@@0@PAVVec3D@@$$QAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VVec3D@@@std@@VVec3D@@V3@@std@@YAXAAV?$allocator@VVec3D@@@0@PAVVec3D@@$$QAV2@@Z PROC ; std::_Cons_val<std::allocator<Vec3D>,Vec3D,Vec3D>, COMDAT
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Pdest$[ebp]
	test	eax, eax
	je	SHORT $LN7@Cons_val@9
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
$LN7@Cons_val@9:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@VVec3D@@@std@@VVec3D@@V3@@std@@YAXAAV?$allocator@VVec3D@@@0@PAVVec3D@@$$QAV2@@Z ENDP ; std::_Cons_val<std::allocator<Vec3D>,Vec3D,Vec3D>
_TEXT	ENDS
PUBLIC	??$?0II@?$pair@II@std@@QAE@$$QAU01@@Z		; std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int><unsigned int,unsigned int>
; Function compile flags: /Ogtp
;	COMDAT ??$?0II@?$pair@II@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0II@?$pair@II@std@@QAE@$$QAU01@@Z PROC		; std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int><unsigned int,unsigned int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 255
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
; Line 256
	pop	ebp
	ret	4
??$?0II@?$pair@II@std@@QAE@$$QAU01@@Z ENDP		; std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int><unsigned int,unsigned int>
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fe0000000000000
EXTRN	?randint@@YAHHH@Z:PROC				; randint
EXTRN	?randfloat@@YAMMM@Z:PROC			; randfloat
;	COMDAT __real@0000000000000000
; File c:\programovani\wow editor\test\src\editor\vec3d.h
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtp
CONST	ENDS
_TEXT	SEGMENT
$T92332 = -36						; size = 12
$T92327 = -36						; size = 12
$T92333 = -24						; size = 12
_dir$ = -24						; size = 12
$T92329 = -24						; size = 12
$T92328 = -24						; size = 12
_spd$ = -12						; size = 4
_var$ = -8						; size = 4
_w$ = -4						; size = 4
tv1091 = 8						; size = 4
tv1082 = 8						; size = 4
$T92475 = 8						; size = 4
$T92440 = 8						; size = 4
_l$ = 8							; size = 4
___$ReturnUdt$ = 8					; size = 4
_anim$ = 12						; size = 4
_time$ = 16						; size = 4
?newParticle@PlaneParticleEmitter@@UAE?AUParticle@@HH@Z PROC ; PlaneParticleEmitter::newParticle
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\particle.cpp
; Line 502
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 505
	mov	edx, DWORD PTR _anim$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	edi
	xor	edi, edi
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [esi+4], edi
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+16], edi
	mov	DWORD PTR [esi+20], edi
	mov	ebx, ecx
	mov	ecx, DWORD PTR _time$[ebp]
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR [esi+24], edi
	mov	DWORD PTR [esi+28], edi
	mov	DWORD PTR [esi+32], edi
	mov	DWORD PTR [esi+36], edi
	mov	DWORD PTR [esi+40], edi
	mov	DWORD PTR [esi+44], edi
	push	ecx
	push	edx
	lea	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [esi+64], edi
	mov	DWORD PTR [esi+68], edi
	mov	DWORD PTR [esi+72], edi
	mov	DWORD PTR [esi+76], edi
	call	?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z ; Animated<float,float,Identity<float> >::getValue
	fmul	QWORD PTR __real@3fe0000000000000
; Line 506
	mov	eax, DWORD PTR _time$[ebp]
	mov	ecx, DWORD PTR _anim$[ebp]
	push	eax
	fstp	DWORD PTR _w$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [ebx+4]
	lea	ecx, DWORD PTR [ecx+768]
	call	?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z ; Animated<float,float,Identity<float> >::getValue
	fmul	QWORD PTR __real@3fe0000000000000
; Line 507
	mov	edx, DWORD PTR _time$[ebp]
	mov	eax, DWORD PTR _anim$[ebp]
	mov	ecx, DWORD PTR [ebx+4]
	fstp	DWORD PTR _l$[ebp]
	push	edx
	push	eax
	call	?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z ; Animated<float,float,Identity<float> >::getValue
	fstp	DWORD PTR _spd$[ebp]
; Line 508
	mov	ecx, DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _anim$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [ebx+4]
	push	edx
	lea	ecx, DWORD PTR [ecx+96]
	call	?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z ; Animated<float,float,Identity<float> >::getValue
	fstp	DWORD PTR _var$[ebp]
; Line 510
	mov	eax, DWORD PTR _l$[ebp]
	fld	DWORD PTR _l$[ebp]
	sub	esp, 8
	fchs
	mov	DWORD PTR [esp+4], eax
	fstp	DWORD PTR [esp]
	call	?randfloat@@YAMMM@Z			; randfloat
	fstp	DWORD PTR $T92327[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	fld	DWORD PTR _w$[ebp]
	fchs
	mov	DWORD PTR [esp+4], ecx
	fstp	DWORD PTR [esp]
	call	?randfloat@@YAMMM@Z			; randfloat
	mov	eax, DWORD PTR [ebx+4]
	fstp	DWORD PTR $T92327[ebp+8]
	fld	DWORD PTR [eax+1032]
	add	esp, 8
	fadd	DWORD PTR $T92327[ebp]
	fstp	DWORD PTR $T92328[ebp]
	fld	DWORD PTR [eax+1036]
	fldz
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T92328[ebp+4]
	fld	DWORD PTR [eax+1040]
	fadd	DWORD PTR $T92327[ebp+8]
	mov	edx, DWORD PTR $T92328[ebp]
	mov	eax, DWORD PTR $T92328[ebp+4]
	mov	DWORD PTR [esi], edx
	fstp	DWORD PTR $T92328[ebp+8]
	mov	DWORD PTR [esi+4], eax
	mov	ecx, DWORD PTR $T92328[ebp+8]
	mov	DWORD PTR [esi+8], ecx
; Line 511
	mov	edx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [edx+1116]
	fld	DWORD PTR [eax+312]
	fld	DWORD PTR $T92328[ebp+4]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fld	DWORD PTR [eax+308]
	fld	DWORD PTR $T92328[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(3)
	faddp	ST(1), ST(0)
	fld	DWORD PTR [eax+316]
	fld	DWORD PTR $T92328[ebp+8]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+320]
	fstp	DWORD PTR $T92329[ebp]
	fld	DWORD PTR [eax+328]
	fmul	ST(0), ST(2)
	fld	DWORD PTR [eax+324]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	DWORD PTR [eax+332]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+336]
	fstp	DWORD PTR $T92329[ebp+4]
	fld	DWORD PTR [eax+344]
	mov	ecx, DWORD PTR $T92329[ebp+4]
	fmulp	ST(2), ST(0)
	fld	DWORD PTR [eax+340]
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	DWORD PTR [eax+348]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+352]
	mov	eax, DWORD PTR $T92329[ebp]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	fstp	DWORD PTR $T92329[ebp+8]
	mov	edx, DWORD PTR $T92329[ebp+8]
	mov	DWORD PTR [esi+8], edx
; Line 513
	mov	eax, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [eax+1116]
	fld	DWORD PTR [eax+372]
	fmul	ST(0), ST(1)
	fadd	DWORD PTR [eax+376]
	fld	DWORD PTR [eax+380]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+384]
	fstp	DWORD PTR _dir$[ebp]
	fld	DWORD PTR [eax+388]
	fmul	ST(0), ST(1)
	fadd	DWORD PTR [eax+392]
	fld	DWORD PTR [eax+396]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+400]
	fstp	DWORD PTR _dir$[ebp+4]
	fld	DWORD PTR [eax+404]
	fmul	ST(0), ST(1)
	fadd	DWORD PTR [eax+408]
	fld	DWORD PTR [eax+412]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+416]
; Line 514
	mov	DWORD PTR [esi+24], edi
	fstp	DWORD PTR _dir$[ebp+8]
	fld	DWORD PTR _dir$[ebp+4]
	mov	DWORD PTR [esi+28], -1082130432		; bf800000H
; Line 516
	fld	DWORD PTR _dir$[ebp]
	mov	DWORD PTR [esi+32], edi
	fld	DWORD PTR _dir$[ebp+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv1091[ebp]
	fld	DWORD PTR tv1091[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv1082[ebp]
	fld	DWORD PTR tv1082[ebp]
	mov	ecx, DWORD PTR _var$[ebp]
	fld1
	sub	esp, 8
	fdivrp	ST(1), ST(0)
	mov	DWORD PTR [esp+4], ecx
	fstp	DWORD PTR $T92440[ebp]
	fld	DWORD PTR $T92440[ebp]
	fld	ST(0)
	fmul	DWORD PTR _dir$[ebp]
	fstp	DWORD PTR _dir$[ebp]
	fld	DWORD PTR _dir$[ebp+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _dir$[ebp+4]
	fmul	DWORD PTR _dir$[ebp+8]
	fstp	DWORD PTR _dir$[ebp+8]
	fld	DWORD PTR _dir$[ebp]
	fld	DWORD PTR _spd$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T92332[ebp]
	fld	DWORD PTR _dir$[ebp+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T92332[ebp+4]
	fmul	DWORD PTR _dir$[ebp+8]
	fstp	DWORD PTR $T92332[ebp+8]
	fld	DWORD PTR _var$[ebp]
	fchs
	fstp	DWORD PTR [esp]
	call	?randfloat@@YAMMM@Z			; randfloat
	fadd	QWORD PTR __real@3ff0000000000000
	add	esp, 8
	fstp	DWORD PTR $T92475[ebp]
	fld	DWORD PTR $T92332[ebp]
	fld	DWORD PTR $T92475[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T92333[ebp]
	fld	DWORD PTR $T92332[ebp+4]
	mov	edx, DWORD PTR $T92333[ebp]
	fmul	ST(0), ST(1)
	mov	DWORD PTR [esi+12], edx
; Line 519
	mov	edx, DWORD PTR _time$[ebp]
	push	edx
	fstp	DWORD PTR $T92333[ebp+4]
	mov	eax, DWORD PTR $T92333[ebp+4]
	fmul	DWORD PTR $T92332[ebp+8]
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR _anim$[ebp]
	push	eax
	fstp	DWORD PTR $T92333[ebp+8]
	mov	ecx, DWORD PTR $T92333[ebp+8]
	mov	DWORD PTR [esi+20], ecx
	mov	DWORD PTR [esi+52], edi
	mov	ecx, DWORD PTR [ebx+4]
	add	ecx, 480				; 000001e0H
	call	?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z ; Animated<float,float,Identity<float> >::getValue
	fstp	DWORD PTR [esi+56]
; Line 521
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [esi+36], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi+40], edx
	mov	eax, DWORD PTR [esi+8]
; Line 523
	mov	ebx, DWORD PTR [ebx+4]
	mov	DWORD PTR [esi+44], eax
	mov	ecx, DWORD PTR [ebx+1088]
	imul	ecx, DWORD PTR [ebx+1084]
	dec	ecx
	push	ecx
	push	edi
	call	?randint@@YAHHH@Z			; randint
	add	esp, 8
	mov	DWORD PTR [esi+60], eax
	pop	edi
; Line 524
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 525
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?newParticle@PlaneParticleEmitter@@UAE?AUParticle@@HH@Z ENDP ; PlaneParticleEmitter::newParticle
_TEXT	ENDS
PUBLIC	__real@00000000
;	COMDAT __real@00000000
; File c:\programovani\wow editor\test\src\editor\vec3d.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtp
CONST	ENDS
_TEXT	SEGMENT
$T92495 = -44						; size = 12
$T92492 = -44						; size = 12
$T92490 = -44						; size = 12
$T92489 = -44						; size = 12
$T92493 = -32						; size = 12
_dir$75615 = -32					; size = 12
_bdir$ = -32						; size = 12
_spd$ = -20						; size = 4
_w$ = -16						; size = 4
_l$ = -12						; size = 4
tv1466 = -8						; size = 4
_var$ = -4						; size = 4
tv1513 = 8						; size = 4
tv1458 = 8						; size = 4
tv1423 = 8						; size = 4
tv1403 = 8						; size = 4
tv1396 = 8						; size = 4
$T92639 = 8						; size = 4
$T92674 = 8						; size = 4
$T92598 = 8						; size = 4
_t$ = 8							; size = 4
___$ReturnUdt$ = 8					; size = 4
_anim$ = 12						; size = 4
_time$ = 16						; size = 4
?newParticle@SphereParticleEmitter@@UAE?AUParticle@@HH@Z PROC ; SphereParticleEmitter::newParticle
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\particle.cpp
; Line 528
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
; Line 530
	mov	edx, DWORD PTR _anim$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	edi
	xor	edi, edi
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [esi+4], edi
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+16], edi
	mov	DWORD PTR [esi+20], edi
	mov	ebx, ecx
	mov	ecx, DWORD PTR _time$[ebp]
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR [esi+24], edi
	mov	DWORD PTR [esi+28], edi
	mov	DWORD PTR [esi+32], edi
	mov	DWORD PTR [esi+36], edi
	mov	DWORD PTR [esi+40], edi
	mov	DWORD PTR [esi+44], edi
	push	ecx
	push	edx
	lea	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [esi+64], edi
	mov	DWORD PTR [esi+68], edi
	mov	DWORD PTR [esi+72], edi
	mov	DWORD PTR [esi+76], edi
	call	?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z ; Animated<float,float,Identity<float> >::getValue
	fstp	DWORD PTR _l$[ebp]
; Line 531
	mov	eax, DWORD PTR _time$[ebp]
	mov	ecx, DWORD PTR _anim$[ebp]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR [ebx+4]
	lea	ecx, DWORD PTR [ecx+768]
	call	?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z ; Animated<float,float,Identity<float> >::getValue
	fstp	DWORD PTR _w$[ebp]
; Line 532
	mov	edx, DWORD PTR _time$[ebp]
	mov	eax, DWORD PTR _anim$[ebp]
	mov	ecx, DWORD PTR [ebx+4]
	push	edx
	push	eax
	call	?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z ; Animated<float,float,Identity<float> >::getValue
	fstp	DWORD PTR _spd$[ebp]
; Line 533
	mov	ecx, DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR _anim$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [ebx+4]
	push	edx
	lea	ecx, DWORD PTR [ecx+96]
	call	?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z ; Animated<float,float,Identity<float> >::getValue
	fstp	DWORD PTR _var$[ebp]
; Line 535
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1086918619		; 40c90fdbH
	mov	DWORD PTR [esp], edi
	call	?randfloat@@YAMMM@Z			; randfloat
	fstp	DWORD PTR _t$[ebp]
; Line 540
	fld	DWORD PTR _t$[ebp]
	add	esp, 8
	call	__CIcos
	fstp	DWORD PTR tv1466[ebp]
	fld	DWORD PTR tv1466[ebp]
	fmul	DWORD PTR _l$[ebp]
	fstp	DWORD PTR _bdir$[ebp+4]
	fld	DWORD PTR _t$[ebp]
	call	__CIsin
	fstp	DWORD PTR tv1458[ebp]
	fld	DWORD PTR tv1458[ebp]
; Line 552
	mov	eax, DWORD PTR [ebx+4]
	fmul	DWORD PTR _w$[ebp]
	fstp	DWORD PTR _bdir$[ebp+8]
	fld	DWORD PTR [eax+1032]
	fldz
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T92489[ebp]
	fld	DWORD PTR [eax+1036]
	fld	DWORD PTR _bdir$[ebp+4]
	fld	ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T92489[ebp+4]
	fld	DWORD PTR [eax+1040]
	mov	eax, DWORD PTR $T92489[ebp]
	fadd	DWORD PTR _bdir$[ebp+8]
	mov	ecx, DWORD PTR $T92489[ebp+4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	fstp	DWORD PTR $T92489[ebp+8]
	mov	edx, DWORD PTR $T92489[ebp+8]
	mov	DWORD PTR [esi+8], edx
; Line 553
	mov	eax, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [eax+1116]
	fld	DWORD PTR [eax+312]
	fld	DWORD PTR $T92489[ebp+4]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fld	DWORD PTR [eax+308]
	fld	DWORD PTR $T92489[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(3)
	faddp	ST(1), ST(0)
	fld	DWORD PTR [eax+316]
	fld	DWORD PTR $T92489[ebp+8]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+320]
	fstp	DWORD PTR $T92490[ebp]
	fld	DWORD PTR [eax+328]
	mov	ecx, DWORD PTR $T92490[ebp]
	fmul	ST(0), ST(2)
	fld	DWORD PTR [eax+324]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	DWORD PTR [eax+332]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+336]
	fstp	DWORD PTR $T92490[ebp+4]
	fld	DWORD PTR [eax+344]
	mov	edx, DWORD PTR $T92490[ebp+4]
	fmulp	ST(2), ST(0)
	fld	DWORD PTR [eax+340]
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	DWORD PTR [eax+348]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+352]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
	fstp	DWORD PTR $T92490[ebp+8]
; Line 555
	fld	DWORD PTR _bdir$[ebp+8]
	mov	eax, DWORD PTR $T92490[ebp+8]
	fld	ST(1)
	mov	DWORD PTR [esi+8], eax
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmul	ST(0), ST(3)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv1513[ebp]
	fld	DWORD PTR tv1513[ebp]
	fld	ST(0)
	fldz
	fucompp
	fnstsw	ax
	fld1
	test	ah, 68					; 00000044H
	jp	SHORT $LN86@newParticl
	fstp	ST(1)
; Line 556
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+16], edi
	mov	DWORD PTR [esi+20], edi
; Line 557
	jmp	$LN73@newParticl
$LN86@newParticl:
; Line 555
	fstp	ST(2)
	fstp	ST(1)
; Line 559
	call	__CIsqrt
	fstp	DWORD PTR tv1423[ebp]
	fld	DWORD PTR tv1423[ebp]
	mov	ecx, DWORD PTR [ebx+4]
	fld1
	mov	eax, DWORD PTR [ecx+1116]
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR $T92598[ebp]
	fld	DWORD PTR $T92598[ebp]
	fld	QWORD PTR __real@0000000000000000
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _bdir$[ebp]
	fld	DWORD PTR _bdir$[ebp+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _bdir$[ebp+4]
	fmul	DWORD PTR _bdir$[ebp+8]
	fstp	DWORD PTR _bdir$[ebp+8]
	fld	DWORD PTR [eax+376]
	fld	DWORD PTR _bdir$[ebp+4]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fld	DWORD PTR [eax+372]
	fld	DWORD PTR _bdir$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(3)
	faddp	ST(1), ST(0)
	fld	DWORD PTR [eax+380]
	fld	DWORD PTR _bdir$[ebp+8]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+384]
	fstp	DWORD PTR _dir$75615[ebp]
	fld	DWORD PTR [eax+392]
	fmul	ST(0), ST(2)
	fld	DWORD PTR [eax+388]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	DWORD PTR [eax+396]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+400]
	fstp	DWORD PTR _dir$75615[ebp+4]
	fld	DWORD PTR [eax+408]
	fmulp	ST(2), ST(0)
	fld	DWORD PTR [eax+404]
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	DWORD PTR [eax+412]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+416]
	fstp	DWORD PTR _dir$75615[ebp+8]
	fld	DWORD PTR _dir$75615[ebp+4]
; Line 560
	fld	DWORD PTR _dir$75615[ebp]
	fld	DWORD PTR _dir$75615[ebp+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv1403[ebp]
	fld	DWORD PTR tv1403[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv1396[ebp]
	fld	DWORD PTR tv1396[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR $T92639[ebp]
	fld	DWORD PTR $T92639[ebp]
	fld	ST(0)
	fmul	DWORD PTR _dir$75615[ebp]
	fstp	DWORD PTR _dir$75615[ebp]
	fld	DWORD PTR _dir$75615[ebp+4]
	fmul	ST(0), ST(1)
	mov	edx, DWORD PTR _var$[ebp]
	sub	esp, 8
	mov	DWORD PTR [esp+4], edx
	fstp	DWORD PTR _dir$75615[ebp+4]
	fmul	DWORD PTR _dir$75615[ebp+8]
	fstp	DWORD PTR _dir$75615[ebp+8]
	fld	DWORD PTR _dir$75615[ebp]
	fld	DWORD PTR _spd$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T92492[ebp]
	fld	DWORD PTR _dir$75615[ebp+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T92492[ebp+4]
	fmul	DWORD PTR _dir$75615[ebp+8]
	fstp	DWORD PTR $T92492[ebp+8]
	fld	DWORD PTR _var$[ebp]
	fchs
	fstp	DWORD PTR [esp]
	call	?randfloat@@YAMMM@Z			; randfloat
	fld1
	add	esp, 8
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T92674[ebp]
	fld	DWORD PTR $T92492[ebp]
	fld	DWORD PTR $T92674[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T92493[ebp]
	fld	DWORD PTR $T92492[ebp+4]
	mov	eax, DWORD PTR $T92493[ebp]
	fmul	ST(0), ST(1)
	mov	DWORD PTR [esi+12], eax
	fstp	DWORD PTR $T92493[ebp+4]
	mov	ecx, DWORD PTR $T92493[ebp+4]
	fmul	DWORD PTR $T92492[ebp+8]
	mov	DWORD PTR [esi+16], ecx
	fstp	DWORD PTR $T92493[ebp+8]
	mov	edx, DWORD PTR $T92493[ebp+8]
	fldz
	mov	DWORD PTR [esi+20], edx
	fxch	ST(1)
$LN73@newParticl:
; Line 563
	mov	eax, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [eax+1116]
	fld	DWORD PTR [eax+372]
	fmul	ST(0), ST(2)
	fld	DWORD PTR [eax+376]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fld	DWORD PTR [eax+380]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+384]
	fstp	DWORD PTR $T92495[ebp]
	fld	DWORD PTR [eax+388]
	mov	ecx, DWORD PTR $T92495[ebp]
	fmul	ST(0), ST(2)
	fld	DWORD PTR [eax+392]
	fmul	ST(0), ST(2)
	fsubp	ST(1), ST(0)
	fld	DWORD PTR [eax+396]
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+400]
	fstp	DWORD PTR $T92495[ebp+4]
	fld	DWORD PTR [eax+404]
	mov	edx, DWORD PTR $T92495[ebp+4]
	fmul	ST(0), ST(2)
	fld	DWORD PTR [eax+408]
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fld	DWORD PTR [eax+412]
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+416]
	mov	DWORD PTR [esi+24], ecx
; Line 566
	mov	ecx, DWORD PTR _time$[ebp]
	mov	DWORD PTR [esi+28], edx
	mov	edx, DWORD PTR _anim$[ebp]
	fstp	DWORD PTR $T92495[ebp+8]
	mov	eax, DWORD PTR $T92495[ebp+8]
	push	ecx
	mov	DWORD PTR [esi+32], eax
	mov	DWORD PTR [esi+52], edi
	mov	ecx, DWORD PTR [ebx+4]
	push	edx
	add	ecx, 480				; 000001e0H
	call	?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z ; Animated<float,float,Identity<float> >::getValue
	fstp	DWORD PTR [esi+56]
; Line 568
	mov	eax, DWORD PTR [esi]
; Line 570
	mov	ebx, DWORD PTR [ebx+4]
	mov	DWORD PTR [esi+36], eax
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi+40], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+44], edx
	mov	eax, DWORD PTR [ebx+1088]
	imul	eax, DWORD PTR [ebx+1084]
	dec	eax
	push	eax
	push	edi
	call	?randint@@YAHHH@Z			; randint
	add	esp, 8
	mov	DWORD PTR [esi+60], eax
	pop	edi
; Line 571
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 572
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?newParticle@SphereParticleEmitter@@UAE?AUParticle@@HH@Z ENDP ; SphereParticleEmitter::newParticle
_TEXT	ENDS
PUBLIC	?begin@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@XZ ; std::list<Particle,std::allocator<Particle> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@XZ PROC ; std::list<Particle,std::allocator<Particle> >::begin, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 781
	push	ebp
	mov	ebp, esp
; Line 782
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 783
	pop	ebp
	ret	4
?begin@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@XZ ENDP ; std::list<Particle,std::allocator<Particle> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@XZ ; std::list<Particle,std::allocator<Particle> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@XZ PROC ; std::list<Particle,std::allocator<Particle> >::end, COMDAT
; _this$ = ecx
; Line 791
	push	ebp
	mov	ebp, esp
; Line 792
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 793
	pop	ebp
	ret	4
?end@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@XZ ENDP ; std::list<Particle,std::allocator<Particle> >::end
_TEXT	ENDS
PUBLIC	?begin@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@XZ ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@XZ PROC ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::begin, COMDAT
; _this$ = ecx
; Line 781
	push	ebp
	mov	ebp, esp
; Line 782
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 783
	pop	ebp
	ret	4
?begin@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@XZ ENDP ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@XZ ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@XZ PROC ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::end, COMDAT
; _this$ = ecx
; Line 791
	push	ebp
	mov	ebp, esp
; Line 792
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 793
	pop	ebp
	ret	4
?end@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@XZ ENDP ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@@Z ; std::list<Particle,std::allocator<Particle> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@@Z PROC ; std::list<Particle,std::allocator<Particle> >::_Make_iter, COMDAT
; _this$ = ecx
; Line 801
	push	ebp
	mov	ebp, esp
; Line 802
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 803
	pop	ebp
	ret	8
?_Make_iter@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@@Z ENDP ; std::list<Particle,std::allocator<Particle> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@@Z ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@@Z PROC ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::_Make_iter, COMDAT
; _this$ = ecx
; Line 801
	push	ebp
	mov	ebp, esp
; Line 802
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 803
	pop	ebp
	ret	8
?_Make_iter@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@@Z ENDP ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Buynode@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@PAU342@0ABUParticle@@@Z ; std::_List_val<Particle,std::allocator<Particle> >::_Buynode
; Function compile flags: /Ogtp
;	COMDAT ?_Buynode@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@PAU342@0ABUParticle@@@Z
_TEXT	SEGMENT
$T92909 = -12						; size = 12
$T92886 = 8						; size = 4
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@PAU342@0ABUParticle@@@Z PROC ; std::_List_val<Particle,std::allocator<Particle> >::_Buynode, COMDAT
; _this$ = ecx
; Line 507
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
; Line 508
	push	88					; 00000058H
	call	??2@YAPAXI@Z				; operator new
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	je	SHORT $LN10@Buynode
; Line 512
	mov	ecx, DWORD PTR __Prev$[ebp]
	mov	eax, DWORD PTR __Next$[ebp]
	mov	DWORD PTR [esi+4], ecx
; Line 513
	lea	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [esi], eax
	test	ecx, ecx
	je	SHORT $LN36@Buynode
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??0Particle@@QAE@ABU0@@Z
$LN36@Buynode:
; Line 519
	mov	eax, esi
	pop	esi
; Line 520
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
; Line 508
$LN10@Buynode:
	lea	eax, DWORD PTR $T92886[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92909[ebp]
	mov	DWORD PTR $T92886[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T92909[ebp]
	push	ecx
	mov	DWORD PTR $T92909[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN47@Buynode:
$LN46@Buynode:
	int	3
?_Buynode@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@PAU342@0ABUParticle@@@Z ENDP ; std::_List_val<Particle,std::allocator<Particle> >::_Buynode
_TEXT	ENDS
PUBLIC	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
; Function compile flags: /Ogtp
;	COMDAT ?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z PROC ; std::vector<int,std::allocator<int> >::reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 746
	push	ebp
	mov	ebp, esp
; Line 747
	mov	eax, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, ecx
	cmp	eax, 1073741823				; 3fffffffH
	jbe	SHORT $LN5@reserve
; Line 748
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN43@reserve:
$LN5@reserve:
; Line 749
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2
	cmp	ecx, eax
	jae	SHORT $LN3@reserve
; Line 751
	push	ebx
	push	edi
	push	eax
	lea	ecx, DWORD PTR [esi+12]
	call	?allocate@?$allocator@H@std@@QAEPAHI@Z	; std::allocator<int>::allocate
; Line 754
	mov	edx, DWORD PTR [esi+4]
	mov	ebx, eax
	mov	eax, DWORD PTR [esi]
	sub	edx, eax
	sar	edx, 2
	add	edx, edx
	add	edx, edx
	push	edx
	push	eax
	push	ebx
	call	DWORD PTR __imp__memmove
; Line 760
	mov	eax, DWORD PTR [esi]
	mov	edi, DWORD PTR [esi+4]
	sub	edi, eax
	add	esp, 12					; 0000000cH
	sar	edi, 2
; Line 761
	test	eax, eax
	je	SHORT $LN37@reserve
; Line 765
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN37@reserve:
; Line 769
	mov	eax, DWORD PTR __Count$[ebp]
; Line 770
	lea	edx, DWORD PTR [ebx+edi*4]
	lea	ecx, DWORD PTR [ebx+eax*4]
	pop	edi
; Line 771
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [esi+8], ecx
	mov	DWORD PTR [esi+4], edx
	pop	ebx
$LN3@reserve:
	pop	esi
; Line 773
	pop	ebp
	ret	4
$LN42@reserve:
?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::reserve
_TEXT	ENDS
PUBLIC	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
; Function compile flags: /Ogtp
;	COMDAT ?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z PROC ; std::vector<float,std::allocator<float> >::reserve, COMDAT
; _this$ = ecx
; Line 746
	push	ebp
	mov	ebp, esp
; Line 747
	mov	eax, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, ecx
	cmp	eax, 1073741823				; 3fffffffH
	jbe	SHORT $LN5@reserve@2
; Line 748
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN43@reserve@2:
$LN5@reserve@2:
; Line 749
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2
	cmp	ecx, eax
	jae	SHORT $LN3@reserve@2
; Line 751
	push	ebx
	push	edi
	push	eax
	lea	ecx, DWORD PTR [esi+12]
	call	?allocate@?$allocator@M@std@@QAEPAMI@Z	; std::allocator<float>::allocate
; Line 754
	mov	edx, DWORD PTR [esi+4]
	mov	ebx, eax
	mov	eax, DWORD PTR [esi]
	sub	edx, eax
	sar	edx, 2
	add	edx, edx
	add	edx, edx
	push	edx
	push	eax
	push	ebx
	call	DWORD PTR __imp__memmove
; Line 760
	mov	eax, DWORD PTR [esi]
	mov	edi, DWORD PTR [esi+4]
	sub	edi, eax
	add	esp, 12					; 0000000cH
	sar	edi, 2
; Line 761
	test	eax, eax
	je	SHORT $LN37@reserve@2
; Line 765
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN37@reserve@2:
; Line 769
	mov	eax, DWORD PTR __Count$[ebp]
; Line 770
	lea	edx, DWORD PTR [ebx+edi*4]
	lea	ecx, DWORD PTR [ebx+eax*4]
	pop	edi
; Line 771
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [esi+8], ecx
	mov	DWORD PTR [esi+4], edx
	pop	ebx
$LN3@reserve@2:
	pop	esi
; Line 773
	pop	ebp
	ret	4
$LN42@reserve@2:
?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ENDP ; std::vector<float,std::allocator<float> >::reserve
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UTexCoordSet@@@std@@UTexCoordSet@@AAU3@@std@@YAXAAV?$allocator@UTexCoordSet@@@0@PAUTexCoordSet@@AAU2@@Z ; std::_Cons_val<std::allocator<TexCoordSet>,TexCoordSet,TexCoordSet &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UTexCoordSet@@@std@@UTexCoordSet@@AAU3@@std@@YAXAAV?$allocator@UTexCoordSet@@@0@PAUTexCoordSet@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UTexCoordSet@@@std@@UTexCoordSet@@AAU3@@std@@YAXAAV?$allocator@UTexCoordSet@@@0@PAUTexCoordSet@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<TexCoordSet>,TexCoordSet,TexCoordSet &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Pdest$[ebp]
	test	eax, eax
	je	SHORT $LN23@Cons_val@10
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], ecx
$LN23@Cons_val@10:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@UTexCoordSet@@@std@@UTexCoordSet@@AAU3@@std@@YAXAAV?$allocator@UTexCoordSet@@@0@PAUTexCoordSet@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<TexCoordSet>,TexCoordSet,TexCoordSet &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@URibbonSegment@@@std@@URibbonSegment@@ABU3@@std@@YAXAAV?$allocator@URibbonSegment@@@0@PAURibbonSegment@@ABU2@@Z ; std::_Cons_val<std::allocator<RibbonSegment>,RibbonSegment,RibbonSegment const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@URibbonSegment@@@std@@URibbonSegment@@ABU3@@std@@YAXAAV?$allocator@URibbonSegment@@@0@PAURibbonSegment@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@URibbonSegment@@@std@@URibbonSegment@@ABU3@@std@@YAXAAV?$allocator@URibbonSegment@@@0@PAURibbonSegment@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<RibbonSegment>,RibbonSegment,RibbonSegment const &>, COMDAT
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Pdest$[ebp]
	test	eax, eax
	je	SHORT $LN9@Cons_val@11
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], ecx
$LN9@Cons_val@11:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@URibbonSegment@@@std@@URibbonSegment@@ABU3@@std@@YAXAAV?$allocator@URibbonSegment@@@0@PAURibbonSegment@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<RibbonSegment>,RibbonSegment,RibbonSegment const &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@2@ABU32@@Z ; std::allocator<std::pair<unsigned int,unsigned int> >::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@2@ABU32@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@2@ABU32@@Z PROC ; std::allocator<std::pair<unsigned int,unsigned int> >::construct, COMDAT
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
; Line 197
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN5@construct@12
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN5@construct@12:
; Line 198
	pop	ebp
	ret	8
?construct@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@2@ABU32@@Z ENDP ; std::allocator<std::pair<unsigned int,unsigned int> >::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@ABU3@@Z ; std::allocator<TexCoordSet>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@ABU3@@Z PROC ; std::allocator<TexCoordSet>::construct, COMDAT
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
; Line 197
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN21@construct@13
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], ecx
$LN21@construct@13:
; Line 198
	pop	ebp
	ret	8
?construct@?$allocator@UTexCoordSet@@@std@@QAEXPAUTexCoordSet@@ABU3@@Z ENDP ; std::allocator<TexCoordSet>::construct
_TEXT	ENDS
PUBLIC	??$construct@AAU?$pair@II@std@@@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@1@AAU21@@Z ; std::allocator<std::pair<unsigned int,unsigned int> >::construct<std::pair<unsigned int,unsigned int> &>
; Function compile flags: /Ogtp
;	COMDAT ??$construct@AAU?$pair@II@std@@@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@1@AAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAU?$pair@II@std@@@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@1@AAU21@@Z PROC ; std::allocator<std::pair<unsigned int,unsigned int> >::construct<std::pair<unsigned int,unsigned int> &>, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
; Line 208
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN3@construct@14
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN3@construct@14:
; Line 209
	pop	ebp
	ret	8
??$construct@AAU?$pair@II@std@@@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@1@AAU21@@Z ENDP ; std::allocator<std::pair<unsigned int,unsigned int> >::construct<std::pair<unsigned int,unsigned int> &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@U?$pair@II@std@@@std@@@std@@YAXPAU?$pair@II@0@0AAV?$allocator@U?$pair@II@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::pair<unsigned int,unsigned int> > >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@U?$pair@II@std@@@std@@@std@@YAXPAU?$pair@II@0@0AAV?$allocator@U?$pair@II@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@U?$pair@II@std@@@std@@@std@@YAXPAU?$pair@II@0@0AAV?$allocator@U?$pair@II@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<std::pair<unsigned int,unsigned int> > >, COMDAT
; Line 98
	ret	0
??$_Destroy_range@V?$allocator@U?$pair@II@std@@@std@@@std@@YAXPAU?$pair@II@0@0AAV?$allocator@U?$pair@II@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::pair<unsigned int,unsigned int> > >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VVec3D@@@std@@@std@@YAXPAVVec3D@@0AAV?$allocator@VVec3D@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Vec3D> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@VVec3D@@@std@@@std@@YAXPAVVec3D@@0AAV?$allocator@VVec3D@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@VVec3D@@@std@@@std@@YAXPAVVec3D@@0AAV?$allocator@VVec3D@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Vec3D> >, COMDAT
; Line 98
	ret	0
??$_Destroy_range@V?$allocator@VVec3D@@@std@@@std@@YAXPAVVec3D@@0AAV?$allocator@VVec3D@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Vec3D> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UTexCoordSet@@@std@@@std@@YAXPAUTexCoordSet@@0AAV?$allocator@UTexCoordSet@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<TexCoordSet> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@UTexCoordSet@@@std@@@std@@YAXPAUTexCoordSet@@0AAV?$allocator@UTexCoordSet@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UTexCoordSet@@@std@@@std@@YAXPAUTexCoordSet@@0AAV?$allocator@UTexCoordSet@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<TexCoordSet> >, COMDAT
; Line 98
	ret	0
??$_Destroy_range@V?$allocator@UTexCoordSet@@@std@@@std@@YAXPAUTexCoordSet@@0AAV?$allocator@UTexCoordSet@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<TexCoordSet> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUTexCoordSet@@PAU1@V?$allocator@UTexCoordSet@@@std@@U1@@std@@YAPAUTexCoordSet@@PAU1@00AAV?$allocator@UTexCoordSet@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<TexCoordSet *,TexCoordSet *,std::allocator<TexCoordSet>,TexCoordSet>
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninit_move@PAUTexCoordSet@@PAU1@V?$allocator@UTexCoordSet@@@std@@U1@@std@@YAPAUTexCoordSet@@PAU1@00AAV?$allocator@UTexCoordSet@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUTexCoordSet@@PAU1@V?$allocator@UTexCoordSet@@@std@@U1@@std@@YAPAUTexCoordSet@@PAU1@00AAV?$allocator@UTexCoordSet@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<TexCoordSet *,TexCoordSet *,std::allocator<TexCoordSet>,TexCoordSet>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
; Line 424
	push	ebp
	mov	ebp, esp
; Line 430
	mov	eax, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR __Last$[ebp]
	cmp	eax, edx
	je	SHORT $LN44@Uninit_mov
	lea	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR __Dest$[ebp]
	push	esi
$LL6@Uninit_mov:
; Line 431
	test	eax, eax
	je	SHORT $LN39@Uninit_mov
	mov	esi, DWORD PTR [ecx-8]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx-4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+16], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+20], esi
	mov	esi, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+24], esi
	mov	esi, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+28], esi
$LN39@Uninit_mov:
; Line 430
	add	ecx, 32					; 00000020H
	lea	esi, DWORD PTR [ecx-8]
	add	eax, 32					; 00000020H
	cmp	esi, edx
	jne	SHORT $LL6@Uninit_mov
	pop	esi
; Line 438
	pop	ebp
	ret	0
$LN44@Uninit_mov:
; Line 437
	mov	eax, DWORD PTR __Dest$[ebp]
; Line 438
	pop	ebp
	ret	0
??$_Uninit_move@PAUTexCoordSet@@PAU1@V?$allocator@UTexCoordSet@@@std@@U1@@std@@YAPAUTexCoordSet@@PAU1@00AAV?$allocator@UTexCoordSet@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<TexCoordSet *,TexCoordSet *,std::allocator<TexCoordSet>,TexCoordSet>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAVVec3D@@PAV1@V?$allocator@VVec3D@@@std@@V1@@std@@YAPAVVec3D@@PAV1@00AAV?$allocator@VVec3D@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<Vec3D *,Vec3D *,std::allocator<Vec3D>,Vec3D>
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninit_move@PAVVec3D@@PAV1@V?$allocator@VVec3D@@@std@@V1@@std@@YAPAVVec3D@@PAV1@00AAV?$allocator@VVec3D@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVVec3D@@PAV1@V?$allocator@VVec3D@@@std@@V1@@std@@YAPAVVec3D@@PAV1@00AAV?$allocator@VVec3D@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<Vec3D *,Vec3D *,std::allocator<Vec3D>,Vec3D>, COMDAT
; Line 424
	push	ebp
	mov	ebp, esp
; Line 430
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	cmp	ecx, edx
	je	SHORT $LN4@Uninit_mov@2
	push	esi
$LL6@Uninit_mov@2:
; Line 431
	test	eax, eax
	je	SHORT $LN20@Uninit_mov@2
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
$LN20@Uninit_mov@2:
; Line 430
	add	ecx, 12					; 0000000cH
	add	eax, 12					; 0000000cH
	cmp	ecx, edx
	jne	SHORT $LL6@Uninit_mov@2
	pop	esi
$LN4@Uninit_mov@2:
; Line 438
	pop	ebp
	ret	0
??$_Uninit_move@PAVVec3D@@PAV1@V?$allocator@VVec3D@@@std@@V1@@std@@YAPAVVec3D@@PAV1@00AAV?$allocator@VVec3D@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Vec3D *,Vec3D *,std::allocator<Vec3D>,Vec3D>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@2@$$QAU32@@Z ; std::allocator<std::pair<unsigned int,unsigned int> >::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@2@$$QAU32@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@2@$$QAU32@@Z PROC ; std::allocator<std::pair<unsigned int,unsigned int> >::construct, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 201
	push	ebp
	mov	ebp, esp
; Line 202
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN3@construct@15
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN3@construct@15:
; Line 203
	pop	ebp
	ret	8
?construct@?$allocator@U?$pair@II@std@@@std@@QAEXPAU?$pair@II@2@$$QAU32@@Z ENDP ; std::allocator<std::pair<unsigned int,unsigned int> >::construct
_TEXT	ENDS
PUBLIC	__real@bfe6a09e60000000
PUBLIC	__real@3fe6a09e60000000
PUBLIC	__$ArrayPad$
PUBLIC	?draw@ParticleSystem@@QAEXXZ			; ParticleSystem::draw
EXTRN	__imp__glPopName@0:PROC
EXTRN	__imp__glColor4f@16:PROC
EXTRN	__imp__glEnd@0:PROC
EXTRN	__imp__glVertex3fv@4:PROC
EXTRN	__imp__glColor4fv@4:PROC
EXTRN	__imp__glTexCoord2fv@4:PROC
EXTRN	__imp__glBegin@4:PROC
EXTRN	__imp__glGetFloatv@8:PROC
EXTRN	__imp__glBindTexture@8:PROC
EXTRN	__imp__glPushName@4:PROC
EXTRN	__imp__glDepthMask@4:PROC
EXTRN	__imp__glBlendFunc@8:PROC
EXTRN	__imp__glEnable@4:PROC
EXTRN	__imp__glDisable@4:PROC
;	COMDAT __real@bfe6a09e60000000
; File c:\programovani\wow editor\test\src\editor\vec3d.h
CONST	SEGMENT
__real@bfe6a09e60000000 DQ 0bfe6a09e60000000r	; -0.707107
CONST	ENDS
;	COMDAT __real@3fe6a09e60000000
CONST	SEGMENT
__real@3fe6a09e60000000 DQ 03fe6a09e60000000r	; 0.707107
; Function compile flags: /Ogtp
CONST	ENDS
_TEXT	SEGMENT
$T93685 = -376						; size = 12
$T93691 = -364						; size = 12
$T93689 = -364						; size = 12
$T93687 = -364						; size = 12
$T93698 = -352						; size = 12
$T93683 = -352						; size = 12
$T93700 = -340						; size = 12
$T93681 = -340						; size = 12
$T93696 = -328						; size = 12
$T93684 = -328						; size = 12
tv4452 = -316						; size = 8
tv4136 = -316						; size = 8
$T95036 = -312						; size = 4
$T94354 = -312						; size = 4
tv4435 = -308						; size = 8
tv4145 = -308						; size = 8
$T94928 = -304						; size = 4
$T94462 = -304						; size = 4
$T93699 = -300						; size = 12
$T93682 = -300						; size = 12
tv4525 = -296						; size = 8
tv4437 = -296						; size = 8
tv4151 = -296						; size = 8
$T93694 = -288						; size = 12
$T93690 = -288						; size = 12
$T93688 = -288						; size = 12
$T93686 = -288						; size = 12
$T93672 = -276						; size = 12
$T93663 = -276						; size = 12
tv4446 = -272						; size = 8
tv4131 = -272						; size = 8
$T95145 = -268						; size = 4
$T94246 = -268						; size = 4
$T93697 = -264						; size = 12
$T93680 = -264						; size = 12
$T93674 = -264						; size = 12
tv4513 = -260						; size = 8
tv4431 = -260						; size = 8
tv4160 = -260						; size = 8
$T93693 = -252						; size = 12
$T93670 = -252						; size = 12
$T93668 = -252						; size = 12
_camera$75425 = -252					; size = 12
_bv2$ = -252						; size = 12
$T93695 = -240						; size = 12
$T93665 = -240						; size = 12
_bv3$ = -240						; size = 12
tv4482 = -236						; size = 8
tv4422 = -236						; size = 8
tv4166 = -236						; size = 8
$T93661 = -228						; size = 12
_bv0$ = -228						; size = 12
tv4450 = -216						; size = 8
tv4299 = -212						; size = 4
tv4292 = -212						; size = 4
tv4271 = -212						; size = 4
tv4264 = -212						; size = 4
tv4246 = -212						; size = 4
tv4239 = -212						; size = 4
tv4221 = -212						; size = 4
tv4214 = -212						; size = 4
$T94820 = -212						; size = 4
$T94570 = -212						; size = 4
$T93953 = -212						; size = 4
$T93907 = -212						; size = 4
$T93861 = -212						; size = 4
$T93803 = -212						; size = 4
_invdet$93747 = -212					; size = 4
$T93666 = -208						; size = 12
$T93664 = -208						; size = 12
_bv1$ = -208						; size = 12
_adj$93746 = -196					; size = 64
_mtrans$75424 = -132					; size = 64
_mbb$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?draw@ParticleSystem@@QAEXXZ PROC			; ParticleSystem::draw
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\particle.cpp
; Line 188
	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
; Line 207
	mov	esi, DWORD PTR __imp__glDisable@4
	push	edi
	mov	edi, ecx
	mov	eax, DWORD PTR [edi+1064]
	cmp	eax, 4
	ja	$LN619@draw
	jmp	DWORD PTR $LN621@draw[eax*4]
$LN18@draw:
; Line 210
	push	3042					; 00000be2H
	call	esi
; Line 211
	push	3008					; 00000bc0H
	call	esi
; Line 212
	jmp	SHORT $LN619@draw
$LN17@draw:
; Line 214
	push	3042					; 00000be2H
	call	DWORD PTR __imp__glEnable@4
; Line 215
	push	1
	push	768					; 00000300H
	call	DWORD PTR __imp__glBlendFunc@8
; Line 216
	push	3008					; 00000bc0H
	call	esi
; Line 217
	jmp	SHORT $LN619@draw
$LN16@draw:
; Line 219
	push	3042					; 00000be2H
	call	DWORD PTR __imp__glEnable@4
; Line 220
	push	771					; 00000303H
	push	770					; 00000302H
	call	DWORD PTR __imp__glBlendFunc@8
; Line 221
	push	3008					; 00000bc0H
	call	esi
; Line 222
	jmp	SHORT $LN619@draw
$LN15@draw:
; Line 224
	push	3042					; 00000be2H
	call	esi
; Line 225
	push	3008					; 00000bc0H
	call	DWORD PTR __imp__glEnable@4
; Line 226
	jmp	SHORT $LN619@draw
$LN14@draw:
; Line 228
	push	3042					; 00000be2H
	call	DWORD PTR __imp__glEnable@4
; Line 229
	push	3008					; 00000bc0H
	call	esi
; Line 230
	push	1
	push	770					; 00000302H
	call	DWORD PTR __imp__glBlendFunc@8
$LN619@draw:
; Line 234
	push	2896					; 00000b50H
	call	esi
; Line 235
	push	2884					; 00000b44H
	call	esi
; Line 236
	xor	ebx, ebx
	push	ebx
	call	DWORD PTR __imp__glDepthMask@4
; Line 238
	mov	eax, DWORD PTR [edi+1044]
	push	eax
	call	DWORD PTR __imp__glPushName@4
; Line 239
	mov	ecx, DWORD PTR [edi+1044]
	push	ecx
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8
; Line 242
	xor	eax, eax
	mov	esi, 1065353216				; 3f800000H
	mov	DWORD PTR _mbb$[ebp], eax
	mov	DWORD PTR _mbb$[ebp+20], eax
	mov	DWORD PTR _mbb$[ebp+40], eax
	mov	DWORD PTR _mbb$[ebp+60], eax
	mov	DWORD PTR _mbb$[ebp+4], eax
	mov	DWORD PTR _mbb$[ebp+8], eax
	mov	DWORD PTR _mbb$[ebp+12], eax
	mov	DWORD PTR _mbb$[ebp+16], eax
	mov	DWORD PTR _mbb$[ebp+24], eax
	mov	DWORD PTR _mbb$[ebp+28], eax
	mov	DWORD PTR _mbb$[ebp+32], eax
	mov	DWORD PTR _mbb$[ebp+36], eax
	mov	DWORD PTR _mbb$[ebp+44], eax
	mov	DWORD PTR _mbb$[ebp+48], eax
	mov	DWORD PTR _mbb$[ebp+52], eax
	mov	DWORD PTR _mbb$[ebp+56], eax
	mov	DWORD PTR _mbb$[ebp+60], esi
	mov	DWORD PTR _mbb$[ebp+40], esi
	mov	DWORD PTR _mbb$[ebp+20], esi
	mov	DWORD PTR _mbb$[ebp], esi
; Line 244
	cmp	BYTE PTR [edi+1108], bl
	je	$LN13@draw
; Line 248
	lea	edx, DWORD PTR _mtrans$75424[ebp]
	push	edx
	push	2982					; 00000ba6H
	call	DWORD PTR __imp__glGetFloatv@8
; Line 249
	lea	ecx, DWORD PTR _mtrans$75424[ebp]
	call	?transpose@Matrix@@QAEXXZ		; Matrix::transpose
; Line 250
	lea	eax, DWORD PTR _adj$93746[ebp]
	push	eax
	lea	ecx, DWORD PTR _mtrans$75424[ebp]
	call	?adjoint@Matrix@@QBE?BV1@XZ		; Matrix::adjoint
	lea	ecx, DWORD PTR _mtrans$75424[ebp]
	call	?determinant@Matrix@@QBEMXZ		; Matrix::determinant
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _invdet$93747[ebp]
	fld	DWORD PTR _adj$93746[ebp]
	fld	DWORD PTR _invdet$93747[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR _mtrans$75424[ebp]
	fld	DWORD PTR _adj$93746[ebp+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75424[ebp+4]
	fld	DWORD PTR _adj$93746[ebp+8]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75424[ebp+8]
	fld	DWORD PTR _adj$93746[ebp+12]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75424[ebp+12]
	fld	DWORD PTR _adj$93746[ebp+16]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75424[ebp+16]
	fld	DWORD PTR _adj$93746[ebp+20]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75424[ebp+20]
	fld	DWORD PTR _adj$93746[ebp+24]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75424[ebp+24]
	fld	DWORD PTR _adj$93746[ebp+28]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75424[ebp+28]
	fld	DWORD PTR _adj$93746[ebp+32]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75424[ebp+32]
	fld	DWORD PTR _adj$93746[ebp+36]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75424[ebp+36]
	fld	DWORD PTR _adj$93746[ebp+40]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75424[ebp+40]
	fmul	DWORD PTR _adj$93746[ebp+44]
	fstp	DWORD PTR _mtrans$75424[ebp+44]
; Line 251
	fld	DWORD PTR _mtrans$75424[ebp]
	fldz
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv4131[ebp]
	fld	DWORD PTR _mtrans$75424[ebp+8]
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv4136[ebp]
	fld	DWORD PTR _mtrans$75424[ebp+4]
	fmul	ST(0), ST(3)
	faddp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _mtrans$75424[ebp+12]
	fstp	DWORD PTR _camera$75425[ebp]
	fld	DWORD PTR _mtrans$75424[ebp+16]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv4145[ebp]
	fld	DWORD PTR _mtrans$75424[ebp+24]
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv4151[ebp]
	fld	DWORD PTR _mtrans$75424[ebp+20]
	fmul	ST(0), ST(3)
	faddp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _mtrans$75424[ebp+28]
	fstp	DWORD PTR _camera$75425[ebp+4]
	fld	DWORD PTR _mtrans$75424[ebp+32]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv4160[ebp]
	fld	DWORD PTR _mtrans$75424[ebp+40]
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv4166[ebp]
	fld	DWORD PTR _mtrans$75424[ebp+36]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _mtrans$75424[ebp+44]
	fstp	DWORD PTR _camera$75425[ebp+8]
; Line 252
	fld	DWORD PTR _camera$75425[ebp]
	fsub	DWORD PTR [edi+1032]
	fstp	DWORD PTR $T93661[ebp]
	fld	DWORD PTR _camera$75425[ebp+4]
	fsub	DWORD PTR [edi+1036]
	fstp	DWORD PTR $T93661[ebp+4]
	fld	DWORD PTR _camera$75425[ebp+8]
	fsub	DWORD PTR [edi+1040]
	fstp	DWORD PTR $T93661[ebp+8]
	fld	DWORD PTR $T93661[ebp+4]
	fld	DWORD PTR $T93661[ebp]
	fld	DWORD PTR $T93661[ebp+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv4299[ebp]
	fld	DWORD PTR tv4299[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv4292[ebp]
	fld	DWORD PTR tv4292[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR $T93803[ebp]
	fld	DWORD PTR $T93803[ebp]
	fld	ST(0)
	fmul	DWORD PTR $T93661[ebp]
	fstp	DWORD PTR $T93661[ebp]
	fld	ST(0)
	fmul	DWORD PTR $T93661[ebp+4]
	fstp	DWORD PTR $T93661[ebp+4]
	fmul	DWORD PTR $T93661[ebp+8]
	fstp	DWORD PTR $T93661[ebp+8]
; Line 253
	fld	DWORD PTR _mtrans$75424[ebp+4]
	fadd	QWORD PTR tv4131[ebp]
	fadd	QWORD PTR tv4136[ebp]
	fadd	DWORD PTR _mtrans$75424[ebp+12]
	fstp	DWORD PTR $T93663[ebp]
	fld	DWORD PTR _mtrans$75424[ebp+20]
	fadd	QWORD PTR tv4145[ebp]
	fadd	QWORD PTR tv4151[ebp]
	fadd	DWORD PTR _mtrans$75424[ebp+28]
	fstp	DWORD PTR $T93663[ebp+4]
	fld	DWORD PTR _mtrans$75424[ebp+36]
	fadd	QWORD PTR tv4160[ebp]
	fadd	QWORD PTR tv4166[ebp]
	fadd	DWORD PTR _mtrans$75424[ebp+44]
	fstp	DWORD PTR $T93663[ebp+8]
	fld	DWORD PTR $T93663[ebp]
	fsub	DWORD PTR _camera$75425[ebp]
	fstp	DWORD PTR $T93664[ebp]
	fld	DWORD PTR $T93663[ebp+4]
	fsub	DWORD PTR _camera$75425[ebp+4]
	fstp	DWORD PTR $T93664[ebp+4]
	fld	DWORD PTR $T93663[ebp+8]
	fsub	DWORD PTR _camera$75425[ebp+8]
	fstp	DWORD PTR $T93664[ebp+8]
	fld	DWORD PTR $T93664[ebp+4]
	fld	DWORD PTR $T93664[ebp]
	fld	DWORD PTR $T93664[ebp+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv4271[ebp]
	fld	DWORD PTR tv4271[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv4264[ebp]
	fld	DWORD PTR tv4264[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR $T93861[ebp]
	fld	DWORD PTR $T93664[ebp]
	fld	DWORD PTR $T93861[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T93664[ebp]
	fld	ST(0)
	fmul	DWORD PTR $T93664[ebp+4]
	fstp	DWORD PTR $T93664[ebp+4]
	fmul	DWORD PTR $T93664[ebp+8]
	fstp	DWORD PTR $T93664[ebp+8]
; Line 254
	fld	DWORD PTR $T93664[ebp+4]
	fld	ST(0)
	fld	DWORD PTR $T93661[ebp+8]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fld	DWORD PTR $T93664[ebp+8]
	fld	ST(0)
	fld	DWORD PTR $T93661[ebp+4]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(4)
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR $T93665[ebp]
	fld	DWORD PTR $T93661[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fld	DWORD PTR $T93664[ebp]
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fxch	ST(2)
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fstp	DWORD PTR $T93665[ebp+4]
	fmulp	ST(2), ST(0)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR $T93665[ebp+8]
	fld	DWORD PTR $T93665[ebp]
	fld	DWORD PTR $T93665[ebp+4]
	fld	DWORD PTR $T93665[ebp+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv4246[ebp]
	fld	DWORD PTR tv4246[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv4239[ebp]
	fld	DWORD PTR tv4239[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR $T93907[ebp]
	fld	DWORD PTR $T93665[ebp]
	fld	DWORD PTR $T93907[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T93665[ebp]
	fld	ST(0)
	fmul	DWORD PTR $T93665[ebp+4]
	fstp	DWORD PTR $T93665[ebp+4]
	fmul	DWORD PTR $T93665[ebp+8]
	fstp	DWORD PTR $T93665[ebp+8]
; Line 255
	fld	DWORD PTR $T93665[ebp+8]
	fld	ST(0)
	fld	DWORD PTR $T93661[ebp+4]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fld	DWORD PTR $T93665[ebp+4]
	fld	ST(0)
	fld	DWORD PTR $T93661[ebp+8]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(4)
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR $T93666[ebp]
	fld	DWORD PTR $T93665[ebp]
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fld	DWORD PTR $T93661[ebp]
	fld	ST(0)
	fmulp	ST(6), ST(0)
	fxch	ST(4)
	fsubrp	ST(5), ST(0)
	fxch	ST(4)
	fstp	DWORD PTR $T93666[ebp+4]
	fmulp	ST(2), ST(0)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR $T93666[ebp+8]
	fld	DWORD PTR $T93666[ebp]
	fld	DWORD PTR $T93666[ebp+4]
	fld	DWORD PTR $T93666[ebp+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv4221[ebp]
	fld	DWORD PTR tv4221[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv4214[ebp]
	fld	DWORD PTR tv4214[ebp]
; Line 257
	mov	ecx, DWORD PTR $T93665[ebp]
	fld1
; Line 258
	mov	edx, DWORD PTR $T93665[ebp+4]
	fdivrp	ST(1), ST(0)
; Line 259
	mov	eax, DWORD PTR $T93665[ebp+8]
	mov	DWORD PTR _mbb$[ebp+4], ecx
	mov	DWORD PTR _mbb$[ebp+20], edx
	mov	DWORD PTR _mbb$[ebp+36], eax
	fstp	DWORD PTR $T93953[ebp]
	fld	DWORD PTR $T93666[ebp]
	fld	DWORD PTR $T93953[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T93666[ebp]
; Line 260
	mov	ecx, DWORD PTR $T93666[ebp]
	fld	ST(0)
	mov	DWORD PTR _mbb$[ebp+8], ecx
	fmul	DWORD PTR $T93666[ebp+4]
; Line 263
	mov	ecx, DWORD PTR $T93661[ebp]
	mov	DWORD PTR _mbb$[ebp], ecx
	fstp	DWORD PTR $T93666[ebp+4]
	mov	edx, DWORD PTR $T93666[ebp+4]
	fmul	DWORD PTR $T93666[ebp+8]
	mov	DWORD PTR _mbb$[ebp+24], edx
; Line 264
	mov	edx, DWORD PTR $T93661[ebp+4]
	mov	DWORD PTR _mbb$[ebp+16], edx
	fstp	DWORD PTR $T93666[ebp+8]
	mov	eax, DWORD PTR $T93666[ebp+8]
	mov	DWORD PTR _mbb$[ebp+40], eax
; Line 265
	mov	eax, DWORD PTR $T93661[ebp+8]
	mov	DWORD PTR _mbb$[ebp+32], eax
$LN13@draw:
; Line 268
	mov	eax, DWORD PTR [edi+1072]
	cmp	eax, ebx
	je	$LN11@draw
	cmp	eax, 2
	je	$LN11@draw
; Line 309
	cmp	eax, 1
	jne	$LN4@draw
; Line 312
	lea	ecx, DWORD PTR $T93688[ebp]
	push	ecx
	lea	edx, DWORD PTR $T93689[ebp]
	push	edx
	lea	ecx, DWORD PTR _mbb$[ebp]
	mov	DWORD PTR $T93688[ebp], ebx
	mov	DWORD PTR $T93688[ebp+4], -1082130432	; bf800000H
	mov	DWORD PTR $T93688[ebp+8], ebx
	call	??DMatrix@@QBE?AVVec3D@@ABV1@@Z		; Matrix::operator*
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _bv0$[ebp], ecx
; Line 313
	lea	ecx, DWORD PTR $T93690[ebp]
	mov	DWORD PTR _bv0$[ebp+4], edx
	push	ecx
	lea	edx, DWORD PTR $T93691[ebp]
	push	edx
	lea	ecx, DWORD PTR _mbb$[ebp]
	mov	DWORD PTR _bv0$[ebp+8], eax
	mov	DWORD PTR $T93690[ebp], ebx
	mov	DWORD PTR $T93690[ebp+4], esi
	mov	DWORD PTR $T93690[ebp+8], ebx
	call	??DMatrix@@QBE?AVVec3D@@ABV1@@Z		; Matrix::operator*
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
; Line 315
	push	7
	mov	DWORD PTR _bv1$[ebp], ecx
	mov	DWORD PTR _bv1$[ebp+4], edx
	mov	DWORD PTR _bv1$[ebp+8], eax
	call	DWORD PTR __imp__glBegin@4
; Line 316
	mov	eax, DWORD PTR [edi+1052]
	mov	esi, DWORD PTR [eax]
	cmp	esi, eax
	je	$LN6@draw
	mov	ebx, DWORD PTR __imp__glTexCoord2fv@4
	npad	4
$LL393@draw:
; Line 318
	lea	ecx, DWORD PTR [esi+72]
	push	ecx
	call	DWORD PTR __imp__glColor4fv@4
; Line 320
	mov	edx, DWORD PTR [esi+68]
	shl	edx, 5
	add	edx, DWORD PTR [edi+1092]
	push	edx
	call	ebx
; Line 321
	mov	eax, DWORD PTR [esi+56]
	mov	DWORD PTR $T94820[ebp], eax
	fld	DWORD PTR $T94820[ebp]
	lea	ecx, DWORD PTR $T93694[ebp]
	fld	ST(0)
	push	ecx
	fmul	DWORD PTR _bv0$[ebp]
	fstp	DWORD PTR $T93693[ebp]
	fld	DWORD PTR _bv0$[ebp+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T93693[ebp+4]
	fmul	DWORD PTR _bv0$[ebp+8]
	fstp	DWORD PTR $T93693[ebp+8]
	fld	DWORD PTR $T93693[ebp]
	fadd	DWORD PTR [esi+8]
	fstp	DWORD PTR $T93694[ebp]
	fld	DWORD PTR [esi+12]
	fadd	DWORD PTR $T93693[ebp+4]
	fstp	DWORD PTR $T93694[ebp+4]
	fld	DWORD PTR [esi+16]
	fadd	DWORD PTR $T93693[ebp+8]
	fstp	DWORD PTR $T93694[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
; Line 323
	mov	edx, DWORD PTR [esi+68]
	mov	eax, DWORD PTR [edi+1092]
	shl	edx, 5
	lea	ecx, DWORD PTR [edx+eax+8]
	push	ecx
	call	ebx
; Line 324
	mov	edx, DWORD PTR [esi+56]
	mov	DWORD PTR $T94928[ebp], edx
	fld	DWORD PTR $T94928[ebp]
	lea	eax, DWORD PTR $T93696[ebp]
	fld	ST(0)
	push	eax
	fmul	DWORD PTR _bv1$[ebp]
	fstp	DWORD PTR $T93695[ebp]
	fld	ST(0)
	fmul	DWORD PTR _bv1$[ebp+4]
	fstp	DWORD PTR $T93695[ebp+4]
	fmul	DWORD PTR _bv1$[ebp+8]
	fstp	DWORD PTR $T93695[ebp+8]
	fld	DWORD PTR $T93695[ebp]
	fadd	DWORD PTR [esi+8]
	fstp	DWORD PTR $T93696[ebp]
	fld	DWORD PTR [esi+12]
	fadd	DWORD PTR $T93695[ebp+4]
	fstp	DWORD PTR $T93696[ebp+4]
	fld	DWORD PTR [esi+16]
	fadd	DWORD PTR $T93695[ebp+8]
	fstp	DWORD PTR $T93696[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
; Line 326
	mov	ecx, DWORD PTR [esi+68]
	mov	edx, DWORD PTR [edi+1092]
	shl	ecx, 5
	lea	eax, DWORD PTR [ecx+edx+16]
	push	eax
	call	ebx
; Line 327
	mov	ecx, DWORD PTR [esi+56]
	mov	DWORD PTR $T95036[ebp], ecx
	fld	DWORD PTR $T95036[ebp]
	fld	ST(0)
	fmul	DWORD PTR _bv1$[ebp]
	fstp	DWORD PTR $T93697[ebp]
	fld	ST(0)
	fmul	DWORD PTR _bv1$[ebp+4]
	fstp	DWORD PTR $T93697[ebp+4]
	fmul	DWORD PTR _bv1$[ebp+8]
	fstp	DWORD PTR $T93697[ebp+8]
	fld	DWORD PTR $T93697[ebp]
	fadd	DWORD PTR [esi+44]
	fstp	DWORD PTR $T93698[ebp]
	fld	DWORD PTR [esi+48]
	fadd	DWORD PTR $T93697[ebp+4]
	lea	edx, DWORD PTR $T93698[ebp]
	push	edx
	fstp	DWORD PTR $T93698[ebp+4]
	fld	DWORD PTR [esi+52]
	fadd	DWORD PTR $T93697[ebp+8]
	fstp	DWORD PTR $T93698[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
; Line 329
	mov	eax, DWORD PTR [esi+68]
	mov	ecx, DWORD PTR [edi+1092]
	shl	eax, 5
	lea	edx, DWORD PTR [eax+ecx+24]
	push	edx
	call	ebx
; Line 330
	mov	eax, DWORD PTR [esi+56]
	mov	DWORD PTR $T95145[ebp], eax
	fld	DWORD PTR $T95145[ebp]
	lea	ecx, DWORD PTR $T93700[ebp]
	fld	ST(0)
	push	ecx
	fmul	DWORD PTR _bv0$[ebp]
	fstp	DWORD PTR $T93699[ebp]
	fld	DWORD PTR _bv0$[ebp+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T93699[ebp+4]
	fmul	DWORD PTR _bv0$[ebp+8]
	fstp	DWORD PTR $T93699[ebp+8]
	fld	DWORD PTR $T93699[ebp]
	fadd	DWORD PTR [esi+44]
	fstp	DWORD PTR $T93700[ebp]
	fld	DWORD PTR [esi+48]
	fadd	DWORD PTR $T93699[ebp+4]
	fstp	DWORD PTR $T93700[ebp+4]
	fld	DWORD PTR [esi+52]
	fadd	DWORD PTR $T93699[ebp+8]
	fstp	DWORD PTR $T93700[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
	mov	esi, DWORD PTR [esi]
	cmp	esi, DWORD PTR [edi+1052]
	jne	$LL393@draw
; Line 332
	jmp	$LN6@draw
$LN11@draw:
; Line 274
	cmp	BYTE PTR [edi+1108], bl
	je	$LN10@draw
; Line 276
	fld	DWORD PTR _mbb$[ebp]
	fldz
	fmul	ST(1), ST(0)
	fld	DWORD PTR _mbb$[ebp+4]
	fld	QWORD PTR __real@3fe6a09e60000000
	fmul	ST(1), ST(0)
	fld	ST(3)
	fsubrp	ST(2), ST(0)
	fld	DWORD PTR _mbb$[ebp+8]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv4422[ebp]
	fadd	ST(0), ST(2)
	fld	DWORD PTR _mbb$[ebp+12]
	fld	ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T93668[ebp]
	fld	DWORD PTR _mbb$[ebp+16]
	mov	edx, DWORD PTR $T93668[ebp]
	fmul	ST(0), ST(4)
	mov	DWORD PTR _bv0$[ebp], edx
	fst	QWORD PTR tv4431[ebp]
	fld	DWORD PTR _mbb$[ebp+20]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv4435[ebp]
	fld	DWORD PTR _mbb$[ebp+24]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv4437[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _mbb$[ebp+28]
	fld	ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T93668[ebp+4]
	fld	DWORD PTR _mbb$[ebp+32]
	mov	eax, DWORD PTR $T93668[ebp+4]
	fmulp	ST(5), ST(0)
	mov	DWORD PTR _bv0$[ebp+4], eax
	fxch	ST(4)
	fst	QWORD PTR tv4446[ebp]
	fld	DWORD PTR _mbb$[ebp+36]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv4450[ebp]
	fld	DWORD PTR _mbb$[ebp+40]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv4452[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _mbb$[ebp+44]
	fld	ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T93668[ebp+8]
; Line 277
	fld	DWORD PTR _mbb$[ebp+4]
	mov	ecx, DWORD PTR $T93668[ebp+8]
	fmul	ST(0), ST(3)
	mov	DWORD PTR _bv0$[ebp+8], ecx
	faddp	ST(6), ST(0)
	fld	ST(5)
	fadd	QWORD PTR tv4422[ebp]
	fadd	ST(0), ST(2)
	fstp	DWORD PTR $T93670[ebp]
	fld	DWORD PTR _mbb$[ebp+20]
	mov	edx, DWORD PTR $T93670[ebp]
	fmul	ST(0), ST(3)
	mov	DWORD PTR _bv1$[ebp], edx
	fadd	QWORD PTR tv4431[ebp]
	fst	QWORD PTR tv4482[ebp]
	fadd	QWORD PTR tv4437[ebp]
	fadd	ST(0), ST(5)
	fstp	DWORD PTR $T93670[ebp+4]
	fld	DWORD PTR _mbb$[ebp+36]
	mov	eax, DWORD PTR $T93670[ebp+4]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR tv4446[ebp]
	fld	QWORD PTR tv4452[ebp]
	fadd	ST(0), ST(1)
	fadd	ST(0), ST(3)
	fstp	DWORD PTR $T93670[ebp+8]
; Line 278
	fld	DWORD PTR _mbb$[ebp+8]
	mov	ecx, DWORD PTR $T93670[ebp+8]
	fld	QWORD PTR __real@bfe6a09e60000000
	mov	DWORD PTR _bv1$[ebp+4], eax
	fmul	ST(1), ST(0)
	mov	DWORD PTR _bv1$[ebp+8], ecx
	fxch	ST(1)
	fst	QWORD PTR tv4513[ebp]
	faddp	ST(7), ST(0)
	fld	ST(2)
	faddp	ST(7), ST(0)
	fxch	ST(6)
	fstp	DWORD PTR $T93672[ebp]
	fld	DWORD PTR _mbb$[ebp+24]
	mov	edx, DWORD PTR $T93672[ebp]
	fmul	ST(0), ST(6)
	mov	DWORD PTR _bv2$[ebp], edx
	fst	QWORD PTR tv4525[ebp]
	fadd	QWORD PTR tv4482[ebp]
	fadd	ST(0), ST(5)
	fstp	DWORD PTR $T93672[ebp+4]
	fld	DWORD PTR _mbb$[ebp+40]
	mov	eax, DWORD PTR $T93672[ebp+4]
	fmulp	ST(6), ST(0)
	mov	DWORD PTR _bv2$[ebp+4], eax
	fadd	ST(0), ST(5)
	fadd	ST(0), ST(2)
	fstp	DWORD PTR $T93672[ebp+8]
; Line 279
	fld	QWORD PTR tv4513[ebp]
	mov	ecx, DWORD PTR $T93672[ebp+8]
	faddp	ST(3), ST(0)
	mov	DWORD PTR _bv2$[ebp+8], ecx
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T93674[ebp]
	fld	QWORD PTR tv4525[ebp]
	mov	edx, DWORD PTR $T93674[ebp]
	fadd	QWORD PTR tv4435[ebp]
	mov	DWORD PTR _bv3$[ebp], edx
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T93674[ebp+4]
	mov	eax, DWORD PTR $T93674[ebp+4]
	fxch	ST(1)
	fadd	QWORD PTR tv4450[ebp]
	mov	DWORD PTR _bv3$[ebp+4], eax
	faddp	ST(1), ST(0)
	fstp	DWORD PTR $T93674[ebp+8]
	mov	ecx, DWORD PTR $T93674[ebp+8]
; Line 281
	jmp	SHORT $LN620@draw
$LN10@draw:
; Line 283
	mov	eax, 1060439283				; 3f3504f3H
	mov	ecx, -1087044365			; bf3504f3H
	mov	DWORD PTR _bv0$[ebp], ecx
	mov	DWORD PTR _bv0$[ebp+4], ebx
	mov	DWORD PTR _bv0$[ebp+8], eax
; Line 284
	mov	DWORD PTR _bv1$[ebp], eax
	mov	DWORD PTR _bv1$[ebp+4], ebx
	mov	DWORD PTR _bv1$[ebp+8], eax
; Line 285
	mov	DWORD PTR _bv2$[ebp], eax
	mov	DWORD PTR _bv2$[ebp+4], ebx
	mov	DWORD PTR _bv2$[ebp+8], ecx
; Line 286
	mov	DWORD PTR _bv3$[ebp], ecx
	mov	DWORD PTR _bv3$[ebp+4], ebx
$LN620@draw:
; Line 290
	push	7
	mov	DWORD PTR _bv3$[ebp+8], ecx
	call	DWORD PTR __imp__glBegin@4
; Line 291
	mov	eax, DWORD PTR [edi+1052]
	mov	esi, DWORD PTR [eax]
	cmp	esi, eax
	je	$LN6@draw
	mov	ebx, DWORD PTR __imp__glTexCoord2fv@4
$LL191@draw:
; Line 293
	lea	edx, DWORD PTR [esi+72]
	push	edx
	call	DWORD PTR __imp__glColor4fv@4
; Line 295
	mov	eax, DWORD PTR [esi+68]
	shl	eax, 5
	add	eax, DWORD PTR [edi+1092]
	push	eax
	call	ebx
; Line 296
	mov	ecx, DWORD PTR [esi+56]
	mov	DWORD PTR $T94246[ebp], ecx
	fld	DWORD PTR $T94246[ebp]
	lea	edx, DWORD PTR $T93681[ebp]
	fld	ST(0)
	push	edx
	fmul	DWORD PTR _bv0$[ebp]
	fstp	DWORD PTR $T93680[ebp]
	fld	DWORD PTR _bv0$[ebp+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T93680[ebp+4]
	fmul	DWORD PTR _bv0$[ebp+8]
	fstp	DWORD PTR $T93680[ebp+8]
	fld	DWORD PTR $T93680[ebp]
	fadd	DWORD PTR [esi+8]
	fstp	DWORD PTR $T93681[ebp]
	fld	DWORD PTR [esi+12]
	fadd	DWORD PTR $T93680[ebp+4]
	fstp	DWORD PTR $T93681[ebp+4]
	fld	DWORD PTR [esi+16]
	fadd	DWORD PTR $T93680[ebp+8]
	fstp	DWORD PTR $T93681[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
; Line 298
	mov	eax, DWORD PTR [esi+68]
	mov	ecx, DWORD PTR [edi+1092]
	shl	eax, 5
	lea	edx, DWORD PTR [eax+ecx+8]
	push	edx
	call	ebx
; Line 299
	mov	eax, DWORD PTR [esi+56]
	mov	DWORD PTR $T94354[ebp], eax
	fld	DWORD PTR $T94354[ebp]
	lea	ecx, DWORD PTR $T93683[ebp]
	fld	ST(0)
	push	ecx
	fmul	DWORD PTR _bv1$[ebp]
	fstp	DWORD PTR $T93682[ebp]
	fld	ST(0)
	fmul	DWORD PTR _bv1$[ebp+4]
	fstp	DWORD PTR $T93682[ebp+4]
	fmul	DWORD PTR _bv1$[ebp+8]
	fstp	DWORD PTR $T93682[ebp+8]
	fld	DWORD PTR $T93682[ebp]
	fadd	DWORD PTR [esi+8]
	fstp	DWORD PTR $T93683[ebp]
	fld	DWORD PTR [esi+12]
	fadd	DWORD PTR $T93682[ebp+4]
	fstp	DWORD PTR $T93683[ebp+4]
	fld	DWORD PTR [esi+16]
	fadd	DWORD PTR $T93682[ebp+8]
	fstp	DWORD PTR $T93683[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
; Line 301
	mov	edx, DWORD PTR [esi+68]
	mov	eax, DWORD PTR [edi+1092]
	shl	edx, 5
	lea	ecx, DWORD PTR [edx+eax+16]
	push	ecx
	call	ebx
; Line 302
	mov	edx, DWORD PTR [esi+56]
	mov	DWORD PTR $T94462[ebp], edx
	fld	DWORD PTR $T94462[ebp]
	fld	ST(0)
	fmul	DWORD PTR _bv2$[ebp]
	fstp	DWORD PTR $T93684[ebp]
	fld	ST(0)
	fmul	DWORD PTR _bv2$[ebp+4]
	fstp	DWORD PTR $T93684[ebp+4]
	fmul	DWORD PTR _bv2$[ebp+8]
	fstp	DWORD PTR $T93684[ebp+8]
	fld	DWORD PTR $T93684[ebp]
	fadd	DWORD PTR [esi+8]
	fstp	DWORD PTR $T93685[ebp]
	fld	DWORD PTR [esi+12]
	fadd	DWORD PTR $T93684[ebp+4]
	lea	eax, DWORD PTR $T93685[ebp]
	push	eax
	fstp	DWORD PTR $T93685[ebp+4]
	fld	DWORD PTR [esi+16]
	fadd	DWORD PTR $T93684[ebp+8]
	fstp	DWORD PTR $T93685[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
; Line 304
	mov	ecx, DWORD PTR [esi+68]
	mov	edx, DWORD PTR [edi+1092]
	shl	ecx, 5
	lea	eax, DWORD PTR [ecx+edx+24]
	push	eax
	call	ebx
; Line 305
	mov	ecx, DWORD PTR [esi+56]
	mov	DWORD PTR $T94570[ebp], ecx
	fld	DWORD PTR $T94570[ebp]
	lea	edx, DWORD PTR $T93687[ebp]
	fld	ST(0)
	push	edx
	fmul	DWORD PTR _bv3$[ebp]
	fstp	DWORD PTR $T93686[ebp]
	fld	ST(0)
	fmul	DWORD PTR _bv3$[ebp+4]
	fstp	DWORD PTR $T93686[ebp+4]
	fmul	DWORD PTR _bv3$[ebp+8]
	fstp	DWORD PTR $T93686[ebp+8]
	fld	DWORD PTR $T93686[ebp]
	fadd	DWORD PTR [esi+8]
	fstp	DWORD PTR $T93687[ebp]
	fld	DWORD PTR [esi+12]
	fadd	DWORD PTR $T93686[ebp+4]
	fstp	DWORD PTR $T93687[ebp+4]
	fld	DWORD PTR [esi+16]
	fadd	DWORD PTR $T93686[ebp+8]
	fstp	DWORD PTR $T93687[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
	mov	esi, DWORD PTR [esi]
	cmp	esi, DWORD PTR [edi+1052]
	jne	$LL191@draw
$LN6@draw:
; Line 307
	call	DWORD PTR __imp__glEnd@0
	mov	esi, 1065353216				; 3f800000H
$LN4@draw:
; Line 335
	push	2896					; 00000b50H
	call	DWORD PTR __imp__glEnable@4
; Line 336
	push	771					; 00000303H
	push	770					; 00000302H
	call	DWORD PTR __imp__glBlendFunc@8
; Line 337
	push	1
	call	DWORD PTR __imp__glDepthMask@4
; Line 338
	sub	esp, 16					; 00000010H
	mov	DWORD PTR [esp+12], esi
	mov	DWORD PTR [esp+8], esi
	mov	DWORD PTR [esp+4], esi
	mov	DWORD PTR [esp], esi
	call	DWORD PTR __imp__glColor4f@16
; Line 339
	call	DWORD PTR __imp__glPopName@0
; Line 340
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN621@draw:
	DD	$LN18@draw
	DD	$LN17@draw
	DD	$LN16@draw
	DD	$LN15@draw
	DD	$LN14@draw
?draw@ParticleSystem@@QAEXXZ ENDP			; ParticleSystem::draw
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?drawHighlight@ParticleSystem@@QAEXXZ		; ParticleSystem::drawHighlight
EXTRN	?ModelUnhighlight@@YAXXZ:PROC			; ModelUnhighlight
EXTRN	?ModelHighlight@@YAXXZ:PROC			; ModelHighlight
; Function compile flags: /Ogtp
_TEXT	SEGMENT
$T95266 = -388						; size = 12
$T95268 = -376						; size = 12
$T95274 = -364						; size = 12
$T95272 = -364						; size = 12
$T95270 = -364						; size = 12
$T95283 = -352						; size = 12
$T95264 = -352						; size = 12
$T95281 = -340						; size = 12
$T95265 = -340						; size = 12
$T95279 = -328						; size = 12
$T95267 = -328						; size = 12
tv4440 = -316						; size = 8
tv4156 = -316						; size = 8
$T96508 = -312						; size = 4
$T95934 = -312						; size = 4
tv4457 = -308						; size = 8
tv4150 = -308						; size = 8
$T96616 = -304						; size = 4
$T95826 = -304						; size = 4
$T95255 = -300						; size = 12
tv4451 = -296						; size = 8
tv4141 = -296						; size = 8
tv4080 = -292						; size = 4
$T96725 = -292						; size = 4
$T95277 = -288						; size = 12
$T95273 = -288						; size = 12
$T95271 = -288						; size = 12
$T95269 = -288						; size = 12
$T95282 = -276						; size = 12
$T95246 = -276						; size = 12
tv4530 = -272						; size = 8
tv4442 = -272						; size = 8
tv4136 = -272						; size = 8
$T96150 = -268						; size = 4
$T95280 = -264						; size = 12
$T95263 = -264						; size = 12
$T95257 = -264						; size = 12
tv4518 = -260						; size = 8
tv4436 = -260						; size = 8
tv4165 = -260						; size = 8
$T95276 = -252						; size = 12
$T95253 = -252						; size = 12
$T95251 = -252						; size = 12
_camera$75509 = -252					; size = 12
_bv2$ = -252						; size = 12
$T95278 = -240						; size = 12
$T95248 = -240						; size = 12
_bv3$ = -240						; size = 12
tv4487 = -236						; size = 8
tv4427 = -236						; size = 8
tv4171 = -236						; size = 8
$T95244 = -228						; size = 12
_bv0$ = -228						; size = 12
tv4455 = -216						; size = 8
tv4302 = -212						; size = 4
tv4295 = -212						; size = 4
tv4274 = -212						; size = 4
tv4267 = -212						; size = 4
tv4249 = -212						; size = 4
tv4242 = -212						; size = 4
tv4224 = -212						; size = 4
tv4217 = -212						; size = 4
$T96400 = -212						; size = 4
$T96042 = -212						; size = 4
$T95536 = -212						; size = 4
$T95490 = -212						; size = 4
$T95444 = -212						; size = 4
$T95386 = -212						; size = 4
_invdet$95332 = -212					; size = 4
$T95249 = -208						; size = 12
$T95247 = -208						; size = 12
_bv1$ = -208						; size = 12
_adj$95331 = -196					; size = 64
_mtrans$75508 = -132					; size = 64
_mbb$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?drawHighlight@ParticleSystem@@QAEXXZ PROC		; ParticleSystem::drawHighlight
; _this$ = ecx
; Line 345
	push	ebp
	mov	ebp, esp
	sub	esp, 388				; 00000184H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
; Line 364
	mov	esi, DWORD PTR __imp__glDisable@4
	push	edi
	mov	edi, ecx
	mov	eax, DWORD PTR [edi+1064]
	cmp	eax, 4
	ja	$LN618@drawHighli
	jmp	DWORD PTR $LN620@drawHighli[eax*4]
$LN18@drawHighli:
; Line 367
	push	3042					; 00000be2H
	call	esi
; Line 368
	push	3008					; 00000bc0H
	call	esi
; Line 369
	jmp	SHORT $LN618@drawHighli
$LN17@drawHighli:
; Line 371
	push	3042					; 00000be2H
	call	DWORD PTR __imp__glEnable@4
; Line 372
	push	1
	push	768					; 00000300H
	call	DWORD PTR __imp__glBlendFunc@8
; Line 373
	push	3008					; 00000bc0H
	call	esi
; Line 374
	jmp	SHORT $LN618@drawHighli
$LN16@drawHighli:
; Line 376
	push	3042					; 00000be2H
	call	DWORD PTR __imp__glEnable@4
; Line 377
	push	771					; 00000303H
	push	770					; 00000302H
	call	DWORD PTR __imp__glBlendFunc@8
; Line 378
	push	3008					; 00000bc0H
	call	esi
; Line 379
	jmp	SHORT $LN618@drawHighli
$LN15@drawHighli:
; Line 381
	push	3042					; 00000be2H
	call	esi
; Line 382
	push	3008					; 00000bc0H
	call	DWORD PTR __imp__glEnable@4
; Line 383
	jmp	SHORT $LN618@drawHighli
$LN14@drawHighli:
; Line 385
	push	3042					; 00000be2H
	call	DWORD PTR __imp__glEnable@4
; Line 386
	push	3008					; 00000bc0H
	call	esi
; Line 387
	push	1
	push	770					; 00000302H
	call	DWORD PTR __imp__glBlendFunc@8
$LN618@drawHighli:
; Line 391
	push	2896					; 00000b50H
	call	esi
; Line 392
	push	2884					; 00000b44H
	call	esi
; Line 393
	xor	ebx, ebx
	push	ebx
	call	DWORD PTR __imp__glDepthMask@4
; Line 395
	mov	eax, DWORD PTR [edi+1044]
	push	eax
	call	DWORD PTR __imp__glPushName@4
; Line 396
	mov	ecx, DWORD PTR [edi+1044]
	push	ecx
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8
; Line 399
	xor	eax, eax
	mov	esi, 1065353216				; 3f800000H
	mov	DWORD PTR _mbb$[ebp], eax
	mov	DWORD PTR _mbb$[ebp+20], eax
	mov	DWORD PTR _mbb$[ebp+40], eax
	mov	DWORD PTR _mbb$[ebp+60], eax
	mov	DWORD PTR _mbb$[ebp+4], eax
	mov	DWORD PTR _mbb$[ebp+8], eax
	mov	DWORD PTR _mbb$[ebp+12], eax
	mov	DWORD PTR _mbb$[ebp+16], eax
	mov	DWORD PTR _mbb$[ebp+24], eax
	mov	DWORD PTR _mbb$[ebp+28], eax
	mov	DWORD PTR _mbb$[ebp+32], eax
	mov	DWORD PTR _mbb$[ebp+36], eax
	mov	DWORD PTR _mbb$[ebp+44], eax
	mov	DWORD PTR _mbb$[ebp+48], eax
	mov	DWORD PTR _mbb$[ebp+52], eax
	mov	DWORD PTR _mbb$[ebp+56], eax
	mov	DWORD PTR _mbb$[ebp+60], esi
	mov	DWORD PTR _mbb$[ebp+40], esi
	mov	DWORD PTR _mbb$[ebp+20], esi
	mov	DWORD PTR _mbb$[ebp], esi
; Line 401
	call	?ModelHighlight@@YAXXZ			; ModelHighlight
; Line 402
	cmp	BYTE PTR [edi+1108], bl
	je	$LN13@drawHighli
; Line 406
	lea	edx, DWORD PTR _mtrans$75508[ebp]
	push	edx
	push	2982					; 00000ba6H
	call	DWORD PTR __imp__glGetFloatv@8
; Line 407
	lea	ecx, DWORD PTR _mtrans$75508[ebp]
	call	?transpose@Matrix@@QAEXXZ		; Matrix::transpose
; Line 408
	lea	eax, DWORD PTR _adj$95331[ebp]
	push	eax
	lea	ecx, DWORD PTR _mtrans$75508[ebp]
	call	?adjoint@Matrix@@QBE?BV1@XZ		; Matrix::adjoint
	lea	ecx, DWORD PTR _mtrans$75508[ebp]
	call	?determinant@Matrix@@QBEMXZ		; Matrix::determinant
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _invdet$95332[ebp]
	fld	DWORD PTR _adj$95331[ebp]
	fld	DWORD PTR _invdet$95332[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR _mtrans$75508[ebp]
	fld	DWORD PTR _adj$95331[ebp+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75508[ebp+4]
	fld	DWORD PTR _adj$95331[ebp+8]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75508[ebp+8]
	fld	DWORD PTR _adj$95331[ebp+12]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75508[ebp+12]
	fld	DWORD PTR _adj$95331[ebp+16]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75508[ebp+16]
	fld	DWORD PTR _adj$95331[ebp+20]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75508[ebp+20]
	fld	DWORD PTR _adj$95331[ebp+24]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75508[ebp+24]
	fld	DWORD PTR _adj$95331[ebp+28]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75508[ebp+28]
	fld	DWORD PTR _adj$95331[ebp+32]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75508[ebp+32]
	fld	DWORD PTR _adj$95331[ebp+36]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75508[ebp+36]
	fld	DWORD PTR _adj$95331[ebp+40]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _mtrans$75508[ebp+40]
	fmul	DWORD PTR _adj$95331[ebp+44]
	fstp	DWORD PTR _mtrans$75508[ebp+44]
; Line 409
	fld	DWORD PTR _mtrans$75508[ebp]
	fldz
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fst	QWORD PTR tv4136[ebp]
	fld	DWORD PTR _mtrans$75508[ebp+8]
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv4141[ebp]
	fld	DWORD PTR _mtrans$75508[ebp+4]
	fmul	ST(0), ST(3)
	faddp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _mtrans$75508[ebp+12]
	fstp	DWORD PTR _camera$75509[ebp]
	fld	DWORD PTR _mtrans$75508[ebp+16]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv4150[ebp]
	fld	DWORD PTR _mtrans$75508[ebp+24]
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv4156[ebp]
	fld	DWORD PTR _mtrans$75508[ebp+20]
	fmul	ST(0), ST(3)
	faddp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _mtrans$75508[ebp+28]
	fstp	DWORD PTR _camera$75509[ebp+4]
	fld	DWORD PTR _mtrans$75508[ebp+32]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv4165[ebp]
	fld	DWORD PTR _mtrans$75508[ebp+40]
	fmul	ST(0), ST(2)
	fst	QWORD PTR tv4171[ebp]
	fld	DWORD PTR _mtrans$75508[ebp+36]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR _mtrans$75508[ebp+44]
	fstp	DWORD PTR _camera$75509[ebp+8]
; Line 410
	fld	DWORD PTR _camera$75509[ebp]
	fsub	DWORD PTR [edi+1032]
	fstp	DWORD PTR $T95244[ebp]
	fld	DWORD PTR _camera$75509[ebp+4]
	fsub	DWORD PTR [edi+1036]
	fstp	DWORD PTR $T95244[ebp+4]
	fld	DWORD PTR _camera$75509[ebp+8]
	fsub	DWORD PTR [edi+1040]
	fstp	DWORD PTR $T95244[ebp+8]
	fld	DWORD PTR $T95244[ebp+4]
	fld	DWORD PTR $T95244[ebp]
	fld	DWORD PTR $T95244[ebp+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv4302[ebp]
	fld	DWORD PTR tv4302[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv4295[ebp]
	fld	DWORD PTR tv4295[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR $T95386[ebp]
	fld	DWORD PTR $T95386[ebp]
	fld	ST(0)
	fmul	DWORD PTR $T95244[ebp]
	fstp	DWORD PTR $T95244[ebp]
	fld	ST(0)
	fmul	DWORD PTR $T95244[ebp+4]
	fstp	DWORD PTR $T95244[ebp+4]
	fmul	DWORD PTR $T95244[ebp+8]
	fstp	DWORD PTR $T95244[ebp+8]
; Line 411
	fld	DWORD PTR _mtrans$75508[ebp+4]
	fadd	QWORD PTR tv4136[ebp]
	fadd	QWORD PTR tv4141[ebp]
	fadd	DWORD PTR _mtrans$75508[ebp+12]
	fstp	DWORD PTR $T95246[ebp]
	fld	DWORD PTR _mtrans$75508[ebp+20]
	fadd	QWORD PTR tv4150[ebp]
	fadd	QWORD PTR tv4156[ebp]
	fadd	DWORD PTR _mtrans$75508[ebp+28]
	fstp	DWORD PTR $T95246[ebp+4]
	fld	DWORD PTR _mtrans$75508[ebp+36]
	fadd	QWORD PTR tv4165[ebp]
	fadd	QWORD PTR tv4171[ebp]
	fadd	DWORD PTR _mtrans$75508[ebp+44]
	fstp	DWORD PTR $T95246[ebp+8]
	fld	DWORD PTR $T95246[ebp]
	fsub	DWORD PTR _camera$75509[ebp]
	fstp	DWORD PTR $T95247[ebp]
	fld	DWORD PTR $T95246[ebp+4]
	fsub	DWORD PTR _camera$75509[ebp+4]
	fstp	DWORD PTR $T95247[ebp+4]
	fld	DWORD PTR $T95246[ebp+8]
	fsub	DWORD PTR _camera$75509[ebp+8]
	fstp	DWORD PTR $T95247[ebp+8]
	fld	DWORD PTR $T95247[ebp+4]
	fld	DWORD PTR $T95247[ebp]
	fld	DWORD PTR $T95247[ebp+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv4274[ebp]
	fld	DWORD PTR tv4274[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv4267[ebp]
	fld	DWORD PTR tv4267[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR $T95444[ebp]
	fld	DWORD PTR $T95247[ebp]
	fld	DWORD PTR $T95444[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T95247[ebp]
	fld	ST(0)
	fmul	DWORD PTR $T95247[ebp+4]
	fstp	DWORD PTR $T95247[ebp+4]
	fmul	DWORD PTR $T95247[ebp+8]
	fstp	DWORD PTR $T95247[ebp+8]
; Line 412
	fld	DWORD PTR $T95247[ebp+4]
	fld	ST(0)
	fld	DWORD PTR $T95244[ebp+8]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fld	DWORD PTR $T95247[ebp+8]
	fld	ST(0)
	fld	DWORD PTR $T95244[ebp+4]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(4)
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR $T95248[ebp]
	fld	DWORD PTR $T95244[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fld	DWORD PTR $T95247[ebp]
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fxch	ST(2)
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fstp	DWORD PTR $T95248[ebp+4]
	fmulp	ST(2), ST(0)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR $T95248[ebp+8]
	fld	DWORD PTR $T95248[ebp]
	fld	DWORD PTR $T95248[ebp+4]
	fld	DWORD PTR $T95248[ebp+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv4249[ebp]
	fld	DWORD PTR tv4249[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv4242[ebp]
	fld	DWORD PTR tv4242[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR $T95490[ebp]
	fld	DWORD PTR $T95248[ebp]
	fld	DWORD PTR $T95490[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T95248[ebp]
	fld	ST(0)
	fmul	DWORD PTR $T95248[ebp+4]
	fstp	DWORD PTR $T95248[ebp+4]
	fmul	DWORD PTR $T95248[ebp+8]
	fstp	DWORD PTR $T95248[ebp+8]
; Line 413
	fld	DWORD PTR $T95248[ebp+8]
	fld	ST(0)
	fld	DWORD PTR $T95244[ebp+4]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fld	DWORD PTR $T95248[ebp+4]
	fld	ST(0)
	fld	DWORD PTR $T95244[ebp+8]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(4)
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR $T95249[ebp]
	fld	DWORD PTR $T95248[ebp]
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fld	DWORD PTR $T95244[ebp]
	fld	ST(0)
	fmulp	ST(6), ST(0)
	fxch	ST(4)
	fsubrp	ST(5), ST(0)
	fxch	ST(4)
	fstp	DWORD PTR $T95249[ebp+4]
	fmulp	ST(2), ST(0)
	fmulp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR $T95249[ebp+8]
	fld	DWORD PTR $T95249[ebp]
	fld	DWORD PTR $T95249[ebp+4]
	fld	DWORD PTR $T95249[ebp+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv4224[ebp]
	fld	DWORD PTR tv4224[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv4217[ebp]
	fld	DWORD PTR tv4217[ebp]
; Line 415
	mov	ecx, DWORD PTR $T95248[ebp]
	fld1
; Line 416
	mov	edx, DWORD PTR $T95248[ebp+4]
	fdivrp	ST(1), ST(0)
; Line 417
	mov	eax, DWORD PTR $T95248[ebp+8]
	mov	DWORD PTR _mbb$[ebp+4], ecx
	mov	DWORD PTR _mbb$[ebp+20], edx
	mov	DWORD PTR _mbb$[ebp+36], eax
	fstp	DWORD PTR $T95536[ebp]
	fld	DWORD PTR $T95249[ebp]
	fld	DWORD PTR $T95536[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T95249[ebp]
; Line 418
	mov	ecx, DWORD PTR $T95249[ebp]
	fld	ST(0)
	mov	DWORD PTR _mbb$[ebp+8], ecx
	fmul	DWORD PTR $T95249[ebp+4]
; Line 421
	mov	ecx, DWORD PTR $T95244[ebp]
	mov	DWORD PTR _mbb$[ebp], ecx
	fstp	DWORD PTR $T95249[ebp+4]
	mov	edx, DWORD PTR $T95249[ebp+4]
	fmul	DWORD PTR $T95249[ebp+8]
	mov	DWORD PTR _mbb$[ebp+24], edx
; Line 422
	mov	edx, DWORD PTR $T95244[ebp+4]
	mov	DWORD PTR _mbb$[ebp+16], edx
	fstp	DWORD PTR $T95249[ebp+8]
	mov	eax, DWORD PTR $T95249[ebp+8]
	mov	DWORD PTR _mbb$[ebp+40], eax
; Line 423
	mov	eax, DWORD PTR $T95244[ebp+8]
	mov	DWORD PTR _mbb$[ebp+32], eax
$LN13@drawHighli:
; Line 426
	mov	eax, DWORD PTR [edi+1072]
	cmp	eax, ebx
	je	$LN11@drawHighli
	cmp	eax, 2
	je	$LN11@drawHighli
; Line 468
	cmp	eax, 1
	jne	$LN4@drawHighli
; Line 471
	lea	ecx, DWORD PTR $T95271[ebp]
	push	ecx
	lea	edx, DWORD PTR $T95272[ebp]
	push	edx
	lea	ecx, DWORD PTR _mbb$[ebp]
	mov	DWORD PTR $T95271[ebp], ebx
	mov	DWORD PTR $T95271[ebp+4], -1082130432	; bf800000H
	mov	DWORD PTR $T95271[ebp+8], ebx
	call	??DMatrix@@QBE?AVVec3D@@ABV1@@Z		; Matrix::operator*
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _bv0$[ebp], ecx
; Line 472
	lea	ecx, DWORD PTR $T95273[ebp]
	mov	DWORD PTR _bv0$[ebp+4], edx
	push	ecx
	lea	edx, DWORD PTR $T95274[ebp]
	push	edx
	lea	ecx, DWORD PTR _mbb$[ebp]
	mov	DWORD PTR _bv0$[ebp+8], eax
	mov	DWORD PTR $T95273[ebp], ebx
	mov	DWORD PTR $T95273[ebp+4], esi
	mov	DWORD PTR $T95273[ebp+8], ebx
	call	??DMatrix@@QBE?AVVec3D@@ABV1@@Z		; Matrix::operator*
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
; Line 474
	push	7
	mov	DWORD PTR _bv1$[ebp], ecx
	mov	DWORD PTR _bv1$[ebp+4], edx
	mov	DWORD PTR _bv1$[ebp+8], eax
	call	DWORD PTR __imp__glBegin@4
; Line 475
	mov	eax, DWORD PTR [edi+1052]
	mov	esi, DWORD PTR [eax]
	cmp	esi, eax
	je	$LN6@drawHighli
	mov	ebx, DWORD PTR __imp__glTexCoord2fv@4
$LL391@drawHighli:
; Line 477
	lea	ecx, DWORD PTR [esi+72]
	push	ecx
	call	DWORD PTR __imp__glColor4fv@4
; Line 479
	mov	edx, DWORD PTR [esi+68]
	shl	edx, 5
	add	edx, DWORD PTR [edi+1092]
	push	edx
	call	ebx
; Line 480
	mov	eax, DWORD PTR [esi+56]
	mov	DWORD PTR $T96400[ebp], eax
	fld	DWORD PTR $T96400[ebp]
	lea	ecx, DWORD PTR $T95277[ebp]
	fld	ST(0)
	push	ecx
	fmul	DWORD PTR _bv0$[ebp]
	fstp	DWORD PTR $T95276[ebp]
	fld	ST(0)
	fmul	DWORD PTR _bv0$[ebp+4]
	fstp	DWORD PTR $T95276[ebp+4]
	fmul	DWORD PTR _bv0$[ebp+8]
	fstp	DWORD PTR $T95276[ebp+8]
	fld	DWORD PTR $T95276[ebp]
	fadd	DWORD PTR [esi+8]
	fstp	DWORD PTR $T95277[ebp]
	fld	DWORD PTR [esi+12]
	fadd	DWORD PTR $T95276[ebp+4]
	fstp	DWORD PTR $T95277[ebp+4]
	fld	DWORD PTR [esi+16]
	fadd	DWORD PTR $T95276[ebp+8]
	fstp	DWORD PTR $T95277[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
; Line 482
	mov	edx, DWORD PTR [esi+68]
	mov	eax, DWORD PTR [edi+1092]
	shl	edx, 5
	lea	ecx, DWORD PTR [edx+eax+8]
	push	ecx
	call	ebx
; Line 483
	mov	edx, DWORD PTR [esi+56]
	mov	DWORD PTR $T96508[ebp], edx
	fld	DWORD PTR $T96508[ebp]
	lea	eax, DWORD PTR $T95279[ebp]
	fld	ST(0)
	push	eax
	fmul	DWORD PTR _bv1$[ebp]
	fstp	DWORD PTR $T95278[ebp]
	fld	ST(0)
	fmul	DWORD PTR _bv1$[ebp+4]
	fstp	DWORD PTR $T95278[ebp+4]
	fmul	DWORD PTR _bv1$[ebp+8]
	fstp	DWORD PTR $T95278[ebp+8]
	fld	DWORD PTR $T95278[ebp]
	fadd	DWORD PTR [esi+8]
	fstp	DWORD PTR $T95279[ebp]
	fld	DWORD PTR [esi+12]
	fadd	DWORD PTR $T95278[ebp+4]
	fstp	DWORD PTR $T95279[ebp+4]
	fld	DWORD PTR [esi+16]
	fadd	DWORD PTR $T95278[ebp+8]
	fstp	DWORD PTR $T95279[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
; Line 485
	mov	ecx, DWORD PTR [esi+68]
	mov	edx, DWORD PTR [edi+1092]
	shl	ecx, 5
	lea	eax, DWORD PTR [ecx+edx+16]
	push	eax
	call	ebx
; Line 486
	mov	ecx, DWORD PTR [esi+56]
	mov	DWORD PTR $T96616[ebp], ecx
	fld	DWORD PTR $T96616[ebp]
	fld	ST(0)
	fmul	DWORD PTR _bv1$[ebp]
	fstp	DWORD PTR $T95280[ebp]
	fld	ST(0)
	fmul	DWORD PTR _bv1$[ebp+4]
	fstp	DWORD PTR $T95280[ebp+4]
	fmul	DWORD PTR _bv1$[ebp+8]
	fstp	DWORD PTR $T95280[ebp+8]
	fld	DWORD PTR $T95280[ebp]
	fadd	DWORD PTR [esi+44]
	fstp	DWORD PTR $T95281[ebp]
	fld	DWORD PTR [esi+48]
	fadd	DWORD PTR $T95280[ebp+4]
	lea	edx, DWORD PTR $T95281[ebp]
	push	edx
	fstp	DWORD PTR $T95281[ebp+4]
	fld	DWORD PTR [esi+52]
	fadd	DWORD PTR $T95280[ebp+8]
	fstp	DWORD PTR $T95281[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
; Line 488
	mov	eax, DWORD PTR [esi+68]
	mov	ecx, DWORD PTR [edi+1092]
	shl	eax, 5
	lea	edx, DWORD PTR [eax+ecx+24]
	push	edx
	call	ebx
; Line 489
	fld	DWORD PTR _bv0$[ebp]
	mov	eax, DWORD PTR [esi+56]
	mov	DWORD PTR $T96725[ebp], eax
	fld	DWORD PTR $T96725[ebp]
	lea	ecx, DWORD PTR $T95283[ebp]
	fld	ST(0)
	push	ecx
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T95282[ebp]
	fld	DWORD PTR _bv0$[ebp+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T95282[ebp+4]
	fmul	DWORD PTR _bv0$[ebp+8]
	fstp	DWORD PTR $T95282[ebp+8]
	fld	DWORD PTR $T95282[ebp]
	fadd	DWORD PTR [esi+44]
	fstp	DWORD PTR $T95283[ebp]
	fld	DWORD PTR [esi+48]
	fadd	DWORD PTR $T95282[ebp+4]
	fstp	DWORD PTR $T95283[ebp+4]
	fld	DWORD PTR [esi+52]
	fadd	DWORD PTR $T95282[ebp+8]
	fstp	DWORD PTR $T95283[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
	mov	esi, DWORD PTR [esi]
	cmp	esi, DWORD PTR [edi+1052]
	jne	$LL391@drawHighli
; Line 491
	jmp	$LN6@drawHighli
$LN11@drawHighli:
; Line 432
	cmp	BYTE PTR [edi+1108], bl
	je	$LN10@drawHighli
; Line 434
	fld	DWORD PTR _mbb$[ebp]
	fldz
	fmul	ST(1), ST(0)
	fld	DWORD PTR _mbb$[ebp+4]
	fld	QWORD PTR __real@3fe6a09e60000000
	fmul	ST(1), ST(0)
	fld	ST(3)
	fsubrp	ST(2), ST(0)
	fld	DWORD PTR _mbb$[ebp+8]
	fmul	ST(0), ST(1)
	fst	QWORD PTR tv4427[ebp]
	fadd	ST(0), ST(2)
	fld	DWORD PTR _mbb$[ebp+12]
	fld	ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T95251[ebp]
	fld	DWORD PTR _mbb$[ebp+16]
	mov	edx, DWORD PTR $T95251[ebp]
	fmul	ST(0), ST(4)
	mov	DWORD PTR _bv0$[ebp], edx
	fst	QWORD PTR tv4436[ebp]
	fld	DWORD PTR _mbb$[ebp+20]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv4440[ebp]
	fld	DWORD PTR _mbb$[ebp+24]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv4442[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _mbb$[ebp+28]
	fld	ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T95251[ebp+4]
	fld	DWORD PTR _mbb$[ebp+32]
	mov	eax, DWORD PTR $T95251[ebp+4]
	fmulp	ST(5), ST(0)
	mov	DWORD PTR _bv0$[ebp+4], eax
	fxch	ST(4)
	fst	QWORD PTR tv4451[ebp]
	fld	DWORD PTR _mbb$[ebp+36]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)
	fst	QWORD PTR tv4455[ebp]
	fld	DWORD PTR _mbb$[ebp+40]
	fmul	ST(0), ST(3)
	fst	QWORD PTR tv4457[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _mbb$[ebp+44]
	fld	ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T95251[ebp+8]
; Line 435
	fld	DWORD PTR _mbb$[ebp+4]
	mov	ecx, DWORD PTR $T95251[ebp+8]
	fmul	ST(0), ST(3)
	mov	DWORD PTR _bv0$[ebp+8], ecx
	faddp	ST(6), ST(0)
	fld	ST(5)
	fadd	QWORD PTR tv4427[ebp]
	fadd	ST(0), ST(2)
	fstp	DWORD PTR $T95253[ebp]
	fld	DWORD PTR _mbb$[ebp+20]
	mov	edx, DWORD PTR $T95253[ebp]
	fmul	ST(0), ST(3)
	mov	DWORD PTR _bv1$[ebp], edx
	fadd	QWORD PTR tv4436[ebp]
	fst	QWORD PTR tv4487[ebp]
	fadd	QWORD PTR tv4442[ebp]
	fadd	ST(0), ST(5)
	fstp	DWORD PTR $T95253[ebp+4]
	fld	DWORD PTR _mbb$[ebp+36]
	mov	eax, DWORD PTR $T95253[ebp+4]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fadd	QWORD PTR tv4451[ebp]
	fld	QWORD PTR tv4457[ebp]
	fadd	ST(0), ST(1)
	fadd	ST(0), ST(3)
	fstp	DWORD PTR $T95253[ebp+8]
; Line 436
	fld	DWORD PTR _mbb$[ebp+8]
	mov	ecx, DWORD PTR $T95253[ebp+8]
	fld	QWORD PTR __real@bfe6a09e60000000
	mov	DWORD PTR _bv1$[ebp+4], eax
	fmul	ST(1), ST(0)
	mov	DWORD PTR _bv1$[ebp+8], ecx
	fxch	ST(1)
	fst	QWORD PTR tv4518[ebp]
	faddp	ST(7), ST(0)
	fld	ST(2)
	faddp	ST(7), ST(0)
	fxch	ST(6)
	fstp	DWORD PTR $T95255[ebp]
	fld	DWORD PTR _mbb$[ebp+24]
	mov	edx, DWORD PTR $T95255[ebp]
	fmul	ST(0), ST(6)
	mov	DWORD PTR _bv2$[ebp], edx
	fst	QWORD PTR tv4530[ebp]
	fadd	QWORD PTR tv4487[ebp]
	fadd	ST(0), ST(5)
	fstp	DWORD PTR $T95255[ebp+4]
	fld	DWORD PTR _mbb$[ebp+40]
	mov	eax, DWORD PTR $T95255[ebp+4]
	fmulp	ST(6), ST(0)
	mov	DWORD PTR _bv2$[ebp+4], eax
	fadd	ST(0), ST(5)
	fadd	ST(0), ST(2)
	fstp	DWORD PTR $T95255[ebp+8]
; Line 437
	fld	QWORD PTR tv4518[ebp]
	mov	ecx, DWORD PTR $T95255[ebp+8]
	faddp	ST(3), ST(0)
	mov	DWORD PTR _bv2$[ebp+8], ecx
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T95257[ebp]
	fld	QWORD PTR tv4530[ebp]
	mov	edx, DWORD PTR $T95257[ebp]
	fadd	QWORD PTR tv4440[ebp]
	mov	DWORD PTR _bv3$[ebp], edx
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T95257[ebp+4]
	mov	eax, DWORD PTR $T95257[ebp+4]
	fxch	ST(1)
	fadd	QWORD PTR tv4455[ebp]
	mov	DWORD PTR _bv3$[ebp+4], eax
	faddp	ST(1), ST(0)
	fstp	DWORD PTR $T95257[ebp+8]
	mov	ecx, DWORD PTR $T95257[ebp+8]
; Line 439
	jmp	SHORT $LN619@drawHighli
$LN10@drawHighli:
; Line 441
	mov	eax, 1060439283				; 3f3504f3H
	mov	ecx, -1087044365			; bf3504f3H
	mov	DWORD PTR _bv0$[ebp], ecx
	mov	DWORD PTR _bv0$[ebp+4], ebx
	mov	DWORD PTR _bv0$[ebp+8], eax
; Line 442
	mov	DWORD PTR _bv1$[ebp], eax
	mov	DWORD PTR _bv1$[ebp+4], ebx
	mov	DWORD PTR _bv1$[ebp+8], eax
; Line 443
	mov	DWORD PTR _bv2$[ebp], eax
	mov	DWORD PTR _bv2$[ebp+4], ebx
	mov	DWORD PTR _bv2$[ebp+8], ecx
; Line 444
	mov	DWORD PTR _bv3$[ebp], ecx
	mov	DWORD PTR _bv3$[ebp+4], ebx
$LN619@drawHighli:
; Line 448
	push	7
	mov	DWORD PTR _bv3$[ebp+8], ecx
	call	DWORD PTR __imp__glBegin@4
; Line 449
	mov	eax, DWORD PTR [edi+1052]
	mov	esi, DWORD PTR [eax]
	cmp	esi, eax
	je	$LN6@drawHighli
	mov	ebx, DWORD PTR __imp__glTexCoord2fv@4
	npad	10
$LL617@drawHighli:
; Line 452
	fld	DWORD PTR [esi+84]
	sub	esp, 16					; 00000010H
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv4080[ebp]
	fld	DWORD PTR tv4080[ebp]
	fstp	DWORD PTR [esp+12]
	mov	DWORD PTR [esp+8], 1048576000		; 3e800000H
	mov	DWORD PTR [esp+4], 1048576000		; 3e800000H
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	DWORD PTR __imp__glColor4f@16
; Line 454
	mov	edx, DWORD PTR [esi+68]
	shl	edx, 5
	add	edx, DWORD PTR [edi+1092]
	push	edx
	call	ebx
; Line 455
	mov	eax, DWORD PTR [esi+56]
	mov	DWORD PTR $T95826[ebp], eax
	fld	DWORD PTR $T95826[ebp]
	lea	ecx, DWORD PTR $T95264[ebp]
	fld	ST(0)
	push	ecx
	fmul	DWORD PTR _bv0$[ebp]
	fstp	DWORD PTR $T95263[ebp]
	fld	ST(0)
	fmul	DWORD PTR _bv0$[ebp+4]
	fstp	DWORD PTR $T95263[ebp+4]
	fmul	DWORD PTR _bv0$[ebp+8]
	fstp	DWORD PTR $T95263[ebp+8]
	fld	DWORD PTR [esi+8]
	fadd	DWORD PTR $T95263[ebp]
	fstp	DWORD PTR $T95264[ebp]
	fld	DWORD PTR [esi+12]
	fadd	DWORD PTR $T95263[ebp+4]
	fstp	DWORD PTR $T95264[ebp+4]
	fld	DWORD PTR [esi+16]
	fadd	DWORD PTR $T95263[ebp+8]
	fstp	DWORD PTR $T95264[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
; Line 457
	mov	edx, DWORD PTR [esi+68]
	mov	eax, DWORD PTR [edi+1092]
	shl	edx, 5
	lea	ecx, DWORD PTR [edx+eax+8]
	push	ecx
	call	ebx
; Line 458
	mov	edx, DWORD PTR [esi+56]
	mov	DWORD PTR $T95934[ebp], edx
	fld	DWORD PTR $T95934[ebp]
	lea	eax, DWORD PTR $T95266[ebp]
	fld	ST(0)
	push	eax
	fmul	DWORD PTR _bv1$[ebp]
	fstp	DWORD PTR $T95265[ebp]
	fld	ST(0)
	fmul	DWORD PTR _bv1$[ebp+4]
	fstp	DWORD PTR $T95265[ebp+4]
	fmul	DWORD PTR _bv1$[ebp+8]
	fstp	DWORD PTR $T95265[ebp+8]
	fld	DWORD PTR $T95265[ebp]
	fadd	DWORD PTR [esi+8]
	fstp	DWORD PTR $T95266[ebp]
	fld	DWORD PTR [esi+12]
	fadd	DWORD PTR $T95265[ebp+4]
	fstp	DWORD PTR $T95266[ebp+4]
	fld	DWORD PTR [esi+16]
	fadd	DWORD PTR $T95265[ebp+8]
	fstp	DWORD PTR $T95266[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
; Line 460
	mov	ecx, DWORD PTR [esi+68]
	mov	edx, DWORD PTR [edi+1092]
	shl	ecx, 5
	lea	eax, DWORD PTR [ecx+edx+16]
	push	eax
	call	ebx
; Line 461
	mov	ecx, DWORD PTR [esi+56]
	mov	DWORD PTR $T96042[ebp], ecx
	fld	DWORD PTR $T96042[ebp]
	fld	ST(0)
	fmul	DWORD PTR _bv2$[ebp]
	fstp	DWORD PTR $T95267[ebp]
	fld	ST(0)
	fmul	DWORD PTR _bv2$[ebp+4]
	fstp	DWORD PTR $T95267[ebp+4]
	lea	edx, DWORD PTR $T95268[ebp]
	push	edx
	fmul	DWORD PTR _bv2$[ebp+8]
	fstp	DWORD PTR $T95267[ebp+8]
	fld	DWORD PTR $T95267[ebp]
	fadd	DWORD PTR [esi+8]
	fstp	DWORD PTR $T95268[ebp]
	fld	DWORD PTR [esi+12]
	fadd	DWORD PTR $T95267[ebp+4]
	fstp	DWORD PTR $T95268[ebp+4]
	fld	DWORD PTR [esi+16]
	fadd	DWORD PTR $T95267[ebp+8]
	fstp	DWORD PTR $T95268[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
; Line 463
	mov	eax, DWORD PTR [esi+68]
	mov	ecx, DWORD PTR [edi+1092]
	shl	eax, 5
	lea	edx, DWORD PTR [eax+ecx+24]
	push	edx
	call	ebx
; Line 464
	mov	eax, DWORD PTR [esi+56]
	mov	DWORD PTR $T96150[ebp], eax
	fld	DWORD PTR $T96150[ebp]
	lea	ecx, DWORD PTR $T95270[ebp]
	fld	ST(0)
	push	ecx
	fmul	DWORD PTR _bv3$[ebp]
	fstp	DWORD PTR $T95269[ebp]
	fld	ST(0)
	fmul	DWORD PTR _bv3$[ebp+4]
	fstp	DWORD PTR $T95269[ebp+4]
	fmul	DWORD PTR _bv3$[ebp+8]
	fstp	DWORD PTR $T95269[ebp+8]
	fld	DWORD PTR $T95269[ebp]
	fadd	DWORD PTR [esi+8]
	fstp	DWORD PTR $T95270[ebp]
	fld	DWORD PTR [esi+12]
	fadd	DWORD PTR $T95269[ebp+4]
	fstp	DWORD PTR $T95270[ebp+4]
	fld	DWORD PTR [esi+16]
	fadd	DWORD PTR $T95269[ebp+8]
	fstp	DWORD PTR $T95270[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
	mov	esi, DWORD PTR [esi]
	cmp	esi, DWORD PTR [edi+1052]
	jne	$LL617@drawHighli
$LN6@drawHighli:
; Line 466
	call	DWORD PTR __imp__glEnd@0
	mov	esi, 1065353216				; 3f800000H
$LN4@drawHighli:
; Line 493
	call	?ModelUnhighlight@@YAXXZ		; ModelUnhighlight
; Line 494
	push	2896					; 00000b50H
	call	DWORD PTR __imp__glEnable@4
; Line 495
	push	771					; 00000303H
	push	770					; 00000302H
	call	DWORD PTR __imp__glBlendFunc@8
; Line 496
	push	1
	call	DWORD PTR __imp__glDepthMask@4
; Line 497
	sub	esp, 16					; 00000010H
	mov	DWORD PTR [esp+12], esi
	mov	DWORD PTR [esp+8], esi
	mov	DWORD PTR [esp+4], esi
	mov	DWORD PTR [esp], esi
	call	DWORD PTR __imp__glColor4f@16
; Line 498
	call	DWORD PTR __imp__glPopName@0
; Line 499
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN620@drawHighli:
	DD	$LN18@drawHighli
	DD	$LN17@drawHighli
	DD	$LN16@drawHighli
	DD	$LN15@drawHighli
	DD	$LN14@drawHighli
?drawHighlight@ParticleSystem@@QAEXXZ ENDP		; ParticleSystem::drawHighlight
_TEXT	ENDS
PUBLIC	?draw@RibbonEmitter@@QAEXXZ			; RibbonEmitter::draw
EXTRN	__imp__glTexCoord2f@8:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
$T96831 = -64						; size = 12
$T96827 = -64						; size = 12
$T96823 = -64						; size = 12
$T96828 = -52						; size = 12
$T96826 = -52						; size = 12
$T96821 = -52						; size = 12
$T96829 = -40						; size = 12
$T96824 = -40						; size = 12
$T96822 = -40						; size = 12
$T96830 = -28						; size = 12
$T96825 = -28						; size = 12
$T96820 = -28						; size = 12
$T97491 = -16						; size = 4
$T97444 = -16						; size = 4
$T97295 = -16						; size = 4
$T97248 = -16						; size = 4
$T97068 = -16						; size = 4
$T96981 = -12						; size = 4
_u$75840 = -8						; size = 4
_l$ = -4						; size = 4
?draw@RibbonEmitter@@QAEXXZ PROC			; RibbonEmitter::draw
; _this$ = ecx
; Line 661
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 676
	mov	eax, DWORD PTR [edi+464]
	push	eax
	call	DWORD PTR __imp__glPushName@4
; Line 677
	mov	ecx, DWORD PTR [edi+464]
	push	ecx
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8
; Line 678
	push	3042					; 00000be2H
	call	DWORD PTR __imp__glEnable@4
; Line 679
	mov	esi, DWORD PTR __imp__glDisable@4
	push	2896					; 00000b50H
	call	esi
; Line 680
	push	3008					; 00000bc0H
	call	esi
; Line 681
	push	2884					; 00000b44H
	call	esi
; Line 682
	push	0
	call	DWORD PTR __imp__glDepthMask@4
; Line 683
	push	1
	push	770					; 00000302H
	call	DWORD PTR __imp__glBlendFunc@8
; Line 684
	lea	edx, DWORD PTR [edi+440]
	push	edx
	call	DWORD PTR __imp__glColor4fv@4
; Line 686
	push	8
	call	DWORD PTR __imp__glBegin@4
; Line 687
	mov	eax, DWORD PTR [edi+468]
	mov	esi, DWORD PTR [eax]
; Line 689
	mov	ebx, DWORD PTR __imp__glTexCoord2f@8
	mov	DWORD PTR _l$[ebp], 0
	cmp	esi, eax
	je	$LN2@draw@2
	npad	9
$LL23@draw@2:
; Line 691
	fld	DWORD PTR _l$[ebp]
; Line 693
	sub	esp, 8
	fdiv	DWORD PTR [edi+416]
	mov	DWORD PTR [esp+4], 0
	fstp	DWORD PTR _u$75840[ebp]
	mov	eax, DWORD PTR _u$75840[ebp]
	mov	DWORD PTR [esp], eax
	call	ebx
; Line 694
	fld	DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [edi+456]
	mov	DWORD PTR $T96981[ebp], ecx
	fld	DWORD PTR $T96981[ebp]
	lea	edx, DWORD PTR $T96821[ebp]
	fld	ST(0)
	push	edx
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T96820[ebp]
	fld	DWORD PTR [esi+24]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T96820[ebp+4]
	fmul	DWORD PTR [esi+28]
	fstp	DWORD PTR $T96820[ebp+8]
	fld	DWORD PTR [esi+8]
	fadd	DWORD PTR $T96820[ebp]
	fstp	DWORD PTR $T96821[ebp]
	fld	DWORD PTR [esi+12]
	fadd	DWORD PTR $T96820[ebp+4]
	fstp	DWORD PTR $T96821[ebp+4]
	fld	DWORD PTR [esi+16]
	fadd	DWORD PTR $T96820[ebp+8]
	fstp	DWORD PTR $T96821[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
; Line 695
	mov	eax, DWORD PTR _u$75840[ebp]
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], eax
	call	ebx
; Line 696
	fld	DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [edi+460]
	mov	DWORD PTR $T97068[ebp], ecx
	fld	DWORD PTR $T97068[ebp]
	lea	edx, DWORD PTR $T96823[ebp]
	fld	ST(0)
	push	edx
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T96822[ebp]
	fld	DWORD PTR [esi+24]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T96822[ebp+4]
	fmul	DWORD PTR [esi+28]
	fstp	DWORD PTR $T96822[ebp+8]
	fld	DWORD PTR [esi+8]
	fsub	DWORD PTR $T96822[ebp]
	fstp	DWORD PTR $T96823[ebp]
	fld	DWORD PTR [esi+12]
	fsub	DWORD PTR $T96822[ebp+4]
	fstp	DWORD PTR $T96823[ebp+4]
	fld	DWORD PTR [esi+16]
	fsub	DWORD PTR $T96822[ebp+8]
	fstp	DWORD PTR $T96823[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
; Line 698
	fld	DWORD PTR [esi+44]
	mov	esi, DWORD PTR [esi]
	fadd	DWORD PTR _l$[ebp]
	fstp	DWORD PTR _l$[ebp]
	cmp	esi, DWORD PTR [edi+468]
	jne	$LL23@draw@2
$LN2@draw@2:
; Line 701
	cmp	DWORD PTR [edi+472], 1
	jbe	$LN1@draw@2
; Line 704
	mov	esi, DWORD PTR [esi+4]
; Line 705
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	ebx
; Line 706
	fld	DWORD PTR [esi+44]
	fdiv	DWORD PTR [esi+48]
	mov	eax, DWORD PTR [edi+456]
	lea	ecx, DWORD PTR $T96827[ebp]
	push	ecx
	fstp	DWORD PTR $T97248[ebp]
	fld	DWORD PTR [esi+32]
	fld	DWORD PTR $T97248[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	mov	DWORD PTR $T97295[ebp], eax
	fxch	ST(1)
	fstp	DWORD PTR $T96826[ebp]
	fld	DWORD PTR [esi+36]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T96826[ebp+4]
	fmul	DWORD PTR [esi+40]
	fstp	DWORD PTR $T96826[ebp+8]
	fld	DWORD PTR [esi+20]
	fld	DWORD PTR $T97295[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T96824[ebp]
	fld	DWORD PTR [esi+24]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T96824[ebp+4]
	fmul	DWORD PTR [esi+28]
	fstp	DWORD PTR $T96824[ebp+8]
	fld	DWORD PTR [esi+8]
	fadd	DWORD PTR $T96824[ebp]
	fstp	DWORD PTR $T96825[ebp]
	fld	DWORD PTR [esi+12]
	fadd	DWORD PTR $T96824[ebp+4]
	fstp	DWORD PTR $T96825[ebp+4]
	fld	DWORD PTR [esi+16]
	fadd	DWORD PTR $T96824[ebp+8]
	fstp	DWORD PTR $T96825[ebp+8]
	fld	DWORD PTR $T96825[ebp]
	fadd	DWORD PTR $T96826[ebp]
	fstp	DWORD PTR $T96827[ebp]
	fld	DWORD PTR $T96825[ebp+4]
	fadd	DWORD PTR $T96826[ebp+4]
	fstp	DWORD PTR $T96827[ebp+4]
	fld	DWORD PTR $T96825[ebp+8]
	fadd	DWORD PTR $T96826[ebp+8]
	fstp	DWORD PTR $T96827[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
; Line 707
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	ebx
; Line 708
	fld	DWORD PTR [esi+44]
	fdiv	DWORD PTR [esi+48]
	mov	edx, DWORD PTR [edi+460]
	fstp	DWORD PTR $T97444[ebp]
	fld	DWORD PTR $T97444[ebp]
	fld	ST(0)
	fmul	DWORD PTR [esi+32]
	mov	DWORD PTR $T97491[ebp], edx
	fstp	DWORD PTR $T96830[ebp]
	fld	DWORD PTR [esi+36]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T96830[ebp+4]
	fmul	DWORD PTR [esi+40]
	fstp	DWORD PTR $T96830[ebp+8]
	fld	DWORD PTR $T97491[ebp]
	fld	ST(0)
	fmul	DWORD PTR [esi+20]
	fstp	DWORD PTR $T96828[ebp]
	fld	DWORD PTR [esi+24]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T96828[ebp+4]
	fmul	DWORD PTR [esi+28]
	fstp	DWORD PTR $T96828[ebp+8]
	fld	DWORD PTR [esi+8]
	fsub	DWORD PTR $T96828[ebp]
	lea	eax, DWORD PTR $T96831[ebp]
	push	eax
	fstp	DWORD PTR $T96829[ebp]
	fld	DWORD PTR [esi+12]
	fsub	DWORD PTR $T96828[ebp+4]
	fstp	DWORD PTR $T96829[ebp+4]
	fld	DWORD PTR [esi+16]
	fsub	DWORD PTR $T96828[ebp+8]
	fstp	DWORD PTR $T96829[ebp+8]
	fld	DWORD PTR $T96829[ebp]
	fadd	DWORD PTR $T96830[ebp]
	fstp	DWORD PTR $T96831[ebp]
	fld	DWORD PTR $T96829[ebp+4]
	fadd	DWORD PTR $T96830[ebp+4]
	fstp	DWORD PTR $T96831[ebp+4]
	fld	DWORD PTR $T96829[ebp+8]
	fadd	DWORD PTR $T96830[ebp+8]
	fstp	DWORD PTR $T96831[ebp+8]
	call	DWORD PTR __imp__glVertex3fv@4
$LN1@draw@2:
; Line 710
	call	DWORD PTR __imp__glEnd@0
; Line 712
	sub	esp, 16					; 00000010H
	mov	DWORD PTR [esp+12], 1065353216		; 3f800000H
	mov	DWORD PTR [esp+8], 1065353216		; 3f800000H
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	DWORD PTR __imp__glColor4f@16
; Line 713
	push	2896					; 00000b50H
	call	DWORD PTR __imp__glEnable@4
; Line 714
	push	771					; 00000303H
	push	770					; 00000302H
	call	DWORD PTR __imp__glBlendFunc@8
; Line 715
	push	1
	call	DWORD PTR __imp__glDepthMask@4
; Line 716
	call	DWORD PTR __imp__glPopName@0
	pop	edi
	pop	esi
	pop	ebx
; Line 717
	mov	esp, ebp
	pop	ebp
	ret	0
?draw@RibbonEmitter@@QAEXXZ ENDP			; RibbonEmitter::draw
_TEXT	ENDS
PUBLIC	?erase@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@@Z ; std::list<Particle,std::allocator<Particle> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@@Z PROC ; std::list<Particle,std::allocator<Particle> >::erase, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 1054
	push	ebp
	mov	ebp, esp
; Line 1062
	mov	eax, DWORD PTR __Where$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Where$[ebp], ecx
; Line 1065
	cmp	eax, DWORD PTR [esi]
	je	SHORT $LN36@erase
; Line 1068
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
; Line 1070
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
; Line 1073
	push	eax
	mov	DWORD PTR [ecx+4], edx
	call	??3@YAXPAX@Z				; operator delete
; Line 1077
	mov	ecx, DWORD PTR __Where$[ebp]
	add	esp, 4
	dec	DWORD PTR [esi+4]
$LN36@erase:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	pop	esi
; Line 1078
	pop	ebp
	ret	8
?erase@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@@Z ENDP ; std::list<Particle,std::allocator<Particle> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@@Z ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@@Z PROC ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::erase, COMDAT
; _this$ = ecx
; Line 1054
	push	ebp
	mov	ebp, esp
; Line 1062
	mov	eax, DWORD PTR __Where$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Where$[ebp], ecx
; Line 1065
	cmp	eax, DWORD PTR [esi]
	je	SHORT $LN36@erase@2
; Line 1068
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
; Line 1070
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
; Line 1073
	push	eax
	mov	DWORD PTR [ecx+4], edx
	call	??3@YAXPAX@Z				; operator delete
; Line 1077
	mov	ecx, DWORD PTR __Where$[ebp]
	add	esp, 4
	dec	DWORD PTR [esi+4]
$LN36@erase@2:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	pop	esi
; Line 1078
	pop	ebp
	ret	8
?erase@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@@Z ENDP ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::erase
_TEXT	ENDS
PUBLIC	?_Insert@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@ABUParticle@@@Z ; std::list<Particle,std::allocator<Particle> >::_Insert
; Function compile flags: /Ogtp
;	COMDAT ?_Insert@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@ABUParticle@@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Val$ = 12						; size = 4
?_Insert@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@ABUParticle@@@Z PROC ; std::list<Particle,std::allocator<Particle> >::_Insert, COMDAT
; _this$ = ecx
; Line 967
	push	ebp
	mov	ebp, esp
; Line 975
	mov	eax, DWORD PTR __Where$[ebp]
	mov	edx, DWORD PTR [eax+4]
	push	esi
	push	edi
	mov	esi, ecx
	mov	ecx, DWORD PTR __Val$[ebp]
	lea	edi, DWORD PTR [eax+4]
	push	ecx
	push	edx
	push	eax
	mov	ecx, esi
	call	?_Buynode@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@PAU342@0ABUParticle@@@Z ; std::_List_val<Particle,std::allocator<Particle> >::_Buynode
; Line 976
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, 53687090				; 03333332H
	sub	edx, ecx
	cmp	edx, 1
	jae	SHORT $LN7@Insert
	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN24@Insert:
$LN7@Insert:
	inc	ecx
	mov	DWORD PTR [esi+4], ecx
; Line 977
	mov	DWORD PTR [edi], eax
; Line 978
	mov	ecx, DWORD PTR [eax+4]
	pop	edi
	mov	DWORD PTR [ecx], eax
	pop	esi
; Line 979
	pop	ebp
	ret	8
$LN23@Insert:
?_Insert@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@@2@ABUParticle@@@Z ENDP ; std::list<Particle,std::allocator<Particle> >::_Insert
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1290
	push	ebp
	mov	ebp, esp
; Line 1291
	mov	eax, DWORD PTR [ecx+4]
; Line 1292
	mov	edx, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, DWORD PTR [ecx]
	push	edi
	sub	eax, esi
	mov	edi, 1073741823				; 3fffffffH
	sar	eax, 2
	sub	edi, edx
	cmp	edi, eax
	jae	SHORT $LN4@Reserve
; Line 1293
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN34@Reserve:
$LN4@Reserve:
; Line 1294
	add	eax, edx
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, esi
	sar	edx, 2
	cmp	eax, edx
	jbe	SHORT $LN1@Reserve
; Line 1297
	mov	esi, edx
	shr	esi, 1
	mov	edi, 1073741823				; 3fffffffH
	sub	edi, esi
	cmp	edi, edx
	jae	SHORT $LN23@Reserve
	xor	edx, edx
	jmp	SHORT $LN24@Reserve
$LN23@Reserve:
	add	edx, esi
$LN24@Reserve:
	cmp	edx, eax
	jae	SHORT $LN20@Reserve
	mov	edx, eax
$LN20@Reserve:
	push	edx
	call	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
$LN1@Reserve:
	pop	edi
	pop	esi
; Line 1298
	pop	ebp
	ret	4
$LN33@Reserve:
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reserve
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@MV?$allocator@M@std@@@std@@IAEXI@Z ; std::vector<float,std::allocator<float> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@MV?$allocator@M@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@MV?$allocator@M@std@@@std@@IAEXI@Z PROC ; std::vector<float,std::allocator<float> >::_Reserve, COMDAT
; _this$ = ecx
; Line 1290
	push	ebp
	mov	ebp, esp
; Line 1291
	mov	eax, DWORD PTR [ecx+4]
; Line 1292
	mov	edx, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, DWORD PTR [ecx]
	push	edi
	sub	eax, esi
	mov	edi, 1073741823				; 3fffffffH
	sar	eax, 2
	sub	edi, edx
	cmp	edi, eax
	jae	SHORT $LN4@Reserve@2
; Line 1293
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN34@Reserve@2:
$LN4@Reserve@2:
; Line 1294
	add	eax, edx
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, esi
	sar	edx, 2
	cmp	eax, edx
	jbe	SHORT $LN1@Reserve@2
; Line 1297
	mov	esi, edx
	shr	esi, 1
	mov	edi, 1073741823				; 3fffffffH
	sub	edi, esi
	cmp	edi, edx
	jae	SHORT $LN23@Reserve@2
	xor	edx, edx
	jmp	SHORT $LN24@Reserve@2
$LN23@Reserve@2:
	add	edx, esi
$LN24@Reserve@2:
	cmp	edx, eax
	jae	SHORT $LN20@Reserve@2
	mov	edx, eax
$LN20@Reserve@2:
	push	edx
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
$LN1@Reserve@2:
	pop	edi
	pop	esi
; Line 1298
	pop	ebp
	ret	4
$LN33@Reserve@2:
?_Reserve@?$vector@MV?$allocator@M@std@@@std@@IAEXI@Z ENDP ; std::vector<float,std::allocator<float> >::_Reserve
_TEXT	ENDS
PUBLIC	?_Buynode@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@PAU342@0ABURibbonSegment@@@Z ; std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >::_Buynode
; Function compile flags: /Ogtp
;	COMDAT ?_Buynode@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@PAU342@0ABURibbonSegment@@@Z
_TEXT	SEGMENT
$T97919 = -12						; size = 12
$T97902 = 8						; size = 4
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@PAU342@0ABURibbonSegment@@@Z PROC ; std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >::_Buynode, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 507
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 508
	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@Buynode@2
; Line 511
	mov	ecx, DWORD PTR __Next$[ebp]
; Line 512
	mov	edx, DWORD PTR __Prev$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 513
	lea	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [eax+4], edx
	test	ecx, ecx
	je	SHORT $LN2@Buynode@2
	mov	edx, DWORD PTR __Val$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	mov	esi, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], esi
	mov	esi, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], esi
	mov	esi, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], esi
	mov	esi, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], esi
	mov	esi, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], esi
	mov	esi, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], esi
	mov	esi, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], esi
	mov	esi, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], esi
	mov	esi, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], esi
	mov	edx, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], edx
	pop	esi
$LN2@Buynode@2:
; Line 520
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
; Line 508
$LN10@Buynode@2:
	lea	eax, DWORD PTR $T97902[ebp]
	push	eax
	lea	ecx, DWORD PTR $T97919[ebp]
	mov	DWORD PTR $T97902[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T97919[ebp]
	push	ecx
	mov	DWORD PTR $T97919[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN55@Buynode@2:
$LN54@Buynode@2:
	int	3
?_Buynode@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@PAU342@0ABURibbonSegment@@@Z ENDP ; std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >::_Buynode
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UTexCoordSet@@@std@@UTexCoordSet@@ABU3@@std@@YAXAAV?$allocator@UTexCoordSet@@@0@PAUTexCoordSet@@ABU2@@Z ; std::_Cons_val<std::allocator<TexCoordSet>,TexCoordSet,TexCoordSet const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@UTexCoordSet@@@std@@UTexCoordSet@@ABU3@@std@@YAXAAV?$allocator@UTexCoordSet@@@0@PAUTexCoordSet@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UTexCoordSet@@@std@@UTexCoordSet@@ABU3@@std@@YAXAAV?$allocator@UTexCoordSet@@@0@PAUTexCoordSet@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<TexCoordSet>,TexCoordSet,TexCoordSet const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Pdest$[ebp]
	test	eax, eax
	je	SHORT $LN25@Cons_val@12
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], ecx
$LN25@Cons_val@12:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@UTexCoordSet@@@std@@UTexCoordSet@@ABU3@@std@@YAXAAV?$allocator@UTexCoordSet@@@0@PAUTexCoordSet@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<TexCoordSet>,TexCoordSet,TexCoordSet const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@II@std@@@std@@U?$pair@II@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@II@std@@@0@PAU?$pair@II@0@AAU20@@Z ; std::_Cons_val<std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int> &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@II@std@@@std@@U?$pair@II@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@II@std@@@0@PAU?$pair@II@0@AAU20@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U?$pair@II@std@@@std@@U?$pair@II@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@II@std@@@0@PAU?$pair@II@0@AAU20@@Z PROC ; std::_Cons_val<std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int> &>, COMDAT
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Pdest$[ebp]
	test	eax, eax
	je	SHORT $LN7@Cons_val@13
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN7@Cons_val@13:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@U?$pair@II@std@@@std@@U?$pair@II@2@AAU32@@std@@YAXAAV?$allocator@U?$pair@II@std@@@0@PAU?$pair@II@0@AAU20@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int> &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@II@std@@@std@@U?$pair@II@2@ABU32@@std@@YAXAAV?$allocator@U?$pair@II@std@@@0@PAU?$pair@II@0@ABU20@@Z ; std::_Cons_val<std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int> const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@II@std@@@std@@U?$pair@II@2@ABU32@@std@@YAXAAV?$allocator@U?$pair@II@std@@@0@PAU?$pair@II@0@ABU20@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U?$pair@II@std@@@std@@U?$pair@II@2@ABU32@@std@@YAXAAV?$allocator@U?$pair@II@std@@@0@PAU?$pair@II@0@ABU20@@Z PROC ; std::_Cons_val<std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int> const &>, COMDAT
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Pdest$[ebp]
	test	eax, eax
	je	SHORT $LN9@Cons_val@14
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN9@Cons_val@14:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@U?$pair@II@std@@@std@@U?$pair@II@2@ABU32@@std@@YAXAAV?$allocator@U?$pair@II@std@@@0@PAU?$pair@II@0@ABU20@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int> const &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@U?$pair@II@std@@@std@@@std@@YAXPAU?$pair@II@0@0AAV?$allocator@U?$pair@II@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<unsigned int,unsigned int> > >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@U?$pair@II@std@@@std@@@std@@YAXPAU?$pair@II@0@0AAV?$allocator@U?$pair@II@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@U?$pair@II@std@@@std@@@std@@YAXPAU?$pair@II@0@0AAV?$allocator@U?$pair@II@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::pair<unsigned int,unsigned int> > >, COMDAT
; Line 89
	ret	0
??$_Destroy_range@V?$allocator@U?$pair@II@std@@@std@@@std@@YAXPAU?$pair@II@0@0AAV?$allocator@U?$pair@II@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::pair<unsigned int,unsigned int> > >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VVec3D@@@std@@@std@@YAXPAVVec3D@@0AAV?$allocator@VVec3D@@@0@@Z ; std::_Destroy_range<std::allocator<Vec3D> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@VVec3D@@@std@@@std@@YAXPAVVec3D@@0AAV?$allocator@VVec3D@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VVec3D@@@std@@@std@@YAXPAVVec3D@@0AAV?$allocator@VVec3D@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Vec3D> >, COMDAT
; Line 89
	ret	0
??$_Destroy_range@V?$allocator@VVec3D@@@std@@@std@@YAXPAVVec3D@@0AAV?$allocator@VVec3D@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Vec3D> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UTexCoordSet@@@std@@@std@@YAXPAUTexCoordSet@@0AAV?$allocator@UTexCoordSet@@@0@@Z ; std::_Destroy_range<std::allocator<TexCoordSet> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@UTexCoordSet@@@std@@@std@@YAXPAUTexCoordSet@@0AAV?$allocator@UTexCoordSet@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UTexCoordSet@@@std@@@std@@YAXPAUTexCoordSet@@0AAV?$allocator@UTexCoordSet@@@0@@Z PROC ; std::_Destroy_range<std::allocator<TexCoordSet> >, COMDAT
; Line 89
	ret	0
??$_Destroy_range@V?$allocator@UTexCoordSet@@@std@@@std@@YAXPAUTexCoordSet@@0AAV?$allocator@UTexCoordSet@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<TexCoordSet> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUTexCoordSet@@PAU1@V?$allocator@UTexCoordSet@@@std@@@std@@YAPAUTexCoordSet@@PAU1@00AAV?$allocator@UTexCoordSet@@@0@@Z ; std::_Uninitialized_move<TexCoordSet *,TexCoordSet *,std::allocator<TexCoordSet> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninitialized_move@PAUTexCoordSet@@PAU1@V?$allocator@UTexCoordSet@@@std@@@std@@YAPAUTexCoordSet@@PAU1@00AAV?$allocator@UTexCoordSet@@@0@@Z
_TEXT	SEGMENT
__Cat$98281 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUTexCoordSet@@PAU1@V?$allocator@UTexCoordSet@@@std@@@std@@YAPAUTexCoordSet@@PAU1@00AAV?$allocator@UTexCoordSet@@@0@@Z PROC ; std::_Uninitialized_move<TexCoordSet *,TexCoordSet *,std::allocator<TexCoordSet> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
; Line 469
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 471
	mov	eax, DWORD PTR __Cat$98281[ebp]
	mov	ecx, DWORD PTR __Al$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	0
	push	ecx
	mov	ecx, DWORD PTR __First$[ebp]
	push	edx
	push	eax
	push	ecx
	call	??$_Uninit_move@PAUTexCoordSet@@PAU1@V?$allocator@UTexCoordSet@@@std@@U1@@std@@YAPAUTexCoordSet@@PAU1@00AAV?$allocator@UTexCoordSet@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<TexCoordSet *,TexCoordSet *,std::allocator<TexCoordSet>,TexCoordSet>
	add	esp, 24					; 00000018H
; Line 472
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAUTexCoordSet@@PAU1@V?$allocator@UTexCoordSet@@@std@@@std@@YAPAUTexCoordSet@@PAU1@00AAV?$allocator@UTexCoordSet@@@0@@Z ENDP ; std::_Uninitialized_move<TexCoordSet *,TexCoordSet *,std::allocator<TexCoordSet> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAVVec3D@@PAV1@V?$allocator@VVec3D@@@std@@@std@@YAPAVVec3D@@PAV1@00AAV?$allocator@VVec3D@@@0@@Z ; std::_Uninitialized_move<Vec3D *,Vec3D *,std::allocator<Vec3D> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninitialized_move@PAVVec3D@@PAV1@V?$allocator@VVec3D@@@std@@@std@@YAPAVVec3D@@PAV1@00AAV?$allocator@VVec3D@@@0@@Z
_TEXT	SEGMENT
__Cat$98291 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAVVec3D@@PAV1@V?$allocator@VVec3D@@@std@@@std@@YAPAVVec3D@@PAV1@00AAV?$allocator@VVec3D@@@0@@Z PROC ; std::_Uninitialized_move<Vec3D *,Vec3D *,std::allocator<Vec3D> >, COMDAT
; Line 469
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 471
	mov	eax, DWORD PTR __Cat$98291[ebp]
	mov	ecx, DWORD PTR __Al$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	0
	push	ecx
	mov	ecx, DWORD PTR __First$[ebp]
	push	edx
	push	eax
	push	ecx
	call	??$_Uninit_move@PAVVec3D@@PAV1@V?$allocator@VVec3D@@@std@@V1@@std@@YAPAVVec3D@@PAV1@00AAV?$allocator@VVec3D@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<Vec3D *,Vec3D *,std::allocator<Vec3D>,Vec3D>
	add	esp, 24					; 00000018H
; Line 472
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAVVec3D@@PAV1@V?$allocator@VVec3D@@@std@@@std@@YAPAVVec3D@@PAV1@00AAV?$allocator@VVec3D@@@0@@Z ENDP ; std::_Uninitialized_move<Vec3D *,Vec3D *,std::allocator<Vec3D> >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@II@std@@@std@@U?$pair@II@2@U32@@std@@YAXAAV?$allocator@U?$pair@II@std@@@0@PAU?$pair@II@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@II@std@@@std@@U?$pair@II@2@U32@@std@@YAXAAV?$allocator@U?$pair@II@std@@@0@PAU?$pair@II@0@$$QAU20@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U?$pair@II@std@@@std@@U?$pair@II@2@U32@@std@@YAXAAV?$allocator@U?$pair@II@std@@@0@PAU?$pair@II@0@$$QAU20@@Z PROC ; std::_Cons_val<std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Pdest$[ebp]
	test	eax, eax
	je	SHORT $LN7@Cons_val@15
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN7@Cons_val@15:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@U?$pair@II@std@@@std@@U?$pair@II@2@U32@@std@@YAXAAV?$allocator@U?$pair@II@std@@@0@PAU?$pair@II@0@$$QAU20@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int>,std::pair<unsigned int,unsigned int> >
_TEXT	ENDS
PUBLIC	?push_back@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEXABUParticle@@@Z ; std::list<Particle,std::allocator<Particle> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEXABUParticle@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEXABUParticle@@@Z PROC ; std::list<Particle,std::allocator<Particle> >::push_back, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 926
	push	ebp
	mov	ebp, esp
; Line 927
	mov	eax, DWORD PTR __Val$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edi+4]
	push	eax
	push	ecx
	push	edi
	mov	ecx, esi
	call	?_Buynode@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@PAU342@0ABUParticle@@@Z ; std::_List_val<Particle,std::allocator<Particle> >::_Buynode
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, 53687090				; 03333332H
	sub	edx, ecx
	cmp	edx, 1
	jae	SHORT $LN19@push_back
	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN37@push_back:
$LN19@push_back:
	inc	ecx
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [edi+4], eax
	mov	ecx, DWORD PTR [eax+4]
	pop	edi
	mov	DWORD PTR [ecx], eax
	pop	esi
; Line 928
	pop	ebp
	ret	4
$LN36@push_back:
?push_back@?$list@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEXABUParticle@@@Z ENDP ; std::list<Particle,std::allocator<Particle> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 976
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 977
	mov	eax, DWORD PTR [esi+4]
	push	edi
	mov	edi, DWORD PTR __Val$[ebp]
	cmp	edi, eax
	jae	SHORT $LN4@push_back@2
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, edi
	ja	SHORT $LN4@push_back@2
; Line 979
	sub	edi, ecx
	sar	edi, 2
; Line 980
	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN3@push_back@2
; Line 981
	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN3@push_back@2:
; Line 985
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN39@push_back@2
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [eax], edx
; Line 996
	add	DWORD PTR [esi+4], 4
	pop	edi
	pop	esi
; Line 998
	pop	ebp
	ret	4
$LN4@push_back@2:
; Line 990
	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN1@push_back@2
; Line 991
	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN1@push_back@2:
; Line 995
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN39@push_back@2
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [eax], ecx
$LN39@push_back@2:
; Line 996
	add	DWORD PTR [esi+4], 4
	pop	edi
	pop	esi
; Line 998
	pop	ebp
	ret	4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z ; std::vector<float,std::allocator<float> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z PROC ; std::vector<float,std::allocator<float> >::push_back, COMDAT
; _this$ = ecx
; Line 976
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 977
	mov	eax, DWORD PTR [esi+4]
	push	edi
	mov	edi, DWORD PTR __Val$[ebp]
	cmp	edi, eax
	jae	SHORT $LN4@push_back@3
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, edi
	ja	SHORT $LN4@push_back@3
; Line 979
	sub	edi, ecx
	sar	edi, 2
; Line 980
	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN3@push_back@3
; Line 981
	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@MV?$allocator@M@std@@@std@@IAEXI@Z ; std::vector<float,std::allocator<float> >::_Reserve
$LN3@push_back@3:
; Line 985
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN39@push_back@3
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [eax], edx
; Line 996
	add	DWORD PTR [esi+4], 4
	pop	edi
	pop	esi
; Line 998
	pop	ebp
	ret	4
$LN4@push_back@3:
; Line 990
	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN1@push_back@3
; Line 991
	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@MV?$allocator@M@std@@@std@@IAEXI@Z ; std::vector<float,std::allocator<float> >::_Reserve
$LN1@push_back@3:
; Line 995
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN39@push_back@3
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [eax], ecx
$LN39@push_back@3:
; Line 996
	add	DWORD PTR [esi+4], 4
	pop	edi
	pop	esi
; Line 998
	pop	ebp
	ret	4
?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z ENDP ; std::vector<float,std::allocator<float> >::push_back
_TEXT	ENDS
PUBLIC	?_Insert@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@ABURibbonSegment@@@Z ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::_Insert
; Function compile flags: /Ogtp
;	COMDAT ?_Insert@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@ABURibbonSegment@@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Val$ = 12						; size = 4
?_Insert@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@ABURibbonSegment@@@Z PROC ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::_Insert, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 967
	push	ebp
	mov	ebp, esp
; Line 975
	mov	eax, DWORD PTR __Where$[ebp]
	mov	edx, DWORD PTR [eax+4]
	push	esi
	push	edi
	mov	esi, ecx
	mov	ecx, DWORD PTR __Val$[ebp]
	lea	edi, DWORD PTR [eax+4]
	push	ecx
	push	edx
	push	eax
	mov	ecx, esi
	call	?_Buynode@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@PAU342@0ABURibbonSegment@@@Z ; std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >::_Buynode
; Line 976
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, 97612892				; 05d1745cH
	sub	edx, ecx
	cmp	edx, 1
	jae	SHORT $LN7@Insert@2
	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN24@Insert@2:
$LN7@Insert@2:
	inc	ecx
	mov	DWORD PTR [esi+4], ecx
; Line 977
	mov	DWORD PTR [edi], eax
; Line 978
	mov	ecx, DWORD PTR [eax+4]
	pop	edi
	mov	DWORD PTR [ecx], eax
	pop	esi
; Line 979
	pop	ebp
	ret	8
$LN23@Insert@2:
?_Insert@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@@2@ABURibbonSegment@@@Z ENDP ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::_Insert
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IAEXPAU?$pair@II@2@0@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IAEXPAU?$pair@II@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IAEXPAU?$pair@II@2@0@Z PROC ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1271
	ret	8
?_Destroy@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IAEXPAU?$pair@II@2@0@Z ENDP ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Destroy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IAEXPAVVec3D@@0@Z ; std::vector<Vec3D,std::allocator<Vec3D> >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IAEXPAVVec3D@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IAEXPAVVec3D@@0@Z PROC ; std::vector<Vec3D,std::allocator<Vec3D> >::_Destroy, COMDAT
; _this$ = ecx
; Line 1271
	ret	8
?_Destroy@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IAEXPAVVec3D@@0@Z ENDP ; std::vector<Vec3D,std::allocator<Vec3D> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IAEXPAUTexCoordSet@@0@Z ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IAEXPAUTexCoordSet@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IAEXPAUTexCoordSet@@0@Z PROC ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Destroy, COMDAT
; _this$ = ecx
; Line 1271
	ret	8
?_Destroy@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IAEXPAUTexCoordSet@@0@Z ENDP ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Umove@PAUTexCoordSet@@@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IAEPAUTexCoordSet@@PAU2@00@Z ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Umove<TexCoordSet *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAUTexCoordSet@@@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IAEPAUTexCoordSet@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$98793 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUTexCoordSet@@@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IAEPAUTexCoordSet@@PAU2@00@Z PROC ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Umove<TexCoordSet *>, COMDAT
; _this$ = ecx
; Line 1322
	push	ebp
	mov	ebp, esp
; Line 1325
	mov	eax, DWORD PTR __Cat$98793[ebp]
	mov	edx, DWORD PTR __Last$[ebp]
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	0
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	push	edx
	push	eax
	call	??$_Uninit_move@PAUTexCoordSet@@PAU1@V?$allocator@UTexCoordSet@@@std@@U1@@std@@YAPAUTexCoordSet@@PAU1@00AAV?$allocator@UTexCoordSet@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<TexCoordSet *,TexCoordSet *,std::allocator<TexCoordSet>,TexCoordSet>
	add	esp, 24					; 00000018H
; Line 1326
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAUTexCoordSet@@@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IAEPAUTexCoordSet@@PAU2@00@Z ENDP ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Umove<TexCoordSet *>
_TEXT	ENDS
PUBLIC	??$_Umove@PAVVec3D@@@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IAEPAVVec3D@@PAV2@00@Z ; std::vector<Vec3D,std::allocator<Vec3D> >::_Umove<Vec3D *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAVVec3D@@@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IAEPAVVec3D@@PAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$98813 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAVVec3D@@@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IAEPAVVec3D@@PAV2@00@Z PROC ; std::vector<Vec3D,std::allocator<Vec3D> >::_Umove<Vec3D *>, COMDAT
; _this$ = ecx
; Line 1322
	push	ebp
	mov	ebp, esp
; Line 1325
	mov	eax, DWORD PTR __Cat$98813[ebp]
	mov	edx, DWORD PTR __Last$[ebp]
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	0
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	push	edx
	push	eax
	call	??$_Uninit_move@PAVVec3D@@PAV1@V?$allocator@VVec3D@@@std@@V1@@std@@YAPAVVec3D@@PAV1@00AAV?$allocator@VVec3D@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<Vec3D *,Vec3D *,std::allocator<Vec3D>,Vec3D>
	add	esp, 24					; 00000018H
; Line 1326
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAVVec3D@@@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IAEPAVVec3D@@PAV2@00@Z ENDP ; std::vector<Vec3D,std::allocator<Vec3D> >::_Umove<Vec3D *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAU?$pair@II@std@@PAU12@V?$allocator@U?$pair@II@std@@@2@U12@@std@@YAPAU?$pair@II@0@PAU10@00AAV?$allocator@U?$pair@II@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *,std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninit_move@PAU?$pair@II@std@@PAU12@V?$allocator@U?$pair@II@std@@@2@U12@@std@@YAPAU?$pair@II@0@PAU10@00AAV?$allocator@U?$pair@II@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAU?$pair@II@std@@PAU12@V?$allocator@U?$pair@II@std@@@2@U12@@std@@YAPAU?$pair@II@0@PAU10@00AAV?$allocator@U?$pair@II@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *,std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
; Line 424
	push	ebp
	mov	ebp, esp
; Line 430
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	cmp	ecx, edx
	je	SHORT $LN4@Uninit_mov@3
	push	esi
$LL6@Uninit_mov@3:
; Line 431
	test	eax, eax
	je	SHORT $LN20@Uninit_mov@3
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
$LN20@Uninit_mov@3:
; Line 430
	add	ecx, 8
	add	eax, 8
	cmp	ecx, edx
	jne	SHORT $LL6@Uninit_mov@3
	pop	esi
$LN4@Uninit_mov@3:
; Line 438
	pop	ebp
	ret	0
??$_Uninit_move@PAU?$pair@II@std@@PAU12@V?$allocator@U?$pair@II@std@@@2@U12@@std@@YAPAU?$pair@II@0@PAU10@00AAV?$allocator@U?$pair@II@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *,std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int> >
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	?update@ParticleSystem@@QAEXM@Z			; ParticleSystem::update
EXTRN	__ftol2_sse_excpt:PROC
;	COMDAT __real@bff0000000000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Ogtp
CONST	ENDS
_TEXT	SEGMENT
_p$75208 = -228						; size = 80
$T98926 = -148						; size = 12
$T99407 = -136						; size = 16
$T99268 = -120						; size = 4
$T99406 = -116						; size = 16
$T98929 = -100						; size = 12
$T99428 = -88						; size = 16
$T98927 = -72						; size = 12
$T99427 = -60						; size = 16
$T99442 = -44						; size = 4
$T98928 = -40						; size = 12
$T98930 = -28						; size = 16
_grav$ = -12						; size = 4
tv1627 = -8						; size = 4
tv1620 = -8						; size = 4
_mspeed$ = -8						; size = 4
_i$75204 = -8						; size = 4
tv1332 = -4						; size = 4
$T99363 = -4						; size = 4
$T99300 = -4						; size = 4
$T99396 = -4						; size = 4
$T99333 = -4						; size = 4
$T99258 = -4						; size = 4
$T99254 = -4						; size = 4
$T99269 = -4						; size = 4
_rlife$75376 = -4					; size = 4
_tospawn$75201 = -4					; size = 4
_ftospawn$75197 = -4					; size = 4
_dt$ = 8						; size = 4
?update@ParticleSystem@@QAEXM@Z PROC			; ParticleSystem::update
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\particle.cpp
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	mov	esi, ecx
; Line 108
	mov	ebx, DWORD PTR [esi+1076]
	push	edi
	mov	edi, DWORD PTR [esi+1080]
	push	edi
	push	ebx
	lea	ecx, DWORD PTR [esi+384]
	call	?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z ; Animated<float,float,Identity<float> >::getValue
	fstp	DWORD PTR _grav$[ebp]
; Line 111
	cmp	DWORD PTR [esi+1048], 0
	je	SHORT $LN7@update
; Line 113
	push	edi
	push	ebx
	lea	ecx, DWORD PTR [esi+576]
	call	?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z ; Animated<float,float,Identity<float> >::getValue
; Line 117
	fmul	DWORD PTR _dt$[ebp]
	fadd	DWORD PTR [esi+1112]
	fstp	DWORD PTR _ftospawn$75197[ebp]
; Line 118
	fld1
	fld	DWORD PTR _ftospawn$75197[ebp]
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 5
	jp	$LN12@update
; Line 121
	fldz
	mov	eax, DWORD PTR _ftospawn$75197[ebp]
	fcompp
	mov	DWORD PTR [esi+1112], eax
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@update
	mov	DWORD PTR [esi+1112], 0
$LN7@update:
; Line 139
	mov	eax, DWORD PTR [esi+1052]
	mov	edi, DWORD PTR [eax]
	mov	DWORD PTR _mspeed$[ebp], 1065353216	; 3f800000H
	cmp	edi, eax
	je	$LN4@update
; Line 154
	fld	DWORD PTR _dt$[ebp]
	or	ebx, -1
	fld	DWORD PTR _grav$[ebp]
	fld1
$LN5@update:
; Line 142
	fld	DWORD PTR [edi+32]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T98926[ebp]
	fld	DWORD PTR [edi+36]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T98926[ebp+4]
	fld	DWORD PTR [edi+40]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T98926[ebp+8]
	fld	DWORD PTR $T98926[ebp]
	fmul	ST(0), ST(3)
	fstp	DWORD PTR $T98927[ebp]
	fld	DWORD PTR $T98926[ebp+4]
	fmul	ST(0), ST(3)
	fstp	DWORD PTR $T98927[ebp+4]
	fld	DWORD PTR $T98926[ebp+8]
	fmul	ST(0), ST(3)
	fstp	DWORD PTR $T98927[ebp+8]
	fld	DWORD PTR [edi+20]
	fadd	DWORD PTR $T98927[ebp]
	fstp	DWORD PTR [edi+20]
	fld	DWORD PTR $T98927[ebp+4]
	fadd	DWORD PTR [edi+24]
	fstp	DWORD PTR [edi+24]
	fld	DWORD PTR $T98927[ebp+8]
	fadd	DWORD PTR [edi+28]
	fstp	DWORD PTR [edi+28]
; Line 144
	fldz
	fcomp	DWORD PTR [esi+1024]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@update
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(0)
; Line 146
	fld	DWORD PTR [esi+1024]
	fmul	QWORD PTR __real@bff0000000000000
	fmul	DWORD PTR [edi+60]
	fstp	DWORD PTR tv1627[ebp]
	fld	DWORD PTR tv1627[ebp]
	call	__CIexp
	fstp	DWORD PTR tv1620[ebp]
	fld	DWORD PTR tv1620[ebp]
	fstp	DWORD PTR _mspeed$[ebp]
	fld1
	fld	DWORD PTR _grav$[ebp]
	fld	DWORD PTR _dt$[ebp]
	fxch	ST(2)
$LN3@update:
; Line 148
	fld	DWORD PTR [edi+20]
	fld	DWORD PTR _mspeed$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T98928[ebp]
	fld	ST(0)
	fmul	DWORD PTR [edi+24]
	fstp	DWORD PTR $T98928[ebp+4]
	fmul	DWORD PTR [edi+28]
	fstp	DWORD PTR $T98928[ebp+8]
	fld	DWORD PTR $T98928[ebp]
	fmul	ST(0), ST(3)
	fstp	DWORD PTR $T98929[ebp]
	fld	DWORD PTR $T98928[ebp+4]
	fmul	ST(0), ST(3)
	fstp	DWORD PTR $T98929[ebp+4]
	fld	DWORD PTR $T98928[ebp+8]
	fmul	ST(0), ST(3)
	fstp	DWORD PTR $T98929[ebp+8]
	fld	DWORD PTR [edi+8]
	fadd	DWORD PTR $T98929[ebp]
	fstp	DWORD PTR [edi+8]
	fld	DWORD PTR $T98929[ebp+4]
	fadd	DWORD PTR [edi+12]
	fstp	DWORD PTR [edi+12]
	fld	DWORD PTR $T98929[ebp+8]
	fadd	DWORD PTR [edi+16]
	fstp	DWORD PTR [edi+16]
; Line 150
	fld	DWORD PTR [edi+60]
	fadd	ST(0), ST(3)
	fstp	DWORD PTR tv1332[ebp]
; Line 151
	fld	DWORD PTR tv1332[ebp]
	mov	edx, DWORD PTR tv1332[ebp]
	fdiv	DWORD PTR [edi+64]
	mov	DWORD PTR [edi+60], edx
; Line 153
	mov	eax, DWORD PTR [esi+1020]
	mov	DWORD PTR $T99268[ebp], eax
	fstp	DWORD PTR _rlife$75376[ebp]
	fld	DWORD PTR _rlife$75376[ebp]
	fld	DWORD PTR $T99268[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	$LN109@update
	fdivr	ST(0), ST(1)
	fstp	DWORD PTR $T99254[ebp]
	fld	DWORD PTR $T99254[ebp]
	fld	ST(0)
	fsubr	ST(0), ST(3)
	fmul	DWORD PTR [esi+1008]
	fld	DWORD PTR [esi+1012]
	jmp	$LN229@update
$LN12@update:
; Line 125
	fld	ST(0)
	call	__ftol2_sse_excpt
	mov	edi, eax
	mov	DWORD PTR _tospawn$75201[ebp], edi
; Line 126
	fisub	DWORD PTR _tospawn$75201[ebp]
; Line 128
	mov	DWORD PTR _i$75204[ebp], 0
	fstp	DWORD PTR [esi+1112]
	test	edi, edi
	jle	$LN7@update
	npad	13
$LL9@update:
; Line 130
	mov	eax, DWORD PTR [esi+1080]
	mov	ecx, DWORD PTR [esi+1048]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx]
	push	eax
	mov	eax, DWORD PTR [esi+1076]
	push	eax
	lea	eax, DWORD PTR _p$75208[ebp]
	push	eax
	call	edx
; Line 132
	cmp	DWORD PTR [esi+1056], 10000		; 00002710H
	jae	SHORT $LN8@update
	mov	ebx, DWORD PTR [esi+1052]
	mov	ecx, DWORD PTR [ebx+4]
	lea	eax, DWORD PTR _p$75208[ebp]
	push	eax
	push	ecx
	push	ebx
	lea	ecx, DWORD PTR [esi+1052]
	call	?_Buynode@?$_List_val@UParticle@@V?$allocator@UParticle@@@std@@@std@@QAEPAU_Node@?$_List_nod@UParticle@@V?$allocator@UParticle@@@std@@@2@PAU342@0ABUParticle@@@Z ; std::_List_val<Particle,std::allocator<Particle> >::_Buynode
	mov	ecx, DWORD PTR [esi+1056]
	mov	edx, 53687090				; 03333332H
	sub	edx, ecx
	cmp	edx, 1
	jb	SHORT $LN201@update
	mov	edi, DWORD PTR _tospawn$75201[ebp]
	inc	ecx
	mov	DWORD PTR [esi+1056], ecx
	mov	DWORD PTR [ebx+4], eax
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], eax
$LN8@update:
; Line 128
	mov	eax, DWORD PTR _i$75204[ebp]
	inc	eax
	mov	DWORD PTR _i$75204[ebp], eax
	cmp	eax, edi
	jl	SHORT $LL9@update
; Line 132
	jmp	$LN7@update
$LN201@update:
	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN231@update:
; Line 153
$LN109@update:
	fld	ST(1)
	fsub	ST(0), ST(1)
	fld	ST(3)
	fsubrp	ST(2), ST(0)
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR $T99258[ebp]
	fld	DWORD PTR $T99258[ebp]
	fld	ST(0)
	fsubr	ST(0), ST(3)
	fmul	DWORD PTR [esi+1012]
	fld	DWORD PTR [esi+1016]
$LN229@update:
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR $T99269[ebp]
	mov	ecx, DWORD PTR $T99269[ebp]
	mov	DWORD PTR [edi+56], ecx
; Line 154
	mov	edx, DWORD PTR [esi+1020]
	mov	DWORD PTR $T99442[ebp], edx
	fld	DWORD PTR $T99442[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	jne	$LN117@update
	fdivr	ST(0), ST(1)
	fstp	DWORD PTR $T99333[ebp]
	fld	DWORD PTR [esi+976]
	fld	DWORD PTR $T99333[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T99428[ebp]
	fld	DWORD PTR [esi+980]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T99428[ebp+4]
	fld	DWORD PTR [esi+984]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T99428[ebp+8]
	fld	DWORD PTR [esi+988]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T99428[ebp+12]
	fsubr	ST(0), ST(2)
	fstp	DWORD PTR $T99300[ebp]
	fld	DWORD PTR $T99300[ebp]
	fld	ST(0)
	fmul	DWORD PTR [esi+960]
	fstp	DWORD PTR $T99427[ebp]
	fld	DWORD PTR [esi+964]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T99427[ebp+4]
	fld	DWORD PTR [esi+968]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T99427[ebp+8]
	fmul	DWORD PTR [esi+972]
	fstp	DWORD PTR $T99427[ebp+12]
	fld	DWORD PTR $T99427[ebp]
	fadd	DWORD PTR $T99428[ebp]
	fstp	DWORD PTR $T98930[ebp]
	fld	DWORD PTR $T99427[ebp+4]
	fadd	DWORD PTR $T99428[ebp+4]
	fstp	DWORD PTR $T98930[ebp+4]
	fld	DWORD PTR $T99427[ebp+8]
	fadd	DWORD PTR $T99428[ebp+8]
	fstp	DWORD PTR $T98930[ebp+8]
	fld	DWORD PTR $T99427[ebp+12]
	fadd	DWORD PTR $T99428[ebp+12]
	jmp	$LN230@update
$LN117@update:
	fld	ST(1)
	fsub	ST(0), ST(1)
	fld	ST(3)
	fsubrp	ST(2), ST(0)
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR $T99396[ebp]
	fld	DWORD PTR [esi+992]
	fld	DWORD PTR $T99396[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T99407[ebp]
	fld	DWORD PTR [esi+996]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T99407[ebp+4]
	fld	DWORD PTR [esi+1000]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T99407[ebp+8]
	fld	DWORD PTR [esi+1004]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T99407[ebp+12]
	fsubr	ST(0), ST(2)
	fstp	DWORD PTR $T99363[ebp]
	fld	DWORD PTR [esi+976]
	fld	DWORD PTR $T99363[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T99406[ebp]
	fld	DWORD PTR [esi+980]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T99406[ebp+4]
	fld	DWORD PTR [esi+984]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T99406[ebp+8]
	fmul	DWORD PTR [esi+988]
	fstp	DWORD PTR $T99406[ebp+12]
	fld	DWORD PTR $T99406[ebp]
	fadd	DWORD PTR $T99407[ebp]
	fstp	DWORD PTR $T98930[ebp]
	fld	DWORD PTR $T99406[ebp+4]
	fadd	DWORD PTR $T99407[ebp+4]
	fstp	DWORD PTR $T98930[ebp+4]
	fld	DWORD PTR $T99406[ebp+8]
	fadd	DWORD PTR $T99407[ebp+8]
	fstp	DWORD PTR $T98930[ebp+8]
	fld	DWORD PTR $T99406[ebp+12]
	fadd	DWORD PTR $T99407[ebp+12]
$LN230@update:
	mov	eax, DWORD PTR $T98930[ebp]
	fstp	DWORD PTR $T98930[ebp+12]
; Line 157
	fld1
	mov	ecx, DWORD PTR $T98930[ebp+4]
	mov	edx, DWORD PTR $T98930[ebp+8]
	fcompp
	mov	DWORD PTR [edi+72], eax
	mov	eax, DWORD PTR $T98930[ebp+12]
	mov	DWORD PTR [edi+84], eax
	mov	DWORD PTR [edi+76], ecx
	fnstsw	ax
	mov	DWORD PTR [edi+80], edx
	test	ah, 65					; 00000041H
	jp	SHORT $LN2@update
	mov	eax, edi
	mov	edi, DWORD PTR [edi]
	cmp	eax, DWORD PTR [esi+1052]
	je	SHORT $LN195@update
	mov	ecx, DWORD PTR [eax+4]
	fstp	ST(0)
	mov	edx, DWORD PTR [eax]
	fstp	ST(1)
	mov	DWORD PTR [ecx], edx
	fstp	ST(0)
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	push	eax
	mov	DWORD PTR [ecx+4], edx
	call	??3@YAXPAX@Z				; operator delete
; Line 158
	fld1
	fld	DWORD PTR _grav$[ebp]
	add	esp, 4
	fld	DWORD PTR _dt$[ebp]
	add	DWORD PTR [esi+1056], ebx
	fxch	ST(2)
$LN195@update:
; Line 139
	cmp	edi, DWORD PTR [esi+1052]
	jne	$LN5@update
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(0)
$LN4@update:
	pop	edi
	pop	esi
	pop	ebx
; Line 160
	mov	esp, ebp
	pop	ebp
	ret	4
$LN2@update:
; Line 158
	mov	edi, DWORD PTR [edi]
	jmp	SHORT $LN195@update
$LN228@update:
?update@ParticleSystem@@QAEXM@Z ENDP			; ParticleSystem::update
_TEXT	ENDS
PUBLIC	?push_front@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEXABURibbonSegment@@@Z ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::push_front
; Function compile flags: /Ogtp
;	COMDAT ?push_front@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEXABURibbonSegment@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_front@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEXABURibbonSegment@@@Z PROC ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::push_front, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
; Line 916
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 917
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR __Val$[ebp]
	push	edi
	mov	edi, DWORD PTR [eax]
	mov	edx, DWORD PTR [edi+4]
	push	ecx
	push	edx
	push	edi
	mov	ecx, esi
	call	?_Buynode@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@PAU342@0ABURibbonSegment@@@Z ; std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >::_Buynode
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, 97612892				; 05d1745cH
	sub	edx, ecx
	cmp	edx, 1
	jae	SHORT $LN21@push_front
	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN39@push_front:
$LN21@push_front:
	inc	ecx
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [edi+4], eax
	mov	ecx, DWORD PTR [eax+4]
	pop	edi
	mov	DWORD PTR [ecx], eax
	pop	esi
; Line 918
	pop	ebp
	ret	4
$LN38@push_front:
?push_front@?$list@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEXABURibbonSegment@@@Z ENDP ; std::list<RibbonSegment,std::allocator<RibbonSegment> >::push_front
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::reserve
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$82024 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$99813 = 8						; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z PROC ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 746
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx
; Line 747
	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, 134217727				; 07ffffffH
	jbe	SHORT $LN5@reserve@3
; Line 748
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN42@reserve@3:
$LN5@reserve@3:
; Line 749
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 5
	cmp	ecx, eax
	jae	SHORT $LN3@reserve@3
; Line 751
	lea	edi, DWORD PTR [esi+12]
	push	eax
	mov	ecx, edi
	call	?allocate@?$allocator@UTexCoordSet@@@std@@QAEPAUTexCoordSet@@I@Z ; std::allocator<TexCoordSet>::allocate
; Line 754
	mov	edx, DWORD PTR __Cat$99813[ebp]
	mov	ecx, DWORD PTR [esi]
	push	edx
	push	0
	mov	ebx, eax
	mov	eax, DWORD PTR [esi+4]
	push	edi
	push	ebx
	push	eax
	push	ecx
	mov	DWORD PTR __Ptr$82024[ebp], ebx
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	call	??$_Uninit_move@PAUTexCoordSet@@PAU1@V?$allocator@UTexCoordSet@@@std@@U1@@std@@YAPAUTexCoordSet@@PAU1@00AAV?$allocator@UTexCoordSet@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<TexCoordSet *,TexCoordSet *,std::allocator<TexCoordSet>,TexCoordSet>
; Line 760
	mov	eax, DWORD PTR [esi]
	mov	edi, DWORD PTR [esi+4]
	add	esp, 24					; 00000018H
	sub	edi, eax
; Line 761
	test	eax, eax
	je	SHORT $LN35@reserve@3
; Line 765
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@reserve@3:
; Line 769
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	add	eax, ebx
; Line 770
	and	edi, -32				; ffffffe0H
	add	edi, ebx
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+4], edi
; Line 771
	mov	DWORD PTR [esi], ebx
$LN3@reserve@3:
; Line 773
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
__catch$?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z$0:
; Line 756
	mov	eax, DWORD PTR __Ptr$82024[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 757
	push	0
	push	0
	call	__CxxThrowException@8
$LN43@reserve@3:
$LN41@reserve@3:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z ENDP ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::reserve
PUBLIC	?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z ; std::vector<Vec3D,std::allocator<Vec3D> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$82405 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$99899 = 8						; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z PROC ; std::vector<Vec3D,std::allocator<Vec3D> >::reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 746
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx
; Line 747
	mov	ebx, DWORD PTR __Count$[ebp]
	cmp	ebx, 357913941				; 15555555H
	jbe	SHORT $LN5@reserve@4
; Line 748
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN42@reserve@4:
$LN5@reserve@4:
; Line 749
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	mov	eax, 715827883				; 2aaaaaabH
	imul	ecx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	eax, ebx
	jae	SHORT $LN3@reserve@4
; Line 751
	lea	edi, DWORD PTR [esi+12]
	push	ebx
	mov	ecx, edi
	call	?allocate@?$allocator@VVec3D@@@std@@QAEPAVVec3D@@I@Z ; std::allocator<Vec3D>::allocate
; Line 754
	mov	ebx, DWORD PTR __Cat$99899[ebp]
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	push	ebx
	push	0
	push	edi
	push	eax
	push	ecx
	push	edx
	mov	DWORD PTR __Ptr$82405[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	call	??$_Uninit_move@PAVVec3D@@PAV1@V?$allocator@VVec3D@@@std@@V1@@std@@YAPAVVec3D@@PAV1@00AAV?$allocator@VVec3D@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<Vec3D *,Vec3D *,std::allocator<Vec3D>,Vec3D>
; Line 760
	mov	ebx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	sub	ecx, ebx
	mov	eax, 715827883				; 2aaaaaabH
	imul	ecx
	sar	edx, 1
	mov	edi, edx
	shr	edi, 31					; 0000001fH
	add	esp, 24					; 00000018H
	add	edi, edx
; Line 761
	test	ebx, ebx
	je	SHORT $LN35@reserve@4
; Line 765
	push	ebx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@reserve@4:
; Line 769
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR __Ptr$82405[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
; Line 770
	lea	ecx, DWORD PTR [edi+edi*2]
	mov	DWORD PTR [esi+8], edx
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [esi+4], edx
; Line 771
	mov	DWORD PTR [esi], eax
$LN3@reserve@4:
; Line 773
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
__catch$?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z$0:
; Line 756
	mov	eax, DWORD PTR __Ptr$82405[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 757
	push	0
	push	0
	call	__CxxThrowException@8
$LN43@reserve@4:
$LN41@reserve@4:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Vec3D,std::allocator<Vec3D> >::reserve
PUBLIC	??$_Uninitialized_move@PAU?$pair@II@std@@PAU12@V?$allocator@U?$pair@II@std@@@2@@std@@YAPAU?$pair@II@0@PAU10@00AAV?$allocator@U?$pair@II@std@@@0@@Z ; std::_Uninitialized_move<std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *,std::allocator<std::pair<unsigned int,unsigned int> > >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninitialized_move@PAU?$pair@II@std@@PAU12@V?$allocator@U?$pair@II@std@@@2@@std@@YAPAU?$pair@II@0@PAU10@00AAV?$allocator@U?$pair@II@std@@@0@@Z
_TEXT	SEGMENT
__Cat$99937 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAU?$pair@II@std@@PAU12@V?$allocator@U?$pair@II@std@@@2@@std@@YAPAU?$pair@II@0@PAU10@00AAV?$allocator@U?$pair@II@std@@@0@@Z PROC ; std::_Uninitialized_move<std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *,std::allocator<std::pair<unsigned int,unsigned int> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
; Line 469
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 471
	mov	eax, DWORD PTR __Cat$99937[ebp]
	mov	ecx, DWORD PTR __Al$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	0
	push	ecx
	mov	ecx, DWORD PTR __First$[ebp]
	push	edx
	push	eax
	push	ecx
	call	??$_Uninit_move@PAU?$pair@II@std@@PAU12@V?$allocator@U?$pair@II@std@@@2@U12@@std@@YAPAU?$pair@II@0@PAU10@00AAV?$allocator@U?$pair@II@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *,std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int> >
	add	esp, 24					; 00000018H
; Line 472
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAU?$pair@II@std@@PAU12@V?$allocator@U?$pair@II@std@@@2@@std@@YAPAU?$pair@II@0@PAU10@00AAV?$allocator@U?$pair@II@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *,std::allocator<std::pair<unsigned int,unsigned int> > >
_TEXT	ENDS
PUBLIC	?setup@RibbonEmitter@@QAEXHH@Z			; RibbonEmitter::setup
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_newseg$75788 = -92					; size = 44
$T99953 = -48						; size = 12
$T99947 = -48						; size = 12
$T99945 = -48						; size = 12
$T99944 = -48						; size = 12
_ntpos$ = -36						; size = 12
_ntup$ = -24						; size = 12
tv1719 = -12						; size = 4
tv1712 = -12						; size = 4
$T100650 = -12						; size = 4
$T100144 = -12						; size = 4
tv1766 = -8						; size = 4
tv1759 = -8						; size = 4
tv1741 = -8						; size = 4
tv1734 = -8						; size = 4
$T100014 = -8						; size = 4
_l$ = -8						; size = 4
_dlen$ = -8						; size = 4
_erasemode$ = -1					; size = 1
_anim$ = 8						; size = 4
_time$ = 12						; size = 4
?setup@RibbonEmitter@@QAEXHH@Z PROC			; RibbonEmitter::setup
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\particle.cpp
; Line 602
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	mov	esi, ecx
; Line 603
	mov	eax, DWORD PTR [esi+384]
	fld	DWORD PTR [eax+312]
	push	edi
	fmul	DWORD PTR [esi+400]
	fld	DWORD PTR [eax+308]
	fmul	DWORD PTR [esi+396]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [eax+316]
	fmul	DWORD PTR [esi+404]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+320]
	fstp	DWORD PTR _ntpos$[ebp]
	fld	DWORD PTR [eax+328]
	fmul	DWORD PTR [esi+400]
	fld	DWORD PTR [eax+324]
	fmul	DWORD PTR [esi+396]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [eax+332]
	fmul	DWORD PTR [esi+404]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+336]
	fstp	DWORD PTR _ntpos$[ebp+4]
	fld	DWORD PTR [eax+344]
	fmul	DWORD PTR [esi+400]
	fld	DWORD PTR [eax+340]
	fmul	DWORD PTR [esi+396]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [eax+348]
	fmul	DWORD PTR [esi+404]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+352]
	fstp	DWORD PTR _ntpos$[ebp+8]
; Line 604
	fld	DWORD PTR [esi+396]
	fldz
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T99944[ebp]
	fadd	DWORD PTR [esi+400]
	fstp	DWORD PTR $T99944[ebp+4]
	fld	DWORD PTR [esi+404]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR $T99944[ebp+8]
	fld	DWORD PTR [eax+312]
	fld	DWORD PTR $T99944[ebp+4]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fld	DWORD PTR [eax+308]
	fld	DWORD PTR $T99944[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(3)
	faddp	ST(1), ST(0)
	fld	DWORD PTR [eax+316]
	fld	DWORD PTR $T99944[ebp+8]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+320]
	fstp	DWORD PTR _ntup$[ebp]
	fld	DWORD PTR [eax+328]
	fmul	ST(0), ST(2)
	fld	DWORD PTR [eax+324]
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	DWORD PTR [eax+332]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+336]
	fstp	DWORD PTR _ntup$[ebp+4]
	fld	DWORD PTR [eax+344]
	fmulp	ST(2), ST(0)
	fld	DWORD PTR [eax+340]
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	DWORD PTR [eax+348]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [eax+352]
	fstp	DWORD PTR _ntup$[ebp+8]
; Line 605
	fld	DWORD PTR _ntup$[ebp]
	fsub	DWORD PTR _ntpos$[ebp]
	fstp	DWORD PTR _ntup$[ebp]
	fld	DWORD PTR _ntup$[ebp+4]
	fsub	DWORD PTR _ntpos$[ebp+4]
	fstp	DWORD PTR _ntup$[ebp+4]
	fld	DWORD PTR _ntup$[ebp+8]
	fsub	DWORD PTR _ntpos$[ebp+8]
	fstp	DWORD PTR _ntup$[ebp+8]
	fld	DWORD PTR _ntup$[ebp]
; Line 606
	fld	DWORD PTR _ntup$[ebp+4]
	fld	DWORD PTR _ntup$[ebp+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv1766[ebp]
	fld	DWORD PTR tv1766[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv1759[ebp]
	fld	DWORD PTR tv1759[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR $T100014[ebp]
	fld	DWORD PTR $T100014[ebp]
	fld	ST(0)
	fmul	DWORD PTR _ntup$[ebp]
	fstp	DWORD PTR _ntup$[ebp]
	fld	DWORD PTR _ntup$[ebp+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _ntup$[ebp+4]
	fmul	DWORD PTR _ntup$[ebp+8]
	fstp	DWORD PTR _ntup$[ebp+8]
; Line 607
	fld	DWORD PTR _ntpos$[ebp]
	fsub	DWORD PTR [esi+428]
	fstp	DWORD PTR $T99945[ebp]
	fld	DWORD PTR _ntpos$[ebp+4]
	fsub	DWORD PTR [esi+432]
	fstp	DWORD PTR $T99945[ebp+4]
	fld	DWORD PTR _ntpos$[ebp+8]
	fsub	DWORD PTR [esi+436]
	fstp	DWORD PTR $T99945[ebp+8]
	fld	DWORD PTR $T99945[ebp]
	fld	DWORD PTR $T99945[ebp+4]
	fld	DWORD PTR $T99945[ebp+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv1741[ebp]
	fld	DWORD PTR tv1741[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv1734[ebp]
; Line 609
	mov	eax, DWORD PTR _anim$[ebp]
	fld	DWORD PTR tv1734[ebp]
; Line 610
	mov	ecx, DWORD PTR _time$[ebp]
	fstp	DWORD PTR _dlen$[ebp]
; Line 613
	mov	edx, DWORD PTR [esi+468]
	mov	DWORD PTR [esi+408], eax
	mov	DWORD PTR [esi+412], ecx
	mov	edi, DWORD PTR [edx]
; Line 614
	fld	DWORD PTR [edi+44]
	fld	DWORD PTR [esi+420]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	$LN7@setup
; Line 617
	fld	DWORD PTR [esi+428]
	fsub	DWORD PTR _ntpos$[ebp]
	fstp	DWORD PTR $T99947[ebp]
	fld	DWORD PTR [esi+432]
	fsub	DWORD PTR _ntpos$[ebp+4]
	fstp	DWORD PTR $T99947[ebp+4]
	fld	DWORD PTR [esi+436]
	fsub	DWORD PTR _ntpos$[ebp+8]
	fstp	DWORD PTR $T99947[ebp+8]
	fld	DWORD PTR $T99947[ebp]
	fld	DWORD PTR $T99947[ebp+4]
	fld	DWORD PTR $T99947[ebp+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv1719[ebp]
	fld	DWORD PTR tv1719[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv1712[ebp]
	fld	DWORD PTR tv1712[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR $T100144[ebp]
	fld	DWORD PTR $T99947[ebp]
	fld	DWORD PTR $T100144[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T99947[ebp]
	mov	eax, DWORD PTR $T99947[ebp]
	fld	DWORD PTR $T99947[ebp+4]
	mov	DWORD PTR [edi+32], eax
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T99947[ebp+4]
	mov	ecx, DWORD PTR $T99947[ebp+4]
	mov	DWORD PTR [edi+36], ecx
	fmul	DWORD PTR $T99947[ebp+8]
; Line 620
	mov	ecx, DWORD PTR _ntpos$[ebp]
	mov	DWORD PTR _newseg$75788[ebp], ecx
; Line 621
	mov	ecx, DWORD PTR _ntup$[ebp]
	fstp	DWORD PTR $T99947[ebp+8]
	mov	edx, DWORD PTR $T99947[ebp+8]
	mov	DWORD PTR [edi+40], edx
	mov	eax, DWORD PTR [edi+44]
	mov	edx, DWORD PTR _ntpos$[ebp+4]
	mov	DWORD PTR [edi+48], eax
	xor	eax, eax
	mov	DWORD PTR _newseg$75788[ebp+24], eax
	mov	DWORD PTR _newseg$75788[ebp+28], eax
	mov	DWORD PTR _newseg$75788[ebp+32], eax
	mov	eax, DWORD PTR _ntpos$[ebp+8]
	mov	DWORD PTR _newseg$75788[ebp+4], edx
	mov	edx, DWORD PTR _ntup$[ebp+4]
	mov	DWORD PTR _newseg$75788[ebp+8], eax
	mov	eax, DWORD PTR _ntup$[ebp+8]
	mov	DWORD PTR _newseg$75788[ebp+12], ecx
; Line 622
	mov	ecx, DWORD PTR _dlen$[ebp]
	mov	DWORD PTR _newseg$75788[ebp+16], edx
; Line 623
	mov	edx, DWORD PTR [esi+468]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR _newseg$75788[ebp+20], eax
	mov	DWORD PTR _newseg$75788[ebp+36], ecx
	mov	ecx, DWORD PTR [edi+4]
	lea	eax, DWORD PTR _newseg$75788[ebp]
	push	eax
	push	ecx
	push	edi
	lea	ecx, DWORD PTR [esi+468]
	call	?_Buynode@?$_List_val@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@std@@QAEPAU_Node@?$_List_nod@URibbonSegment@@V?$allocator@URibbonSegment@@@std@@@2@PAU342@0ABURibbonSegment@@@Z ; std::_List_val<RibbonSegment,std::allocator<RibbonSegment> >::_Buynode
	mov	ecx, DWORD PTR [esi+472]
	mov	edx, 97612892				; 05d1745cH
	sub	edx, ecx
	cmp	edx, 1
	jae	SHORT $LN112@setup
	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN237@setup:
$LN112@setup:
	inc	ecx
	mov	DWORD PTR [esi+472], ecx
	mov	DWORD PTR [edi+4], eax
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], eax
; Line 625
	jmp	SHORT $LN6@setup
$LN7@setup:
; Line 627
	mov	edx, DWORD PTR _ntup$[ebp]
; Line 629
	fld	DWORD PTR _dlen$[ebp]
	mov	eax, DWORD PTR _ntup$[ebp+4]
	mov	ecx, DWORD PTR _ntup$[ebp+8]
	mov	DWORD PTR [edi+20], edx
	mov	edx, DWORD PTR _ntpos$[ebp]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR _ntpos$[ebp+4]
	mov	DWORD PTR [edi+28], ecx
	fadd	DWORD PTR [edi+44]
	mov	ecx, DWORD PTR _ntpos$[ebp+8]
	mov	DWORD PTR [edi+8], edx
	fstp	DWORD PTR [edi+44]
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], ecx
$LN6@setup:
; Line 635
	mov	eax, DWORD PTR [esi+468]
	mov	edi, DWORD PTR [eax]
	mov	DWORD PTR _l$[ebp], 0
	mov	BYTE PTR _erasemode$[ebp], 0
	cmp	edi, eax
	je	SHORT $LN4@setup
$LL5@setup:
; Line 637
	cmp	BYTE PTR _erasemode$[ebp], 0
	jne	SHORT $LN3@setup
; Line 639
	fld	DWORD PTR _l$[ebp]
	fadd	DWORD PTR [edi+44]
	fstp	DWORD PTR _l$[ebp]
; Line 640
	fld	DWORD PTR _l$[ebp]
	fld	DWORD PTR [esi+416]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN234@setup
; Line 642
	fsub	DWORD PTR [esi+416]
; Line 643
	mov	BYTE PTR _erasemode$[ebp], 1
	fstp	DWORD PTR [edi+44]
; Line 645
	mov	edi, DWORD PTR [edi]
; Line 647
	jmp	SHORT $LN190@setup
$LN234@setup:
; Line 645
	mov	edi, DWORD PTR [edi]
	fstp	ST(0)
; Line 647
	jmp	SHORT $LN190@setup
$LN3@setup:
; Line 649
	mov	eax, edi
	mov	edi, DWORD PTR [edi]
	cmp	eax, DWORD PTR [esi+468]
	je	SHORT $LN190@setup
	mov	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+4]
	push	eax
	mov	DWORD PTR [edx+4], ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	dec	DWORD PTR [esi+472]
$LN190@setup:
; Line 635
	cmp	edi, DWORD PTR [esi+468]
	jne	SHORT $LL5@setup
$LN4@setup:
; Line 653
	mov	edx, DWORD PTR _ntpos$[ebp]
	mov	eax, DWORD PTR _ntpos$[ebp+4]
	mov	ecx, DWORD PTR _ntpos$[ebp+8]
	mov	DWORD PTR [esi+428], edx
; Line 654
	mov	edx, DWORD PTR _time$[ebp]
	mov	DWORD PTR [esi+432], eax
	mov	eax, DWORD PTR _anim$[ebp]
	push	edx
	mov	DWORD PTR [esi+436], ecx
	push	eax
	lea	ecx, DWORD PTR [esi+96]
	call	?getValue@?$Animated@MFVShortToFloat@@@@QAEMHH@Z ; Animated<float,short,ShortToFloat>::getValue
	fstp	DWORD PTR $T100650[ebp]
	mov	ebx, DWORD PTR _time$[ebp]
	mov	edi, DWORD PTR _anim$[ebp]
	push	ebx
	push	edi
	lea	ecx, DWORD PTR $T99953[ebp]
	push	ecx
	mov	ecx, esi
	call	?getValue@?$Animated@VVec3D@@V1@V?$Identity@VVec3D@@@@@@QAE?AVVec3D@@HH@Z ; Animated<Vec3D,Vec3D,Identity<Vec3D> >::getValue
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [esi+444], edx
	mov	edx, DWORD PTR $T100650[ebp]
; Line 656
	push	ebx
	mov	DWORD PTR [esi+440], ecx
	push	edi
	lea	ecx, DWORD PTR [esi+192]
	mov	DWORD PTR [esi+448], eax
	mov	DWORD PTR [esi+452], edx
	call	?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z ; Animated<float,float,Identity<float> >::getValue
	fstp	DWORD PTR [esi+456]
; Line 657
	push	ebx
	push	edi
	lea	ecx, DWORD PTR [esi+288]
	call	?getValue@?$Animated@MMV?$Identity@M@@@@QAEMHH@Z ; Animated<float,float,Identity<float> >::getValue
	fstp	DWORD PTR [esi+460]
	pop	edi
	pop	esi
	pop	ebx
; Line 658
	mov	esp, ebp
	pop	ebp
	ret	8
$LN236@setup:
?setup@RibbonEmitter@@QAEXHH@Z ENDP			; RibbonEmitter::setup
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IAEXI@Z ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IAEXI@Z PROC ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1290
	push	ebp
	mov	ebp, esp
; Line 1291
	mov	eax, DWORD PTR [ecx+4]
; Line 1292
	mov	edx, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, DWORD PTR [ecx]
	push	edi
	sub	eax, esi
	mov	edi, 134217727				; 07ffffffH
	sar	eax, 5
	sub	edi, edx
	cmp	edi, eax
	jae	SHORT $LN4@Reserve@3
; Line 1293
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN34@Reserve@3:
$LN4@Reserve@3:
; Line 1294
	add	eax, edx
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, esi
	sar	edx, 5
	cmp	eax, edx
	jbe	SHORT $LN1@Reserve@3
; Line 1297
	mov	esi, edx
	shr	esi, 1
	mov	edi, 134217727				; 07ffffffH
	sub	edi, esi
	cmp	edi, edx
	jae	SHORT $LN23@Reserve@3
	xor	edx, edx
	jmp	SHORT $LN24@Reserve@3
$LN23@Reserve@3:
	add	edx, esi
$LN24@Reserve@3:
	cmp	edx, eax
	jae	SHORT $LN20@Reserve@3
	mov	edx, eax
$LN20@Reserve@3:
	push	edx
	call	?reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXI@Z ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::reserve
$LN1@Reserve@3:
	pop	edi
	pop	esi
; Line 1298
	pop	ebp
	ret	4
$LN33@Reserve@3:
?_Reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IAEXI@Z ENDP ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Reserve
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IAEXI@Z ; std::vector<Vec3D,std::allocator<Vec3D> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IAEXI@Z PROC ; std::vector<Vec3D,std::allocator<Vec3D> >::_Reserve, COMDAT
; _this$ = ecx
; Line 1290
	push	ebp
	mov	ebp, esp
; Line 1291
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	push	edi
	mov	edi, DWORD PTR [ecx]
	sub	edx, edi
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
; Line 1292
	mov	eax, DWORD PTR __Count$[ebp]
	sar	edx, 1
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	mov	edx, 357913941				; 15555555H
	sub	edx, eax
	cmp	edx, esi
	jae	SHORT $LN4@Reserve@4
; Line 1293
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN34@Reserve@4:
$LN4@Reserve@4:
; Line 1294
	mov	edx, DWORD PTR [ecx+8]
	add	esi, eax
	sub	edx, edi
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	esi, eax
	jbe	SHORT $LN1@Reserve@4
; Line 1297
	mov	edx, eax
	shr	edx, 1
	mov	edi, 357913941				; 15555555H
	sub	edi, edx
	cmp	edi, eax
	jae	SHORT $LN23@Reserve@4
	xor	eax, eax
	jmp	SHORT $LN24@Reserve@4
$LN23@Reserve@4:
	add	eax, edx
$LN24@Reserve@4:
	cmp	eax, esi
	jae	SHORT $LN20@Reserve@4
	mov	eax, esi
$LN20@Reserve@4:
	push	eax
	call	?reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXI@Z ; std::vector<Vec3D,std::allocator<Vec3D> >::reserve
$LN1@Reserve@4:
	pop	edi
	pop	esi
; Line 1298
	pop	ebp
	ret	4
$LN33@Reserve@4:
?_Reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IAEXI@Z ENDP ; std::vector<Vec3D,std::allocator<Vec3D> >::_Reserve
_TEXT	ENDS
PUBLIC	??$_Umove@PAU?$pair@II@std@@@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IAEPAU?$pair@II@1@PAU21@00@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Umove<std::pair<unsigned int,unsigned int> *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAU?$pair@II@std@@@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IAEPAU?$pair@II@1@PAU21@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$100810 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAU?$pair@II@std@@@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IAEPAU?$pair@II@1@PAU21@00@Z PROC ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Umove<std::pair<unsigned int,unsigned int> *>, COMDAT
; _this$ = ecx
; Line 1322
	push	ebp
	mov	ebp, esp
; Line 1325
	mov	eax, DWORD PTR __Cat$100810[ebp]
	mov	edx, DWORD PTR __Last$[ebp]
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	0
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	push	edx
	push	eax
	call	??$_Uninit_move@PAU?$pair@II@std@@PAU12@V?$allocator@U?$pair@II@std@@@2@U12@@std@@YAPAU?$pair@II@0@PAU10@00AAV?$allocator@U?$pair@II@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *,std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int> >
	add	esp, 24					; 00000018H
; Line 1326
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAU?$pair@II@std@@@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IAEPAU?$pair@II@1@PAU21@00@Z ENDP ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Umove<std::pair<unsigned int,unsigned int> *>
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXABUTexCoordSet@@@Z ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXABUTexCoordSet@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXABUTexCoordSet@@@Z PROC ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::push_back, COMDAT
; _this$ = ecx
; Line 976
	push	ebp
	mov	ebp, esp
	push	esi
; Line 977
	mov	esi, DWORD PTR __Val$[ebp]
	push	edi
	mov	edi, ecx
	mov	eax, DWORD PTR [edi+4]
	cmp	esi, eax
	jae	SHORT $LN4@push_back@4
	mov	ecx, DWORD PTR [edi]
	cmp	ecx, esi
	ja	SHORT $LN4@push_back@4
; Line 979
	sub	esi, ecx
; Line 980
	cmp	eax, DWORD PTR [edi+8]
	jne	SHORT $LN3@push_back@4
; Line 981
	push	1
	mov	ecx, edi
	call	?_Reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IAEXI@Z ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Reserve
$LN3@push_back@4:
; Line 985
	mov	ecx, DWORD PTR [edi+4]
	test	ecx, ecx
	je	$LN70@push_back@4
	and	esi, -32				; ffffffe0H
	add	esi, DWORD PTR [edi]
	mov	eax, esi
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], edx
	mov	edx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+24], edx
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+28], eax
; Line 996
	add	DWORD PTR [edi+4], 32			; 00000020H
	pop	edi
	pop	esi
; Line 998
	pop	ebp
	ret	4
$LN4@push_back@4:
; Line 990
	cmp	eax, DWORD PTR [edi+8]
	jne	SHORT $LN1@push_back@4
; Line 991
	push	1
	mov	ecx, edi
	call	?_Reserve@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@IAEXI@Z ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::_Reserve
$LN1@push_back@4:
; Line 995
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	je	SHORT $LN70@push_back@4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [esi+20]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR [esi+24]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR [esi+28]
	mov	DWORD PTR [eax+28], edx
$LN70@push_back@4:
; Line 996
	add	DWORD PTR [edi+4], 32			; 00000020H
	pop	edi
	pop	esi
; Line 998
	pop	ebp
	ret	4
?push_back@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXABUTexCoordSet@@@Z ENDP ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXABVVec3D@@@Z ; std::vector<Vec3D,std::allocator<Vec3D> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXABVVec3D@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXABVVec3D@@@Z PROC ; std::vector<Vec3D,std::allocator<Vec3D> >::push_back, COMDAT
; _this$ = ecx
; Line 976
	push	ebp
	mov	ebp, esp
	push	esi
; Line 977
	mov	esi, DWORD PTR __Val$[ebp]
	push	edi
	mov	edi, ecx
	mov	ecx, DWORD PTR [edi+4]
	cmp	esi, ecx
	jae	SHORT $LN4@push_back@5
	mov	eax, DWORD PTR [edi]
	cmp	eax, esi
	ja	SHORT $LN4@push_back@5
; Line 979
	sub	esi, eax
	mov	eax, 715827883				; 2aaaaaabH
	imul	esi
	sar	edx, 1
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
; Line 980
	cmp	ecx, DWORD PTR [edi+8]
	jne	SHORT $LN3@push_back@5
; Line 981
	push	1
	mov	ecx, edi
	call	?_Reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IAEXI@Z ; std::vector<Vec3D,std::allocator<Vec3D> >::_Reserve
$LN3@push_back@5:
; Line 985
	mov	ecx, DWORD PTR [edi]
	lea	eax, DWORD PTR [esi+esi*2]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	je	SHORT $LN41@push_back@5
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
; Line 996
	add	DWORD PTR [edi+4], 12			; 0000000cH
	pop	edi
	pop	esi
; Line 998
	pop	ebp
	ret	4
$LN4@push_back@5:
; Line 990
	cmp	ecx, DWORD PTR [edi+8]
	jne	SHORT $LN1@push_back@5
; Line 991
	push	1
	mov	ecx, edi
	call	?_Reserve@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@IAEXI@Z ; std::vector<Vec3D,std::allocator<Vec3D> >::_Reserve
$LN1@push_back@5:
; Line 995
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	je	SHORT $LN41@push_back@5
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
$LN41@push_back@5:
; Line 996
	add	DWORD PTR [edi+4], 12			; 0000000cH
	pop	edi
	pop	esi
; Line 998
	pop	ebp
	ret	4
?push_back@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXABVVec3D@@@Z ENDP ; std::vector<Vec3D,std::allocator<Vec3D> >::push_back
_TEXT	ENDS
PUBLIC	?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$82355 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$101223 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z PROC ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 746
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx
; Line 747
	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, 536870911				; 1fffffffH
	jbe	SHORT $LN5@reserve@5
; Line 748
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN42@reserve@5:
$LN5@reserve@5:
; Line 749
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 3
	cmp	ecx, eax
	jae	SHORT $LN3@reserve@5
; Line 751
	lea	edi, DWORD PTR [esi+12]
	push	eax
	mov	ecx, edi
	call	?allocate@?$allocator@U?$pair@II@std@@@std@@QAEPAU?$pair@II@2@I@Z ; std::allocator<std::pair<unsigned int,unsigned int> >::allocate
; Line 754
	mov	edx, DWORD PTR __Cat$101223[ebp]
	mov	ecx, DWORD PTR [esi]
	push	edx
	push	0
	mov	ebx, eax
	mov	eax, DWORD PTR [esi+4]
	push	edi
	push	ebx
	push	eax
	push	ecx
	mov	DWORD PTR __Ptr$82355[ebp], ebx
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	call	??$_Uninit_move@PAU?$pair@II@std@@PAU12@V?$allocator@U?$pair@II@std@@@2@U12@@std@@YAPAU?$pair@II@0@PAU10@00AAV?$allocator@U?$pair@II@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *,std::allocator<std::pair<unsigned int,unsigned int> >,std::pair<unsigned int,unsigned int> >
; Line 760
	mov	eax, DWORD PTR [esi]
	mov	edi, DWORD PTR [esi+4]
	sub	edi, eax
	add	esp, 24					; 00000018H
	sar	edi, 3
; Line 761
	test	eax, eax
	je	SHORT $LN35@reserve@5
; Line 765
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@reserve@5:
; Line 769
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [ebx+eax*8]
; Line 770
	lea	edx, DWORD PTR [ebx+edi*8]
	mov	DWORD PTR [esi+8], ecx
	mov	DWORD PTR [esi+4], edx
; Line 771
	mov	DWORD PTR [esi], ebx
$LN3@reserve@5:
; Line 773
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
__catch$?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z$0:
; Line 756
	mov	eax, DWORD PTR __Ptr$82355[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 757
	push	0
	push	0
	call	__CxxThrowException@8
$LN43@reserve@5:
$LN41@reserve@5:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z ENDP ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::reserve
PUBLIC	?_Reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IAEXI@Z PROC ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Reserve, COMDAT
; _this$ = ecx
; Line 1290
	push	ebp
	mov	ebp, esp
; Line 1291
	mov	eax, DWORD PTR [ecx+4]
; Line 1292
	mov	edx, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, DWORD PTR [ecx]
	push	edi
	sub	eax, esi
	mov	edi, 536870911				; 1fffffffH
	sar	eax, 3
	sub	edi, edx
	cmp	edi, eax
	jae	SHORT $LN4@Reserve@5
; Line 1293
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN34@Reserve@5:
$LN4@Reserve@5:
; Line 1294
	add	eax, edx
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, esi
	sar	edx, 3
	cmp	eax, edx
	jbe	SHORT $LN1@Reserve@5
; Line 1297
	mov	esi, edx
	shr	esi, 1
	mov	edi, 536870911				; 1fffffffH
	sub	edi, esi
	cmp	edi, edx
	jae	SHORT $LN23@Reserve@5
	xor	edx, edx
	jmp	SHORT $LN24@Reserve@5
$LN23@Reserve@5:
	add	edx, esi
$LN24@Reserve@5:
	cmp	edx, eax
	jae	SHORT $LN20@Reserve@5
	mov	edx, eax
$LN20@Reserve@5:
	push	edx
	call	?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::reserve
$LN1@Reserve@5:
	pop	edi
	pop	esi
; Line 1298
	pop	ebp
	ret	4
$LN33@Reserve@5:
?_Reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IAEXI@Z ENDP ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Reserve
_TEXT	ENDS
PUBLIC	?push_back@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXABU?$pair@II@2@@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXABU?$pair@II@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXABU?$pair@II@2@@Z PROC ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::push_back, COMDAT
; _this$ = ecx
; Line 976
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 977
	mov	eax, DWORD PTR [esi+4]
	push	edi
	mov	edi, DWORD PTR __Val$[ebp]
	cmp	edi, eax
	jae	SHORT $LN4@push_back@6
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, edi
	ja	SHORT $LN4@push_back@6
; Line 979
	sub	edi, ecx
	sar	edi, 3
; Line 980
	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN3@push_back@6
; Line 981
	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Reserve
$LN3@push_back@6:
; Line 985
	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR [eax+edi*8]
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN47@push_back@6
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
; Line 995
	mov	DWORD PTR [eax+4], ecx
; Line 996
	add	DWORD PTR [esi+4], 8
	pop	edi
	pop	esi
; Line 998
	pop	ebp
	ret	4
$LN4@push_back@6:
; Line 990
	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN1@push_back@6
; Line 991
	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::_Reserve
$LN1@push_back@6:
; Line 995
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN47@push_back@6
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [eax+4], ecx
$LN47@push_back@6:
; Line 996
	add	DWORD PTR [esi+4], 8
	pop	edi
	pop	esi
; Line 998
	pop	ebp
	ret	4
?push_back@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXABU?$pair@II@2@@Z ENDP ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::push_back
_TEXT	ENDS
PUBLIC	?init@?$Animated@VVec3D@@V1@V?$Identity@VVec3D@@@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<Vec3D,Vec3D,Identity<Vec3D> >::init
; Function compile flags: /Ogtp
;	COMDAT ?init@?$Animated@VVec3D@@V1@V?$Identity@VVec3D@@@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z
_TEXT	SEGMENT
_r$78284 = -16						; size = 8
_r$78281 = -16						; size = 8
_ptimes$ = -12						; size = 4
tv1398 = -8						; size = 4
_i$78288 = -8						; size = 4
_this$ = -4						; size = 4
_b$ = 8							; size = 4
tv1103 = 12						; size = 4
_f$ = 12						; size = 4
tv1105 = 16						; size = 4
$T101504 = 16						; size = 4
_i$78276 = 16						; size = 4
_gs$ = 16						; size = 4
?init@?$Animated@VVec3D@@V1@V?$Identity@VVec3D@@@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z PROC ; Animated<Vec3D,Vec3D,Identity<Vec3D> >::init, COMDAT
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\animated.h
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 157
	mov	eax, DWORD PTR _gs$[ebp]
	push	ebx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi+12], eax
	push	edi
; Line 158
	mov	edi, DWORD PTR _b$[ebp]
	movsx	ecx, WORD PTR [edi]
	mov	DWORD PTR [esi+4], ecx
; Line 159
	movsx	edx, WORD PTR [edi+2]
	mov	DWORD PTR [esi+8], edx
; Line 164
	mov	eax, ecx
	xor	edx, edx
	cmp	eax, edx
	setne	cl
	mov	BYTE PTR [esi], cl
; Line 167
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR _this$[ebp], esi
	cmp	ecx, edx
	jbe	$LN19@init
; Line 169
	mov	eax, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [eax+1028]
	add	eax, DWORD PTR [edi+8]
; Line 170
	mov	DWORD PTR _i$78276[ebp], edx
	cmp	ecx, edx
	jbe	$LN292@init
; Line 169
	mov	ebx, eax
$LL18@init:
; Line 173
	mov	ecx, DWORD PTR [ebx]
; Line 174
	mov	edx, DWORD PTR [ebx+4]
; Line 175
	mov	eax, DWORD PTR [esi+20]
	mov	DWORD PTR _r$78281[ebp], ecx
	add	ebx, 8
	lea	ecx, DWORD PTR _r$78281[ebp]
	mov	DWORD PTR _r$78281[ebp+4], edx
	mov	DWORD PTR tv1398[ebp], ebx
	cmp	ecx, eax
	jae	SHORT $LN294@init
	mov	edx, DWORD PTR [esi+16]
	cmp	edx, ecx
	ja	SHORT $LN294@init
	mov	edi, ecx
	mov	ecx, DWORD PTR [esi+24]
	sub	edi, edx
	sar	edi, 3
	cmp	eax, ecx
	jne	SHORT $LN290@init
	sub	eax, edx
	sar	eax, 3
	cmp	eax, 536870910				; 1ffffffeH
	ja	$LN280@init
	sub	ecx, edx
	inc	eax
	sar	ecx, 3
	cmp	eax, ecx
	jbe	SHORT $LN290@init
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 536870911				; 1fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN65@init
	xor	ecx, ecx
	jmp	SHORT $LN66@init
$LN65@init:
	add	ecx, edx
$LN66@init:
	cmp	ecx, eax
	jae	SHORT $LN62@init
	mov	ecx, eax
$LN62@init:
	push	ecx
	lea	ecx, DWORD PTR [esi+16]
	call	?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::reserve
	mov	ebx, DWORD PTR tv1398[ebp]
$LN290@init:
	mov	eax, DWORD PTR [esi+20]
	mov	edx, DWORD PTR [esi+16]
	lea	edi, DWORD PTR [edx+edi*8]
	test	eax, eax
	je	SHORT $LN84@init
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [edi+4]
	mov	DWORD PTR [eax+4], edx
$LN84@init:
	mov	edi, DWORD PTR _b$[ebp]
	jmp	SHORT $LN140@init
$LN294@init:
	mov	ecx, DWORD PTR [esi+24]
	cmp	eax, ecx
	jne	SHORT $LN295@init
	mov	edx, DWORD PTR [esi+16]
	sub	eax, edx
	sar	eax, 3
	cmp	eax, 536870910				; 1ffffffeH
	ja	SHORT $LN280@init
	sub	ecx, edx
	inc	eax
	sar	ecx, 3
	cmp	eax, ecx
	jbe	SHORT $LN295@init
	mov	edx, ecx
	shr	edx, 1
	mov	edi, 536870911				; 1fffffffH
	sub	edi, edx
	cmp	edi, ecx
	jae	SHORT $LN120@init
	xor	ecx, ecx
	jmp	SHORT $LN121@init
$LN120@init:
	add	ecx, edx
$LN121@init:
	cmp	ecx, eax
	jae	SHORT $LN117@init
	mov	ecx, eax
$LN117@init:
	push	ecx
	lea	ecx, DWORD PTR [esi+16]
	call	?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::reserve
	mov	edi, DWORD PTR _b$[ebp]
$LN295@init:
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN140@init
	mov	ecx, DWORD PTR _r$78281[ebp]
	mov	edx, DWORD PTR _r$78281[ebp+4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
$LN140@init:
	mov	eax, DWORD PTR _i$78276[ebp]
	add	DWORD PTR [esi+20], 8
	inc	eax
	mov	DWORD PTR _i$78276[ebp], eax
	cmp	eax, DWORD PTR [edi+4]
	jb	$LL18@init
; Line 188
	jmp	SHORT $LN292@init
$LN280@init:
; Line 175
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN300@init:
$LN19@init:
; Line 177
	cmp	eax, edx
	je	SHORT $LN292@init
	cmp	DWORD PTR [esi+8], -1
	jne	SHORT $LN292@init
; Line 181
	mov	eax, DWORD PTR [edi+20]
	mov	DWORD PTR _r$78284[ebp], edx
; Line 182
	lea	edx, DWORD PTR _r$78284[ebp]
	dec	eax
	lea	ecx, DWORD PTR [esi+16]
	push	edx
	mov	DWORD PTR _r$78284[ebp+4], eax
	call	?push_back@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXABU?$pair@II@2@@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::push_back
$LN292@init:
; Line 187
	mov	ecx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edi+16]
	add	eax, DWORD PTR [ecx+1028]
; Line 188
	xor	ecx, ecx
	mov	DWORD PTR _ptimes$[ebp], eax
	mov	DWORD PTR _i$78288[ebp], ecx
	cmp	DWORD PTR [edi+12], ecx
	jbe	$LN11@init
	jmp	SHORT $LN13@init
	npad	7
$LL298@init:
	mov	eax, DWORD PTR _ptimes$[ebp]
$LN13@init:
	mov	ebx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [esi+36]
	lea	edx, DWORD PTR $T101504[ebp]
	mov	DWORD PTR $T101504[ebp], ebx
	cmp	edx, eax
	jae	SHORT $LN296@init
	mov	edx, DWORD PTR [esi+32]
	lea	ecx, DWORD PTR $T101504[ebp]
	cmp	edx, ecx
	ja	SHORT $LN296@init
	mov	edi, ecx
	mov	ecx, DWORD PTR [esi+40]
	sub	edi, edx
	sar	edi, 2
	cmp	eax, ecx
	jne	SHORT $LN293@init
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN280@init
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN293@init
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 1073741823				; 3fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN193@init
	xor	ecx, ecx
	jmp	SHORT $LN194@init
$LN193@init:
	add	ecx, edx
$LN194@init:
	cmp	ecx, eax
	jae	SHORT $LN190@init
	mov	ecx, eax
$LN190@init:
	push	ecx
	lea	ecx, DWORD PTR [esi+32]
	call	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
$LN293@init:
	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	SHORT $LN212@init
	mov	edx, DWORD PTR [esi+32]
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [eax], ecx
$LN212@init:
	mov	edi, DWORD PTR _b$[ebp]
	jmp	SHORT $LN260@init
$LN296@init:
	mov	ecx, DWORD PTR [esi+40]
	cmp	eax, ecx
	jne	SHORT $LN297@init
	mov	edx, DWORD PTR [esi+32]
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN280@init
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN297@init
	mov	edx, ecx
	shr	edx, 1
	mov	edi, 1073741823				; 3fffffffH
	sub	edi, edx
	cmp	edi, ecx
	jae	SHORT $LN240@init
	xor	ecx, ecx
	jmp	SHORT $LN241@init
$LN240@init:
	add	ecx, edx
$LN241@init:
	cmp	ecx, eax
	jae	SHORT $LN237@init
	mov	ecx, eax
$LN237@init:
	push	ecx
	lea	ecx, DWORD PTR [esi+32]
	call	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
	mov	edi, DWORD PTR _b$[ebp]
$LN297@init:
	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	SHORT $LN260@init
	mov	DWORD PTR [eax], ebx
$LN260@init:
	mov	ecx, DWORD PTR _i$78288[ebp]
	add	DWORD PTR [esi+36], 4
	inc	ecx
	mov	DWORD PTR _i$78288[ebp], ecx
	cmp	ecx, DWORD PTR [edi+12]
	jb	$LL298@init
$LN11@init:
; Line 192
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edi+24]
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [eax+4]
	add	esi, DWORD PTR [edx+1028]
	test	eax, eax
	js	$LN5@init
	cmp	eax, 1
	jle	SHORT $LN8@init
	cmp	eax, 2
	jne	$LN5@init
; Line 199
	mov	ecx, DWORD PTR _b$[ebp]
	xor	edi, edi
	cmp	DWORD PTR [ecx+20], edi
	jbe	SHORT $LN5@init
	mov	ebx, DWORD PTR _this$[ebp]
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+64]
	add	eax, 80					; 00000050H
; Line 201
	mov	DWORD PTR tv1103[ebp], edx
	mov	DWORD PTR tv1105[ebp], eax
	add	esi, 24					; 00000018H
	npad	5
$LL3@init:
	lea	eax, DWORD PTR [esi-24]
	push	eax
	lea	ecx, DWORD PTR [ebx+48]
	call	?push_back@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXABVVec3D@@@Z ; std::vector<Vec3D,std::allocator<Vec3D> >::push_back
; Line 202
	lea	ecx, DWORD PTR [esi-12]
	push	ecx
	mov	ecx, DWORD PTR tv1103[ebp]
	call	?push_back@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXABVVec3D@@@Z ; std::vector<Vec3D,std::allocator<Vec3D> >::push_back
; Line 203
	mov	ecx, DWORD PTR tv1105[ebp]
	push	esi
	call	?push_back@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXABVVec3D@@@Z ; std::vector<Vec3D,std::allocator<Vec3D> >::push_back
	mov	edx, DWORD PTR _b$[ebp]
	inc	edi
	add	esi, 36					; 00000024H
	cmp	edi, DWORD PTR [edx+20]
	jb	SHORT $LL3@init
	pop	edi
	pop	esi
	pop	ebx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN8@init:
; Line 196
	mov	eax, DWORD PTR _b$[ebp]
	xor	edi, edi
	cmp	DWORD PTR [eax+20], edi
	jbe	SHORT $LN5@init
	mov	ebx, DWORD PTR _this$[ebp]
$LL7@init:
	push	esi
	lea	ecx, DWORD PTR [ebx+48]
	call	?push_back@?$vector@VVec3D@@V?$allocator@VVec3D@@@std@@@std@@QAEXABVVec3D@@@Z ; std::vector<Vec3D,std::allocator<Vec3D> >::push_back
	mov	ecx, DWORD PTR _b$[ebp]
	inc	edi
	add	esi, 12					; 0000000cH
	cmp	edi, DWORD PTR [ecx+20]
	jb	SHORT $LL7@init
$LN5@init:
	pop	edi
	pop	esi
	pop	ebx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN299@init:
?init@?$Animated@VVec3D@@V1@V?$Identity@VVec3D@@@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ENDP ; Animated<Vec3D,Vec3D,Identity<Vec3D> >::init
_TEXT	ENDS
PUBLIC	?init@?$Animated@MFVShortToFloat@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<float,short,ShortToFloat>::init
; Function compile flags: /Ogtp
;	COMDAT ?init@?$Animated@MFVShortToFloat@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z
_TEXT	SEGMENT
_r$78384 = -16						; size = 8
_r$78381 = -16						; size = 8
_keys$ = -12						; size = 4
_ptimes$ = -12						; size = 4
tv3311 = -8						; size = 4
_i$78406 = -8						; size = 4
_i$78388 = -8						; size = 4
_this$ = -4						; size = 4
_b$ = 8							; size = 4
tv3451 = 12						; size = 4
tv3433 = 12						; size = 4
$T102522 = 12						; size = 4
_f$ = 12						; size = 4
tv3485 = 16						; size = 4
tv3468 = 16						; size = 4
tv3450 = 16						; size = 4
$T102525 = 16						; size = 4
$T102524 = 16						; size = 4
$T102523 = 16						; size = 4
_i$78400 = 16						; size = 4
$T102521 = 16						; size = 4
_i$78376 = 16						; size = 4
_gs$ = 16						; size = 4
?init@?$Animated@MFVShortToFloat@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z PROC ; Animated<float,short,ShortToFloat>::init, COMDAT
; _this$ = ecx
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 157
	mov	eax, DWORD PTR _gs$[ebp]
	push	ebx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi+12], eax
	push	edi
; Line 158
	mov	edi, DWORD PTR _b$[ebp]
	movsx	ecx, WORD PTR [edi]
	mov	DWORD PTR [esi+4], ecx
; Line 159
	movsx	edx, WORD PTR [edi+2]
	mov	DWORD PTR [esi+8], edx
; Line 164
	mov	eax, ecx
	xor	edx, edx
	cmp	eax, edx
	setne	cl
	mov	BYTE PTR [esi], cl
; Line 167
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR _this$[ebp], esi
	cmp	ecx, edx
	jbe	$LN19@init@2
; Line 169
	mov	eax, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [eax+1028]
	add	eax, DWORD PTR [edi+8]
; Line 170
	mov	DWORD PTR _i$78376[ebp], edx
	cmp	ecx, edx
	jbe	$LN14@init@2
; Line 169
	mov	ebx, eax
$LL18@init@2:
; Line 173
	mov	ecx, DWORD PTR [ebx]
; Line 174
	mov	edx, DWORD PTR [ebx+4]
; Line 175
	mov	eax, DWORD PTR [esi+20]
	mov	DWORD PTR _r$78381[ebp], ecx
	add	ebx, 8
	lea	ecx, DWORD PTR _r$78381[ebp]
	mov	DWORD PTR _r$78381[ebp+4], edx
	mov	DWORD PTR tv3311[ebp], ebx
	cmp	ecx, eax
	jae	SHORT $LN32@init@2
	mov	edx, DWORD PTR [esi+16]
	cmp	edx, ecx
	ja	SHORT $LN32@init@2
	mov	edi, ecx
	mov	ecx, DWORD PTR [esi+24]
	sub	edi, edx
	sar	edi, 3
	cmp	eax, ecx
	jne	SHORT $LN43@init@2
	sub	eax, edx
	sar	eax, 3
	cmp	eax, 536870910				; 1ffffffeH
	ja	$LN716@init@2
	sub	ecx, edx
	inc	eax
	sar	ecx, 3
	cmp	eax, ecx
	jbe	SHORT $LN43@init@2
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 536870911				; 1fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN65@init@2
	xor	ecx, ecx
	jmp	SHORT $LN66@init@2
$LN65@init@2:
	add	ecx, edx
$LN66@init@2:
	cmp	ecx, eax
	jae	SHORT $LN62@init@2
	mov	ecx, eax
$LN62@init@2:
	push	ecx
	lea	ecx, DWORD PTR [esi+16]
	call	?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::reserve
	mov	ebx, DWORD PTR tv3311[ebp]
$LN43@init@2:
	mov	eax, DWORD PTR [esi+20]
	mov	edx, DWORD PTR [esi+16]
	lea	edi, DWORD PTR [edx+edi*8]
	test	eax, eax
	je	SHORT $LN140@init@2
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [edi+4]
	jmp	SHORT $LN750@init@2
$LN32@init@2:
	mov	ecx, DWORD PTR [esi+24]
	cmp	eax, ecx
	jne	SHORT $LN739@init@2
	mov	edx, DWORD PTR [esi+16]
	sub	eax, edx
	sar	eax, 3
	cmp	eax, 536870910				; 1ffffffeH
	ja	SHORT $LN716@init@2
	sub	ecx, edx
	inc	eax
	sar	ecx, 3
	cmp	eax, ecx
	jbe	SHORT $LN739@init@2
	mov	edx, ecx
	shr	edx, 1
	mov	edi, 536870911				; 1fffffffH
	sub	edi, edx
	cmp	edi, ecx
	jae	SHORT $LN120@init@2
	xor	ecx, ecx
	jmp	SHORT $LN121@init@2
$LN120@init@2:
	add	ecx, edx
$LN121@init@2:
	cmp	ecx, eax
	jae	SHORT $LN117@init@2
	mov	ecx, eax
$LN117@init@2:
	push	ecx
	lea	ecx, DWORD PTR [esi+16]
	call	?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::reserve
$LN739@init@2:
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN140@init@2
	mov	ecx, DWORD PTR _r$78381[ebp]
	mov	edx, DWORD PTR _r$78381[ebp+4]
	mov	DWORD PTR [eax], ecx
$LN750@init@2:
	mov	DWORD PTR [eax+4], edx
$LN140@init@2:
; Line 170
	mov	eax, DWORD PTR _i$78376[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
; Line 175
	add	DWORD PTR [esi+20], 8
	inc	eax
	mov	DWORD PTR _i$78376[ebp], eax
	cmp	eax, DWORD PTR [ecx+4]
	jb	$LL18@init@2
; Line 196
	mov	edi, ecx
	jmp	SHORT $LN14@init@2
$LN716@init@2:
; Line 175
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN751@init@2:
$LN19@init@2:
; Line 177
	cmp	eax, edx
	je	SHORT $LN14@init@2
	cmp	DWORD PTR [esi+8], -1
	jne	SHORT $LN14@init@2
; Line 180
	mov	DWORD PTR _r$78384[ebp], edx
; Line 181
	mov	edx, DWORD PTR [edi+20]
; Line 182
	lea	eax, DWORD PTR _r$78384[ebp]
	dec	edx
	lea	ecx, DWORD PTR [esi+16]
	push	eax
	mov	DWORD PTR _r$78384[ebp+4], edx
	call	?push_back@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXABU?$pair@II@2@@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::push_back
$LN14@init@2:
; Line 187
	mov	ecx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edi+16]
	add	eax, DWORD PTR [ecx+1028]
; Line 188
	xor	ecx, ecx
	mov	DWORD PTR _ptimes$[ebp], eax
	mov	DWORD PTR _i$78388[ebp], ecx
	cmp	DWORD PTR [edi+12], ecx
	jbe	$LN11@init@2
	jmp	SHORT $LN13@init@2
$LL748@init@2:
	mov	eax, DWORD PTR _ptimes$[ebp]
$LN13@init@2:
	mov	edi, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [esi+36]
	lea	edx, DWORD PTR $T102521[ebp]
	mov	DWORD PTR $T102521[ebp], edi
	cmp	edx, eax
	jae	SHORT $LN160@init@2
	mov	edx, DWORD PTR [esi+32]
	lea	ecx, DWORD PTR $T102521[ebp]
	cmp	edx, ecx
	ja	SHORT $LN160@init@2
	mov	edi, ecx
	mov	ecx, DWORD PTR [esi+40]
	sub	edi, edx
	sar	edi, 2
	cmp	eax, ecx
	jne	SHORT $LN740@init@2
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@2
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN740@init@2
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 1073741823				; 3fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN193@init@2
	xor	ecx, ecx
	jmp	SHORT $LN194@init@2
$LN193@init@2:
	add	ecx, edx
$LN194@init@2:
	cmp	ecx, eax
	jae	SHORT $LN190@init@2
	mov	ecx, eax
$LN190@init@2:
	push	ecx
	lea	ecx, DWORD PTR [esi+32]
	call	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
$LN740@init@2:
	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	SHORT $LN260@init@2
	mov	edx, DWORD PTR [esi+32]
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN260@init@2
$LN160@init@2:
	mov	ecx, DWORD PTR [esi+40]
	cmp	eax, ecx
	jne	SHORT $LN741@init@2
	mov	edx, DWORD PTR [esi+32]
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@2
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN741@init@2
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 1073741823				; 3fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN240@init@2
	xor	ecx, ecx
	jmp	SHORT $LN241@init@2
$LN240@init@2:
	add	ecx, edx
$LN241@init@2:
	cmp	ecx, eax
	jae	SHORT $LN237@init@2
	mov	ecx, eax
$LN237@init@2:
	push	ecx
	lea	ecx, DWORD PTR [esi+32]
	call	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
$LN741@init@2:
	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	SHORT $LN260@init@2
	mov	DWORD PTR [eax], edi
$LN260@init@2:
	mov	ecx, DWORD PTR _i$78388[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	add	DWORD PTR [esi+36], 4
	inc	ecx
	mov	DWORD PTR _i$78388[ebp], ecx
	cmp	ecx, DWORD PTR [edx+12]
	jb	$LL748@init@2
; Line 196
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, edx
$LN11@init@2:
; Line 191
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [edi+24]
	add	ecx, DWORD PTR [eax+1028]
; Line 192
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR _keys$[ebp], ecx
	test	eax, eax
	js	$LN5@init@2
	cmp	eax, 1
	jle	$LN8@init@2
	cmp	eax, 2
	jne	$LN5@init@2
; Line 199
	cmp	DWORD PTR [edi+20], 0
	mov	DWORD PTR _i$78406[ebp], 0
	jbe	$LN5@init@2
	add	ecx, 4
	mov	DWORD PTR tv3451[ebp], ecx
	lea	ebx, DWORD PTR [eax+2]
$LL738@init@2:
; Line 201
	mov	ecx, DWORD PTR tv3451[ebp]
	movsx	edx, WORD PTR [ecx-4]
	mov	DWORD PTR tv3485[ebp], edx
	mov	esi, DWORD PTR _this$[ebp]
	fild	DWORD PTR tv3485[ebp]
	mov	eax, DWORD PTR [esi+52]
	lea	ecx, DWORD PTR $T102523[ebp]
	fdiv	QWORD PTR __real@40dfffc000000000
	fstp	DWORD PTR $T102523[ebp]
	cmp	ecx, eax
	jae	SHORT $LN384@init@2
	mov	edx, DWORD PTR [esi+48]
	cmp	edx, ecx
	ja	SHORT $LN384@init@2
	mov	edi, ecx
	mov	ecx, DWORD PTR [esi+56]
	sub	edi, edx
	sar	edi, 2
	cmp	eax, ecx
	jne	SHORT $LN395@init@2
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@2
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN395@init@2
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 1073741823				; 3fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN417@init@2
	xor	ecx, ecx
	jmp	SHORT $LN418@init@2
$LN417@init@2:
	add	ecx, edx
$LN418@init@2:
	cmp	ecx, eax
	jae	SHORT $LN414@init@2
	mov	ecx, eax
$LN414@init@2:
	push	ecx
	lea	ecx, DWORD PTR [esi+48]
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
	mov	ebx, 4
$LN395@init@2:
	mov	eax, DWORD PTR [esi+52]
	test	eax, eax
	je	SHORT $LN484@init@2
	mov	edx, DWORD PTR [esi+48]
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN484@init@2
$LN384@init@2:
	mov	ecx, DWORD PTR [esi+56]
	cmp	eax, ecx
	jne	SHORT $LN745@init@2
	mov	edx, DWORD PTR [esi+48]
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@2
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN745@init@2
	mov	edx, ecx
	shr	edx, 1
	mov	edi, 1073741823				; 3fffffffH
	sub	edi, edx
	cmp	edi, ecx
	jae	SHORT $LN464@init@2
	xor	ecx, ecx
	jmp	SHORT $LN465@init@2
$LN464@init@2:
	add	ecx, edx
$LN465@init@2:
	cmp	ecx, eax
	jae	SHORT $LN461@init@2
	mov	ecx, eax
$LN461@init@2:
	push	ecx
	lea	ecx, DWORD PTR [esi+48]
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
$LN745@init@2:
	mov	eax, DWORD PTR [esi+52]
	test	eax, eax
	je	SHORT $LN484@init@2
	mov	edx, DWORD PTR $T102523[ebp]
	mov	DWORD PTR [eax], edx
$LN484@init@2:
	add	DWORD PTR [esi+52], ebx
; Line 202
	mov	eax, DWORD PTR tv3451[ebp]
	movsx	ecx, WORD PTR [eax-2]
	mov	DWORD PTR tv3468[ebp], ecx
	mov	eax, DWORD PTR [esi+68]
	fild	DWORD PTR tv3468[ebp]
	lea	edx, DWORD PTR $T102524[ebp]
	fdiv	QWORD PTR __real@40dfffc000000000
	fstp	DWORD PTR $T102524[ebp]
	cmp	edx, eax
	jae	SHORT $LN495@init@2
	mov	edx, DWORD PTR [esi+64]
	lea	ecx, DWORD PTR $T102524[ebp]
	cmp	edx, ecx
	ja	SHORT $LN495@init@2
	mov	edi, ecx
	mov	ecx, DWORD PTR [esi+72]
	sub	edi, edx
	sar	edi, 2
	cmp	eax, ecx
	jne	SHORT $LN506@init@2
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@2
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN506@init@2
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 1073741823				; 3fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN528@init@2
	xor	ecx, ecx
	jmp	SHORT $LN529@init@2
$LN528@init@2:
	add	ecx, edx
$LN529@init@2:
	cmp	ecx, eax
	jae	SHORT $LN525@init@2
	mov	ecx, eax
$LN525@init@2:
	push	ecx
	lea	ecx, DWORD PTR [esi+64]
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
	mov	ebx, 4
$LN506@init@2:
	mov	eax, DWORD PTR [esi+68]
	test	eax, eax
	je	SHORT $LN595@init@2
	mov	edx, DWORD PTR [esi+64]
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN595@init@2
$LN495@init@2:
	mov	ecx, DWORD PTR [esi+72]
	cmp	eax, ecx
	jne	SHORT $LN746@init@2
	mov	edx, DWORD PTR [esi+64]
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@2
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN746@init@2
	mov	edx, ecx
	shr	edx, 1
	mov	edi, 1073741823				; 3fffffffH
	sub	edi, edx
	cmp	edi, ecx
	jae	SHORT $LN575@init@2
	xor	ecx, ecx
	jmp	SHORT $LN576@init@2
$LN575@init@2:
	add	ecx, edx
$LN576@init@2:
	cmp	ecx, eax
	jae	SHORT $LN572@init@2
	mov	ecx, eax
$LN572@init@2:
	push	ecx
	lea	ecx, DWORD PTR [esi+64]
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
$LN746@init@2:
	mov	eax, DWORD PTR [esi+68]
	test	eax, eax
	je	SHORT $LN595@init@2
	mov	edx, DWORD PTR $T102524[ebp]
	mov	DWORD PTR [eax], edx
$LN595@init@2:
	add	DWORD PTR [esi+68], ebx
; Line 203
	mov	eax, DWORD PTR tv3451[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR tv3450[ebp], ecx
	mov	eax, DWORD PTR [esi+84]
	fild	DWORD PTR tv3450[ebp]
	lea	edx, DWORD PTR $T102525[ebp]
	fdiv	QWORD PTR __real@40dfffc000000000
	fstp	DWORD PTR $T102525[ebp]
	cmp	edx, eax
	jae	SHORT $LN606@init@2
	mov	edx, DWORD PTR [esi+80]
	lea	ecx, DWORD PTR $T102525[ebp]
	cmp	edx, ecx
	ja	SHORT $LN606@init@2
	mov	edi, ecx
	mov	ecx, DWORD PTR [esi+88]
	sub	edi, edx
	sar	edi, 2
	cmp	eax, ecx
	jne	SHORT $LN617@init@2
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@2
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN617@init@2
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 1073741823				; 3fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN639@init@2
	xor	ecx, ecx
	jmp	SHORT $LN640@init@2
$LN639@init@2:
	add	ecx, edx
$LN640@init@2:
	cmp	ecx, eax
	jae	SHORT $LN636@init@2
	mov	ecx, eax
$LN636@init@2:
	push	ecx
	lea	ecx, DWORD PTR [esi+80]
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
	mov	ebx, 4
$LN617@init@2:
	mov	eax, DWORD PTR [esi+84]
	test	eax, eax
	je	SHORT $LN706@init@2
	mov	edx, DWORD PTR [esi+80]
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN706@init@2
$LN606@init@2:
	mov	ecx, DWORD PTR [esi+88]
	cmp	eax, ecx
	jne	SHORT $LN747@init@2
	mov	edx, DWORD PTR [esi+80]
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@2
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN747@init@2
	mov	edx, ecx
	shr	edx, 1
	mov	edi, 1073741823				; 3fffffffH
	sub	edi, edx
	cmp	edi, ecx
	jae	SHORT $LN686@init@2
	xor	ecx, ecx
	jmp	SHORT $LN687@init@2
$LN686@init@2:
	add	ecx, edx
$LN687@init@2:
	cmp	ecx, eax
	jae	SHORT $LN683@init@2
	mov	ecx, eax
$LN683@init@2:
	push	ecx
	lea	ecx, DWORD PTR [esi+80]
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
$LN747@init@2:
	mov	eax, DWORD PTR [esi+84]
	test	eax, eax
	je	SHORT $LN706@init@2
	mov	edx, DWORD PTR $T102525[ebp]
	mov	DWORD PTR [eax], edx
$LN706@init@2:
; Line 199
	mov	eax, DWORD PTR _i$78406[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
; Line 203
	add	DWORD PTR [esi+84], ebx
	add	DWORD PTR tv3451[ebp], 6
	inc	eax
	mov	DWORD PTR _i$78406[ebp], eax
	cmp	eax, DWORD PTR [ecx+20]
	jb	$LL738@init@2
	pop	edi
	pop	esi
	pop	ebx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN8@init@2:
; Line 196
	xor	ebx, ebx
	mov	DWORD PTR _i$78400[ebp], ebx
	cmp	DWORD PTR [edi+20], ebx
	jbe	$LN5@init@2
	npad	8
$LL742@init@2:
	mov	edx, DWORD PTR _keys$[ebp]
	movsx	eax, WORD PTR [edx+ebx*2]
	mov	DWORD PTR tv3433[ebp], eax
	mov	eax, DWORD PTR [esi+52]
	fild	DWORD PTR tv3433[ebp]
	lea	ecx, DWORD PTR $T102522[ebp]
	fdiv	QWORD PTR __real@40dfffc000000000
	fstp	DWORD PTR $T102522[ebp]
	cmp	ecx, eax
	jae	SHORT $LN273@init@2
	mov	edx, DWORD PTR [esi+48]
	cmp	edx, ecx
	ja	SHORT $LN273@init@2
	mov	edi, ecx
	mov	ecx, DWORD PTR [esi+56]
	sub	edi, edx
	sar	edi, 2
	cmp	eax, ecx
	jne	SHORT $LN743@init@2
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@2
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN743@init@2
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 1073741823				; 3fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN306@init@2
	xor	ecx, ecx
	jmp	SHORT $LN307@init@2
$LN306@init@2:
	add	ecx, edx
$LN307@init@2:
	cmp	ecx, eax
	jae	SHORT $LN303@init@2
	mov	ecx, eax
$LN303@init@2:
	push	ecx
	lea	ecx, DWORD PTR [esi+48]
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
	mov	ebx, DWORD PTR _i$78400[ebp]
$LN743@init@2:
	mov	eax, DWORD PTR [esi+52]
	test	eax, eax
	je	SHORT $LN373@init@2
	mov	edx, DWORD PTR [esi+48]
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN373@init@2
$LN273@init@2:
	mov	ecx, DWORD PTR [esi+56]
	cmp	eax, ecx
	jne	SHORT $LN331@init@2
	mov	edx, DWORD PTR [esi+48]
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@2
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN331@init@2
	mov	edx, ecx
	shr	edx, 1
	mov	edi, 1073741823				; 3fffffffH
	sub	edi, edx
	cmp	edi, ecx
	jae	SHORT $LN353@init@2
	xor	ecx, ecx
	jmp	SHORT $LN354@init@2
$LN353@init@2:
	add	ecx, edx
$LN354@init@2:
	cmp	ecx, eax
	jae	SHORT $LN350@init@2
	mov	ecx, eax
$LN350@init@2:
	push	ecx
	lea	ecx, DWORD PTR [esi+48]
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
$LN331@init@2:
	mov	eax, DWORD PTR [esi+52]
	test	eax, eax
	je	SHORT $LN373@init@2
	mov	edx, DWORD PTR $T102522[ebp]
	mov	DWORD PTR [eax], edx
$LN373@init@2:
	mov	eax, DWORD PTR _b$[ebp]
	add	DWORD PTR [esi+52], 4
	inc	ebx
	mov	DWORD PTR _i$78400[ebp], ebx
	cmp	ebx, DWORD PTR [eax+20]
	jb	$LL742@init@2
$LN5@init@2:
	pop	edi
	pop	esi
	pop	ebx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN749@init@2:
?init@?$Animated@MFVShortToFloat@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ENDP ; Animated<float,short,ShortToFloat>::init
_TEXT	ENDS
PUBLIC	?init@?$Animated@MMV?$Identity@M@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<float,float,Identity<float> >::init
; Function compile flags: /Ogtp
;	COMDAT ?init@?$Animated@MMV?$Identity@M@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z
_TEXT	SEGMENT
_r$78465 = -16						; size = 8
_r$78462 = -16						; size = 8
_ptimes$ = -12						; size = 4
tv3273 = -8						; size = 4
_i$78469 = -8						; size = 4
_this$ = -4						; size = 4
_b$ = 8							; size = 4
tv3349 = 12						; size = 4
_i$78481 = 12						; size = 4
_f$ = 12						; size = 4
tv3415 = 16						; size = 4
_i$78495 = 16						; size = 4
$T105313 = 16						; size = 4
_i$78457 = 16						; size = 4
_gs$ = 16						; size = 4
?init@?$Animated@MMV?$Identity@M@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z PROC ; Animated<float,float,Identity<float> >::init, COMDAT
; _this$ = ecx
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 157
	mov	eax, DWORD PTR _gs$[ebp]
	push	ebx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi+12], eax
	push	edi
; Line 158
	mov	edi, DWORD PTR _b$[ebp]
	movsx	ecx, WORD PTR [edi]
; Line 164
	xor	ebx, ebx
	mov	DWORD PTR [esi+4], ecx
	movsx	edx, WORD PTR [edi+2]
	cmp	ecx, ebx
	setne	al
	mov	DWORD PTR [esi+8], edx
	mov	BYTE PTR [esi], al
; Line 167
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR _this$[ebp], esi
	cmp	eax, ebx
	jbe	$LN19@init@3
; Line 169
	mov	ecx, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [ecx+1028]
	add	ecx, DWORD PTR [edi+8]
; Line 170
	mov	DWORD PTR _i$78457[ebp], ebx
	cmp	eax, ebx
	jbe	$LN14@init@3
; Line 169
	mov	ebx, ecx
$LL18@init@3:
; Line 174
	mov	eax, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR [ebx]
	mov	DWORD PTR _r$78462[ebp+4], eax
; Line 175
	mov	eax, DWORD PTR [esi+20]
	add	ebx, 8
	lea	ecx, DWORD PTR _r$78462[ebp]
	mov	DWORD PTR _r$78462[ebp], edx
	mov	DWORD PTR tv3273[ebp], ebx
	cmp	ecx, eax
	jae	SHORT $LN32@init@3
	mov	edx, DWORD PTR [esi+16]
	cmp	edx, ecx
	ja	SHORT $LN32@init@3
	mov	edi, ecx
	mov	ecx, DWORD PTR [esi+24]
	sub	edi, edx
	sar	edi, 3
	cmp	eax, ecx
	jne	SHORT $LN43@init@3
	sub	eax, edx
	sar	eax, 3
	cmp	eax, 536870910				; 1ffffffeH
	ja	$LN716@init@3
	sub	ecx, edx
	inc	eax
	sar	ecx, 3
	cmp	eax, ecx
	jbe	SHORT $LN43@init@3
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 536870911				; 1fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN65@init@3
	xor	ecx, ecx
	jmp	SHORT $LN66@init@3
$LN65@init@3:
	add	ecx, edx
$LN66@init@3:
	cmp	ecx, eax
	jae	SHORT $LN62@init@3
	mov	ecx, eax
$LN62@init@3:
	push	ecx
	lea	ecx, DWORD PTR [esi+16]
	call	?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::reserve
	mov	ebx, DWORD PTR tv3273[ebp]
$LN43@init@3:
	mov	eax, DWORD PTR [esi+20]
	mov	edx, DWORD PTR [esi+16]
	lea	edi, DWORD PTR [edx+edi*8]
	test	eax, eax
	je	SHORT $LN140@init@3
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [edi+4]
	jmp	SHORT $LN746@init@3
$LN32@init@3:
	mov	ecx, DWORD PTR [esi+24]
	cmp	eax, ecx
	jne	SHORT $LN739@init@3
	mov	edx, DWORD PTR [esi+16]
	sub	eax, edx
	sar	eax, 3
	cmp	eax, 536870910				; 1ffffffeH
	ja	SHORT $LN716@init@3
	sub	ecx, edx
	inc	eax
	sar	ecx, 3
	cmp	eax, ecx
	jbe	SHORT $LN739@init@3
	mov	edx, ecx
	shr	edx, 1
	mov	edi, 536870911				; 1fffffffH
	sub	edi, edx
	cmp	edi, ecx
	jae	SHORT $LN120@init@3
	xor	ecx, ecx
	jmp	SHORT $LN121@init@3
$LN120@init@3:
	add	ecx, edx
$LN121@init@3:
	cmp	ecx, eax
	jae	SHORT $LN117@init@3
	mov	ecx, eax
$LN117@init@3:
	push	ecx
	lea	ecx, DWORD PTR [esi+16]
	call	?reserve@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::reserve
$LN739@init@3:
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN140@init@3
	mov	ecx, DWORD PTR _r$78462[ebp]
	mov	edx, DWORD PTR _r$78462[ebp+4]
	mov	DWORD PTR [eax], ecx
$LN746@init@3:
	mov	DWORD PTR [eax+4], edx
$LN140@init@3:
; Line 170
	mov	eax, DWORD PTR _i$78457[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
; Line 175
	add	DWORD PTR [esi+20], 8
	inc	eax
	mov	DWORD PTR _i$78457[ebp], eax
	cmp	eax, DWORD PTR [ecx+4]
	jb	$LL18@init@3
; Line 196
	mov	edi, ecx
	xor	ebx, ebx
	jmp	SHORT $LN14@init@3
$LN716@init@3:
; Line 175
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN747@init@3:
$LN19@init@3:
; Line 177
	cmp	ecx, ebx
	je	SHORT $LN14@init@3
	cmp	edx, -1
	jne	SHORT $LN14@init@3
; Line 181
	mov	edx, DWORD PTR [edi+20]
; Line 182
	lea	eax, DWORD PTR _r$78465[ebp]
	dec	edx
	lea	ecx, DWORD PTR [esi+16]
	push	eax
	mov	DWORD PTR _r$78465[ebp], ebx
	mov	DWORD PTR _r$78465[ebp+4], edx
	call	?push_back@?$vector@U?$pair@II@std@@V?$allocator@U?$pair@II@std@@@2@@std@@QAEXABU?$pair@II@2@@Z ; std::vector<std::pair<unsigned int,unsigned int>,std::allocator<std::pair<unsigned int,unsigned int> > >::push_back
$LN14@init@3:
; Line 187
	mov	ecx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edi+16]
	add	eax, DWORD PTR [ecx+1028]
; Line 188
	xor	ecx, ecx
	mov	DWORD PTR _ptimes$[ebp], eax
	mov	DWORD PTR _i$78469[ebp], ecx
	cmp	DWORD PTR [edi+12], ebx
	jbe	$LN11@init@3
	jmp	SHORT $LN13@init@3
$LL744@init@3:
	mov	eax, DWORD PTR _ptimes$[ebp]
$LN13@init@3:
	mov	edi, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [esi+36]
	lea	edx, DWORD PTR $T105313[ebp]
	mov	DWORD PTR $T105313[ebp], edi
	cmp	edx, eax
	jae	SHORT $LN160@init@3
	mov	edx, DWORD PTR [esi+32]
	lea	ecx, DWORD PTR $T105313[ebp]
	cmp	edx, ecx
	ja	SHORT $LN160@init@3
	mov	edi, ecx
	mov	ecx, DWORD PTR [esi+40]
	sub	edi, edx
	sar	edi, 2
	cmp	eax, ecx
	jne	SHORT $LN740@init@3
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	SHORT $LN716@init@3
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN740@init@3
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 1073741823				; 3fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN193@init@3
	xor	ecx, ecx
	jmp	SHORT $LN194@init@3
$LN193@init@3:
	add	ecx, edx
$LN194@init@3:
	cmp	ecx, eax
	jae	SHORT $LN190@init@3
	mov	ecx, eax
$LN190@init@3:
	push	ecx
	lea	ecx, DWORD PTR [esi+32]
	call	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
$LN740@init@3:
	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	SHORT $LN260@init@3
	mov	edx, DWORD PTR [esi+32]
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN260@init@3
$LN160@init@3:
	mov	ecx, DWORD PTR [esi+40]
	cmp	eax, ecx
	jne	SHORT $LN741@init@3
	mov	edx, DWORD PTR [esi+32]
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@3
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN741@init@3
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 1073741823				; 3fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN240@init@3
	xor	ecx, ecx
	jmp	SHORT $LN241@init@3
$LN240@init@3:
	add	ecx, edx
$LN241@init@3:
	cmp	ecx, eax
	jae	SHORT $LN237@init@3
	mov	ecx, eax
$LN237@init@3:
	push	ecx
	lea	ecx, DWORD PTR [esi+32]
	call	?reserve@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z ; std::vector<int,std::allocator<int> >::reserve
$LN741@init@3:
	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	SHORT $LN260@init@3
	mov	DWORD PTR [eax], edi
$LN260@init@3:
	mov	ecx, DWORD PTR _i$78469[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	add	DWORD PTR [esi+36], 4
	inc	ecx
	mov	DWORD PTR _i$78469[ebp], ecx
	cmp	ecx, DWORD PTR [edx+12]
	jb	$LL744@init@3
; Line 196
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, edx
	xor	ebx, ebx
$LN11@init@3:
; Line 191
	mov	ecx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edi+24]
	add	eax, DWORD PTR [ecx+1028]
; Line 192
	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, ebx
	jl	$LN5@init@3
	cmp	ecx, 1
	jle	$LN8@init@3
	cmp	ecx, 2
	jne	$LN5@init@3
; Line 199
	mov	DWORD PTR _i$78495[ebp], ebx
	cmp	DWORD PTR [edi+20], ebx
	jbe	$LN5@init@3
	lea	ebx, DWORD PTR [eax+8]
	mov	DWORD PTR tv3349[ebp], ebx
$LL742@init@3:
; Line 201
	mov	edi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edi+52]
	lea	ecx, DWORD PTR [ebx-8]
	cmp	ecx, eax
	jae	SHORT $LN384@init@3
	mov	edx, DWORD PTR [edi+48]
	cmp	edx, ecx
	ja	SHORT $LN384@init@3
	mov	ecx, DWORD PTR [edi+56]
	mov	esi, ebx
	sub	esi, edx
	sub	esi, 8
	sar	esi, 2
	cmp	eax, ecx
	jne	SHORT $LN395@init@3
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@3
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN395@init@3
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 1073741823				; 3fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN417@init@3
	xor	ecx, ecx
	jmp	SHORT $LN418@init@3
$LN417@init@3:
	add	ecx, edx
$LN418@init@3:
	cmp	ecx, eax
	jae	SHORT $LN414@init@3
	mov	ecx, eax
$LN414@init@3:
	push	ecx
	lea	ecx, DWORD PTR [edi+48]
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
	mov	ebx, DWORD PTR tv3349[ebp]
$LN395@init@3:
	mov	eax, DWORD PTR [edi+52]
	test	eax, eax
	je	SHORT $LN484@init@3
	mov	edx, DWORD PTR [edi+48]
	mov	ecx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN484@init@3
$LN384@init@3:
	mov	ecx, DWORD PTR [edi+56]
	cmp	eax, ecx
	jne	SHORT $LN442@init@3
	mov	edx, DWORD PTR [edi+48]
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@3
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN442@init@3
	mov	edx, ecx
	shr	edx, 1
	mov	esi, 1073741823				; 3fffffffH
	sub	esi, edx
	cmp	esi, ecx
	jae	SHORT $LN464@init@3
	xor	ecx, ecx
	jmp	SHORT $LN465@init@3
$LN464@init@3:
	add	ecx, edx
$LN465@init@3:
	cmp	ecx, eax
	jae	SHORT $LN461@init@3
	mov	ecx, eax
$LN461@init@3:
	push	ecx
	lea	ecx, DWORD PTR [edi+48]
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
$LN442@init@3:
	mov	eax, DWORD PTR [edi+52]
	test	eax, eax
	je	SHORT $LN484@init@3
	mov	edx, DWORD PTR [ebx-8]
	mov	DWORD PTR [eax], edx
$LN484@init@3:
	add	DWORD PTR [edi+52], 4
; Line 202
	mov	esi, edi
	mov	eax, DWORD PTR [esi+68]
	lea	ecx, DWORD PTR [ebx-4]
	cmp	ecx, eax
	jae	SHORT $LN495@init@3
	mov	edx, DWORD PTR [esi+64]
	cmp	edx, ecx
	ja	SHORT $LN495@init@3
	mov	ecx, DWORD PTR [esi+72]
	mov	edi, ebx
	sub	edi, edx
	sub	edi, 4
	sar	edi, 2
	cmp	eax, ecx
	jne	SHORT $LN506@init@3
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@3
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN506@init@3
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 1073741823				; 3fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN528@init@3
	xor	ecx, ecx
	jmp	SHORT $LN529@init@3
$LN528@init@3:
	add	ecx, edx
$LN529@init@3:
	cmp	ecx, eax
	jae	SHORT $LN525@init@3
	mov	ecx, eax
$LN525@init@3:
	push	ecx
	lea	ecx, DWORD PTR [esi+64]
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
	mov	ebx, DWORD PTR tv3349[ebp]
$LN506@init@3:
	mov	eax, DWORD PTR [esi+68]
	test	eax, eax
	je	SHORT $LN595@init@3
	mov	ecx, DWORD PTR [esi+64]
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN595@init@3
$LN495@init@3:
	mov	ecx, DWORD PTR [esi+72]
	cmp	eax, ecx
	jne	SHORT $LN553@init@3
	mov	edx, DWORD PTR [esi+64]
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@3
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN553@init@3
	mov	edx, ecx
	shr	edx, 1
	mov	edi, 1073741823				; 3fffffffH
	sub	edi, edx
	cmp	edi, ecx
	jae	SHORT $LN575@init@3
	xor	ecx, ecx
	jmp	SHORT $LN576@init@3
$LN575@init@3:
	add	ecx, edx
$LN576@init@3:
	cmp	ecx, eax
	jae	SHORT $LN572@init@3
	mov	ecx, eax
$LN572@init@3:
	push	ecx
	lea	ecx, DWORD PTR [esi+64]
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
$LN553@init@3:
	mov	eax, DWORD PTR [esi+68]
	test	eax, eax
	je	SHORT $LN595@init@3
	mov	ecx, DWORD PTR [ebx-4]
	mov	DWORD PTR [eax], ecx
$LN595@init@3:
	add	DWORD PTR [esi+68], 4
; Line 203
	mov	eax, DWORD PTR [esi+84]
	cmp	ebx, eax
	jae	SHORT $LN606@init@3
	mov	edx, DWORD PTR [esi+80]
	cmp	edx, ebx
	ja	SHORT $LN606@init@3
	mov	ecx, DWORD PTR [esi+88]
	mov	edi, ebx
	sub	edi, edx
	sar	edi, 2
	cmp	eax, ecx
	jne	SHORT $LN617@init@3
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@3
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN617@init@3
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 1073741823				; 3fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN639@init@3
	xor	ecx, ecx
	jmp	SHORT $LN640@init@3
$LN639@init@3:
	add	ecx, edx
$LN640@init@3:
	cmp	ecx, eax
	jae	SHORT $LN636@init@3
	mov	ecx, eax
$LN636@init@3:
	push	ecx
	lea	ecx, DWORD PTR [esi+80]
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
	mov	ebx, DWORD PTR tv3349[ebp]
$LN617@init@3:
	mov	eax, DWORD PTR [esi+84]
	test	eax, eax
	je	SHORT $LN706@init@3
	mov	edx, DWORD PTR [esi+80]
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN706@init@3
$LN606@init@3:
	mov	ecx, DWORD PTR [esi+88]
	cmp	eax, ecx
	jne	SHORT $LN743@init@3
	mov	edx, DWORD PTR [esi+80]
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@3
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN743@init@3
	mov	edx, ecx
	shr	edx, 1
	mov	edi, 1073741823				; 3fffffffH
	sub	edi, edx
	cmp	edi, ecx
	jae	SHORT $LN686@init@3
	xor	ecx, ecx
	jmp	SHORT $LN687@init@3
$LN686@init@3:
	add	ecx, edx
$LN687@init@3:
	cmp	ecx, eax
	jae	SHORT $LN683@init@3
	mov	ecx, eax
$LN683@init@3:
	push	ecx
	lea	ecx, DWORD PTR [esi+80]
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
$LN743@init@3:
	mov	eax, DWORD PTR [esi+84]
	test	eax, eax
	je	SHORT $LN706@init@3
	mov	edx, DWORD PTR [ebx]
	mov	DWORD PTR [eax], edx
$LN706@init@3:
; Line 199
	mov	eax, DWORD PTR _i$78495[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
; Line 203
	add	DWORD PTR [esi+84], 4
	inc	eax
	add	ebx, 12					; 0000000cH
	mov	DWORD PTR _i$78495[ebp], eax
	mov	DWORD PTR tv3349[ebp], ebx
	cmp	eax, DWORD PTR [ecx+20]
	jb	$LL742@init@3
	pop	edi
	pop	esi
	pop	ebx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN8@init@3:
; Line 196
	mov	DWORD PTR _i$78481[ebp], ebx
	cmp	DWORD PTR [edi+20], ebx
	jbe	$LN5@init@3
	mov	ebx, eax
	mov	DWORD PTR tv3415[ebp], eax
	npad	7
$LL7@init@3:
	mov	eax, DWORD PTR [esi+52]
	cmp	ebx, eax
	jae	SHORT $LN273@init@3
	mov	edx, DWORD PTR [esi+48]
	cmp	edx, ebx
	ja	SHORT $LN273@init@3
	mov	ecx, DWORD PTR [esi+56]
	mov	edi, ebx
	sub	edi, edx
	sar	edi, 2
	cmp	eax, ecx
	jne	SHORT $LN284@init@3
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@3
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN284@init@3
	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 1073741823				; 3fffffffH
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN306@init@3
	xor	ecx, ecx
	jmp	SHORT $LN307@init@3
$LN306@init@3:
	add	ecx, edx
$LN307@init@3:
	cmp	ecx, eax
	jae	SHORT $LN303@init@3
	mov	ecx, eax
$LN303@init@3:
	push	ecx
	lea	ecx, DWORD PTR [esi+48]
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
	mov	ebx, DWORD PTR tv3415[ebp]
$LN284@init@3:
	mov	eax, DWORD PTR [esi+52]
	test	eax, eax
	je	SHORT $LN373@init@3
	mov	edx, DWORD PTR [esi+48]
	mov	ecx, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN373@init@3
$LN273@init@3:
	mov	ecx, DWORD PTR [esi+56]
	cmp	eax, ecx
	jne	SHORT $LN738@init@3
	mov	edx, DWORD PTR [esi+48]
	sub	eax, edx
	sar	eax, 2
	cmp	eax, 1073741822				; 3ffffffeH
	ja	$LN716@init@3
	sub	ecx, edx
	inc	eax
	sar	ecx, 2
	cmp	eax, ecx
	jbe	SHORT $LN738@init@3
	mov	edx, ecx
	shr	edx, 1
	mov	edi, 1073741823				; 3fffffffH
	sub	edi, edx
	cmp	edi, ecx
	jae	SHORT $LN353@init@3
	xor	ecx, ecx
	jmp	SHORT $LN354@init@3
$LN353@init@3:
	add	ecx, edx
$LN354@init@3:
	cmp	ecx, eax
	jae	SHORT $LN350@init@3
	mov	ecx, eax
$LN350@init@3:
	push	ecx
	lea	ecx, DWORD PTR [esi+48]
	call	?reserve@?$vector@MV?$allocator@M@std@@@std@@QAEXI@Z ; std::vector<float,std::allocator<float> >::reserve
$LN738@init@3:
	mov	eax, DWORD PTR [esi+52]
	test	eax, eax
	je	SHORT $LN373@init@3
	mov	edx, DWORD PTR [ebx]
	mov	DWORD PTR [eax], edx
$LN373@init@3:
	mov	eax, DWORD PTR _i$78481[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	add	DWORD PTR [esi+52], 4
	inc	eax
	add	ebx, 4
	mov	DWORD PTR _i$78481[ebp], eax
	mov	DWORD PTR tv3415[ebp], ebx
	cmp	eax, DWORD PTR [ecx+20]
	jb	$LL7@init@3
$LN5@init@3:
	pop	edi
	pop	esi
	pop	ebx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN745@init@3:
?init@?$Animated@MMV?$Identity@M@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ENDP ; Animated<float,float,Identity<float> >::init
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?init@ParticleSystem@@QAEXAAVMPQFile@@AAUModelParticleEmitterDef@@PAH@Z ; ParticleSystem::init
EXTRN	?frand@@YAMXZ:PROC				; frand
EXTRN	?fixCoordSystem@@YA?AVVec3D@@V1@@Z:PROC		; fixCoordSystem
; Function compile flags: /Ogtp
_TEXT	SEGMENT
$T108104 = -64						; size = 12
tv708 = -52						; size = 4
tv702 = -48						; size = 4
tv713 = -44						; size = 4
tv1088 = -40						; size = 4
tv1086 = -40						; size = 4
tv1084 = -40						; size = 4
tv1082 = -40						; size = 4
tv1071 = -40						; size = 4
tv1069 = -40						; size = 4
tv1067 = -40						; size = 4
tv1065 = -40						; size = 4
tv1058 = -40						; size = 4
tv1056 = -40						; size = 4
tv1054 = -40						; size = 4
tv1052 = -40						; size = 4
tv718 = -40						; size = 4
$T108103 = -40						; size = 4
_tc$75168 = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 4
_mta$ = 12						; size = 4
_globals$ = 16						; size = 4
?init@ParticleSystem@@QAEXAAVMPQFile@@AAUModelParticleEmitterDef@@PAH@Z PROC ; ParticleSystem::init
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\particle.cpp
; Line 23
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 24
	mov	eax, DWORD PTR _globals$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _f$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _mta$[ebp]
	push	eax
	mov	esi, ecx
	push	ebx
	lea	ecx, DWORD PTR [edi+52]
	push	ecx
	mov	ecx, esi
	call	?init@?$Animated@MMV?$Identity@M@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<float,float,Identity<float> >::init
; Line 25
	mov	edx, DWORD PTR _globals$[ebp]
	push	edx
	push	ebx
	lea	eax, DWORD PTR [edi+80]
	push	eax
	lea	ecx, DWORD PTR [esi+96]
	call	?init@?$Animated@MMV?$Identity@M@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<float,float,Identity<float> >::init
; Line 26
	mov	ecx, DWORD PTR _globals$[ebp]
	push	ecx
	push	ebx
	lea	edx, DWORD PTR [edi+108]
	push	edx
	lea	ecx, DWORD PTR [esi+192]
	call	?init@?$Animated@MMV?$Identity@M@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<float,float,Identity<float> >::init
; Line 27
	mov	eax, DWORD PTR _globals$[ebp]
	push	eax
	push	ebx
	lea	ecx, DWORD PTR [edi+136]
	push	ecx
	lea	ecx, DWORD PTR [esi+288]
	call	?init@?$Animated@MMV?$Identity@M@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<float,float,Identity<float> >::init
; Line 28
	mov	edx, DWORD PTR _globals$[ebp]
	push	edx
	push	ebx
	lea	eax, DWORD PTR [edi+164]
	push	eax
	lea	ecx, DWORD PTR [esi+384]
	call	?init@?$Animated@MMV?$Identity@M@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<float,float,Identity<float> >::init
; Line 29
	mov	ecx, DWORD PTR _globals$[ebp]
	push	ecx
	push	ebx
	lea	edx, DWORD PTR [edi+192]
	push	edx
	lea	ecx, DWORD PTR [esi+480]
	call	?init@?$Animated@MMV?$Identity@M@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<float,float,Identity<float> >::init
; Line 30
	mov	eax, DWORD PTR _globals$[ebp]
	push	eax
	push	ebx
	lea	ecx, DWORD PTR [edi+220]
	push	ecx
	lea	ecx, DWORD PTR [esi+576]
	call	?init@?$Animated@MMV?$Identity@M@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<float,float,Identity<float> >::init
; Line 31
	mov	edx, DWORD PTR _globals$[ebp]
	push	edx
	push	ebx
	lea	eax, DWORD PTR [edi+248]
	push	eax
	lea	ecx, DWORD PTR [esi+672]
	call	?init@?$Animated@MMV?$Identity@M@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<float,float,Identity<float> >::init
; Line 32
	mov	ecx, DWORD PTR _globals$[ebp]
	push	ecx
	push	ebx
	lea	edx, DWORD PTR [edi+276]
	push	edx
	lea	ecx, DWORD PTR [esi+768]
	call	?init@?$Animated@MMV?$Identity@M@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<float,float,Identity<float> >::init
; Line 33
	mov	eax, DWORD PTR _globals$[ebp]
	push	eax
	push	ebx
	lea	ecx, DWORD PTR [edi+304]
	push	ecx
	lea	ecx, DWORD PTR [esi+864]
	call	?init@?$Animated@MMV?$Identity@M@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<float,float,Identity<float> >::init
; Line 37
	mov	eax, DWORD PTR [edi+336]
	mov	edx, eax
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	mov	DWORD PTR tv1088[ebp], edx
	fild	DWORD PTR tv1088[ebp]
	mov	ecx, eax
	fld	QWORD PTR __real@406fe00000000000
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	fdiv	ST(1), ST(0)
	mov	DWORD PTR tv1086[ebp], ecx
	movzx	edx, al
	shr	eax, 24					; 00000018H
	fxch	ST(1)
	fstp	DWORD PTR tv702[ebp]
	fild	DWORD PTR tv1086[ebp]
	mov	DWORD PTR tv1084[ebp], edx
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR tv708[ebp]
	fild	DWORD PTR tv1084[ebp]
	mov	DWORD PTR tv1082[ebp], eax
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR tv713[ebp]
	fild	DWORD PTR tv1082[ebp]
	test	eax, eax
	jns	SHORT $LN62@init@4
	fadd	DWORD PTR __real@4f800000
$LN62@init@4:
	fdiv	ST(0), ST(1)
	mov	eax, DWORD PTR tv702[ebp]
	mov	ecx, DWORD PTR tv708[ebp]
	mov	edx, DWORD PTR tv713[ebp]
	mov	DWORD PTR [esi+960], eax
	mov	DWORD PTR [esi+968], edx
	mov	DWORD PTR [esi+964], ecx
	fstp	DWORD PTR tv718[ebp]
	mov	eax, DWORD PTR tv718[ebp]
	mov	DWORD PTR [esi+972], eax
; Line 38
	mov	ecx, DWORD PTR [edi+348]
	mov	DWORD PTR [esi+1008], ecx
	mov	eax, DWORD PTR [edi+340]
	mov	edx, eax
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	mov	DWORD PTR tv1071[ebp], edx
	fild	DWORD PTR tv1071[ebp]
	mov	ecx, eax
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	fdiv	ST(0), ST(1)
	mov	DWORD PTR tv1069[ebp], ecx
	movzx	edx, al
	shr	eax, 24					; 00000018H
	fstp	DWORD PTR tv702[ebp]
	fild	DWORD PTR tv1069[ebp]
	mov	DWORD PTR tv1067[ebp], edx
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR tv708[ebp]
	fild	DWORD PTR tv1067[ebp]
	mov	DWORD PTR tv1065[ebp], eax
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR tv713[ebp]
	fild	DWORD PTR tv1065[ebp]
	test	eax, eax
	jns	SHORT $LN63@init@4
; Line 37
	fadd	DWORD PTR __real@4f800000
$LN63@init@4:
	fdiv	ST(0), ST(1)
	mov	eax, DWORD PTR tv702[ebp]
	mov	ecx, DWORD PTR tv708[ebp]
	mov	edx, DWORD PTR tv713[ebp]
	mov	DWORD PTR [esi+976], eax
	mov	DWORD PTR [esi+980], ecx
	mov	DWORD PTR [esi+984], edx
	fstp	DWORD PTR tv718[ebp]
	mov	eax, DWORD PTR tv718[ebp]
	mov	DWORD PTR [esi+988], eax
; Line 38
	mov	ecx, DWORD PTR [edi+352]
	mov	DWORD PTR [esi+1012], ecx
	mov	eax, DWORD PTR [edi+344]
	mov	edx, eax
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	mov	DWORD PTR tv1058[ebp], edx
	fild	DWORD PTR tv1058[ebp]
	mov	ecx, eax
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	fdiv	ST(0), ST(1)
	mov	DWORD PTR tv1056[ebp], ecx
	movzx	edx, al
	shr	eax, 24					; 00000018H
	fstp	DWORD PTR tv702[ebp]
	fild	DWORD PTR tv1056[ebp]
	mov	DWORD PTR tv1054[ebp], edx
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR tv708[ebp]
	fild	DWORD PTR tv1054[ebp]
	mov	DWORD PTR tv1052[ebp], eax
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR tv713[ebp]
	fild	DWORD PTR tv1052[ebp]
	test	eax, eax
	jns	SHORT $LN64@init@4
; Line 37
	fadd	DWORD PTR __real@4f800000
$LN64@init@4:
	fdivrp	ST(1), ST(0)
	mov	eax, DWORD PTR tv702[ebp]
	mov	ecx, DWORD PTR tv708[ebp]
	mov	edx, DWORD PTR tv713[ebp]
	mov	DWORD PTR [esi+992], eax
	mov	DWORD PTR [esi+996], ecx
	mov	DWORD PTR [esi+1000], edx
; Line 43
	sub	esp, 12					; 0000000cH
	fstp	DWORD PTR tv718[ebp]
	mov	eax, DWORD PTR tv718[ebp]
	mov	DWORD PTR [esi+1004], eax
	mov	ecx, DWORD PTR [edi+356]
	mov	DWORD PTR [esi+1016], ecx
	mov	edx, DWORD PTR [edi+332]
	mov	DWORD PTR [esi+1020], edx
	mov	eax, DWORD PTR [edi+404]
	mov	DWORD PTR [esi+1024], eax
	mov	ecx, DWORD PTR [edi+408]
	mov	DWORD PTR [esi+1028], ecx
	mov	edx, DWORD PTR [edi+8]
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [edi+12]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edi+16]
	mov	DWORD PTR [eax+8], edx
	lea	eax, DWORD PTR $T108104[ebp]
	mov	DWORD PTR $T108103[ebp], esp
	push	eax
	call	?fixCoordSystem@@YA?AVVec3D@@V1@@Z	; fixCoordSystem
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [esi+1032], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi+1036], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [esi+1040], eax
; Line 44
	movsx	ecx, WORD PTR [edi+22]
	mov	eax, DWORD PTR [esi+1120]
	mov	edx, DWORD PTR [eax+488]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [esi+1044], ecx
; Line 45
	movsx	edx, WORD PTR [edi+40]
	mov	DWORD PTR [esi+1064], edx
; Line 46
	movsx	ecx, WORD PTR [edi+50]
	mov	DWORD PTR [esi+1084], ecx
; Line 47
	movsx	edx, WORD PTR [edi+48]
	mov	DWORD PTR [esi+1088], edx
; Line 48
	movsx	ecx, WORD PTR [edi+44]
	mov	DWORD PTR [esi+1072], ecx
; Line 50
	xor	edx, edx
	xor	ebx, ebx
	add	esp, 16					; 00000010H
	cmp	WORD PTR [edi+44], bx
	setle	dl
	dec	edx
	mov	DWORD PTR [esi+1068], edx
; Line 51
	movsx	ecx, WORD PTR [edi+20]
	imul	ecx, 440				; 000001b8H
	add	ecx, DWORD PTR [eax+484]
	mov	DWORD PTR [esi+1116], ecx
; Line 53
	movsx	eax, WORD PTR [edi+42]
	dec	eax
	je	SHORT $LN5@init@4
	dec	eax
	jne	SHORT $LN6@init@4
; Line 59
	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $LN13@init@4
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax], OFFSET ??_7SphereParticleEmitter@@6B@
	jmp	SHORT $LN14@init@4
$LN5@init@4:
; Line 56
	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $LN13@init@4
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax], OFFSET ??_7PlaneParticleEmitter@@6B@
	jmp	SHORT $LN14@init@4
$LN13@init@4:
	xor	eax, eax
$LN14@init@4:
	mov	DWORD PTR [esi+1048], eax
$LN6@init@4:
; Line 65
	mov	edx, DWORD PTR [edi+4]
	shr	edx, 12					; 0000000cH
	not	dl
	and	dl, 1
	mov	BYTE PTR [esi+1108], dl
; Line 67
	mov	DWORD PTR [esi+1080], ebx
	mov	DWORD PTR [esi+1076], ebx
; Line 68
	mov	DWORD PTR [esi+1112], ebx
; Line 70
	call	?frand@@YAMXZ				; frand
	fstp	DWORD PTR [esi+1124]
; Line 73
	mov	eax, DWORD PTR [esi+1088]
	imul	eax, DWORD PTR [esi+1084]
	xor	edi, edi
	test	eax, eax
	jle	SHORT $LN1@init@4
$LL3@init@4:
; Line 76
	push	edi
	lea	ecx, DWORD PTR _tc$75168[ebp]
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR _tc$75168[ebp], ebx
	mov	DWORD PTR _tc$75168[ebp+4], ebx
	mov	DWORD PTR _tc$75168[ebp+8], ebx
	mov	DWORD PTR _tc$75168[ebp+12], ebx
	mov	DWORD PTR _tc$75168[ebp+16], ebx
	mov	DWORD PTR _tc$75168[ebp+20], ebx
	mov	DWORD PTR _tc$75168[ebp+24], ebx
	mov	DWORD PTR _tc$75168[ebp+28], ebx
	call	?initTile@ParticleSystem@@AAEXPAVVec2D@@H@Z ; ParticleSystem::initTile
; Line 77
	lea	edx, DWORD PTR _tc$75168[ebp]
	push	edx
	lea	ecx, DWORD PTR [esi+1092]
	call	?push_back@?$vector@UTexCoordSet@@V?$allocator@UTexCoordSet@@@std@@@std@@QAEXABUTexCoordSet@@@Z ; std::vector<TexCoordSet,std::allocator<TexCoordSet> >::push_back
	mov	eax, DWORD PTR [esi+1088]
	imul	eax, DWORD PTR [esi+1084]
	inc	edi
	cmp	edi, eax
	jl	SHORT $LL3@init@4
$LN1@init@4:
; Line 79
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?init@ParticleSystem@@QAEXAAVMPQFile@@AAUModelParticleEmitterDef@@PAH@Z ENDP ; ParticleSystem::init
_TEXT	ENDS
PUBLIC	?init@RibbonEmitter@@QAEXAAVMPQFile@@AAUModelRibbonEmitterDef@@PAH@Z ; RibbonEmitter::init
; Function compile flags: /Ogtp
_TEXT	SEGMENT
$T108211 = -12						; size = 12
_f$ = 8							; size = 4
_mta$ = 12						; size = 4
tv308 = 16						; size = 4
_globals$ = 16						; size = 4
?init@RibbonEmitter@@QAEXAAVMPQFile@@AAUModelRibbonEmitterDef@@PAH@Z PROC ; RibbonEmitter::init
; _this$ = ecx
; Line 575
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 576
	mov	eax, DWORD PTR _globals$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _f$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _mta$[ebp]
	push	eax
	mov	esi, ecx
	push	ebx
	lea	ecx, DWORD PTR [edi+36]
	push	ecx
	mov	ecx, esi
	call	?init@?$Animated@VVec3D@@V1@V?$Identity@VVec3D@@@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<Vec3D,Vec3D,Identity<Vec3D> >::init
; Line 577
	mov	edx, DWORD PTR _globals$[ebp]
	push	edx
	push	ebx
	lea	eax, DWORD PTR [edi+64]
	push	eax
	lea	ecx, DWORD PTR [esi+96]
	call	?init@?$Animated@MFVShortToFloat@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<float,short,ShortToFloat>::init
; Line 578
	mov	ecx, DWORD PTR _globals$[ebp]
	push	ecx
	push	ebx
	lea	edx, DWORD PTR [edi+92]
	push	edx
	lea	ecx, DWORD PTR [esi+192]
	call	?init@?$Animated@MMV?$Identity@M@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<float,float,Identity<float> >::init
; Line 579
	mov	eax, DWORD PTR _globals$[ebp]
	push	eax
	push	ebx
	lea	ecx, DWORD PTR [edi+120]
	push	ecx
	lea	ecx, DWORD PTR [esi+288]
	call	?init@?$Animated@MMV?$Identity@M@@@@QAEXAAUAnimationBlock@@AAVMPQFile@@PAH@Z ; Animated<float,float,Identity<float> >::init
; Line 581
	mov	edx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [esi+480]
	imul	edx, 440				; 000001b8H
	add	edx, DWORD PTR [eax+484]
; Line 586
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+384], edx
	mov	edx, DWORD PTR [edi+24]
	mov	ecx, DWORD PTR [ebx+1028]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR [eax+488]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [esi+464], eax
	mov	ecx, DWORD PTR [edi+8]
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [edi+12]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [edi+16]
	lea	edx, DWORD PTR $T108211[ebp]
	push	edx
	mov	DWORD PTR [eax+8], ecx
	call	?fixCoordSystem@@YA?AVVec3D@@V1@@Z	; fixCoordSystem
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [esi+396], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi+400], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [esi+404], eax
	mov	DWORD PTR [esi+428], ecx
	mov	edx, DWORD PTR [esi+400]
	mov	DWORD PTR [esi+432], edx
	mov	eax, DWORD PTR [esi+404]
	mov	DWORD PTR [esi+436], eax
; Line 591
	fld	DWORD PTR [edi+148]
	lea	ebx, DWORD PTR [edi+148]
	add	esp, 16					; 00000010H
	call	__ftol2_sse_excpt
	mov	DWORD PTR [esi+424], eax
; Line 592
	mov	edi, DWORD PTR [edi+152]
	mov	DWORD PTR [esi+420], edi
; Line 593
	fld	DWORD PTR [ebx]
	mov	DWORD PTR tv308[ebp], edi
	fmul	DWORD PTR tv308[ebp]
; Line 599
	pop	edi
	fstp	DWORD PTR [esi+416]
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?init@RibbonEmitter@@QAEXAAVMPQFile@@AAUModelRibbonEmitterDef@@PAH@Z ENDP ; RibbonEmitter::init
_TEXT	ENDS
END
