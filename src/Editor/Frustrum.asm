; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\programovani\WoW Editor\Test\src\Editor\Frustrum.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	_fabsf
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtp
;	COMDAT _fabsf
_TEXT	SEGMENT
tv129 = 8						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
; Line 395
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR __X$[ebp]
	fabs
	fstp	DWORD PTR tv129[ebp]
	fld	DWORD PTR tv129[ebp]
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
PUBLIC	_sqrtf
EXTRN	__CIsqrt:PROC
; Function compile flags: /Ogtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT
; Line 434
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR __X$[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv69[ebp]
	fld	DWORD PTR tv69[ebp]
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?fabs@@YAMM@Z					; fabs
; Function compile flags: /Ogtp
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
tv131 = 8						; size = 4
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT
; Line 518
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR __X$[ebp]
	fabs
	fstp	DWORD PTR tv131[ebp]
	fld	DWORD PTR tv131[ebp]
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
PUBLIC	??0Vec3D@@QAE@MMM@Z				; Vec3D::Vec3D
; Function compile flags: /Ogtp
;	COMDAT ??0Vec3D@@QAE@MMM@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
??0Vec3D@@QAE@MMM@Z PROC				; Vec3D::Vec3D, COMDAT
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\vec3d.h
; Line 12
	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _y0$[ebp]
	mov	eax, ecx
	mov	ecx, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _z0$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	pop	ebp
	ret	12					; 0000000cH
??0Vec3D@@QAE@MMM@Z ENDP				; Vec3D::Vec3D
_TEXT	ENDS
PUBLIC	??4Vec3D@@QAEAAV0@ABV0@@Z			; Vec3D::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4Vec3D@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??4Vec3D@@QAEAAV0@ABV0@@Z PROC				; Vec3D::operator=, COMDAT
; _this$ = ecx
; Line 17
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
; Line 18
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 19
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 20
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
; Line 22
	pop	ebp
	ret	4
??4Vec3D@@QAEAAV0@ABV0@@Z ENDP				; Vec3D::operator=
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	edi
	mov	edi, DWORD PTR ___n$[ebp]
	dec	edi
	js	SHORT $LN1@vector
	push	ebx
	mov	ebx, DWORD PTR ___f$[ebp]
	push	esi
	mov	esi, DWORD PTR ___t$[ebp]
$LL2@vector:
	mov	ecx, esi
	call	ebx
	add	esi, DWORD PTR ___s$[ebp]
	dec	edi
	jns	SHORT $LL2@vector
	pop	esi
	pop	ebx
$LN1@vector:
	pop	edi
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_FVec3D@@QAEXXZ				; Vec3D::`default constructor closure'
; Function compile flags: /Ogtp
;	COMDAT ??_FVec3D@@QAEXXZ
_TEXT	SEGMENT
??_FVec3D@@QAEXXZ PROC					; Vec3D::`default constructor closure', COMDAT
; _this$ = ecx
	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	ret	0
??_FVec3D@@QAEXXZ ENDP					; Vec3D::`default constructor closure'
_TEXT	ENDS
PUBLIC	?normalize@Plane@@QAEXXZ			; Plane::normalize
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv207 = -4						; size = 4
tv197 = -4						; size = 4
_len$ = -4						; size = 4
?normalize@Plane@@QAEXXZ PROC				; Plane::normalize
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\frustrum.cpp
; Line 6
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
; Line 8
	fld	DWORD PTR [esi+4]
	fld	DWORD PTR [esi]
	fld	DWORD PTR [esi+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv207[ebp]
	fld	DWORD PTR tv207[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv197[ebp]
	fld	DWORD PTR tv197[ebp]
	fstp	DWORD PTR _len$[ebp]
; Line 9
	fld	DWORD PTR [esi]
	fld	DWORD PTR _len$[ebp]
	fld	ST(0)
	fdivp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [esi]
; Line 10
	fld	DWORD PTR [esi+4]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [esi+4]
; Line 11
	fld	DWORD PTR [esi+8]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [esi+8]
; Line 12
	fdivr	DWORD PTR [esi+12]
	fstp	DWORD PTR [esi+12]
	pop	esi
; Line 13
	mov	esp, ebp
	pop	ebp
	ret	0
?normalize@Plane@@QAEXXZ ENDP				; Plane::normalize
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?retrieve@Frustum@@QAEXXZ			; Frustum::retrieve
EXTRN	__imp__glPopMatrix@0:PROC
EXTRN	__imp__glMultMatrixf@4:PROC
EXTRN	__imp__glPushMatrix@0:PROC
EXTRN	__imp__glMatrixMode@4:PROC
EXTRN	__imp__glGetFloatv@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv803 = -84						; size = 4
tv808 = -80						; size = 4
tv814 = -76						; size = 4
tv1401 = -72						; size = 4
tv1393 = -72						; size = 4
tv1387 = -72						; size = 4
tv1372 = -72						; size = 4
tv1364 = -72						; size = 4
tv1348 = -72						; size = 4
tv1341 = -72						; size = 4
tv1323 = -72						; size = 4
tv1315 = -72						; size = 4
tv1297 = -72						; size = 4
tv1289 = -72						; size = 4
tv1273 = -72						; size = 4
tv1266 = -72						; size = 4
_len$93047 = -72					; size = 4
_len$93036 = -72					; size = 4
_len$93025 = -72					; size = 4
_len$93014 = -72					; size = 4
_len$93003 = -72					; size = 4
_len$92993 = -72					; size = 4
_mat$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?retrieve@Frustum@@QAEXXZ PROC				; Frustum::retrieve
; _this$ = ecx
; Line 16
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
; Line 19
	mov	edi, DWORD PTR __imp__glGetFloatv@8
	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	push	2982					; 00000ba6H
	mov	esi, ecx
	call	edi
; Line 20
	mov	ebx, DWORD PTR __imp__glMatrixMode@4
	push	5889					; 00001701H
	call	ebx
; Line 22
	call	DWORD PTR __imp__glPushMatrix@0
; Line 24
	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	call	DWORD PTR __imp__glMultMatrixf@4
; Line 25
	lea	edx, DWORD PTR _mat$[ebp]
	push	edx
	push	2983					; 00000ba7H
	call	edi
; Line 27
	call	DWORD PTR __imp__glPopMatrix@0
; Line 28
	push	5888					; 00001700H
	call	ebx
; Line 30
	fld	DWORD PTR _mat$[ebp+12]
	fsub	DWORD PTR _mat$[ebp]
	fstp	DWORD PTR tv803[ebp]
; Line 31
	fld	DWORD PTR _mat$[ebp+28]
	fsub	DWORD PTR _mat$[ebp+16]
	fstp	DWORD PTR tv808[ebp]
; Line 32
	fld	DWORD PTR _mat$[ebp+44]
	fsub	DWORD PTR _mat$[ebp+32]
	fstp	DWORD PTR tv814[ebp]
; Line 33
	fld	DWORD PTR tv808[ebp]
; Line 34
	fld	DWORD PTR tv803[ebp]
	fld	DWORD PTR tv814[ebp]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv1401[ebp]
	fld	DWORD PTR tv1401[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv1393[ebp]
	fld	DWORD PTR tv1393[ebp]
	fstp	DWORD PTR _len$92993[ebp]
	fld	DWORD PTR tv803[ebp]
	fld	DWORD PTR _len$92993[ebp]
	fld	ST(0)
	fdivp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [esi]
	fld	DWORD PTR tv808[ebp]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [esi+4]
	fld	DWORD PTR tv814[ebp]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [esi+8]
	fld	DWORD PTR _mat$[ebp+60]
	fld	ST(0)
	fld	DWORD PTR _mat$[ebp+48]
	fld	ST(0)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR tv1387[ebp]
	fld	DWORD PTR tv1387[ebp]
	fdivrp	ST(3), ST(0)
	fxch	ST(2)
	fstp	DWORD PTR [esi+12]
; Line 36
	fld	DWORD PTR _mat$[ebp]
	fadd	DWORD PTR _mat$[ebp+12]
	fstp	DWORD PTR [esi+16]
; Line 37
	fld	DWORD PTR _mat$[ebp+16]
	fadd	DWORD PTR _mat$[ebp+28]
	fstp	DWORD PTR [esi+20]
; Line 38
	fld	DWORD PTR _mat$[ebp+32]
	fadd	DWORD PTR _mat$[ebp+44]
	fstp	DWORD PTR [esi+24]
; Line 39
	faddp	ST(1), ST(0)
	fstp	DWORD PTR [esi+28]
; Line 40
	fld	DWORD PTR [esi+20]
	fld	DWORD PTR [esi+16]
	fld	DWORD PTR [esi+24]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv1372[ebp]
	fld	DWORD PTR tv1372[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv1364[ebp]
	fld	DWORD PTR tv1364[ebp]
	fstp	DWORD PTR _len$93003[ebp]
	fld	DWORD PTR [esi+16]
	fld	DWORD PTR _len$93003[ebp]
	fld	ST(0)
	fdivp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [esi+16]
	fld	DWORD PTR [esi+20]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [esi+20]
	fld	DWORD PTR [esi+24]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [esi+24]
	fdivr	DWORD PTR [esi+28]
	fstp	DWORD PTR [esi+28]
; Line 42
	fld	DWORD PTR _mat$[ebp+4]
	fadd	DWORD PTR _mat$[ebp+12]
	fstp	DWORD PTR [esi+32]
; Line 43
	fld	DWORD PTR _mat$[ebp+20]
	fadd	DWORD PTR _mat$[ebp+28]
	fstp	DWORD PTR [esi+36]
; Line 44
	fld	DWORD PTR _mat$[ebp+36]
	fadd	DWORD PTR _mat$[ebp+44]
	fstp	DWORD PTR [esi+40]
; Line 45
	fld	DWORD PTR _mat$[ebp+52]
	fadd	DWORD PTR _mat$[ebp+60]
	fstp	DWORD PTR [esi+44]
; Line 46
	fld	DWORD PTR [esi+36]
	fld	DWORD PTR [esi+32]
	fld	DWORD PTR [esi+40]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv1348[ebp]
	fld	DWORD PTR tv1348[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv1341[ebp]
	fld	DWORD PTR tv1341[ebp]
	fstp	DWORD PTR _len$93014[ebp]
	fld	DWORD PTR [esi+32]
	fld	DWORD PTR _len$93014[ebp]
	fld	ST(0)
	fdivp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [esi+32]
	fld	DWORD PTR [esi+36]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [esi+36]
	fld	DWORD PTR [esi+40]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [esi+40]
	fdivr	DWORD PTR [esi+44]
	fstp	DWORD PTR [esi+44]
; Line 48
	fld	DWORD PTR _mat$[ebp+12]
	fsub	DWORD PTR _mat$[ebp+4]
	fstp	DWORD PTR [esi+48]
; Line 49
	fld	DWORD PTR _mat$[ebp+28]
	fsub	DWORD PTR _mat$[ebp+20]
	fstp	DWORD PTR [esi+52]
; Line 50
	fld	DWORD PTR _mat$[ebp+44]
	fsub	DWORD PTR _mat$[ebp+36]
	fstp	DWORD PTR [esi+56]
; Line 51
	fld	DWORD PTR _mat$[ebp+60]
	fsub	DWORD PTR _mat$[ebp+52]
	fstp	DWORD PTR [esi+60]
; Line 52
	fld	DWORD PTR [esi+52]
	fld	DWORD PTR [esi+48]
	fld	DWORD PTR [esi+56]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv1323[ebp]
	fld	DWORD PTR tv1323[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv1315[ebp]
	fld	DWORD PTR tv1315[ebp]
	fstp	DWORD PTR _len$93025[ebp]
	fld	DWORD PTR [esi+48]
	fld	DWORD PTR _len$93025[ebp]
	fld	ST(0)
	fdivp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [esi+48]
	fld	DWORD PTR [esi+52]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [esi+52]
	fld	DWORD PTR [esi+56]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [esi+56]
	fdivr	DWORD PTR [esi+60]
	fstp	DWORD PTR [esi+60]
; Line 54
	fld	DWORD PTR _mat$[ebp+12]
	fsub	DWORD PTR _mat$[ebp+8]
	fstp	DWORD PTR [esi+64]
; Line 55
	fld	DWORD PTR _mat$[ebp+28]
	fsub	DWORD PTR _mat$[ebp+24]
	fstp	DWORD PTR [esi+68]
; Line 56
	fld	DWORD PTR _mat$[ebp+44]
	fsub	DWORD PTR _mat$[ebp+40]
	fstp	DWORD PTR [esi+72]
; Line 57
	fld	DWORD PTR _mat$[ebp+60]
	fsub	DWORD PTR _mat$[ebp+56]
	fstp	DWORD PTR [esi+76]
; Line 58
	fld	DWORD PTR [esi+68]
	fld	DWORD PTR [esi+64]
	fld	DWORD PTR [esi+72]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv1297[ebp]
	fld	DWORD PTR tv1297[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv1289[ebp]
	fld	DWORD PTR tv1289[ebp]
	fstp	DWORD PTR _len$93036[ebp]
	fld	DWORD PTR [esi+64]
	fld	DWORD PTR _len$93036[ebp]
	fld	ST(0)
	fdivp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [esi+64]
	fld	DWORD PTR [esi+68]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [esi+68]
	fld	DWORD PTR [esi+72]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [esi+72]
	fdivr	DWORD PTR [esi+76]
	fstp	DWORD PTR [esi+76]
; Line 60
	fld	DWORD PTR _mat$[ebp+8]
	fadd	DWORD PTR _mat$[ebp+12]
	fstp	DWORD PTR [esi+80]
; Line 61
	fld	DWORD PTR _mat$[ebp+24]
	fadd	DWORD PTR _mat$[ebp+28]
	fstp	DWORD PTR [esi+84]
; Line 62
	fld	DWORD PTR _mat$[ebp+40]
	fadd	DWORD PTR _mat$[ebp+44]
	fstp	DWORD PTR [esi+88]
; Line 63
	fld	DWORD PTR _mat$[ebp+56]
	fadd	DWORD PTR _mat$[ebp+60]
	fstp	DWORD PTR [esi+92]
; Line 64
	fld	DWORD PTR [esi+84]
	fld	DWORD PTR [esi+80]
	fld	DWORD PTR [esi+88]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv1273[ebp]
	fld	DWORD PTR tv1273[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv1266[ebp]
	fld	DWORD PTR tv1266[ebp]
; Line 65
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	DWORD PTR _len$93047[ebp]
	pop	edi
	fld	DWORD PTR [esi+80]
	xor	ecx, ebp
	fld	DWORD PTR _len$93047[ebp]
	fld	ST(0)
	fdivp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [esi+80]
	fld	DWORD PTR [esi+84]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [esi+84]
	fld	DWORD PTR [esi+88]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [esi+88]
	fdivr	DWORD PTR [esi+92]
	fstp	DWORD PTR [esi+92]
	pop	esi
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?retrieve@Frustum@@QAEXXZ ENDP				; Frustum::retrieve
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	?contains@Frustum@@QBE_NABVVec3D@@@Z		; Frustum::contains
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
CONST	ENDS
_TEXT	SEGMENT
_v$ = 8							; size = 4
?contains@Frustum@@QBE_NABVVec3D@@@Z PROC		; Frustum::contains
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
; Line 69
	fldz
	push	esi
	mov	esi, DWORD PTR _v$[ebp]
	xor	edx, edx
	add	ecx, 8
$LN4@contains:
; Line 70
	fld	DWORD PTR [ecx-8]
	fmul	DWORD PTR [esi]
	fld	DWORD PTR [ecx-4]
	fmul	DWORD PTR [esi+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [esi+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [ecx+4]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jnp	SHORT $LN12@contains
; Line 69
	inc	edx
	add	ecx, 16					; 00000010H
	cmp	edx, 6
	jl	SHORT $LN4@contains
	fstp	ST(0)
; Line 75
	mov	al, 1
	pop	esi
; Line 76
	pop	ebp
	ret	4
$LN12@contains:
; Line 70
	fstp	ST(0)
; Line 72
	xor	al, al
	pop	esi
; Line 76
	pop	ebp
	ret	4
?contains@Frustum@@QBE_NABVVec3D@@@Z ENDP		; Frustum::contains
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?intersects@Frustum@@QBE_NABVVec3D@@0@Z		; Frustum::intersects
EXTRN	?gWorld@@3PAVWorld@@A:DWORD			; gWorld
; Function compile flags: /Ogtp
_TEXT	SEGMENT
$T93074 = -116						; size = 12
tv972 = -104						; size = 4
tv955 = -104						; size = 4
_points$ = -100						; size = 96
__$ArrayPad$ = -4					; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?intersects@Frustum@@QBE_NABVVec3D@@0@Z PROC		; Frustum::intersects
; _this$ = ecx
; Line 79
	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _v1$[ebp]
; Line 81
	fld	DWORD PTR [eax+4]
	mov	edx, DWORD PTR _v2$[ebp]
	push	ebx
	mov	ebx, DWORD PTR [eax+8]
	push	esi
	mov	esi, DWORD PTR ?gWorld@@3PAVWorld@@A	; gWorld
	fsub	DWORD PTR [esi+252]
	push	edi
	mov	edi, DWORD PTR [eax]
	mov	DWORD PTR _points$[ebp], edi
	fstp	DWORD PTR tv955[ebp]
	mov	DWORD PTR _points$[ebp+8], ebx
	mov	esi, DWORD PTR tv955[ebp]
; Line 83
	fld	DWORD PTR [edx+4]
	mov	ebx, DWORD PTR [edx+8]
	mov	edi, esi
	mov	DWORD PTR _points$[ebp+4], edi
	mov	edi, DWORD PTR [eax]
	mov	DWORD PTR _points$[ebp+12], edi
	mov	edi, esi
	mov	DWORD PTR _points$[ebp+20], ebx
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR _points$[ebp+16], edi
	mov	edi, DWORD PTR ?gWorld@@3PAVWorld@@A	; gWorld
	fsub	DWORD PTR [edi+252]
	mov	DWORD PTR _points$[ebp+24], ebx
; Line 86
	mov	DWORD PTR $T93074[ebp+4], esi
	fstp	DWORD PTR tv972[ebp]
	mov	edi, DWORD PTR tv972[ebp]
; Line 90
	fldz
	mov	ebx, edi
	mov	DWORD PTR _points$[ebp+28], ebx
	mov	ebx, DWORD PTR [eax+8]
	mov	DWORD PTR _points$[ebp+32], ebx
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR _points$[ebp+36], ebx
	mov	ebx, edi
	mov	DWORD PTR _points$[ebp+40], ebx
	mov	ebx, DWORD PTR [edx+8]
	mov	DWORD PTR _points$[ebp+44], ebx
	mov	ebx, DWORD PTR [edx]
	mov	DWORD PTR _points$[ebp+48], ebx
	mov	ebx, esi
	mov	esi, DWORD PTR [edx+8]
	mov	DWORD PTR _points$[ebp+52], ebx
	mov	ebx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _points$[ebp+56], ebx
	mov	ebx, DWORD PTR [edx]
	mov	DWORD PTR _points$[ebp+68], esi
	mov	esi, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _points$[ebp+60], ebx
	mov	ebx, DWORD PTR $T93074[ebp+4]
	mov	DWORD PTR _points$[ebp+80], eax
	mov	eax, esi
	mov	DWORD PTR _points$[ebp+76], edi
	mov	DWORD PTR _points$[ebp+88], edi
	mov	DWORD PTR _points$[ebp+64], ebx
	mov	DWORD PTR _points$[ebp+72], esi
	mov	DWORD PTR _points$[ebp+84], eax
	mov	DWORD PTR _points$[ebp+92], edx
	xor	edi, edi
$LN71@intersects:
; Line 92
	xor	esi, esi
	lea	edx, DWORD PTR _points$[ebp]
	lea	ebx, DWORD PTR [esi+2]
$LN5@intersects:
; Line 96
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [ecx+4]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [edx]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [edx+8]
	fmul	DWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [ecx+12]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@intersects
; Line 98
	inc	esi
$LN4@intersects:
; Line 96
	fld	DWORD PTR [edx+12]
	fmul	DWORD PTR [ecx]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [ecx+12]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN68@intersects
; Line 98
	inc	esi
$LN68@intersects:
; Line 96
	fld	DWORD PTR [edx+24]
	fmul	DWORD PTR [ecx]
	fld	DWORD PTR [edx+28]
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [edx+32]
	fmul	DWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [ecx+12]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN69@intersects
; Line 98
	inc	esi
$LN69@intersects:
; Line 96
	fld	DWORD PTR [edx+36]
	fmul	DWORD PTR [ecx]
	fld	DWORD PTR [edx+40]
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [edx+44]
	fmul	DWORD PTR [ecx+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [ecx+12]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN72@intersects
; Line 98
	inc	esi
$LN72@intersects:
; Line 92
	add	edx, 48					; 00000030H
; Line 94
	dec	ebx
	jne	$LN5@intersects
; Line 102
	test	esi, esi
	je	SHORT $LN90@intersects
; Line 90
	inc	edi
	add	ecx, 16					; 00000010H
	cmp	edi, 6
	jl	$LN71@intersects
	pop	edi
	fstp	ST(0)
	pop	esi
; Line 105
	mov	al, 1
	pop	ebx
; Line 106
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
$LN90@intersects:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	fstp	ST(0)
	pop	edi
	pop	esi
	xor	ecx, ebp
	xor	al, al
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?intersects@Frustum@@QBE_NABVVec3D@@0@Z ENDP		; Frustum::intersects
_TEXT	ENDS
PUBLIC	?intersectsSphere@Frustum@@QBE_NABVVec3D@@M@Z	; Frustum::intersectsSphere
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv395 = 8						; size = 4
tv230 = 8						; size = 4
_distance$81196 = 8					; size = 4
_v$ = 8							; size = 4
_rad$ = 12						; size = 4
?intersectsSphere@Frustum@@QBE_NABVVec3D@@M@Z PROC	; Frustum::intersectsSphere
; _this$ = ecx
; Line 109
	push	ebp
	mov	ebp, esp
; Line 110
	fld	DWORD PTR _rad$[ebp]
	push	esi
	mov	esi, DWORD PTR _v$[ebp]
	fld	ST(0)
	fchs
	xor	edx, edx
	fstp	DWORD PTR tv230[ebp]
	add	ecx, 8
	fld	DWORD PTR tv230[ebp]
$LN5@intersects@2:
; Line 112
	fld	DWORD PTR [ecx-4]
	fmul	DWORD PTR [esi+4]
	fld	DWORD PTR [ecx-8]
	fmul	DWORD PTR [esi]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [esi+8]
	faddp	ST(1), ST(0)
	fadd	DWORD PTR [ecx+4]
	fstp	DWORD PTR _distance$81196[ebp]
; Line 113
	fld	DWORD PTR _distance$81196[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN18@intersects@2
; Line 114
	fabs
	fstp	DWORD PTR tv395[ebp]
	fld	DWORD PTR tv395[ebp]
	fcomp	ST(2)
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN21@intersects@2
; Line 110
	inc	edx
	add	ecx, 16					; 00000010H
	cmp	edx, 6
	jl	SHORT $LN5@intersects@2
$LN21@intersects@2:
; Line 114
	fstp	ST(1)
; Line 116
	mov	al, 1
	fstp	ST(0)
	pop	esi
; Line 117
	pop	ebp
	ret	8
$LN18@intersects@2:
; Line 113
	fstp	ST(0)
	xor	al, al
; Line 114
	fstp	ST(1)
	pop	esi
	fstp	ST(0)
; Line 117
	pop	ebp
	ret	8
?intersectsSphere@Frustum@@QBE_NABVVec3D@@M@Z ENDP	; Frustum::intersectsSphere
_TEXT	ENDS
END
