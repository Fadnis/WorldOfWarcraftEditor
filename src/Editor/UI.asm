; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\programovani\WoW Editor\Test\src\Editor\UI.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
CONST	SEGMENT
$SG106489 DB	'interface\tooltips\ui-tooltip-border.blp', 00H
	ORG $+3
$SG106519 DB	'Interface\Buttons\UI-SliderBar-Border.blp', 00H
	ORG $+2
$SG106521 DB	'Interface\Buttons\UI-SliderBar-Button-Horizontal.blp', 00H
	ORG $+3
$SG106783 DB	'interface\tooltips\ui-tooltip-border.blp', 00H
	ORG $+3
$SG106796 DB	'Interface\Buttons\UI-MinusButton-Down.blp', 00H
	ORG $+2
$SG106797 DB	'Interface\Buttons\UI-MinusButton-Up.blp', 00H
$SG106812 DB	'Interface\Buttons\UI-PlusButton-Down.blp', 00H
	ORG $+3
$SG106813 DB	'Interface\Buttons\UI-PlusButton-Up.blp', 00H
	ORG $+1
$SG106837 DB	'interface\tooltips\ui-tooltip-border.blp', 00H
	ORG $+3
$SG106850 DB	'Interface\Buttons\UI-Panel-MinimizeButton-Down.blp', 00H
	ORG $+1
$SG106851 DB	'Interface\Buttons\UI-Panel-MinimizeButton-Up.blp', 00H
	ORG $+3
$SG106863 DB	'Interface\Buttons\UI-CheckBox-Up.blp', 00H
	ORG $+3
$SG106869 DB	'Interface\Buttons\UI-CheckBox-Check.blp', 00H
$SG106920 DB	'Interface\Buttons\UI-ScrollBar-ScrollUpButton-Down.blp', 00H
	ORG $+1
$SG106921 DB	'Interface\Buttons\UI-ScrollBar-ScrollUpButton-Up.blp', 00H
	ORG $+3
$SG106928 DB	'Interface\Buttons\UI-ScrollBar-ScrollDownButton-Down.blp'
	DB	00H
	ORG $+3
$SG106929 DB	'Interface\Buttons\UI-ScrollBar-ScrollDownButton-Up.blp', 00H
	ORG $+1
$SG106935 DB	'Interface\Buttons\UI-ScrollBar-Knob.blp', 00H
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
; Line 345
	push	ebp
	mov	ebp, esp
	push	esi
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
; Line 346
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
; Line 354
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
; Line 355
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN6@scalar
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@scalar:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
; Line 56
	push	ebp
	mov	ebp, esp
; Line 57
	mov	eax, DWORD PTR __Where$[ebp]
; Line 58
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT
; Line 62
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtp
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
; Line 490
	push	ebp
	mov	ebp, esp
; Line 491
	mov	eax, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL3@length:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL3@length
	sub	eax, edx
; Line 492
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT
; Line 496
	push	ebp
	mov	ebp, esp
; Line 498
	pop	ebp
; Line 497
	jmp	_memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogtp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT
; Line 516
	push	ebp
	mov	ebp, esp
; Line 518
	pop	ebp
; Line 517
	jmp	DWORD PTR __imp__memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT
; Line 526
	push	ebp
	mov	ebp, esp
; Line 527
	mov	eax, DWORD PTR __Right$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	edx, DWORD PTR __Left$[ebp]
	mov	BYTE PTR [edx], cl
; Line 528
	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	??0Vec4D@@QAE@MMMM@Z				; Vec4D::Vec4D
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtp
;	COMDAT ??0Vec4D@@QAE@MMMM@Z
_TEXT	SEGMENT
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_z0$ = 16						; size = 4
_w0$ = 20						; size = 4
??0Vec4D@@QAE@MMMM@Z PROC				; Vec4D::Vec4D, COMDAT
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\quaternion.h
; Line 12
	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _y0$[ebp]
	mov	eax, ecx
	mov	ecx, DWORD PTR _x0$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _z0$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _w0$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	pop	ebp
	ret	16					; 00000010H
??0Vec4D@@QAE@MMMM@Z ENDP				; Vec4D::Vec4D
_TEXT	ENDS
PUBLIC	??4Vec4D@@QAEAAV0@ABV0@@Z			; Vec4D::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4Vec4D@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??4Vec4D@@QAEAAV0@ABV0@@Z PROC				; Vec4D::operator=, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
; Line 20
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 21
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 22
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
; Line 23
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
; Line 25
	pop	ebp
	ret	4
??4Vec4D@@QAEAAV0@ABV0@@Z ENDP				; Vec4D::operator=
_TEXT	ENDS
PUBLIC	?processLeftDrag@frame@@UAE_NMMMM@Z		; frame::processLeftDrag
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mx$ = 8						; size = 4
_my$ = 12						; size = 4
_xDrag$ = 16						; size = 4
_yDrag$ = 20						; size = 4
?processLeftDrag@frame@@UAE_NMMMM@Z PROC		; frame::processLeftDrag
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\ui.cpp
; Line 35
	push	ebp
	mov	ebp, esp
; Line 36
	cmp	BYTE PTR [ecx+45], 0
	je	SHORT $LN1@processLef
; Line 38
	fld	DWORD PTR _xDrag$[ebp]
; Line 40
	mov	al, 1
	fadd	DWORD PTR [ecx+20]
	fstp	DWORD PTR [ecx+20]
	fld	DWORD PTR [ecx+24]
	fadd	DWORD PTR _yDrag$[ebp]
	fstp	DWORD PTR [ecx+24]
; Line 44
	pop	ebp
	ret	16					; 00000010H
$LN1@processLef:
; Line 43
	xor	al, al
; Line 44
	pop	ebp
	ret	16					; 00000010H
?processLeftDrag@frame@@UAE_NMMMM@Z ENDP		; frame::processLeftDrag
_TEXT	ENDS
PUBLIC	?getOffset@frame@@QAEXAAM0@Z			; frame::getOffset
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_ty$ = -8						; size = 4
_tx$ = -4						; size = 4
_xOff$ = 8						; size = 4
_yOff$ = 12						; size = 4
?getOffset@frame@@QAEXAAM0@Z PROC			; frame::getOffset
; _this$ = ecx
; Line 59
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	esi, ecx
; Line 61
	mov	ecx, DWORD PTR [esi+36]
	xor	eax, eax
	mov	DWORD PTR _tx$[ebp], eax
	mov	DWORD PTR _ty$[ebp], eax
	cmp	ecx, eax
	je	SHORT $LN1@getOffset
; Line 62
	lea	eax, DWORD PTR _ty$[ebp]
	push	eax
	lea	edx, DWORD PTR _tx$[ebp]
	push	edx
	call	?getOffset@frame@@QAEXAAM0@Z		; frame::getOffset
$LN1@getOffset:
; Line 63
	fld	DWORD PTR [esi+20]
	mov	eax, DWORD PTR _xOff$[ebp]
	fadd	DWORD PTR _tx$[ebp]
; Line 64
	mov	ecx, DWORD PTR _yOff$[ebp]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [esi+24]
	pop	esi
	fadd	DWORD PTR _ty$[ebp]
	fstp	DWORD PTR [ecx]
; Line 65
	mov	esp, ebp
	pop	ebp
	ret	8
?getOffset@frame@@QAEXAAM0@Z ENDP			; frame::getOffset
_TEXT	ENDS
PUBLIC	?processKey@frame@@UAE_ND_N00@Z			; frame::processKey
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_key$ = 8						; size = 1
_shift$ = 12						; size = 1
_alt$ = 16						; size = 1
_ctrl$ = 20						; size = 1
?processKey@frame@@UAE_ND_N00@Z PROC			; frame::processKey
; _this$ = ecx
; Line 69
	xor	al, al
; Line 70
	ret	16					; 00000010H
?processKey@frame@@UAE_ND_N00@Z ENDP			; frame::processKey
_TEXT	ENDS
PUBLIC	?setFunc@slider@@QAEXP6AXM@Z@Z			; slider::setFunc
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_f$ = 8							; size = 4
?setFunc@slider@@QAEXP6AXM@Z@Z PROC			; slider::setFunc
; _this$ = ecx
; Line 256
	push	ebp
	mov	ebp, esp
; Line 257
	mov	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx+72], eax
; Line 258
	pop	ebp
	ret	4
?setFunc@slider@@QAEXP6AXM@Z@Z ENDP			; slider::setFunc
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	?setValue@slider@@QAEXM@Z			; slider::setValue
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogtp
CONST	ENDS
_TEXT	SEGMENT
tv149 = 8						; size = 4
_f$ = 8							; size = 4
?setValue@slider@@QAEXM@Z PROC				; slider::setValue
; _this$ = ecx
; Line 261
	push	ebp
	mov	ebp, esp
; Line 262
	fld1
	fld	DWORD PTR _f$[ebp]
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@setValue
	fstp	ST(0)
; Line 263
	mov	DWORD PTR _f$[ebp], 1065353216		; 3f800000H
	jmp	SHORT $LN1@setValue
$LN3@setValue:
; Line 264
	fldz
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@setValue
; Line 265
	mov	DWORD PTR _f$[ebp], 0
$LN1@setValue:
; Line 268
	fld	DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _f$[ebp]
	fmul	DWORD PTR _f$[ebp]
	push	ecx
	mov	DWORD PTR [ecx+60], eax
	fadd	DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR [ecx+72]
	fstp	DWORD PTR tv149[ebp]
	fld	DWORD PTR tv149[ebp]
	fstp	DWORD PTR [esp]
	call	ecx
	add	esp, 4
; Line 269
	pop	ebp
	ret	4
?setValue@slider@@QAEXM@Z ENDP				; slider::setValue
_TEXT	ENDS
PUBLIC	?setText@slider@@QAEXPBD@Z			; slider::setText
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_t$ = 8							; size = 4
?setText@slider@@QAEXPBD@Z PROC				; slider::setText
; _this$ = ecx
; Line 272
	push	ebp
	mov	ebp, esp
; Line 273
	mov	eax, DWORD PTR _t$[ebp]
	lea	edx, DWORD PTR [ecx+76]
	sub	edx, eax
	npad	5
$LL3@setText:
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx+eax], cl
	inc	eax
	test	cl, cl
	jne	SHORT $LL3@setText
; Line 274
	pop	ebp
	ret	4
?setText@slider@@QAEXPBD@Z ENDP				; slider::setText
_TEXT	ENDS
PUBLIC	?processLeftClick@slider@@UAEPAVframe@@MM@Z	; slider::processLeftClick
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv184 = 8						; size = 4
tv166 = 8						; size = 4
_mx$ = 8						; size = 4
_my$ = 12						; size = 4
?processLeftClick@slider@@UAEPAVframe@@MM@Z PROC	; slider::processLeftClick
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
; Line 282
	fld	DWORD PTR _mx$[ebp]
	push	esi
	mov	esi, ecx
	fdiv	DWORD PTR [esi+28]
	fstp	DWORD PTR tv166[ebp]
; Line 283
	fldz
	fld	DWORD PTR tv166[ebp]
	mov	eax, DWORD PTR tv166[ebp]
	fcom	ST(1)
	mov	DWORD PTR [esi+60], eax
	fnstsw	ax
	fstp	ST(1)
	test	ah, 5
	jp	SHORT $LN4@processLef@2
	fstp	ST(0)
; Line 284
	mov	DWORD PTR [esi+60], 0
	jmp	SHORT $LN2@processLef@2
$LN4@processLef@2:
; Line 285
	fld1
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@processLef@2
; Line 286
	mov	DWORD PTR [esi+60], 1065353216		; 3f800000H
$LN2@processLef@2:
; Line 287
	mov	eax, DWORD PTR [esi+72]
	test	eax, eax
	je	SHORT $LN7@processLef@2
; Line 288
	fld	DWORD PTR [esi+64]
	push	ecx
	fmul	DWORD PTR [esi+60]
	fadd	DWORD PTR [esi+68]
	fstp	DWORD PTR tv184[ebp]
	fld	DWORD PTR tv184[ebp]
	fstp	DWORD PTR [esp]
	call	eax
	add	esp, 4
$LN7@processLef@2:
; Line 289
	mov	eax, esi
	pop	esi
; Line 290
	pop	ebp
	ret	8
?processLeftClick@slider@@UAEPAVframe@@MM@Z ENDP	; slider::processLeftClick
_TEXT	ENDS
PUBLIC	?processLeftDrag@slider@@UAE_NMMMM@Z		; slider::processLeftDrag
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_ty$117035 = -8						; size = 4
_tx$117034 = -4						; size = 4
tv242 = 8						; size = 4
tv239 = 8						; size = 4
tv225 = 8						; size = 4
tv218 = 8						; size = 4
_mx$ = 8						; size = 4
_my$ = 12						; size = 4
_xChange$ = 16						; size = 4
_yChange$ = 20						; size = 4
?processLeftDrag@slider@@UAE_NMMMM@Z PROC		; slider::processLeftDrag
; _this$ = ecx
; Line 293
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	esi, ecx
	push	edi
; Line 296
	mov	edi, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [edi+36]
	mov	DWORD PTR _tx$117034[ebp], 0
	test	ecx, ecx
	je	SHORT $LN7@processLef@3
	lea	eax, DWORD PTR _ty$117035[ebp]
	push	eax
	lea	edx, DWORD PTR _tx$117034[ebp]
	push	edx
	call	?getOffset@frame@@QAEXAAM0@Z		; frame::getOffset
$LN7@processLef@3:
; Line 299
	fld	DWORD PTR _mx$[ebp]
	fld	DWORD PTR [edi+20]
	fadd	DWORD PTR _tx$117034[ebp]
	fstp	DWORD PTR tv242[ebp]
	fsub	DWORD PTR tv242[ebp]
	fstp	DWORD PTR tv239[ebp]
	fld	DWORD PTR tv239[ebp]
	fdiv	DWORD PTR [esi+28]
	fstp	DWORD PTR tv218[ebp]
; Line 300
	fldz
	fld	DWORD PTR tv218[ebp]
	mov	eax, DWORD PTR tv218[ebp]
	fcom	ST(1)
	mov	DWORD PTR [esi+60], eax
	fnstsw	ax
	fstp	ST(1)
	test	ah, 5
	jp	SHORT $LN4@processLef@3
	fstp	ST(0)
; Line 301
	mov	DWORD PTR [esi+60], 0
	jmp	SHORT $LN2@processLef@3
$LN4@processLef@3:
; Line 302
	fld1
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@processLef@3
; Line 303
	mov	DWORD PTR [esi+60], 1065353216		; 3f800000H
$LN2@processLef@3:
; Line 304
	mov	eax, DWORD PTR [esi+72]
	test	eax, eax
	je	SHORT $LN10@processLef@3
; Line 305
	fld	DWORD PTR [esi+64]
	push	ecx
	fmul	DWORD PTR [esi+60]
	fadd	DWORD PTR [esi+68]
	fstp	DWORD PTR tv225[ebp]
	fld	DWORD PTR tv225[ebp]
	fstp	DWORD PTR [esp]
	call	eax
	add	esp, 4
$LN10@processLef@3:
; Line 306
	pop	edi
	mov	al, 1
	pop	esi
; Line 307
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?processLeftDrag@slider@@UAE_NMMMM@Z ENDP		; slider::processLeftDrag
_TEXT	ENDS
PUBLIC	__real@4030000000000000
PUBLIC	__real@402c000000000000
PUBLIC	__real@41000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@401c000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__$ArrayPad$
PUBLIC	?render@slider@@UAEXXZ				; slider::render
EXTRN	__imp__glDisable@4:PROC
EXTRN	__imp__glPopMatrix@0:PROC
EXTRN	__imp__glEnd@0:PROC
EXTRN	__imp__glVertex2f@8:PROC
EXTRN	__imp__glTexCoord2f@8:PROC
EXTRN	__imp__glBegin@4:PROC
EXTRN	__imp__glBindTexture@8:PROC
EXTRN	?shprint@freetype@@YAXABUfont_data@1@MMPBDZZ:PROC ; freetype::shprint
EXTRN	?width@freetype@@YAHABUfont_data@1@PBDZZ:PROC	; freetype::width
EXTRN	?arial12@@3Ufont_data@freetype@@A:BYTE		; arial12
EXTRN	__imp__sprintf:PROC
EXTRN	__imp__glEnable@4:PROC
EXTRN	?glActiveTextureARB@@3P6GXI@ZA:DWORD		; glActiveTextureARB
EXTRN	__imp__glColor3f@12:PROC
EXTRN	__imp__glTranslatef@12:PROC
EXTRN	__imp__glPushMatrix@0:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT __real@4030000000000000
CONST	SEGMENT
__real@4030000000000000 DQ 04030000000000000r	; 16
CONST	ENDS
;	COMDAT __real@402c000000000000
CONST	SEGMENT
__real@402c000000000000 DQ 0402c000000000000r	; 14
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtp
CONST	ENDS
_TEXT	SEGMENT
tv754 = -264						; size = 4
tv749 = -264						; size = 4
tv747 = -264						; size = 4
tv741 = -264						; size = 4
tv685 = -264						; size = 4
tv679 = -264						; size = 4
tv673 = -264						; size = 4
tv667 = -264						; size = 4
tv632 = -264						; size = 4
tv620 = -264						; size = 4
tv574 = -264						; size = 4
tv573 = -264						; size = 4
tv543 = -264						; size = 4
tv542 = -264						; size = 4
tv517 = -264						; size = 4
tv503 = -264						; size = 4
tv474 = -264						; size = 4
tv462 = -264						; size = 4
tv461 = -264						; size = 4
tv441 = -264						; size = 4
tv422 = -264						; size = 4
tv421 = -264						; size = 4
tv381 = -264						; size = 4
tv358 = -264						; size = 4
tv352 = -264						; size = 4
tv338 = -264						; size = 4
tv337 = -264						; size = 4
tv334 = -264						; size = 4
tv314 = -264						; size = 4
tv313 = -264						; size = 4
tv275 = -264						; size = 4
tv274 = -264						; size = 4
tv255 = -264						; size = 4
tv254 = -264						; size = 4
tv211 = -264						; size = 4
tv191 = -264						; size = 4
tv162 = -264						; size = 4
tv148 = -264						; size = 4
tv147 = -264						; size = 4
tv131 = -264						; size = 4
tv130 = -264						; size = 4
tv90 = -264						; size = 4
_Temp$ = -260						; size = 255
__$ArrayPad$ = -4					; size = 4
?render@slider@@UAEXXZ PROC				; slider::render
; _this$ = ecx
; Line 320
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, ecx
; Line 321
	cmp	BYTE PTR [esi+46], 0
	jne	$LN5@render
; Line 323
	push	ebx
	push	edi
	mov	edi, DWORD PTR __imp__glPushMatrix@0
	call	edi
; Line 324
	mov	eax, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [esi+20]
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [esp+8], 0
	mov	DWORD PTR [esp+4], eax
	mov	DWORD PTR [esp], ecx
	call	DWORD PTR __imp__glTranslatef@12
; Line 326
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [esp+8], 1065353216		; 3f800000H
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	DWORD PTR __imp__glColor3f@12
; Line 328
	push	33984					; 000084c0H
	call	DWORD PTR ?glActiveTextureARB@@3P6GXI@ZA ; glActiveTextureARB
; Line 329
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glEnable@4
; Line 333
	cmp	BYTE PTR [esi+76], 0
	lea	eax, DWORD PTR [esi+76]
	je	SHORT $LN3@render
; Line 337
	fld	DWORD PTR [esi+64]
	sub	esp, 8
	fmul	DWORD PTR [esi+60]
	lea	edx, DWORD PTR _Temp$[ebp]
	fadd	DWORD PTR [esi+68]
	fstp	QWORD PTR [esp]
	push	eax
	push	edx
	call	DWORD PTR __imp__sprintf
; Line 339
	lea	eax, DWORD PTR _Temp$[ebp]
	push	eax
	push	OFFSET ?arial12@@3Ufont_data@freetype@@A ; arial12
	call	?width@freetype@@YAHABUfont_data@1@PBDZZ ; freetype::width
; Line 342
	fld	DWORD PTR [esi+28]
	fmul	QWORD PTR __real@3fe0000000000000
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv352[ebp], eax
	add	esp, 24					; 00000018H
	fisub	DWORD PTR tv352[ebp]
	lea	ecx, DWORD PTR _Temp$[ebp]
	push	ecx
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1048576000		; c1800000H
	fstp	DWORD PTR tv334[ebp]
	fld	DWORD PTR tv334[ebp]
	fstp	DWORD PTR [esp]
	push	OFFSET ?arial12@@3Ufont_data@freetype@@A ; arial12
	call	?shprint@freetype@@YAXABUfont_data@1@MMPBDZZ ; freetype::shprint
	add	esp, 16					; 00000010H
$LN3@render:
; Line 345
	call	edi
; Line 347
	mov	edx, DWORD PTR [esi+52]
	push	edx
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8
; Line 350
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 351
	mov	edi, DWORD PTR __imp__glTexCoord2f@8
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1061158912		; 3f400000H
	call	edi
; Line 352
	fld	DWORD PTR [esi+32]
	fadd	QWORD PTR __real@4010000000000000
	mov	ebx, DWORD PTR __imp__glVertex2f@8
	sub	esp, 8
	fstp	DWORD PTR tv741[ebp]
	fld	DWORD PTR tv741[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], -1082130432		; bf800000H
	call	ebx
; Line 353
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1063256064		; 3f600000H
	call	edi
; Line 354
	fld	DWORD PTR [esi+32]
	fadd	QWORD PTR __real@4010000000000000
	sub	esp, 8
	fstp	DWORD PTR tv211[ebp]
	fld	DWORD PTR tv211[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], 1088421888		; 40e00000H
	call	ebx
; Line 355
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1061158912		; 3f400000H
	call	edi
; Line 356
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@4010000000000000
	sub	esp, 8
	fstp	DWORD PTR tv191[ebp]
	fld	DWORD PTR tv191[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], -1082130432		; bf800000H
	call	ebx
; Line 357
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1063256064		; 3f600000H
	call	edi
; Line 358
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@4010000000000000
	sub	esp, 8
	fstp	DWORD PTR tv747[ebp]
	fld	DWORD PTR tv747[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], 1088421888		; 40e00000H
	call	ebx
; Line 359
	call	DWORD PTR __imp__glEnd@0
; Line 362
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 363
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1063256064		; 3f600000H
	call	edi
; Line 364
	fld	DWORD PTR [esi+32]
	fadd	QWORD PTR __real@4010000000000000
	sub	esp, 8
	fstp	DWORD PTR tv162[ebp]
	fld	DWORD PTR tv162[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@401c000000000000
	fstp	DWORD PTR tv749[ebp]
	fld	DWORD PTR tv749[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 365
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	edi
; Line 366
	fld	DWORD PTR [esi+32]
	fadd	QWORD PTR __real@4010000000000000
	sub	esp, 8
	fstp	DWORD PTR tv148[ebp]
	fld	DWORD PTR tv148[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv147[ebp]
	fld	DWORD PTR tv147[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 367
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1063256064		; 3f600000H
	call	edi
; Line 368
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@4010000000000000
	sub	esp, 8
	fstp	DWORD PTR tv131[ebp]
	fld	DWORD PTR tv131[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@401c000000000000
	fstp	DWORD PTR tv130[ebp]
	fld	DWORD PTR tv130[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 369
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	edi
; Line 370
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@4010000000000000
	sub	esp, 8
	fstp	DWORD PTR tv754[ebp]
	fld	DWORD PTR tv754[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv90[ebp]
	fld	DWORD PTR tv90[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 371
	call	DWORD PTR __imp__glEnd@0
; Line 374
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 375
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1056964608		; 3f000000H
	call	edi
; Line 376
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1082130432		; 40800000H
	mov	DWORD PTR [esp], -1082130432		; bf800000H
	call	ebx
; Line 377
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1059061760		; 3f200000H
	call	edi
; Line 378
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1082130432		; 40800000H
	mov	DWORD PTR [esp], 1088421888		; 40e00000H
	call	ebx
; Line 379
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1056964608		; 3f000000H
	call	edi
; Line 380
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1065353216		; c0800000H
	mov	DWORD PTR [esp], -1082130432		; bf800000H
	call	ebx
; Line 381
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1059061760		; 3f200000H
	call	edi
; Line 382
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1065353216		; c0800000H
	mov	DWORD PTR [esp], 1088421888		; 40e00000H
	call	ebx
; Line 383
	call	DWORD PTR __imp__glEnd@0
; Line 386
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 387
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1059061760		; 3f200000H
	call	edi
; Line 388
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@401c000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1082130432		; 40800000H
	fstp	DWORD PTR tv685[ebp]
	fld	DWORD PTR tv685[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 389
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1061158912		; 3f400000H
	call	edi
; Line 390
	fld	DWORD PTR [esi+28]
	fadd	QWORD PTR __real@3ff0000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1082130432		; 40800000H
	fstp	DWORD PTR tv679[ebp]
	fld	DWORD PTR tv679[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 391
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1059061760		; 3f200000H
	call	edi
; Line 392
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@401c000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1065353216		; c0800000H
	fstp	DWORD PTR tv673[ebp]
	fld	DWORD PTR tv673[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 393
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1061158912		; 3f400000H
	call	edi
; Line 394
	fld	DWORD PTR [esi+28]
	fadd	QWORD PTR __real@3ff0000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1065353216		; c0800000H
	fstp	DWORD PTR tv667[ebp]
	fld	DWORD PTR tv667[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 395
	call	DWORD PTR __imp__glEnd@0
; Line 397
	fld	DWORD PTR __real@41000000
	fcomp	DWORD PTR [esi+32]
	fnstsw	ax
	test	ah, 5
	jp	$LN2@render
; Line 400
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 401
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 0
	call	edi
; Line 402
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@4010000000000000
	sub	esp, 8
	fstp	DWORD PTR tv632[ebp]
	fld	DWORD PTR tv632[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], -1082130432		; bf800000H
	call	ebx
; Line 403
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1040187392		; 3e000000H
	call	edi
; Line 404
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@4010000000000000
	sub	esp, 8
	fstp	DWORD PTR tv620[ebp]
	fld	DWORD PTR tv620[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], 1088421888		; 40e00000H
	call	ebx
; Line 405
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 0
	call	edi
; Line 406
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1082130432		; 40800000H
	mov	DWORD PTR [esp], -1082130432		; bf800000H
	call	ebx
; Line 407
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1040187392		; 3e000000H
	call	edi
; Line 408
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1082130432		; 40800000H
	mov	DWORD PTR [esp], 1088421888		; 40e00000H
	call	ebx
; Line 409
	call	DWORD PTR __imp__glEnd@0
; Line 412
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 413
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1040187392		; 3e000000H
	call	edi
; Line 414
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@4010000000000000
	sub	esp, 8
	fstp	DWORD PTR tv574[ebp]
	fld	DWORD PTR tv574[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@401c000000000000
	fstp	DWORD PTR tv573[ebp]
	fld	DWORD PTR tv573[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 415
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1048576000		; 3e800000H
	call	edi
; Line 416
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@4010000000000000
	sub	esp, 8
	fstp	DWORD PTR tv543[ebp]
	fld	DWORD PTR tv543[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv542[ebp]
	fld	DWORD PTR tv542[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 417
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1040187392		; 3e000000H
	call	edi
; Line 418
	fld	DWORD PTR [esi+28]
	sub	esp, 8
	fsub	QWORD PTR __real@401c000000000000
	mov	DWORD PTR [esp+4], 1082130432		; 40800000H
	fstp	DWORD PTR tv517[ebp]
	fld	DWORD PTR tv517[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 419
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1048576000		; 3e800000H
	call	edi
; Line 420
	fld	DWORD PTR [esi+28]
	fadd	QWORD PTR __real@3ff0000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1082130432		; 40800000H
	fstp	DWORD PTR tv503[ebp]
	fld	DWORD PTR tv503[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 421
	call	DWORD PTR __imp__glEnd@0
$LN2@render:
; Line 424
	fld	DWORD PTR [esi+28]
	fcomp	QWORD PTR __real@402c000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN1@render
; Line 427
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 428
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1056964608		; 3f000000H
	call	edi
; Line 429
	fld	DWORD PTR [esi+32]
	fadd	QWORD PTR __real@4010000000000000
	sub	esp, 8
	fstp	DWORD PTR tv474[ebp]
	fld	DWORD PTR tv474[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], 1088421888		; 40e00000H
	call	ebx
; Line 430
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1056964608		; 3f000000H
	call	edi
; Line 431
	fld	DWORD PTR [esi+32]
	fadd	QWORD PTR __real@4010000000000000
	sub	esp, 8
	fstp	DWORD PTR tv462[ebp]
	fld	DWORD PTR tv462[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@401c000000000000
	fstp	DWORD PTR tv461[ebp]
	fld	DWORD PTR tv461[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 432
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1052770304		; 3ec00000H
	call	edi
; Line 433
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@4010000000000000
	sub	esp, 8
	fstp	DWORD PTR tv441[ebp]
	fld	DWORD PTR tv441[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], 1088421888		; 40e00000H
	call	ebx
; Line 434
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1052770304		; 3ec00000H
	call	edi
; Line 435
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@4010000000000000
	sub	esp, 8
	fstp	DWORD PTR tv422[ebp]
	fld	DWORD PTR tv422[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@401c000000000000
	fstp	DWORD PTR tv421[ebp]
	fld	DWORD PTR tv421[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 436
	call	DWORD PTR __imp__glEnd@0
; Line 439
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 440
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1052770304		; 3ec00000H
	call	edi
; Line 441
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1082130432		; 40800000H
	mov	DWORD PTR [esp], 1088421888		; 40e00000H
	call	ebx
; Line 442
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1052770304		; 3ec00000H
	call	edi
; Line 443
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@401c000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1082130432		; 40800000H
	fstp	DWORD PTR tv381[ebp]
	fld	DWORD PTR tv381[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 444
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1048576000		; 3e800000H
	call	edi
; Line 445
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1065353216		; c0800000H
	mov	DWORD PTR [esp], 1088421888		; 40e00000H
	call	ebx
; Line 446
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1048576000		; 3e800000H
	call	edi
; Line 447
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@401c000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1065353216		; c0800000H
	fstp	DWORD PTR tv358[ebp]
	fld	DWORD PTR tv358[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 448
	call	DWORD PTR __imp__glEnd@0
$LN1@render:
; Line 451
	call	DWORD PTR __imp__glPopMatrix@0
; Line 453
	mov	eax, DWORD PTR [esi+56]
	push	eax
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8
; Line 454
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 455
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 0
	call	edi
; Line 456
	fld	DWORD PTR [esi+32]
	fmul	QWORD PTR __real@3fe0000000000000
	sub	esp, 8
	fld	QWORD PTR __real@4030000000000000
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR tv338[ebp]
	fld	DWORD PTR tv338[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+60]
	fmul	DWORD PTR [esi+28]
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR tv337[ebp]
	fld	DWORD PTR tv337[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 457
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	edi
; Line 458
	fld	DWORD PTR [esi+32]
	fmul	QWORD PTR __real@3fe0000000000000
	sub	esp, 8
	fld	QWORD PTR __real@4030000000000000
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR tv314[ebp]
	fld	DWORD PTR tv314[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+60]
	fmul	DWORD PTR [esi+28]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv313[ebp]
	fld	DWORD PTR tv313[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 459
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 0
	call	edi
; Line 460
	fld	DWORD PTR [esi+32]
	fmul	QWORD PTR __real@3fe0000000000000
	sub	esp, 8
	fld	QWORD PTR __real@4030000000000000
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR tv275[ebp]
	fld	DWORD PTR tv275[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+60]
	fmul	DWORD PTR [esi+28]
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR tv274[ebp]
	fld	DWORD PTR tv274[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 461
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	edi
; Line 462
	fld	DWORD PTR [esi+32]
	fmul	QWORD PTR __real@3fe0000000000000
	sub	esp, 8
	fld	QWORD PTR __real@4030000000000000
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR tv255[ebp]
	fld	DWORD PTR tv255[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+60]
	fmul	DWORD PTR [esi+28]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv254[ebp]
	fld	DWORD PTR tv254[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 463
	call	DWORD PTR __imp__glEnd@0
; Line 465
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glDisable@4
; Line 467
	call	DWORD PTR __imp__glPopMatrix@0
	pop	edi
	pop	ebx
$LN5@render:
; Line 468
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?render@slider@@UAEXXZ ENDP				; slider::render
_TEXT	ENDS
PUBLIC	?render@gradient@@UAEXXZ			; gradient::render
EXTRN	__imp__glColor4fv@4:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv526 = -4						; size = 4
tv523 = -4						; size = 4
tv513 = -4						; size = 4
tv504 = -4						; size = 4
tv411 = -4						; size = 4
tv397 = -4						; size = 4
tv379 = -4						; size = 4
tv346 = -4						; size = 4
tv315 = -4						; size = 4
tv286 = -4						; size = 4
tv228 = -4						; size = 4
tv197 = -4						; size = 4
tv193 = -4						; size = 4
tv182 = -4						; size = 4
tv177 = -4						; size = 4
tv172 = -4						; size = 4
tv165 = -4						; size = 4
?render@gradient@@UAEXXZ PROC				; gradient::render
; _this$ = ecx
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
; Line 473
	cmp	BYTE PTR [esi+46], 0
	jne	$LN1@render@2
; Line 475
	cmp	BYTE PTR [esi+108], 0
	push	ebx
	push	edi
; Line 477
	push	5
	je	$LN4@render@2
	call	DWORD PTR __imp__glBegin@4
; Line 478
	mov	ebx, DWORD PTR __imp__glColor4fv@4
	lea	eax, DWORD PTR [esi+52]
	push	eax
	call	ebx
; Line 479
	mov	ecx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR [esi+20]
	mov	edi, DWORD PTR __imp__glVertex2f@8
	sub	esp, 8
	mov	DWORD PTR [esp+4], ecx
	mov	DWORD PTR [esp], edx
	call	edi
; Line 480
	fld	DWORD PTR [esi+32]
	fadd	DWORD PTR [esi+24]
	mov	eax, DWORD PTR [esi+20]
	sub	esp, 8
	fstp	DWORD PTR tv411[ebp]
	fld	DWORD PTR tv411[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], eax
	call	edi
; Line 481
	lea	ecx, DWORD PTR [esi+68]
	push	ecx
	call	ebx
; Line 482
	fld	DWORD PTR [esi+28]
	fadd	DWORD PTR [esi+20]
	mov	edx, DWORD PTR [esi+24]
	sub	esp, 8
	mov	DWORD PTR [esp+4], edx
	fstp	DWORD PTR tv397[ebp]
	fld	DWORD PTR tv397[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 483
	fld	DWORD PTR [esi+32]
	sub	esp, 8
	fadd	DWORD PTR [esi+24]
	fstp	DWORD PTR tv504[ebp]
	fld	DWORD PTR tv504[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fadd	DWORD PTR [esi+20]
	fstp	DWORD PTR tv379[ebp]
	fld	DWORD PTR tv379[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 484
	call	DWORD PTR __imp__glEnd@0
; Line 485
	cmp	BYTE PTR [esi+47], 0
	je	$LN8@render@2
; Line 487
	lea	eax, DWORD PTR [esi+84]
	push	eax
	call	ebx
; Line 488
	push	6913					; 00001b01H
	call	DWORD PTR __imp__glBegin@4
; Line 489
	fld	DWORD PTR [esi+100]
	fmul	DWORD PTR [esi+28]
	mov	ecx, DWORD PTR [esi+24]
	sub	esp, 8
	mov	DWORD PTR [esp+4], ecx
	fadd	DWORD PTR [esi+20]
	fstp	DWORD PTR tv346[ebp]
	fld	DWORD PTR tv346[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 490
	fld	DWORD PTR [esi+32]
	sub	esp, 8
	fadd	DWORD PTR [esi+24]
	fstp	DWORD PTR tv315[ebp]
	fld	DWORD PTR tv315[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+100]
	fmul	DWORD PTR [esi+28]
	fadd	DWORD PTR [esi+20]
	fstp	DWORD PTR tv513[ebp]
	fld	DWORD PTR tv513[ebp]
; Line 512
	fstp	DWORD PTR [esp]
	call	edi
; Line 513
	call	DWORD PTR __imp__glEnd@0
	pop	edi
	pop	ebx
	pop	esi
; Line 516
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@render@2:
; Line 496
	call	DWORD PTR __imp__glBegin@4
; Line 497
	mov	ebx, DWORD PTR __imp__glColor4fv@4
	lea	edx, DWORD PTR [esi+68]
	push	edx
	call	ebx
; Line 498
	fld	DWORD PTR [esi+28]
	fadd	DWORD PTR [esi+20]
	mov	eax, DWORD PTR [esi+24]
	mov	edi, DWORD PTR __imp__glVertex2f@8
	sub	esp, 8
	fstp	DWORD PTR tv286[ebp]
	mov	DWORD PTR [esp+4], eax
	fld	DWORD PTR tv286[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 499
	mov	ecx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR [esi+20]
	sub	esp, 8
	mov	DWORD PTR [esp+4], ecx
	mov	DWORD PTR [esp], edx
	call	edi
; Line 500
	lea	eax, DWORD PTR [esi+52]
	push	eax
	call	ebx
; Line 501
	fld	DWORD PTR [esi+32]
	fadd	DWORD PTR [esi+24]
	sub	esp, 8
	fstp	DWORD PTR tv523[ebp]
	fld	DWORD PTR tv523[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fadd	DWORD PTR [esi+20]
	fstp	DWORD PTR tv228[ebp]
	fld	DWORD PTR tv228[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 502
	fld	DWORD PTR [esi+32]
	mov	ecx, DWORD PTR [esi+20]
	fadd	DWORD PTR [esi+24]
	sub	esp, 8
	fstp	DWORD PTR tv526[ebp]
	fld	DWORD PTR tv526[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], ecx
	call	edi
; Line 503
	call	DWORD PTR __imp__glEnd@0
; Line 505
	cmp	BYTE PTR [esi+47], 0
	je	$LN8@render@2
; Line 507
	lea	edx, DWORD PTR [esi+84]
	push	edx
	call	ebx
; Line 508
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 509
	fld	DWORD PTR [esi+100]
	fmul	DWORD PTR [esi+32]
	mov	eax, DWORD PTR [esi+20]
	sub	esp, 8
	fadd	DWORD PTR [esi+24]
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv197[ebp]
	fld	DWORD PTR tv197[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], eax
	call	edi
; Line 510
	fld	DWORD PTR [esi+100]
	fmul	DWORD PTR [esi+32]
	sub	esp, 8
	fadd	DWORD PTR [esi+24]
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv182[ebp]
	fld	DWORD PTR tv182[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fadd	DWORD PTR [esi+20]
	fstp	DWORD PTR tv193[ebp]
	fld	DWORD PTR tv193[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 511
	fld	DWORD PTR [esi+100]
	mov	ecx, DWORD PTR [esi+20]
	fmul	DWORD PTR [esi+32]
	sub	esp, 8
	fadd	DWORD PTR [esi+24]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv177[ebp]
	fld	DWORD PTR tv177[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], ecx
	call	edi
; Line 512
	fld	DWORD PTR [esi+100]
	fmul	DWORD PTR [esi+32]
	sub	esp, 8
	fadd	DWORD PTR [esi+24]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv172[ebp]
	fld	DWORD PTR tv172[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fadd	DWORD PTR [esi+20]
	fstp	DWORD PTR tv165[ebp]
	fld	DWORD PTR tv165[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 513
	call	DWORD PTR __imp__glEnd@0
$LN8@render@2:
	pop	edi
	pop	ebx
$LN1@render@2:
	pop	esi
; Line 516
	mov	esp, ebp
	pop	ebp
	ret	0
?render@gradient@@UAEXXZ ENDP				; gradient::render
_TEXT	ENDS
PUBLIC	?setMaxColor@gradient@@QAEXMMMM@Z		; gradient::setMaxColor
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
?setMaxColor@gradient@@QAEXMMMM@Z PROC			; gradient::setMaxColor
; _this$ = ecx
; Line 519
	push	ebp
	mov	ebp, esp
; Line 520
	mov	eax, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR _g$[ebp]
	mov	DWORD PTR [ecx+68], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx+76], eax
	mov	DWORD PTR [ecx+80], edx
; Line 521
	pop	ebp
	ret	16					; 00000010H
?setMaxColor@gradient@@QAEXMMMM@Z ENDP			; gradient::setMaxColor
_TEXT	ENDS
PUBLIC	?setMinColor@gradient@@QAEXMMMM@Z		; gradient::setMinColor
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
?setMinColor@gradient@@QAEXMMMM@Z PROC			; gradient::setMinColor
; _this$ = ecx
; Line 524
	push	ebp
	mov	ebp, esp
; Line 525
	mov	eax, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR _g$[ebp]
	mov	DWORD PTR [ecx+52], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+56], edx
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx+60], eax
	mov	DWORD PTR [ecx+64], edx
; Line 526
	pop	ebp
	ret	16					; 00000010H
?setMinColor@gradient@@QAEXMMMM@Z ENDP			; gradient::setMinColor
_TEXT	ENDS
PUBLIC	?setClickColor@gradient@@QAEXMMMM@Z		; gradient::setClickColor
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
?setClickColor@gradient@@QAEXMMMM@Z PROC		; gradient::setClickColor
; _this$ = ecx
; Line 529
	push	ebp
	mov	ebp, esp
; Line 530
	mov	eax, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR _g$[ebp]
	mov	DWORD PTR [ecx+84], eax
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+88], edx
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx+92], eax
	mov	DWORD PTR [ecx+96], edx
; Line 531
	pop	ebp
	ret	16					; 00000010H
?setClickColor@gradient@@QAEXMMMM@Z ENDP		; gradient::setClickColor
_TEXT	ENDS
PUBLIC	?setClickFunc@gradient@@QAEXP6AXM@Z@Z		; gradient::setClickFunc
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_f$ = 8							; size = 4
?setClickFunc@gradient@@QAEXP6AXM@Z@Z PROC		; gradient::setClickFunc
; _this$ = ecx
; Line 534
	push	ebp
	mov	ebp, esp
; Line 536
	mov	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx+100], 0
	mov	DWORD PTR [ecx+104], eax
; Line 537
	mov	BYTE PTR [ecx+47], 1
; Line 538
	pop	ebp
	ret	4
?setClickFunc@gradient@@QAEXP6AXM@Z@Z ENDP		; gradient::setClickFunc
_TEXT	ENDS
PUBLIC	?processLeftClick@gradient@@UAEPAVframe@@MM@Z	; gradient::processLeftClick
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mx$ = 8						; size = 4
_my$ = 12						; size = 4
?processLeftClick@gradient@@UAEPAVframe@@MM@Z PROC	; gradient::processLeftClick
; _this$ = ecx
; Line 541
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 542
	cmp	BYTE PTR [esi+47], 0
	je	SHORT $LN7@processLef@4
; Line 545
	cmp	BYTE PTR [esi+108], 0
	mov	BYTE PTR [esi+49], 1
	je	SHORT $LN6@processLef@4
; Line 546
	fld	DWORD PTR _mx$[ebp]
	fdiv	DWORD PTR [esi+28]
; Line 547
	jmp	SHORT $LN10@processLef@4
$LN6@processLef@4:
; Line 548
	fld	DWORD PTR _my$[ebp]
	fdiv	DWORD PTR [esi+32]
$LN10@processLef@4:
	fstp	DWORD PTR [esi+100]
; Line 549
	fldz
	fcomp	DWORD PTR [esi+100]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@processLef@4
; Line 550
	mov	DWORD PTR [esi+100], 0
	jmp	SHORT $LN2@processLef@4
$LN4@processLef@4:
; Line 551
	fld1
	fcomp	DWORD PTR [esi+100]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@processLef@4
; Line 552
	mov	DWORD PTR [esi+100], 1065353216		; 3f800000H
$LN2@processLef@4:
; Line 553
	mov	eax, DWORD PTR [esi+100]
	push	ecx
	mov	ecx, DWORD PTR [esi+104]
	mov	DWORD PTR [esp], eax
	call	ecx
	add	esp, 4
; Line 554
	mov	eax, esi
	pop	esi
; Line 558
	pop	ebp
	ret	8
$LN7@processLef@4:
; Line 557
	xor	eax, eax
	pop	esi
; Line 558
	pop	ebp
	ret	8
?processLeftClick@gradient@@UAEPAVframe@@MM@Z ENDP	; gradient::processLeftClick
_TEXT	ENDS
PUBLIC	?processLeftDrag@gradient@@UAE_NMMMM@Z		; gradient::processLeftDrag
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_tx$117099 = -8						; size = 4
_ty$117100 = -4						; size = 4
_ty$ = -4						; size = 4
tv296 = 8						; size = 4
tv293 = 8						; size = 4
tv288 = 8						; size = 4
_mx$ = 8						; size = 4
_my$ = 12						; size = 4
_xDrag$ = 16						; size = 4
_yDrag$ = 20						; size = 4
?processLeftDrag@gradient@@UAE_NMMMM@Z PROC		; gradient::processLeftDrag
; _this$ = ecx
; Line 561
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	esi, ecx
	push	edi
; Line 563
	mov	edi, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [edi+36]
	mov	DWORD PTR _tx$117099[ebp], 0
	mov	DWORD PTR _ty$117100[ebp], 0
	test	ecx, ecx
	je	SHORT $LN10@processLef@5
	lea	eax, DWORD PTR _ty$117100[ebp]
	push	eax
	lea	edx, DWORD PTR _tx$117099[ebp]
	push	edx
	call	?getOffset@frame@@QAEXAAM0@Z		; frame::getOffset
$LN10@processLef@5:
; Line 566
	cmp	BYTE PTR [esi+47], 0
	fld	DWORD PTR [edi+24]
	fadd	DWORD PTR _ty$117100[ebp]
	fstp	DWORD PTR _ty$[ebp]
	je	SHORT $LN7@processLef@5
; Line 568
	cmp	BYTE PTR [esi+108], 0
	je	SHORT $LN6@processLef@5
; Line 569
	fld	DWORD PTR _mx$[ebp]
	fld	DWORD PTR [edi+20]
	fadd	DWORD PTR _tx$117099[ebp]
	fstp	DWORD PTR tv296[ebp]
	fsub	DWORD PTR tv296[ebp]
	fstp	DWORD PTR tv293[ebp]
	fld	DWORD PTR tv293[ebp]
	fdiv	DWORD PTR [esi+28]
; Line 570
	jmp	SHORT $LN13@processLef@5
$LN6@processLef@5:
; Line 571
	fld	DWORD PTR _my$[ebp]
	fsub	DWORD PTR _ty$[ebp]
	fstp	DWORD PTR tv288[ebp]
	fld	DWORD PTR tv288[ebp]
	fdiv	DWORD PTR [esi+32]
$LN13@processLef@5:
	fstp	DWORD PTR [esi+100]
; Line 572
	fldz
	fcomp	DWORD PTR [esi+100]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@processLef@5
; Line 573
	mov	DWORD PTR [esi+100], 0
	jmp	SHORT $LN2@processLef@5
$LN4@processLef@5:
; Line 574
	fld1
	fcomp	DWORD PTR [esi+100]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@processLef@5
; Line 575
	mov	DWORD PTR [esi+100], 1065353216		; 3f800000H
$LN2@processLef@5:
; Line 576
	mov	eax, DWORD PTR [esi+100]
	push	ecx
	mov	ecx, DWORD PTR [esi+104]
	mov	DWORD PTR [esp], eax
	call	ecx
	add	esp, 4
	pop	edi
; Line 577
	mov	al, 1
	pop	esi
; Line 588
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN7@processLef@5:
; Line 580
	cmp	BYTE PTR [esi+45], 0
	je	SHORT $LN1@processLef@5
; Line 582
	fld	DWORD PTR [esi+20]
	pop	edi
	fadd	DWORD PTR _xDrag$[ebp]
; Line 584
	mov	al, 1
	fstp	DWORD PTR [esi+20]
	fld	DWORD PTR [esi+24]
	fadd	DWORD PTR _yDrag$[ebp]
	fstp	DWORD PTR [esi+24]
	pop	esi
; Line 588
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN1@processLef@5:
	pop	edi
; Line 587
	xor	al, al
	pop	esi
; Line 588
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?processLeftDrag@gradient@@UAE_NMMMM@Z ENDP		; gradient::processLeftDrag
_TEXT	ENDS
PUBLIC	?setValue@gradient@@QAEXM@Z			; gradient::setValue
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_f$ = 8							; size = 4
?setValue@gradient@@QAEXM@Z PROC			; gradient::setValue
; _this$ = ecx
; Line 591
	push	ebp
	mov	ebp, esp
; Line 593
	fldz
	mov	eax, DWORD PTR _f$[ebp]
	fld	DWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx+100], eax
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 5
	jp	SHORT $LN3@setValue@2
; Line 597
	mov	eax, DWORD PTR [ecx+104]
	fstp	ST(0)
	mov	DWORD PTR [ecx+100], 0
	mov	edx, DWORD PTR [ecx+100]
	push	ecx
	mov	DWORD PTR [esp], edx
	call	eax
	add	esp, 4
; Line 598
	pop	ebp
	ret	4
$LN3@setValue@2:
; Line 595
	fld1
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@setValue@2
; Line 596
	mov	DWORD PTR [ecx+100], 1065353216		; 3f800000H
$LN1@setValue@2:
; Line 597
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [ecx+104]
	push	ecx
	mov	DWORD PTR [esp], edx
	call	eax
	add	esp, 4
; Line 598
	pop	ebp
	ret	4
?setValue@gradient@@QAEXM@Z ENDP			; gradient::setValue
_TEXT	ENDS
PUBLIC	?setText@textUI@@QAEXPBD@Z			; textUI::setText
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_t$ = 8							; size = 4
?setText@textUI@@QAEXPBD@Z PROC				; textUI::setText
; _this$ = ecx
; Line 622
	push	ebp
	mov	ebp, esp
; Line 623
	mov	eax, DWORD PTR _t$[ebp]
	lea	edx, DWORD PTR [ecx+56]
	sub	edx, eax
	npad	5
$LL3@setText@2:
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx+eax], cl
	inc	eax
	test	cl, cl
	jne	SHORT $LL3@setText@2
; Line 624
	pop	ebp
	ret	4
?setText@textUI@@QAEXPBD@Z ENDP				; textUI::setText
_TEXT	ENDS
PUBLIC	?setJustify@textUI@@QAEXH@Z			; textUI::setJustify
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_j$ = 8							; size = 4
?setJustify@textUI@@QAEXH@Z PROC			; textUI::setJustify
; _this$ = ecx
; Line 627
	push	ebp
	mov	ebp, esp
; Line 628
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR [ecx+312], eax
; Line 629
	pop	ebp
	ret	4
?setJustify@textUI@@QAEXH@Z ENDP			; textUI::setJustify
_TEXT	ENDS
PUBLIC	?setFont@textUI@@QAEXPAUfont_data@freetype@@@Z	; textUI::setFont
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_f$ = 8							; size = 4
?setFont@textUI@@QAEXPAUfont_data@freetype@@@Z PROC	; textUI::setFont
; _this$ = ecx
; Line 632
	push	ebp
	mov	ebp, esp
; Line 633
	mov	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx+52], eax
; Line 634
	pop	ebp
	ret	4
?setFont@textUI@@QAEXPAUfont_data@freetype@@@Z ENDP	; textUI::setFont
_TEXT	ENDS
PUBLIC	__real@4000000000000000
PUBLIC	?render@textUI@@UAEXXZ				; textUI::render
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Ogtp
CONST	ENDS
_TEXT	SEGMENT
tv528 = -16						; size = 4
tv522 = -16						; size = 4
tv513 = -16						; size = 4
tv482 = -16						; size = 4
tv475 = -16						; size = 4
tv278 = -16						; size = 4
tv266 = -16						; size = 4
tv228 = -16						; size = 4
tv194 = -16						; size = 4
tv192 = -16						; size = 4
tv179 = -16						; size = 4
tv178 = -16						; size = 4
tv177 = -16						; size = 4
tv176 = -16						; size = 4
tv162 = -16						; size = 4
tv160 = -16						; size = 4
tv148 = -16						; size = 4
tv144 = -16						; size = 4
tv143 = -16						; size = 4
tv134 = -16						; size = 4
tv133 = -16						; size = 4
tv92 = -16						; size = 4
tv91 = -16						; size = 4
tv82 = -16						; size = 4
_twidth$ = -12						; size = 4
tv582 = -8						; size = 8
tv570 = -4						; size = 4
tv329 = -4						; size = 4
tv318 = -4						; size = 4
?render@textUI@@UAEXXZ PROC				; textUI::render
; _this$ = ecx
; Line 637
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	mov	esi, ecx
; Line 639
	mov	eax, DWORD PTR [esi+52]
	lea	ebx, DWORD PTR [esi+56]
	push	ebx
	push	eax
	call	?width@freetype@@YAHABUfont_data@1@PBDZZ ; freetype::width
	add	esp, 8
; Line 641
	cmp	BYTE PTR [esi+316], 0
	mov	DWORD PTR _twidth$[ebp], eax
	je	$LN14@render@3
; Line 643
	push	edi
	lea	ecx, DWORD PTR [esi+320]
	push	ecx
	call	DWORD PTR __imp__glColor4fv@4
; Line 644
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 645
	mov	eax, DWORD PTR [esi+312]
	test	eax, eax
	jne	$LN10@render@3
; Line 647
	fld	DWORD PTR [esi+24]
	mov	edi, DWORD PTR __imp__glVertex2f@8
	fsub	QWORD PTR __real@3ff0000000000000
	sub	esp, 8
	fstp	DWORD PTR tv329[ebp]
	fld	DWORD PTR tv329[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+20]
	fsub	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv318[ebp]
	fld	DWORD PTR tv318[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 648
	fild	DWORD PTR _twidth$[ebp]
	sub	esp, 8
	fstp	DWORD PTR tv570[ebp]
	fld	DWORD PTR [esi+24]
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv278[ebp]
	fld	DWORD PTR tv278[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+20]
	fadd	QWORD PTR __real@4000000000000000
	fadd	DWORD PTR tv570[ebp]
	fstp	DWORD PTR tv266[ebp]
	fld	DWORD PTR tv266[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 649
	fld	DWORD PTR [esi+24]
	mov	edx, DWORD PTR [esi+52]
	fld	QWORD PTR __real@4000000000000000
	sub	esp, 8
	fadd	ST(1), ST(0)
	fld	DWORD PTR [edx]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv513[ebp]
	fld	DWORD PTR tv513[ebp]
	fstp	DWORD PTR [esp+4]
	fsubr	DWORD PTR [esi+20]
	fstp	DWORD PTR tv228[ebp]
	fld	DWORD PTR tv228[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 650
	fld	DWORD PTR [esi+24]
	mov	eax, DWORD PTR [esi+52]
	fld	QWORD PTR __real@4000000000000000
	sub	esp, 8
	fadd	ST(1), ST(0)
	fld	DWORD PTR [eax]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv194[ebp]
	fld	DWORD PTR tv194[ebp]
	fstp	DWORD PTR [esp+4]
	fadd	DWORD PTR [esi+20]
	fadd	DWORD PTR tv570[ebp]
	fstp	DWORD PTR tv192[ebp]
	fld	DWORD PTR tv192[ebp]
	jmp	$LN15@render@3
$LN10@render@3:
; Line 652
	cmp	eax, 1
	jne	$LN8@render@3
; Line 654
	fild	DWORD PTR _twidth$[ebp]
	mov	edi, DWORD PTR __imp__glVertex2f@8
	sub	esp, 8
	fmul	QWORD PTR __real@3fe0000000000000
	fst	QWORD PTR tv582[ebp]
	fld	DWORD PTR [esi+24]
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv177[ebp]
	fld	DWORD PTR tv177[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+20]
	fsub	QWORD PTR __real@4000000000000000
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR tv176[ebp]
	fld	DWORD PTR tv176[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 655
	fld	DWORD PTR [esi+24]
	sub	esp, 8
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv179[ebp]
	fld	DWORD PTR tv179[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+20]
	fadd	QWORD PTR __real@4000000000000000
	fadd	QWORD PTR tv582[ebp]
	fstp	DWORD PTR tv178[ebp]
	fld	DWORD PTR tv178[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 656
	fld	DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [esi+52]
	fld	QWORD PTR __real@4000000000000000
	sub	esp, 8
	fadd	ST(1), ST(0)
	fld	DWORD PTR [ecx]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv162[ebp]
	fld	DWORD PTR tv162[ebp]
	fstp	DWORD PTR [esp+4]
	fsubr	DWORD PTR [esi+20]
	fsub	QWORD PTR tv582[ebp]
	fstp	DWORD PTR tv160[ebp]
	fld	DWORD PTR tv160[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 657
	fld	DWORD PTR [esi+24]
	mov	edx, DWORD PTR [esi+52]
	fld	QWORD PTR __real@4000000000000000
	sub	esp, 8
	fadd	ST(1), ST(0)
	fld	DWORD PTR [edx]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv522[ebp]
	fld	DWORD PTR tv522[ebp]
	fstp	DWORD PTR [esp+4]
	fadd	DWORD PTR [esi+20]
	fadd	QWORD PTR tv582[ebp]
	fstp	DWORD PTR tv148[ebp]
	fld	DWORD PTR tv148[ebp]
	jmp	$LN15@render@3
$LN8@render@3:
; Line 659
	cmp	eax, 2
	jne	$LN6@render@3
; Line 661
	fild	DWORD PTR _twidth$[ebp]
	mov	edi, DWORD PTR __imp__glVertex2f@8
	sub	esp, 8
	fstp	DWORD PTR tv570[ebp]
	fld	DWORD PTR [esi+24]
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv144[ebp]
	fld	DWORD PTR tv144[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+20]
	fsub	QWORD PTR __real@4000000000000000
	fsub	DWORD PTR tv570[ebp]
	fstp	DWORD PTR tv143[ebp]
	fld	DWORD PTR tv143[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 662
	fld	DWORD PTR [esi+24]
	sub	esp, 8
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv134[ebp]
	fld	DWORD PTR tv134[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+20]
	fadd	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv133[ebp]
	fld	DWORD PTR tv133[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 663
	fld	DWORD PTR [esi+24]
	mov	eax, DWORD PTR [esi+52]
	fld	QWORD PTR __real@4000000000000000
	sub	esp, 8
	fadd	ST(1), ST(0)
	fld	DWORD PTR [eax]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	fstp	DWORD PTR [esp+4]
	fsubr	DWORD PTR [esi+20]
	fsub	DWORD PTR tv570[ebp]
	fstp	DWORD PTR tv91[ebp]
	fld	DWORD PTR tv91[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 664
	fld	DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [esi+52]
	fld	QWORD PTR __real@4000000000000000
	sub	esp, 8
	fadd	ST(1), ST(0)
	fld	DWORD PTR [ecx]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv82[ebp]
	fld	DWORD PTR tv82[ebp]
	fstp	DWORD PTR [esp+4]
	fadd	DWORD PTR [esi+20]
	fstp	DWORD PTR tv528[ebp]
	fld	DWORD PTR tv528[ebp]
$LN15@render@3:
	fstp	DWORD PTR [esp]
	call	edi
$LN6@render@3:
; Line 666
	call	DWORD PTR __imp__glEnd@0
	pop	edi
$LN14@render@3:
; Line 669
	mov	eax, DWORD PTR [esi+312]
	test	eax, eax
	jne	SHORT $LN5@render@3
; Line 670
	mov	edx, DWORD PTR [esi+24]
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+52]
	push	ebx
	sub	esp, 8
	mov	DWORD PTR [esp+4], edx
	mov	DWORD PTR [esp], eax
	push	ecx
; Line 674
	call	?shprint@freetype@@YAXABUfont_data@1@MMPBDZZ ; freetype::shprint
	add	esp, 16					; 00000010H
	pop	esi
	pop	ebx
; Line 675
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@render@3:
; Line 671
	cmp	eax, 1
	jne	SHORT $LN3@render@3
; Line 672
	fld	DWORD PTR [esi+20]
	mov	edx, DWORD PTR [esi+24]
	fild	DWORD PTR _twidth$[ebp]
	mov	eax, DWORD PTR [esi+52]
	push	ebx
	sub	esp, 8
	fmul	QWORD PTR __real@3fe0000000000000
	mov	DWORD PTR [esp+4], edx
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv482[ebp]
	fld	DWORD PTR tv482[ebp]
	fstp	DWORD PTR [esp]
	push	eax
; Line 674
	call	?shprint@freetype@@YAXABUfont_data@1@MMPBDZZ ; freetype::shprint
	add	esp, 16					; 00000010H
	pop	esi
	pop	ebx
; Line 675
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@render@3:
; Line 673
	cmp	eax, 2
	jne	SHORT $LN1@render@3
; Line 674
	fld	DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+24]
	fisub	DWORD PTR _twidth$[ebp]
	mov	edx, DWORD PTR [esi+52]
	push	ebx
	sub	esp, 8
	mov	DWORD PTR [esp+4], ecx
	fstp	DWORD PTR tv475[ebp]
	fld	DWORD PTR tv475[ebp]
	fstp	DWORD PTR [esp]
	push	edx
	call	?shprint@freetype@@YAXABUfont_data@1@MMPBDZZ ; freetype::shprint
	add	esp, 16					; 00000010H
$LN1@render@3:
	pop	esi
	pop	ebx
; Line 675
	mov	esp, ebp
	pop	ebp
	ret	0
?render@textUI@@UAEXXZ ENDP				; textUI::render
_TEXT	ENDS
PUBLIC	?setBackground@textUI@@QAEXMMMM@Z		; textUI::setBackground
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
?setBackground@textUI@@QAEXMMMM@Z PROC			; textUI::setBackground
; _this$ = ecx
; Line 678
	push	ebp
	mov	ebp, esp
; Line 680
	mov	eax, DWORD PTR _r$[ebp]
; Line 681
	mov	edx, DWORD PTR _g$[ebp]
	mov	DWORD PTR [ecx+320], eax
; Line 682
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+324], edx
; Line 683
	mov	edx, DWORD PTR _a$[ebp]
	mov	BYTE PTR [ecx+316], 1
	mov	DWORD PTR [ecx+328], eax
	mov	DWORD PTR [ecx+332], edx
; Line 684
	pop	ebp
	ret	16					; 00000010H
?setBackground@textUI@@QAEXMMMM@Z ENDP			; textUI::setBackground
_TEXT	ENDS
PUBLIC	?setTexture@textureUI@@QAEXI@Z			; textureUI::setTexture
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_tex$ = 8						; size = 4
?setTexture@textureUI@@QAEXI@Z PROC			; textureUI::setTexture
; _this$ = ecx
; Line 699
	push	ebp
	mov	ebp, esp
; Line 700
	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [ecx+52], eax
; Line 701
	pop	ebp
	ret	4
?setTexture@textureUI@@QAEXI@Z ENDP			; textureUI::setTexture
_TEXT	ENDS
PUBLIC	?render@textureUI@@UAEXXZ			; textureUI::render
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv322 = -4						; size = 4
tv290 = -4						; size = 4
tv289 = -4						; size = 4
tv218 = -4						; size = 4
tv177 = -4						; size = 4
tv156 = -4						; size = 4
tv154 = -4						; size = 4
tv137 = -4						; size = 4
tv132 = -4						; size = 4
tv75 = -4						; size = 4
?render@textureUI@@UAEXXZ PROC				; textureUI::render
; _this$ = ecx
; Line 704
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 705
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [esp+8], 1065353216		; 3f800000H
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	esi, ecx
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	DWORD PTR __imp__glColor3f@12
; Line 707
	push	33984					; 000084c0H
	call	DWORD PTR ?glActiveTextureARB@@3P6GXI@ZA ; glActiveTextureARB
; Line 708
	mov	eax, DWORD PTR [esi+52]
	push	eax
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8
; Line 709
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glEnable@4
; Line 710
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 711
	mov	ebx, DWORD PTR __imp__glTexCoord2f@8
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 0
	call	ebx
; Line 712
	mov	ecx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR [esi+20]
	mov	edi, DWORD PTR __imp__glVertex2f@8
	sub	esp, 8
	mov	DWORD PTR [esp+4], ecx
	mov	DWORD PTR [esp], edx
	call	edi
; Line 713
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	ebx
; Line 714
	fld	DWORD PTR [esi+20]
	fadd	DWORD PTR [esi+28]
	mov	eax, DWORD PTR [esi+24]
	sub	esp, 8
	mov	DWORD PTR [esp+4], eax
	fstp	DWORD PTR tv218[ebp]
	fld	DWORD PTR tv218[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 715
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 0
	call	ebx
; Line 716
	fld	DWORD PTR [esi+24]
	fadd	DWORD PTR [esi+32]
	mov	ecx, DWORD PTR [esi+20]
	sub	esp, 8
	fstp	DWORD PTR tv177[ebp]
	fld	DWORD PTR tv177[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], ecx
	call	edi
; Line 717
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	ebx
; Line 718
	fld	DWORD PTR [esi+24]
	fadd	DWORD PTR [esi+32]
	sub	esp, 8
	fstp	DWORD PTR tv156[ebp]
	fld	DWORD PTR tv156[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+20]
	fadd	DWORD PTR [esi+28]
	fstp	DWORD PTR tv154[ebp]
	fld	DWORD PTR tv154[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 719
	mov	ebx, DWORD PTR __imp__glEnd@0
	call	ebx
; Line 721
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glDisable@4
; Line 723
	cmp	BYTE PTR [esi+56], 0
	je	$LN1@render@4
; Line 725
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [esp+8], 0
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	DWORD PTR __imp__glColor3f@12
; Line 726
	push	2
	call	DWORD PTR __imp__glBegin@4
; Line 727
	fld	DWORD PTR [esi+20]
	fsub	QWORD PTR __real@3ff0000000000000
	mov	edx, DWORD PTR [esi+24]
	sub	esp, 8
	mov	DWORD PTR [esp+4], edx
	fstp	DWORD PTR tv137[ebp]
	fld	DWORD PTR tv137[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 728
	fld	DWORD PTR [esi+20]
	mov	eax, DWORD PTR [esi+24]
	fadd	DWORD PTR [esi+28]
	sub	esp, 8
	mov	DWORD PTR [esp+4], eax
	fstp	DWORD PTR tv132[ebp]
	fld	DWORD PTR tv132[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 729
	fld	DWORD PTR [esi+24]
	sub	esp, 8
	fadd	DWORD PTR [esi+32]
	fstp	DWORD PTR tv322[ebp]
	fld	DWORD PTR tv322[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+20]
	fadd	DWORD PTR [esi+28]
	fstp	DWORD PTR tv75[ebp]
	fld	DWORD PTR tv75[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 730
	fld	DWORD PTR [esi+24]
	sub	esp, 8
	fadd	DWORD PTR [esi+32]
	fstp	DWORD PTR tv290[ebp]
	fld	DWORD PTR tv290[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+20]
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv289[ebp]
	fld	DWORD PTR tv289[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 731
	call	ebx
$LN1@render@4:
	pop	edi
	pop	esi
	pop	ebx
; Line 733
	mov	esp, ebp
	pop	ebp
	ret	0
?render@textureUI@@UAEXXZ ENDP				; textureUI::render
_TEXT	ENDS
PUBLIC	?processLeftClick@textureUI@@UAEPAVframe@@MM@Z	; textureUI::processLeftClick
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mx$ = 8						; size = 4
_my$ = 12						; size = 4
?processLeftClick@textureUI@@UAEPAVframe@@MM@Z PROC	; textureUI::processLeftClick
; _this$ = ecx
; Line 736
	push	esi
	mov	esi, ecx
; Line 737
	mov	eax, DWORD PTR [esi+60]
	test	eax, eax
	je	SHORT $LN1@processLef@6
; Line 739
	mov	ecx, DWORD PTR [esi+64]
	push	ecx
	push	esi
	call	eax
	add	esp, 8
; Line 740
	mov	eax, esi
	pop	esi
; Line 743
	ret	8
$LN1@processLef@6:
; Line 742
	xor	eax, eax
	pop	esi
; Line 743
	ret	8
?processLeftClick@textureUI@@UAEPAVframe@@MM@Z ENDP	; textureUI::processLeftClick
_TEXT	ENDS
PUBLIC	?setClickFunc@textureUI@@QAEXP6AXPAVframe@@H@ZH@Z ; textureUI::setClickFunc
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_f$ = 8							; size = 4
_num$ = 12						; size = 4
?setClickFunc@textureUI@@QAEXP6AXPAVframe@@H@ZH@Z PROC	; textureUI::setClickFunc
; _this$ = ecx
; Line 746
	push	ebp
	mov	ebp, esp
; Line 747
	mov	eax, DWORD PTR _f$[ebp]
; Line 748
	mov	edx, DWORD PTR _num$[ebp]
	mov	DWORD PTR [ecx+60], eax
	mov	DWORD PTR [ecx+64], edx
; Line 749
	pop	ebp
	ret	8
?setClickFunc@textureUI@@QAEXP6AXPAVframe@@H@ZH@Z ENDP	; textureUI::setClickFunc
_TEXT	ENDS
PUBLIC	?setText@buttonUI@@QAEXPBD@Z			; buttonUI::setText
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_t$ = 8							; size = 4
?setText@buttonUI@@QAEXPBD@Z PROC			; buttonUI::setText
; _this$ = ecx
; Line 769
	push	ebp
	mov	ebp, esp
; Line 770
	mov	ecx, DWORD PTR [ecx+72]
	mov	edx, DWORD PTR _t$[ebp]
	add	ecx, 56					; 00000038H
	npad	4
$LL5@setText@3:
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	inc	edx
	inc	ecx
	test	al, al
	jne	SHORT $LL5@setText@3
; Line 771
	pop	ebp
	ret	4
?setText@buttonUI@@QAEXPBD@Z ENDP			; buttonUI::setText
_TEXT	ENDS
PUBLIC	?setFont@buttonUI@@QAEXPAUfont_data@freetype@@@Z ; buttonUI::setFont
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_font$ = 8						; size = 4
?setFont@buttonUI@@QAEXPAUfont_data@freetype@@@Z PROC	; buttonUI::setFont
; _this$ = ecx
; Line 774
	push	ebp
	mov	ebp, esp
; Line 775
	mov	eax, DWORD PTR [ecx+72]
	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [eax+52], ecx
; Line 776
	pop	ebp
	ret	4
?setFont@buttonUI@@QAEXPAUfont_data@freetype@@@Z ENDP	; buttonUI::setFont
_TEXT	ENDS
PUBLIC	?render@buttonUI@@UAEXXZ			; buttonUI::render
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv265 = -4						; size = 4
tv258 = -4						; size = 4
tv201 = -4						; size = 4
tv188 = -4						; size = 4
?render@buttonUI@@UAEXXZ PROC				; buttonUI::render
; _this$ = ecx
; Line 778
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 779
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [esp+8], 1065353216		; 3f800000H
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	esi, ecx
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	DWORD PTR __imp__glColor3f@12
; Line 781
	push	33984					; 000084c0H
	call	DWORD PTR ?glActiveTextureARB@@3P6GXI@ZA ; glActiveTextureARB
; Line 782
	cmp	BYTE PTR [esi+68], 0
	jne	SHORT $LN2@render@5
; Line 783
	mov	eax, DWORD PTR [esi+52]
	push	eax
; Line 784
	jmp	SHORT $LN5@render@5
$LN2@render@5:
; Line 785
	mov	ecx, DWORD PTR [esi+56]
	push	ecx
$LN5@render@5:
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8
; Line 786
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glEnable@4
; Line 787
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 788
	mov	edi, DWORD PTR __imp__glTexCoord2f@8
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 0
	call	edi
; Line 789
	mov	edx, DWORD PTR [esi+24]
	mov	eax, DWORD PTR [esi+20]
	mov	ebx, DWORD PTR __imp__glVertex2f@8
	sub	esp, 8
	mov	DWORD PTR [esp+4], edx
	mov	DWORD PTR [esp], eax
	call	ebx
; Line 790
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	edi
; Line 791
	fld	DWORD PTR [esi+20]
	fadd	DWORD PTR [esi+28]
	mov	ecx, DWORD PTR [esi+24]
	sub	esp, 8
	mov	DWORD PTR [esp+4], ecx
	fstp	DWORD PTR tv265[ebp]
	fld	DWORD PTR tv265[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 792
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 0
	call	edi
; Line 793
	fld	DWORD PTR [esi+32]
	fadd	DWORD PTR [esi+24]
	mov	edx, DWORD PTR [esi+20]
	sub	esp, 8
	fstp	DWORD PTR tv258[ebp]
	fld	DWORD PTR tv258[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], edx
	call	ebx
; Line 794
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	edi
; Line 795
	fld	DWORD PTR [esi+32]
	fadd	DWORD PTR [esi+24]
	sub	esp, 8
	fstp	DWORD PTR tv201[ebp]
	fld	DWORD PTR tv201[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+20]
	fadd	DWORD PTR [esi+28]
	fstp	DWORD PTR tv188[ebp]
	fld	DWORD PTR tv188[ebp]
	fstp	DWORD PTR [esp]
	call	ebx
; Line 796
	call	DWORD PTR __imp__glEnd@0
; Line 798
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glDisable@4
; Line 800
	call	DWORD PTR __imp__glPushMatrix@0
; Line 801
	mov	eax, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [esi+20]
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [esp+8], 0
	mov	DWORD PTR [esp+4], eax
	mov	DWORD PTR [esp], ecx
	call	DWORD PTR __imp__glTranslatef@12
; Line 802
	mov	esi, DWORD PTR [esi+72]
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx]
	mov	ecx, esi
	call	eax
; Line 803
	call	DWORD PTR __imp__glPopMatrix@0
	pop	edi
	pop	esi
	pop	ebx
; Line 804
	mov	esp, ebp
	pop	ebp
	ret	0
?render@buttonUI@@UAEXXZ ENDP				; buttonUI::render
_TEXT	ENDS
PUBLIC	?processLeftClick@buttonUI@@UAEPAVframe@@MM@Z	; buttonUI::processLeftClick
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mx$ = 8						; size = 4
_my$ = 12						; size = 4
?processLeftClick@buttonUI@@UAEPAVframe@@MM@Z PROC	; buttonUI::processLeftClick
; _this$ = ecx
; Line 807
	push	esi
	mov	esi, ecx
; Line 809
	mov	eax, DWORD PTR [esi+60]
	mov	BYTE PTR [esi+68], 1
	test	eax, eax
	je	SHORT $LN4@processLef@7
; Line 810
	mov	ecx, DWORD PTR [esi+64]
	push	ecx
	push	esi
	call	eax
	add	esp, 8
$LN4@processLef@7:
; Line 811
	mov	eax, esi
	pop	esi
; Line 812
	ret	8
?processLeftClick@buttonUI@@UAEPAVframe@@MM@Z ENDP	; buttonUI::processLeftClick
_TEXT	ENDS
PUBLIC	?processUnclick@buttonUI@@UAEXXZ		; buttonUI::processUnclick
; Function compile flags: /Ogtp
_TEXT	SEGMENT
?processUnclick@buttonUI@@UAEXXZ PROC			; buttonUI::processUnclick
; _this$ = ecx
; Line 816
	mov	BYTE PTR [ecx+68], 0
; Line 817
	ret	0
?processUnclick@buttonUI@@UAEXXZ ENDP			; buttonUI::processUnclick
_TEXT	ENDS
PUBLIC	?setClickFunc@buttonUI@@QAEXP6AXPAVframe@@H@ZH@Z ; buttonUI::setClickFunc
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_f$ = 8							; size = 4
_num$ = 12						; size = 4
?setClickFunc@buttonUI@@QAEXP6AXPAVframe@@H@ZH@Z PROC	; buttonUI::setClickFunc
; _this$ = ecx
; Line 820
	push	ebp
	mov	ebp, esp
; Line 821
	mov	eax, DWORD PTR _f$[ebp]
; Line 822
	mov	edx, DWORD PTR _num$[ebp]
	mov	DWORD PTR [ecx+60], eax
	mov	DWORD PTR [ecx+64], edx
; Line 823
	pop	ebp
	ret	8
?setClickFunc@buttonUI@@QAEXP6AXPAVframe@@H@ZH@Z ENDP	; buttonUI::setClickFunc
_TEXT	ENDS
PUBLIC	?maximizeWindow@@YAXPAVframe@@H@Z		; maximizeWindow
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_button$ = 8						; size = 4
_id$ = 12						; size = 4
?maximizeWindow@@YAXPAVframe@@H@Z PROC			; maximizeWindow
; Line 841
	push	ebp
	mov	ebp, esp
; Line 842
	mov	eax, DWORD PTR _button$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [ecx+40]
	xor	dl, dl
	mov	BYTE PTR [ecx+68], dl
; Line 843
	mov	ecx, DWORD PTR [eax+36]
	push	esi
	mov	esi, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [esi+20], ecx
; Line 844
	mov	ecx, DWORD PTR [eax+36]
	mov	esi, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [ecx+24]
	mov	DWORD PTR [esi+24], ecx
; Line 845
	mov	ecx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [ecx+40]
	mov	BYTE PTR [ecx+46], dl
; Line 846
	mov	edx, DWORD PTR [eax+36]
	mov	BYTE PTR [edx+46], 1
	pop	esi
; Line 847
	pop	ebp
	ret	0
?maximizeWindow@@YAXPAVframe@@H@Z ENDP			; maximizeWindow
_TEXT	ENDS
PUBLIC	?closeWindow@@YAXPAVframe@@H@Z			; closeWindow
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_button$ = 8						; size = 4
_id$ = 12						; size = 4
?closeWindow@@YAXPAVframe@@H@Z PROC			; closeWindow
; Line 1010
	push	ebp
	mov	ebp, esp
; Line 1011
	mov	eax, DWORD PTR _button$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	BYTE PTR [ecx+46], 1
; Line 1012
	pop	ebp
	ret	0
?closeWindow@@YAXPAVframe@@H@Z ENDP			; closeWindow
_TEXT	ENDS
PUBLIC	?setText@checkboxUI@@QAEXPBD@Z			; checkboxUI::setText
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_t$ = 8							; size = 4
?setText@checkboxUI@@QAEXPBD@Z PROC			; checkboxUI::setText
; _this$ = ecx
; Line 1054
	push	ebp
	mov	ebp, esp
; Line 1055
	mov	ecx, DWORD PTR [ecx+60]
	mov	edx, DWORD PTR _t$[ebp]
	add	ecx, 56					; 00000038H
	npad	4
$LL5@setText@4:
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	inc	edx
	inc	ecx
	test	al, al
	jne	SHORT $LL5@setText@4
; Line 1056
	pop	ebp
	ret	4
?setText@checkboxUI@@QAEXPBD@Z ENDP			; checkboxUI::setText
_TEXT	ENDS
PUBLIC	?setState@checkboxUI@@QAEX_N@Z			; checkboxUI::setState
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_c$ = 8							; size = 1
?setState@checkboxUI@@QAEX_N@Z PROC			; checkboxUI::setState
; _this$ = ecx
; Line 1059
	push	ebp
	mov	ebp, esp
; Line 1060
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+64], al
; Line 1062
	test	al, al
	je	SHORT $LN2@setState
; Line 1063
	mov	eax, DWORD PTR [ecx+56]
	mov	BYTE PTR [eax+46], 0
; Line 1066
	pop	ebp
	ret	4
$LN2@setState:
; Line 1065
	mov	ecx, DWORD PTR [ecx+56]
	mov	BYTE PTR [ecx+46], 1
; Line 1066
	pop	ebp
	ret	4
?setState@checkboxUI@@QAEX_N@Z ENDP			; checkboxUI::setState
_TEXT	ENDS
PUBLIC	?getState@checkboxUI@@QAE_NXZ			; checkboxUI::getState
; Function compile flags: /Ogtp
_TEXT	SEGMENT
?getState@checkboxUI@@QAE_NXZ PROC			; checkboxUI::getState
; _this$ = ecx
; Line 1070
	mov	al, BYTE PTR [ecx+64]
; Line 1071
	ret	0
?getState@checkboxUI@@QAE_NXZ ENDP			; checkboxUI::getState
_TEXT	ENDS
PUBLIC	?processLeftClick@checkboxUI@@UAEPAVframe@@MM@Z	; checkboxUI::processLeftClick
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mx$ = 8						; size = 4
_my$ = 12						; size = 4
?processLeftClick@checkboxUI@@UAEPAVframe@@MM@Z PROC	; checkboxUI::processLeftClick
; _this$ = ecx
; Line 1074
	push	esi
	mov	esi, ecx
; Line 1075
	cmp	BYTE PTR [esi+64], 0
	sete	al
	mov	BYTE PTR [esi+64], al
; Line 1077
	test	al, al
	je	SHORT $LN3@processLef@8
; Line 1078
	mov	eax, DWORD PTR [esi+56]
	mov	BYTE PTR [eax+46], 0
; Line 1079
	jmp	SHORT $LN2@processLef@8
$LN3@processLef@8:
; Line 1080
	mov	ecx, DWORD PTR [esi+56]
	mov	BYTE PTR [ecx+46], 1
$LN2@processLef@8:
; Line 1082
	mov	eax, DWORD PTR [esi+72]
	test	eax, eax
	je	SHORT $LN6@processLef@8
; Line 1083
	mov	edx, DWORD PTR [esi+68]
	movzx	ecx, BYTE PTR [esi+64]
	push	edx
	push	ecx
	call	eax
	add	esp, 8
$LN6@processLef@8:
; Line 1085
	mov	eax, esi
	pop	esi
; Line 1086
	ret	8
?processLeftClick@checkboxUI@@UAEPAVframe@@MM@Z ENDP	; checkboxUI::processLeftClick
_TEXT	ENDS
PUBLIC	?setClickFunc@checkboxUI@@QAEXP6AX_NH@ZH@Z	; checkboxUI::setClickFunc
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_f$ = 8							; size = 4
_i$ = 12						; size = 4
?setClickFunc@checkboxUI@@QAEXP6AX_NH@ZH@Z PROC		; checkboxUI::setClickFunc
; _this$ = ecx
; Line 1089
	push	ebp
	mov	ebp, esp
; Line 1090
	mov	eax, DWORD PTR _i$[ebp]
; Line 1091
	mov	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx+68], eax
	mov	DWORD PTR [ecx+72], edx
; Line 1092
	pop	ebp
	ret	8
?setClickFunc@checkboxUI@@QAEXP6AX_NH@ZH@Z ENDP		; checkboxUI::setClickFunc
_TEXT	ENDS
PUBLIC	__real@4024000000000000
PUBLIC	__real@4044000000000000
PUBLIC	?clickReturn@scrollbarUI@@QAEXH@Z		; scrollbarUI::clickReturn
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@4044000000000000
CONST	SEGMENT
__real@4044000000000000 DQ 04044000000000000r	; 40
; Function compile flags: /Ogtp
CONST	ENDS
_TEXT	SEGMENT
tv197 = 8						; size = 4
tv169 = 8						; size = 4
_id$ = 8						; size = 4
?clickReturn@scrollbarUI@@QAEXH@Z PROC			; scrollbarUI::clickReturn
; _this$ = ecx
; Line 1142
	push	ebp
	mov	ebp, esp
; Line 1143
	mov	eax, DWORD PTR _id$[ebp]
	test	eax, eax
	jne	SHORT $LN8@clickRetur
; Line 1145
	mov	eax, DWORD PTR [ecx+68]
	test	eax, eax
	je	SHORT $LN4@clickRetur
; Line 1146
	dec	eax
; Line 1147
	jmp	SHORT $LN11@clickRetur
$LN8@clickRetur:
; Line 1148
	cmp	eax, 1
	jne	SHORT $LN4@clickRetur
; Line 1150
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [ecx+68]
	dec	edx
	cmp	eax, edx
	je	SHORT $LN4@clickRetur
; Line 1151
	inc	eax
$LN11@clickRetur:
	mov	DWORD PTR [ecx+68], eax
$LN4@clickRetur:
; Line 1157
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR tv169[ebp], eax
	test	eax, eax
	jle	SHORT $LN2@clickRetur
; Line 1158
	fld	DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [ecx+60]
	fsub	QWORD PTR __real@4044000000000000
	fimul	DWORD PTR [ecx+68]
	fidiv	DWORD PTR tv169[ebp]
	fadd	QWORD PTR __real@4024000000000000
	fstp	DWORD PTR tv197[ebp]
	fld	DWORD PTR tv197[ebp]
	fstp	DWORD PTR [eax+24]
$LN2@clickRetur:
; Line 1159
	mov	eax, DWORD PTR [ecx+72]
	test	eax, eax
	je	SHORT $LN1@clickRetur
; Line 1160
	mov	ecx, DWORD PTR [ecx+68]
	push	ecx
	call	eax
	add	esp, 4
$LN1@clickRetur:
; Line 1161
	pop	ebp
	ret	4
?clickReturn@scrollbarUI@@QAEXH@Z ENDP			; scrollbarUI::clickReturn
_TEXT	ENDS
PUBLIC	?setChangeFunc@scrollbarUI@@QAEXP6AXH@Z@Z	; scrollbarUI::setChangeFunc
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_f$ = 8							; size = 4
?setChangeFunc@scrollbarUI@@QAEXP6AXH@Z@Z PROC		; scrollbarUI::setChangeFunc
; _this$ = ecx
; Line 1164
	push	ebp
	mov	ebp, esp
; Line 1165
	mov	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx+72], eax
; Line 1166
	pop	ebp
	ret	4
?setChangeFunc@scrollbarUI@@QAEXP6AXH@Z@Z ENDP		; scrollbarUI::setChangeFunc
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 1511
	mov	eax, DWORD PTR [ecx+16]
; Line 1512
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QBEIXZ ; std::vector<frame *,std::allocator<frame *> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QBEIXZ PROC ; std::vector<frame *,std::allocator<frame *> >::size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 879
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; Line 880
	ret	0
?size@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QBEIXZ ENDP ; std::vector<frame *,std::allocator<frame *> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEAAPAVframe@@I@Z ; std::vector<frame *,std::allocator<frame *> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEAAPAVframe@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEAAPAVframe@@I@Z PROC ; std::vector<frame *,std::allocator<frame *> >::operator[], COMDAT
; _this$ = ecx
; Line 928
	push	ebp
	mov	ebp, esp
; Line 940
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
; Line 941
	pop	ebp
	ret	4
??A?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEAAPAVframe@@I@Z ENDP ; std::vector<frame *,std::allocator<frame *> >::operator[]
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 2008
	mov	eax, ecx
; Line 2010
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN4@Myptr
	mov	eax, DWORD PTR [eax]
$LN4@Myptr:
; Line 2011
	ret	0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 459
	ret	0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtp
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 161
	mov	eax, ecx
; Line 163
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx
; Line 165
	mov	eax, ecx
; Line 167
	ret	4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IBE_NPBQAVframe@@@Z ; std::vector<frame *,std::allocator<frame *> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IBE_NPBQAVframe@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IBE_NPBQAVframe@@@Z PROC ; std::vector<frame *,std::allocator<frame *> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1285
	push	ebp
	mov	ebp, esp
; Line 1286
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@Inside
	cmp	DWORD PTR [ecx], eax
	ja	SHORT $LN3@Inside
	mov	eax, 1
; Line 1287
	pop	ebp
	ret	4
$LN3@Inside:
; Line 1286
	xor	eax, eax
; Line 1287
	pop	ebp
	ret	4
?_Inside@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IBE_NPBQAVframe@@@Z ENDP ; std::vector<frame *,std::allocator<frame *> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IBEXPAPAVframe@@0@Z ; std::vector<frame *,std::allocator<frame *> >::_Orphan_range
; Function compile flags: /Ogtp
;	COMDAT ?_Orphan_range@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IBEXPAPAVframe@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IBEXPAPAVframe@@0@Z PROC ; std::vector<frame *,std::allocator<frame *> >::_Orphan_range, COMDAT
; _this$ = ecx
; Line 1454
	ret	8
?_Orphan_range@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IBEXPAPAVframe@@0@Z ENDP ; std::vector<frame *,std::allocator<frame *> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAE@XZ ; std::_Vector_val<frame *,std::allocator<frame *> >::~_Vector_val<frame *,std::allocator<frame *> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<frame *,std::allocator<frame *> >::~_Vector_val<frame *,std::allocator<frame *> >, COMDAT
; _this$ = ecx
; Line 434
	ret	0
??1?$_Vector_val@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<frame *,std::allocator<frame *> >::~_Vector_val<frame *,std::allocator<frame *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVframe@@@std@@QAE@XZ		; std::allocator<frame *>::allocator<frame *>
; Function compile flags: /Ogtp
;	COMDAT ??0?$allocator@PAVframe@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVframe@@@std@@QAE@XZ PROC		; std::allocator<frame *>::allocator<frame *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 161
	mov	eax, ecx
; Line 163
	ret	0
??0?$allocator@PAVframe@@@std@@QAE@XZ ENDP		; std::allocator<frame *>::allocator<frame *>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 2002
	mov	eax, ecx
; Line 2004
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN4@Myptr@2
	mov	eax, DWORD PTR [eax]
$LN4@Myptr@2:
; Line 2005
	ret	0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx
; Line 2020
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@Xran:
$LN3@Xran:
	int	3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 181
	push	ebp
	mov	ebp, esp
; Line 182
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 183
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QBEIXZ ; std::vector<frame *,std::allocator<frame *> >::capacity
; Function compile flags: /Ogtp
;	COMDAT ?capacity@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QBEIXZ PROC ; std::vector<frame *,std::allocator<frame *> >::capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 777
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; Line 778
	ret	0
?capacity@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QBEIXZ ENDP ; std::vector<frame *,std::allocator<frame *> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IBEXXZ ; std::vector<frame *,std::allocator<frame *> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IBEXXZ PROC ; std::vector<frame *,std::allocator<frame *> >::_Xlen, COMDAT
; _this$ = ecx
; Line 1427
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
	int	3
?_Xlen@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IBEXXZ ENDP ; std::vector<frame *,std::allocator<frame *> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVframe@@@std@@QAE@ABV01@@Z	; std::allocator<frame *>::allocator<frame *>
; Function compile flags: /Ogtp
;	COMDAT ??0?$allocator@PAVframe@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAVframe@@@std@@QAE@ABV01@@Z PROC	; std::allocator<frame *>::allocator<frame *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 165
	mov	eax, ecx
; Line 167
	ret	4
??0?$allocator@PAVframe@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<frame *>::allocator<frame *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVframe@@@std@@QAEXPAPAVframe@@I@Z ; std::allocator<frame *>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@PAVframe@@@std@@QAEXPAPAVframe@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVframe@@@std@@QAEXPAPAVframe@@I@Z PROC ; std::allocator<frame *>::deallocate, COMDAT
; _this$ = ecx
; Line 181
	push	ebp
	mov	ebp, esp
; Line 182
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 183
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVframe@@@std@@QAEXPAPAVframe@@I@Z ENDP ; std::allocator<frame *>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 1972
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1973
	mov	esi, DWORD PTR __Ptr$[ebp]
	test	esi, esi
	je	SHORT $LN2@Inside@2
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN8@Inside@2
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN9@Inside@2
$LN8@Inside@2:
	mov	eax, ecx
$LN9@Inside@2:
	cmp	esi, eax
	jb	SHORT $LN2@Inside@2
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN12@Inside@2
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN13@Inside@2
$LN12@Inside@2:
	mov	eax, ecx
$LN13@Inside@2:
	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax
	cmp	ecx, esi
	jbe	SHORT $LN2@Inside@2
; Line 1976
	mov	al, 1
	pop	esi
; Line 1977
	pop	ebp
	ret	4
$LN2@Inside@2:
; Line 1974
	xor	al, al
	pop	esi
; Line 1977
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx
; Line 2015
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
	int	3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVframe@@@std@@QBEIXZ	; std::allocator<frame *>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@PAVframe@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVframe@@@std@@QBEIXZ PROC	; std::allocator<frame *>::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 219
	mov	eax, 1073741823				; 3fffffffH
; Line 220
	ret	0
?max_size@?$allocator@PAVframe@@@std@@QBEIXZ ENDP	; std::allocator<frame *>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx
; Line 219
	or	eax, -1
; Line 220
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$addressof@QAVframe@@@std@@YAPBQAVframe@@ABQAV1@@Z ; std::addressof<frame * const>
; Function compile flags: /Ogtp
;	COMDAT ??$addressof@QAVframe@@@std@@YAPBQAVframe@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVframe@@@std@@YAPBQAVframe@@ABQAV1@@Z PROC ; std::addressof<frame * const>, COMDAT
; Line 110
	push	ebp
	mov	ebp, esp
; Line 111
	mov	eax, DWORD PTR __Val$[ebp]
; Line 112
	pop	ebp
	ret	0
??$addressof@QAVframe@@@std@@YAPBQAVframe@@ABQAV1@@Z ENDP ; std::addressof<frame * const>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@PAVframe@@@std@@YAPAPAVframe@@IPAPAV1@@Z ; std::_Allocate<frame *>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??$_Allocate@PAVframe@@@std@@YAPAPAVframe@@IPAPAV1@@Z
_TEXT	SEGMENT
$T117259 = -12						; size = 12
$T117264 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVframe@@@std@@YAPAPAVframe@@IPAPAV1@@Z PROC ; std::_Allocate<frame *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 30
	push	ebp
	mov	ebp, esp
; Line 33
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
; Line 35
	je	SHORT $LN5@Allocate
; Line 36
	cmp	ecx, 1073741823				; 3fffffffH
	ja	SHORT $LN1@Allocate
	lea	eax, DWORD PTR [ecx*4]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
; Line 39
	jne	SHORT $LN5@Allocate
$LN1@Allocate:
; Line 37
	lea	ecx, DWORD PTR $T117264[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T117259[ebp]
	mov	DWORD PTR $T117264[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T117259[ebp]
	push	edx
	mov	DWORD PTR $T117259[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@Allocate:
??$_Allocate@PAVframe@@@std@@YAPAPAVframe@@IPAPAV1@@Z ENDP ; std::_Allocate<frame *>
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T117269 = -12						; size = 12
$T117273 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT
; Line 30
	push	ebp
	mov	ebp, esp
; Line 33
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
; Line 35
	je	SHORT $LN5@Allocate@2
; Line 36
	cmp	ecx, -1
	ja	SHORT $LN1@Allocate@2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
; Line 39
	jne	SHORT $LN5@Allocate@2
$LN1@Allocate@2:
; Line 37
	lea	eax, DWORD PTR $T117273[ebp]
	push	eax
	lea	ecx, DWORD PTR $T117269[ebp]
	mov	DWORD PTR $T117273[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T117269[ebp]
	push	ecx
	mov	DWORD PTR $T117269[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@Allocate@2:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogtp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$forward@AAPAVframe@@@std@@YAAAPAVframe@@AAPAV1@@Z ; std::forward<frame * &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAPAVframe@@@std@@YAAAPAVframe@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVframe@@@std@@YAAAPAVframe@@AAPAV1@@Z PROC ; std::forward<frame * &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@AAPAVframe@@@std@@YAAAPAVframe@@AAPAV1@@Z ENDP ; std::forward<frame * &>
_TEXT	ENDS
PUBLIC	??$construct@AAPAVframe@@@?$allocator@PAVframe@@@std@@QAEXPAPAVframe@@AAPAV2@@Z ; std::allocator<frame *>::construct<frame * &>
; Function compile flags: /Ogtp
;	COMDAT ??$construct@AAPAVframe@@@?$allocator@PAVframe@@@std@@QAEXPAPAVframe@@AAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAPAVframe@@@?$allocator@PAVframe@@@std@@QAEXPAPAVframe@@AAPAV2@@Z PROC ; std::allocator<frame *>::construct<frame * &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 206
	push	ebp
	mov	ebp, esp
; Line 208
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@construct:
; Line 209
	pop	ebp
	ret	8
??$construct@AAPAVframe@@@?$allocator@PAVframe@@@std@@QAEXPAPAVframe@@AAPAV2@@Z ENDP ; std::allocator<frame *>::construct<frame * &>
_TEXT	ENDS
PUBLIC	??$forward@ABQAVframe@@@std@@YAABQAVframe@@ABQAV1@@Z ; std::forward<frame * const &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@ABQAVframe@@@std@@YAABQAVframe@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVframe@@@std@@YAABQAVframe@@ABQAV1@@Z PROC ; std::forward<frame * const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@ABQAVframe@@@std@@YAABQAVframe@@ABQAV1@@Z ENDP ; std::forward<frame * const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAVframe@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVframe@@0@Z ; std::_Ptr_cat<frame *,frame *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Ptr_cat@PAVframe@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVframe@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVframe@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVframe@@0@Z PROC ; std::_Ptr_cat<frame *,frame *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 528
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 530
	mov	al, BYTE PTR __Cat$[ebp]
; Line 531
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAVframe@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVframe@@0@Z ENDP ; std::_Ptr_cat<frame *,frame *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVframe@@@std@@@std@@YAXPAPAVframe@@0AAV?$allocator@PAVframe@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<frame *> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@PAVframe@@@std@@@std@@YAXPAPAVframe@@0AAV?$allocator@PAVframe@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVframe@@@std@@@std@@YAXPAPAVframe@@0AAV?$allocator@PAVframe@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<frame *> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 105
	ret	0
??$_Destroy_range@V?$allocator@PAVframe@@@std@@@std@@YAXPAPAVframe@@0AAV?$allocator@PAVframe@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<frame *> >
_TEXT	ENDS
PUBLIC	??$_Construct@PAVframe@@ABQAV1@@std@@YAXPAPAVframe@@ABQAV1@@Z ; std::_Construct<frame *,frame * const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Construct@PAVframe@@ABQAV1@@std@@YAXPAPAVframe@@ABQAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAVframe@@ABQAV1@@std@@YAXPAPAVframe@@ABQAV1@@Z PROC ; std::_Construct<frame *,frame * const &>, COMDAT
; Line 46
	push	ebp
	mov	ebp, esp
; Line 48
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN3@Construct
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@Construct:
; Line 49
	pop	ebp
	ret	0
??$_Construct@PAVframe@@ABQAV1@@std@@YAXPAPAVframe@@ABQAV1@@Z ENDP ; std::_Construct<frame *,frame * const &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAPAVframe@@@std@@YAPAPAVframe@@PAPAV1@@Z ; std::_Val_type<frame * *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Val_type@PAPAVframe@@@std@@YAPAPAVframe@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVframe@@@std@@YAPAPAVframe@@PAPAV1@@Z PROC ; std::_Val_type<frame * *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 802
	xor	eax, eax
; Line 803
	ret	0
??$_Val_type@PAPAVframe@@@std@@YAPAPAVframe@@PAPAV1@@Z ENDP ; std::_Val_type<frame * *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAVframe@@PAV1@PAV1@@std@@YAPAPAVframe@@PAPAV1@00AAV?$allocator@PAVframe@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<frame *,frame *,frame *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninit_move@PAVframe@@PAV1@PAV1@@std@@YAPAPAVframe@@PAPAV1@00AAV?$allocator@PAVframe@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVframe@@PAV1@PAV1@@std@@YAPAPAVframe@@PAPAV1@00AAV?$allocator@PAVframe@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<frame *,frame *,frame *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
; Line 456
	push	ebp
	mov	ebp, esp
; Line 459
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, ecx
	push	esi
	sar	eax, 2
; Line 461
	lea	esi, DWORD PTR [eax*4]
	mov	eax, DWORD PTR __Dest$[ebp]
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 462
	pop	ebp
	ret	0
??$_Uninit_move@PAVframe@@PAV1@PAV1@@std@@YAPAPAVframe@@PAPAV1@00AAV?$allocator@PAVframe@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<frame *,frame *,frame *>
_TEXT	ENDS
PUBLIC	?render@frame@@UAEXXZ				; frame::render
; Function compile flags: /Ogtp
_TEXT	SEGMENT
?render@frame@@UAEXXZ PROC				; frame::render
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\ui.cpp
; Line 6
	push	esi
	mov	esi, ecx
; Line 7
	cmp	BYTE PTR [esi+46], 0
	jne	SHORT $LN6@render@6
; Line 10
	push	edi
	call	DWORD PTR __imp__glPushMatrix@0
; Line 11
	mov	eax, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [esi+20]
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [esp+8], 0
	mov	DWORD PTR [esp+4], eax
	mov	DWORD PTR [esp], ecx
	call	DWORD PTR __imp__glTranslatef@12
; Line 12
	mov	eax, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi+8]
	sub	edx, eax
	sar	edx, 2
	xor	edi, edi
	test	edx, edx
	je	SHORT $LN2@render@6
	npad	1
$LL4@render@6:
; Line 13
	mov	eax, DWORD PTR [eax+edi*4]
	cmp	BYTE PTR [eax+46], 0
	jne	SHORT $LN3@render@6
; Line 14
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx]
	call	eax
$LN3@render@6:
; Line 12
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, eax
	inc	edi
	sar	ecx, 2
	cmp	edi, ecx
	jb	SHORT $LL4@render@6
$LN2@render@6:
	pop	edi
	pop	esi
; Line 15
	jmp	DWORD PTR __imp__glPopMatrix@0
$LN6@render@6:
	pop	esi
; Line 16
	ret	0
?render@frame@@UAEXXZ ENDP				; frame::render
_TEXT	ENDS
PUBLIC	?processLeftClick@frame@@UAEPAV1@MM@Z		; frame::processLeftClick
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv573 = 8						; size = 4
tv572 = 8						; size = 4
_mx$ = 8						; size = 4
_my$ = 12						; size = 4
?processLeftClick@frame@@UAEPAV1@MM@Z PROC		; frame::processLeftClick
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
; Line 26
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx+4]
	push	esi
	sar	edx, 2
	dec	edx
	push	edi
	js	SHORT $LN2@processLef@9
	mov	edi, DWORD PTR [ecx+4]
$LL4@processLef@9:
; Line 28
	mov	esi, DWORD PTR [edi+edx*4]
	cmp	BYTE PTR [esi+46], 0
	jne	SHORT $LN3@processLef@9
	fld	DWORD PTR [esi+20]
	fld	DWORD PTR _mx$[ebp]
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 65					; 00000041H
	jne	SHORT $LN33@processLef@9
	mov	eax, esi
	fld	DWORD PTR [eax+28]
	fadd	DWORD PTR [eax+20]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN33@processLef@9
	fld	DWORD PTR [esi+24]
	fld	DWORD PTR _my$[ebp]
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 65					; 00000041H
	jne	SHORT $LN41@processLef@9
	mov	eax, esi
	fld	DWORD PTR [eax+32]
	fadd	DWORD PTR [eax+24]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN30@processLef@9
$LN41@processLef@9:
	fstp	ST(0)
$LN33@processLef@9:
	fstp	ST(0)
$LN3@processLef@9:
; Line 26
	dec	edx
	jns	SHORT $LL4@processLef@9
$LN2@processLef@9:
	pop	edi
; Line 31
	xor	eax, eax
	pop	esi
; Line 32
	pop	ebp
	ret	8
$LN30@processLef@9:
; Line 29
	mov	ecx, DWORD PTR [edi+edx*4]
	lea	eax, DWORD PTR [edi+edx*4]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+4]
	mov	esi, ecx
	fsub	DWORD PTR [esi+24]
	sub	esp, 8
	mov	eax, ecx
	fstp	DWORD PTR tv573[ebp]
	fld	DWORD PTR tv573[ebp]
	fstp	DWORD PTR [esp+4]
	fsub	DWORD PTR [eax+20]
	fstp	DWORD PTR tv572[ebp]
	fld	DWORD PTR tv572[ebp]
	fstp	DWORD PTR [esp]
	call	edx
	pop	edi
	pop	esi
; Line 32
	pop	ebp
	ret	8
?processLeftClick@frame@@UAEPAV1@MM@Z ENDP		; frame::processLeftClick
_TEXT	ENDS
PUBLIC	?processRightClick@frame@@UAE_NMM@Z		; frame::processRightClick
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv546 = -4						; size = 4
tv545 = -4						; size = 4
_mx$ = 8						; size = 4
_my$ = 12						; size = 4
?processRightClick@frame@@UAE_NMM@Z PROC		; frame::processRightClick
; _this$ = ecx
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
; Line 48
	mov	eax, DWORD PTR [esi+8]
	sub	eax, DWORD PTR [esi+4]
	push	edi
	sar	eax, 2
	xor	edi, edi
	test	eax, eax
	je	$LN3@processRig
	fld	DWORD PTR _mx$[ebp]
$LN5@processRig:
; Line 50
	mov	ecx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [ecx+edi*4]
	fld	DWORD PTR [ecx+20]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@processRig
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [edx+edi*4]
	fld	DWORD PTR [eax+28]
	fadd	DWORD PTR [eax+20]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@processRig
	fld	DWORD PTR [ecx+24]
	fld	DWORD PTR _my$[ebp]
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 65					; 00000041H
	jne	SHORT $LN41@processRig
	mov	eax, DWORD PTR [edx+edi*4]
	fld	DWORD PTR [eax+32]
	fadd	DWORD PTR [eax+24]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN41@processRig
; Line 51
	mov	ecx, DWORD PTR [edx+edi*4]
	lea	eax, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+16]
	mov	ebx, ecx
	fsub	DWORD PTR [ebx+24]
	sub	esp, 8
	mov	eax, ecx
	fstp	DWORD PTR tv546[ebp]
	fld	DWORD PTR tv546[ebp]
	fstp	DWORD PTR [esp+4]
	fsub	DWORD PTR [eax+20]
	fstp	DWORD PTR tv545[ebp]
	fld	DWORD PTR tv545[ebp]
	fstp	DWORD PTR [esp]
	call	edx
	test	al, al
	jne	SHORT $LN29@processRig
	fld	DWORD PTR _mx$[ebp]
	jmp	SHORT $LN4@processRig
$LN41@processRig:
; Line 50
	fstp	ST(0)
$LN4@processRig:
; Line 48
	mov	eax, DWORD PTR [esi+8]
	sub	eax, DWORD PTR [esi+4]
	inc	edi
	sar	eax, 2
	cmp	edi, eax
	jb	$LN5@processRig
	fstp	ST(0)
$LN3@processRig:
	pop	edi
	pop	esi
; Line 55
	xor	al, al
	pop	ebx
; Line 56
	mov	esp, ebp
	pop	ebp
	ret	8
$LN29@processRig:
	pop	edi
	pop	esi
; Line 52
	mov	al, 1
	pop	ebx
; Line 56
	mov	esp, ebp
	pop	ebp
	ret	8
?processRightClick@frame@@UAE_NMM@Z ENDP		; frame::processRightClick
_TEXT	ENDS
PUBLIC	?processLeftClick@window@@UAEPAVframe@@MM@Z	; window::processLeftClick
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv581 = -4						; size = 4
tv580 = -4						; size = 4
_mx$ = 8						; size = 4
_my$ = 12						; size = 4
?processLeftClick@window@@UAEPAVframe@@MM@Z PROC	; window::processLeftClick
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
; Line 90
	mov	esi, DWORD PTR [edi+8]
	sub	esi, DWORD PTR [edi+4]
	sar	esi, 2
	dec	esi
	js	$LN3@processLef@10
	fld	DWORD PTR _mx$[ebp]
$LN5@processLef@10:
; Line 92
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax+esi*4]
	fld	DWORD PTR [ecx+20]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@processLef@10
	mov	edx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edx+esi*4]
	fld	DWORD PTR [eax+28]
	fadd	DWORD PTR [eax+20]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@processLef@10
	fld	DWORD PTR [ecx+24]
	fld	DWORD PTR _my$[ebp]
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 65					; 00000041H
	jne	SHORT $LN41@processLef@10
	mov	eax, DWORD PTR [edx+esi*4]
	fld	DWORD PTR [eax+32]
	fadd	DWORD PTR [eax+24]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN41@processLef@10
; Line 94
	mov	ecx, DWORD PTR [edx+esi*4]
	lea	eax, DWORD PTR [edx+esi*4]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+4]
	mov	ebx, ecx
	fsub	DWORD PTR [ebx+24]
	sub	esp, 8
	mov	eax, ecx
	fstp	DWORD PTR tv581[ebp]
	fld	DWORD PTR tv581[ebp]
	fstp	DWORD PTR [esp+4]
	fsub	DWORD PTR [eax+20]
	fstp	DWORD PTR tv580[ebp]
	fld	DWORD PTR tv580[ebp]
	fstp	DWORD PTR [esp]
	call	edx
; Line 95
	test	eax, eax
	jne	SHORT $LN6@processLef@10
	fld	DWORD PTR _mx$[ebp]
	jmp	SHORT $LN4@processLef@10
$LN41@processLef@10:
; Line 92
	fstp	ST(0)
$LN4@processLef@10:
; Line 90
	dec	esi
	jns	$LN5@processLef@10
	fstp	ST(0)
$LN3@processLef@10:
; Line 99
	mov	eax, edi
$LN6@processLef@10:
	pop	edi
	pop	esi
	pop	ebx
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?processLeftClick@window@@UAEPAVframe@@MM@Z ENDP	; window::processLeftClick
_TEXT	ENDS
PUBLIC	__real@402a000000000000
PUBLIC	__real@4008000000000000
PUBLIC	?render@window@@UAEXXZ				; window::render
EXTRN	__imp__glColor4f@16:PROC
;	COMDAT __real@402a000000000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
__real@402a000000000000 DQ 0402a000000000000r	; 13
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
; Function compile flags: /Ogtp
CONST	ENDS
_TEXT	SEGMENT
tv709 = -4						; size = 4
tv678 = -4						; size = 4
tv674 = -4						; size = 4
tv671 = -4						; size = 4
tv669 = -4						; size = 4
tv656 = -4						; size = 4
tv652 = -4						; size = 4
tv640 = -4						; size = 4
tv624 = -4						; size = 4
tv609 = -4						; size = 4
tv608 = -4						; size = 4
tv595 = -4						; size = 4
tv594 = -4						; size = 4
tv584 = -4						; size = 4
tv578 = -4						; size = 4
tv572 = -4						; size = 4
tv554 = -4						; size = 4
tv535 = -4						; size = 4
tv534 = -4						; size = 4
tv530 = -4						; size = 4
tv514 = -4						; size = 4
tv496 = -4						; size = 4
tv495 = -4						; size = 4
tv475 = -4						; size = 4
tv460 = -4						; size = 4
tv437 = -4						; size = 4
tv424 = -4						; size = 4
tv340 = -4						; size = 4
tv311 = -4						; size = 4
tv255 = -4						; size = 4
tv205 = -4						; size = 4
tv162 = -4						; size = 4
?render@window@@UAEXXZ PROC				; window::render
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\ui.cpp
; Line 113
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	esi, ecx
; Line 114
	call	DWORD PTR __imp__glPushMatrix@0
; Line 115
	mov	eax, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [esi+20]
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [esp+8], 0
	mov	DWORD PTR [esp+4], eax
	mov	DWORD PTR [esp], ecx
	call	DWORD PTR __imp__glTranslatef@12
; Line 117
	sub	esp, 16					; 00000010H
	mov	DWORD PTR [esp+12], 1056964608		; 3f000000H
	mov	DWORD PTR [esp+8], 1045220557		; 3e4ccccdH
	mov	DWORD PTR [esp+4], 1045220557		; 3e4ccccdH
	mov	DWORD PTR [esp], 1045220557		; 3e4ccccdH
	call	DWORD PTR __imp__glColor4f@16
; Line 118
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 119
	mov	edi, DWORD PTR __imp__glVertex2f@8
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 0
	call	edi
; Line 120
	mov	edx, DWORD PTR [esi+28]
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], edx
	call	edi
; Line 121
	mov	eax, DWORD PTR [esi+32]
	sub	esp, 8
	mov	DWORD PTR [esp+4], eax
	mov	DWORD PTR [esp], 0
	call	edi
; Line 122
	mov	ecx, DWORD PTR [esi+32]
	mov	edx, DWORD PTR [esi+28]
	sub	esp, 8
	mov	DWORD PTR [esp+4], ecx
	mov	DWORD PTR [esp], edx
	call	edi
; Line 123
	call	DWORD PTR __imp__glEnd@0
; Line 125
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, eax
	sar	ecx, 2
	xor	ebx, ebx
	test	ecx, ecx
	je	SHORT $LN2@render@7
$LL4@render@7:
; Line 126
	mov	eax, DWORD PTR [eax+ebx*4]
	cmp	BYTE PTR [eax+46], 0
	jne	SHORT $LN3@render@7
; Line 127
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx]
	call	eax
$LN3@render@7:
; Line 125
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, eax
	inc	ebx
	sar	ecx, 2
	cmp	ebx, ecx
	jb	SHORT $LL4@render@7
$LN2@render@7:
; Line 129
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [esp+8], 1065353216		; 3f800000H
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	DWORD PTR __imp__glColor3f@12
; Line 131
	push	33984					; 000084c0H
	call	DWORD PTR ?glActiveTextureARB@@3P6GXI@ZA ; glActiveTextureARB
; Line 132
	mov	edx, DWORD PTR [esi+52]
	push	edx
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8
; Line 133
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glEnable@4
; Line 136
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 137
	mov	ebx, DWORD PTR __imp__glTexCoord2f@8
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1061158912		; 3f400000H
	call	ebx
; Line 138
	fld	DWORD PTR [esi+32]
	fadd	QWORD PTR __real@4008000000000000
	sub	esp, 8
	fstp	DWORD PTR tv709[ebp]
	fld	DWORD PTR tv709[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], -1069547520		; c0400000H
	call	edi
; Line 139
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1063256064		; 3f600000H
	call	ebx
; Line 140
	fld	DWORD PTR [esi+32]
	fadd	QWORD PTR __real@4008000000000000
	sub	esp, 8
	fstp	DWORD PTR tv572[ebp]
	fld	DWORD PTR tv572[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 141
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1061158912		; 3f400000H
	call	ebx
; Line 142
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fstp	DWORD PTR tv530[ebp]
	fld	DWORD PTR tv530[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], -1069547520		; c0400000H
	call	edi
; Line 143
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1063256064		; 3f600000H
	call	ebx
; Line 144
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fstp	DWORD PTR tv475[ebp]
	fld	DWORD PTR tv475[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 145
	call	DWORD PTR __imp__glEnd@0
; Line 148
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 149
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1063256064		; 3f600000H
	call	ebx
; Line 150
	fld	DWORD PTR [esi+32]
	fadd	QWORD PTR __real@4008000000000000
	sub	esp, 8
	fstp	DWORD PTR tv424[ebp]
	fld	DWORD PTR tv424[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@402a000000000000
	fstp	DWORD PTR tv640[ebp]
	fld	DWORD PTR tv640[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 151
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	ebx
; Line 152
	fld	DWORD PTR [esi+32]
	fld	QWORD PTR __real@4008000000000000
	sub	esp, 8
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR tv340[ebp]
	fld	DWORD PTR tv340[ebp]
	fstp	DWORD PTR [esp+4]
	fadd	DWORD PTR [esi+28]
	fstp	DWORD PTR tv311[ebp]
	fld	DWORD PTR tv311[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 153
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1063256064		; 3f600000H
	call	ebx
; Line 154
	fld	DWORD PTR [esi+32]
	fld	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR tv652[ebp]
	fld	DWORD PTR tv652[ebp]
	fstp	DWORD PTR [esp+4]
	fsubr	DWORD PTR [esi+28]
	fstp	DWORD PTR tv255[ebp]
	fld	DWORD PTR tv255[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 155
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	ebx
; Line 156
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fstp	DWORD PTR tv656[ebp]
	fld	DWORD PTR tv656[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fadd	QWORD PTR __real@4008000000000000
	fstp	DWORD PTR tv205[ebp]
	fld	DWORD PTR tv205[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 157
	call	DWORD PTR __imp__glEnd@0
; Line 160
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 161
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1056964608		; 3f000000H
	call	ebx
; Line 162
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	mov	DWORD PTR [esp], -1069547520		; c0400000H
	call	edi
; Line 163
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1059061760		; 3f200000H
	call	ebx
; Line 164
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 165
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1056964608		; 3f000000H
	call	ebx
; Line 166
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1069547520		; c0400000H
	mov	DWORD PTR [esp], -1069547520		; c0400000H
	call	edi
; Line 167
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1059061760		; 3f200000H
	call	ebx
; Line 168
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1069547520		; c0400000H
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 169
	call	DWORD PTR __imp__glEnd@0
; Line 172
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 173
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1059061760		; 3f200000H
	call	ebx
; Line 174
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	fstp	DWORD PTR tv162[ebp]
	fld	DWORD PTR tv162[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 175
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1061158912		; 3f400000H
	call	ebx
; Line 176
	fld	DWORD PTR [esi+28]
	fadd	QWORD PTR __real@4008000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	fstp	DWORD PTR tv669[ebp]
	fld	DWORD PTR tv669[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 177
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1059061760		; 3f200000H
	call	ebx
; Line 178
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1069547520		; c0400000H
	fstp	DWORD PTR tv671[ebp]
	fld	DWORD PTR tv671[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 179
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1061158912		; 3f400000H
	call	ebx
; Line 180
	fld	DWORD PTR [esi+28]
	fadd	QWORD PTR __real@4008000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1069547520		; c0400000H
	fstp	DWORD PTR tv674[ebp]
	fld	DWORD PTR tv674[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 181
	call	DWORD PTR __imp__glEnd@0
; Line 184
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 185
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 0
	call	ebx
; Line 186
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fstp	DWORD PTR tv678[ebp]
	fld	DWORD PTR tv678[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], -1069547520		; c0400000H
	call	edi
; Line 187
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1040187392		; 3e000000H
	call	ebx
; Line 188
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fstp	DWORD PTR tv624[ebp]
	fld	DWORD PTR tv624[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 189
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 0
	call	ebx
; Line 190
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	mov	DWORD PTR [esp], -1069547520		; c0400000H
	call	edi
; Line 191
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1040187392		; 3e000000H
	call	ebx
; Line 192
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 193
	call	DWORD PTR __imp__glEnd@0
; Line 196
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 197
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1040187392		; 3e000000H
	call	ebx
; Line 198
	fld	DWORD PTR [esi+32]
	fld	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR tv609[ebp]
	fld	DWORD PTR tv609[ebp]
	fstp	DWORD PTR [esp+4]
	fsubr	DWORD PTR [esi+28]
	fstp	DWORD PTR tv608[ebp]
	fld	DWORD PTR tv608[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 199
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1048576000		; 3e800000H
	call	ebx
; Line 200
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fstp	DWORD PTR tv595[ebp]
	fld	DWORD PTR tv595[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fadd	QWORD PTR __real@4008000000000000
	fstp	DWORD PTR tv594[ebp]
	fld	DWORD PTR tv594[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 201
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1040187392		; 3e000000H
	call	ebx
; Line 202
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	fstp	DWORD PTR tv584[ebp]
	fld	DWORD PTR tv584[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 203
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1048576000		; 3e800000H
	call	ebx
; Line 204
	fld	DWORD PTR [esi+28]
	fadd	QWORD PTR __real@4008000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	fstp	DWORD PTR tv578[ebp]
	fld	DWORD PTR tv578[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 205
	call	DWORD PTR __imp__glEnd@0
; Line 208
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 209
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1056964608		; 3f000000H
	call	ebx
; Line 210
	fld	DWORD PTR [esi+32]
	fadd	QWORD PTR __real@4008000000000000
	sub	esp, 8
	fstp	DWORD PTR tv554[ebp]
	fld	DWORD PTR tv554[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 211
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1056964608		; 3f000000H
	call	ebx
; Line 212
	fld	DWORD PTR [esi+32]
	fadd	QWORD PTR __real@4008000000000000
	sub	esp, 8
	fstp	DWORD PTR tv535[ebp]
	fld	DWORD PTR tv535[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@402a000000000000
	fstp	DWORD PTR tv534[ebp]
	fld	DWORD PTR tv534[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 213
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1052770304		; 3ec00000H
	call	ebx
; Line 214
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fstp	DWORD PTR tv514[ebp]
	fld	DWORD PTR tv514[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 215
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1052770304		; 3ec00000H
	call	ebx
; Line 216
	fld	DWORD PTR [esi+32]
	fld	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR tv496[ebp]
	fld	DWORD PTR tv496[ebp]
	fstp	DWORD PTR [esp+4]
	fsubr	DWORD PTR [esi+28]
	fstp	DWORD PTR tv495[ebp]
	fld	DWORD PTR tv495[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 217
	call	DWORD PTR __imp__glEnd@0
; Line 220
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 221
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1052770304		; 3ec00000H
	call	ebx
; Line 222
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 223
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1052770304		; 3ec00000H
	call	ebx
; Line 224
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	fstp	DWORD PTR tv460[ebp]
	fld	DWORD PTR tv460[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 225
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1048576000		; 3e800000H
	call	ebx
; Line 226
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1069547520		; c0400000H
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 227
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1048576000		; 3e800000H
	call	ebx
; Line 228
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1069547520		; c0400000H
	fstp	DWORD PTR tv437[ebp]
	fld	DWORD PTR tv437[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 229
	call	DWORD PTR __imp__glEnd@0
; Line 231
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glDisable@4
; Line 232
	call	DWORD PTR __imp__glPopMatrix@0
	pop	edi
	pop	esi
	pop	ebx
; Line 233
	mov	esp, ebp
	pop	ebp
	ret	0
?render@window@@UAEXXZ ENDP				; window::render
_TEXT	ENDS
PUBLIC	?render@minWindowUI@@UAEXXZ			; minWindowUI::render
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv709 = -4						; size = 4
tv678 = -4						; size = 4
tv674 = -4						; size = 4
tv671 = -4						; size = 4
tv669 = -4						; size = 4
tv656 = -4						; size = 4
tv652 = -4						; size = 4
tv640 = -4						; size = 4
tv624 = -4						; size = 4
tv609 = -4						; size = 4
tv608 = -4						; size = 4
tv595 = -4						; size = 4
tv594 = -4						; size = 4
tv584 = -4						; size = 4
tv578 = -4						; size = 4
tv572 = -4						; size = 4
tv554 = -4						; size = 4
tv535 = -4						; size = 4
tv534 = -4						; size = 4
tv530 = -4						; size = 4
tv514 = -4						; size = 4
tv496 = -4						; size = 4
tv495 = -4						; size = 4
tv475 = -4						; size = 4
tv460 = -4						; size = 4
tv437 = -4						; size = 4
tv424 = -4						; size = 4
tv340 = -4						; size = 4
tv311 = -4						; size = 4
tv255 = -4						; size = 4
tv205 = -4						; size = 4
tv162 = -4						; size = 4
?render@minWindowUI@@UAEXXZ PROC			; minWindowUI::render
; _this$ = ecx
; Line 885
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	esi, ecx
; Line 886
	call	DWORD PTR __imp__glPushMatrix@0
; Line 887
	mov	eax, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [esi+20]
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [esp+8], 0
	mov	DWORD PTR [esp+4], eax
	mov	DWORD PTR [esp], ecx
	call	DWORD PTR __imp__glTranslatef@12
; Line 889
	sub	esp, 16					; 00000010H
	mov	DWORD PTR [esp+12], 1056964608		; 3f000000H
	mov	DWORD PTR [esp+8], 1045220557		; 3e4ccccdH
	mov	DWORD PTR [esp+4], 1045220557		; 3e4ccccdH
	mov	DWORD PTR [esp], 1045220557		; 3e4ccccdH
	call	DWORD PTR __imp__glColor4f@16
; Line 890
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 891
	mov	edi, DWORD PTR __imp__glVertex2f@8
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 0
	call	edi
; Line 892
	mov	edx, DWORD PTR [esi+28]
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], edx
	call	edi
; Line 893
	mov	eax, DWORD PTR [esi+32]
	sub	esp, 8
	mov	DWORD PTR [esp+4], eax
	mov	DWORD PTR [esp], 0
	call	edi
; Line 894
	mov	ecx, DWORD PTR [esi+32]
	mov	edx, DWORD PTR [esi+28]
	sub	esp, 8
	mov	DWORD PTR [esp+4], ecx
	mov	DWORD PTR [esp], edx
	call	edi
; Line 895
	call	DWORD PTR __imp__glEnd@0
; Line 897
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, eax
	sar	ecx, 2
	xor	ebx, ebx
	test	ecx, ecx
	je	SHORT $LN2@render@8
$LL4@render@8:
; Line 898
	mov	eax, DWORD PTR [eax+ebx*4]
	cmp	BYTE PTR [eax+46], 0
	jne	SHORT $LN3@render@8
; Line 899
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx]
	call	eax
$LN3@render@8:
; Line 897
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, eax
	inc	ebx
	sar	ecx, 2
	cmp	ebx, ecx
	jb	SHORT $LL4@render@8
$LN2@render@8:
; Line 901
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [esp+8], 1065353216		; 3f800000H
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	DWORD PTR __imp__glColor3f@12
; Line 903
	push	33984					; 000084c0H
	call	DWORD PTR ?glActiveTextureARB@@3P6GXI@ZA ; glActiveTextureARB
; Line 904
	mov	edx, DWORD PTR [esi+56]
	push	edx
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8
; Line 905
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glEnable@4
; Line 908
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 909
	mov	ebx, DWORD PTR __imp__glTexCoord2f@8
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1061158912		; 3f400000H
	call	ebx
; Line 910
	fld	DWORD PTR [esi+32]
	fadd	QWORD PTR __real@4008000000000000
	sub	esp, 8
	fstp	DWORD PTR tv709[ebp]
	fld	DWORD PTR tv709[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], -1069547520		; c0400000H
	call	edi
; Line 911
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1063256064		; 3f600000H
	call	ebx
; Line 912
	fld	DWORD PTR [esi+32]
	fadd	QWORD PTR __real@4008000000000000
	sub	esp, 8
	fstp	DWORD PTR tv572[ebp]
	fld	DWORD PTR tv572[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 913
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1061158912		; 3f400000H
	call	ebx
; Line 914
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fstp	DWORD PTR tv530[ebp]
	fld	DWORD PTR tv530[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], -1069547520		; c0400000H
	call	edi
; Line 915
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1063256064		; 3f600000H
	call	ebx
; Line 916
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fstp	DWORD PTR tv475[ebp]
	fld	DWORD PTR tv475[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 917
	call	DWORD PTR __imp__glEnd@0
; Line 920
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 921
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1063256064		; 3f600000H
	call	ebx
; Line 922
	fld	DWORD PTR [esi+32]
	fadd	QWORD PTR __real@4008000000000000
	sub	esp, 8
	fstp	DWORD PTR tv424[ebp]
	fld	DWORD PTR tv424[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@402a000000000000
	fstp	DWORD PTR tv640[ebp]
	fld	DWORD PTR tv640[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 923
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	ebx
; Line 924
	fld	DWORD PTR [esi+32]
	fld	QWORD PTR __real@4008000000000000
	sub	esp, 8
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR tv340[ebp]
	fld	DWORD PTR tv340[ebp]
	fstp	DWORD PTR [esp+4]
	fadd	DWORD PTR [esi+28]
	fstp	DWORD PTR tv311[ebp]
	fld	DWORD PTR tv311[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 925
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1063256064		; 3f600000H
	call	ebx
; Line 926
	fld	DWORD PTR [esi+32]
	fld	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR tv652[ebp]
	fld	DWORD PTR tv652[ebp]
	fstp	DWORD PTR [esp+4]
	fsubr	DWORD PTR [esi+28]
	fstp	DWORD PTR tv255[ebp]
	fld	DWORD PTR tv255[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 927
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1065353216		; 3f800000H
	call	ebx
; Line 928
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fstp	DWORD PTR tv656[ebp]
	fld	DWORD PTR tv656[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fadd	QWORD PTR __real@4008000000000000
	fstp	DWORD PTR tv205[ebp]
	fld	DWORD PTR tv205[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 929
	call	DWORD PTR __imp__glEnd@0
; Line 933
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 934
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1056964608		; 3f000000H
	call	ebx
; Line 935
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	mov	DWORD PTR [esp], -1069547520		; c0400000H
	call	edi
; Line 936
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1059061760		; 3f200000H
	call	ebx
; Line 937
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 938
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1056964608		; 3f000000H
	call	ebx
; Line 939
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1069547520		; c0400000H
	mov	DWORD PTR [esp], -1069547520		; c0400000H
	call	edi
; Line 940
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1059061760		; 3f200000H
	call	ebx
; Line 941
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1069547520		; c0400000H
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 942
	call	DWORD PTR __imp__glEnd@0
; Line 945
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 946
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1059061760		; 3f200000H
	call	ebx
; Line 947
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	fstp	DWORD PTR tv162[ebp]
	fld	DWORD PTR tv162[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 948
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1061158912		; 3f400000H
	call	ebx
; Line 949
	fld	DWORD PTR [esi+28]
	fadd	QWORD PTR __real@4008000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	fstp	DWORD PTR tv669[ebp]
	fld	DWORD PTR tv669[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 950
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1059061760		; 3f200000H
	call	ebx
; Line 951
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1069547520		; c0400000H
	fstp	DWORD PTR tv671[ebp]
	fld	DWORD PTR tv671[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 952
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1061158912		; 3f400000H
	call	ebx
; Line 953
	fld	DWORD PTR [esi+28]
	fadd	QWORD PTR __real@4008000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1069547520		; c0400000H
	fstp	DWORD PTR tv674[ebp]
	fld	DWORD PTR tv674[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 954
	call	DWORD PTR __imp__glEnd@0
; Line 957
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 958
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 0
	call	ebx
; Line 959
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fstp	DWORD PTR tv678[ebp]
	fld	DWORD PTR tv678[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], -1069547520		; c0400000H
	call	edi
; Line 960
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1040187392		; 3e000000H
	call	ebx
; Line 961
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fstp	DWORD PTR tv624[ebp]
	fld	DWORD PTR tv624[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 962
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 0
	call	ebx
; Line 963
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	mov	DWORD PTR [esp], -1069547520		; c0400000H
	call	edi
; Line 964
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1040187392		; 3e000000H
	call	ebx
; Line 965
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 966
	call	DWORD PTR __imp__glEnd@0
; Line 969
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 970
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1040187392		; 3e000000H
	call	ebx
; Line 971
	fld	DWORD PTR [esi+32]
	fld	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR tv609[ebp]
	fld	DWORD PTR tv609[ebp]
	fstp	DWORD PTR [esp+4]
	fsubr	DWORD PTR [esi+28]
	fstp	DWORD PTR tv608[ebp]
	fld	DWORD PTR tv608[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 972
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1048576000		; 3e800000H
	call	ebx
; Line 973
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fstp	DWORD PTR tv595[ebp]
	fld	DWORD PTR tv595[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fadd	QWORD PTR __real@4008000000000000
	fstp	DWORD PTR tv594[ebp]
	fld	DWORD PTR tv594[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 974
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1040187392		; 3e000000H
	call	ebx
; Line 975
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	fstp	DWORD PTR tv584[ebp]
	fld	DWORD PTR tv584[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 976
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1048576000		; 3e800000H
	call	ebx
; Line 977
	fld	DWORD PTR [esi+28]
	fadd	QWORD PTR __real@4008000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	fstp	DWORD PTR tv578[ebp]
	fld	DWORD PTR tv578[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 978
	call	DWORD PTR __imp__glEnd@0
; Line 981
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 982
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1056964608		; 3f000000H
	call	ebx
; Line 983
	fld	DWORD PTR [esi+32]
	fadd	QWORD PTR __real@4008000000000000
	sub	esp, 8
	fstp	DWORD PTR tv554[ebp]
	fld	DWORD PTR tv554[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 984
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1056964608		; 3f000000H
	call	ebx
; Line 985
	fld	DWORD PTR [esi+32]
	fadd	QWORD PTR __real@4008000000000000
	sub	esp, 8
	fstp	DWORD PTR tv535[ebp]
	fld	DWORD PTR tv535[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@402a000000000000
	fstp	DWORD PTR tv534[ebp]
	fld	DWORD PTR tv534[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 986
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1052770304		; 3ec00000H
	call	ebx
; Line 987
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fstp	DWORD PTR tv514[ebp]
	fld	DWORD PTR tv514[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 988
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1052770304		; 3ec00000H
	call	ebx
; Line 989
	fld	DWORD PTR [esi+32]
	fld	QWORD PTR __real@402a000000000000
	sub	esp, 8
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR tv496[ebp]
	fld	DWORD PTR tv496[ebp]
	fstp	DWORD PTR [esp+4]
	fsubr	DWORD PTR [esi+28]
	fstp	DWORD PTR tv495[ebp]
	fld	DWORD PTR tv495[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 990
	call	DWORD PTR __imp__glEnd@0
; Line 993
	push	5
	call	DWORD PTR __imp__glBegin@4
; Line 994
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1052770304		; 3ec00000H
	call	ebx
; Line 995
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 996
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1052770304		; 3ec00000H
	call	ebx
; Line 997
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1095761920		; 41500000H
	fstp	DWORD PTR tv460[ebp]
	fld	DWORD PTR tv460[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 998
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1065353216		; 3f800000H
	mov	DWORD PTR [esp], 1048576000		; 3e800000H
	call	ebx
; Line 999
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1069547520		; c0400000H
	mov	DWORD PTR [esp], 1095761920		; 41500000H
	call	edi
; Line 1000
	sub	esp, 8
	mov	DWORD PTR [esp+4], 0
	mov	DWORD PTR [esp], 1048576000		; 3e800000H
	call	ebx
; Line 1001
	fld	DWORD PTR [esi+28]
	fsub	QWORD PTR __real@402a000000000000
	sub	esp, 8
	mov	DWORD PTR [esp+4], -1069547520		; c0400000H
	fstp	DWORD PTR tv437[ebp]
	fld	DWORD PTR tv437[ebp]
	fstp	DWORD PTR [esp]
	call	edi
; Line 1002
	call	DWORD PTR __imp__glEnd@0
; Line 1004
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glDisable@4
; Line 1005
	call	DWORD PTR __imp__glPopMatrix@0
	pop	edi
	pop	esi
	pop	ebx
; Line 1006
	mov	esp, ebp
	pop	ebp
	ret	0
?render@minWindowUI@@UAEXXZ ENDP			; minWindowUI::render
_TEXT	ENDS
PUBLIC	?scrollbarProcessClick@@YAXPAVframe@@H@Z	; scrollbarProcessClick
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_f$ = 8							; size = 4
_id$ = 12						; size = 4
?scrollbarProcessClick@@YAXPAVframe@@H@Z PROC		; scrollbarProcessClick
; Line 1116
	push	ebp
	mov	ebp, esp
; Line 1117
	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	push	eax
	call	?clickReturn@scrollbarUI@@QAEXH@Z	; scrollbarUI::clickReturn
; Line 1118
	pop	ebp
	ret	0
?scrollbarProcessClick@@YAXPAVframe@@H@Z ENDP		; scrollbarProcessClick
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 454
	mov	eax, ecx
; Line 455
	ret	4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAE@V?$allocator@PAVframe@@@1@@Z ; std::_Vector_val<frame *,std::allocator<frame *> >::_Vector_val<frame *,std::allocator<frame *> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_val@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAE@V?$allocator@PAVframe@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAE@V?$allocator@PAVframe@@@1@@Z PROC ; std::_Vector_val<frame *,std::allocator<frame *> >::_Vector_val<frame *,std::allocator<frame *> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 426
	mov	eax, ecx
; Line 427
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
; Line 428
	mov	DWORD PTR [eax+4], ecx
; Line 429
	mov	DWORD PTR [eax+8], ecx
; Line 430
	ret	4
??0?$_Vector_val@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAE@V?$allocator@PAVframe@@@1@@Z ENDP ; std::_Vector_val<frame *,std::allocator<frame *> >::_Vector_val<frame *,std::allocator<frame *> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 1952
	push	ebp
	mov	ebp, esp
; Line 1953
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jb	SHORT $LN5@Eos
	mov	ecx, DWORD PTR [ecx]
$LN5@Eos:
	mov	BYTE PTR [ecx+eax], 0
; Line 1954
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QBEIXZ ; std::vector<frame *,std::allocator<frame *> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QBEIXZ PROC ; std::vector<frame *,std::allocator<frame *> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 884
	mov	eax, 1073741823				; 3fffffffH
; Line 885
	ret	0
?max_size@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QBEIXZ ENDP ; std::vector<frame *,std::allocator<frame *> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IBEII@Z ; std::vector<frame *,std::allocator<frame *> >::_Grow_to
; Function compile flags: /Ogtp
;	COMDAT ?_Grow_to@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IBEII@Z PROC ; std::vector<frame *,std::allocator<frame *> >::_Grow_to, COMDAT
; _this$ = ecx
; Line 1274
	push	ebp
	mov	ebp, esp
; Line 1275
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
; Line 1278
	mov	edx, 1073741823				; 3fffffffH
	sar	eax, 2
	mov	ecx, eax
	shr	ecx, 1
	sub	edx, ecx
	cmp	edx, eax
	jae	SHORT $LN4@Grow_to
	xor	eax, eax
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	add	eax, ecx
$LN5@Grow_to:
; Line 1279
	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	eax, ecx
	jae	SHORT $LN1@Grow_to
; Line 1281
	mov	eax, ecx
$LN1@Grow_to:
; Line 1282
	pop	ebp
	ret	4
?_Grow_to@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IBEII@Z ENDP ; std::vector<frame *,std::allocator<frame *> >::_Grow_to
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 1517
	mov	eax, -2					; fffffffeH
; Line 1518
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVframe@@@std@@QAEPAPAVframe@@I@Z ; std::allocator<frame *>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@PAVframe@@@std@@QAEPAPAVframe@@I@Z
_TEXT	SEGMENT
$T117599 = -12						; size = 12
$T117597 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVframe@@@std@@QAEPAPAVframe@@I@Z PROC ; std::allocator<frame *>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 186
	push	ebp
	mov	ebp, esp
; Line 187
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $LN1@allocate
	cmp	ecx, 1073741823				; 3fffffffH
	ja	SHORT $LN3@allocate
	lea	eax, DWORD PTR [ecx*4]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@allocate
$LN3@allocate:
	lea	ecx, DWORD PTR $T117597[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T117599[ebp]
	mov	DWORD PTR $T117597[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T117599[ebp]
	push	edx
	mov	DWORD PTR $T117599[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN13@allocate:
$LN1@allocate:
; Line 188
	mov	esp, ebp
	pop	ebp
	ret	4
$LN12@allocate:
?allocate@?$allocator@PAVframe@@@std@@QAEPAPAVframe@@I@Z ENDP ; std::allocator<frame *>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
$T117625 = -12						; size = 12
$T117620 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx
; Line 186
	push	ebp
	mov	ebp, esp
; Line 187
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $LN1@allocate@2
	cmp	ecx, -1
	ja	SHORT $LN3@allocate@2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@allocate@2
$LN3@allocate@2:
	lea	eax, DWORD PTR $T117620[ebp]
	push	eax
	lea	ecx, DWORD PTR $T117625[ebp]
	mov	DWORD PTR $T117620[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T117625[ebp]
	push	ecx
	mov	DWORD PTR $T117625[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN13@allocate@2:
$LN1@allocate@2:
; Line 188
	mov	esp, ebp
	pop	ebp
	ret	4
$LN12@allocate@2:
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAVframe@@@std@@PAVframe@@AAPAV3@@std@@YAXAAV?$allocator@PAVframe@@@0@PAPAVframe@@AAPAV2@@Z ; std::_Cons_val<std::allocator<frame *>,frame *,frame * &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@PAVframe@@@std@@PAVframe@@AAPAV3@@std@@YAXAAV?$allocator@PAVframe@@@0@PAPAVframe@@AAPAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVframe@@@std@@PAVframe@@AAPAV3@@std@@YAXAAV?$allocator@PAVframe@@@0@PAPAVframe@@AAPAV2@@Z PROC ; std::_Cons_val<std::allocator<frame *>,frame *,frame * &>, COMDAT
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Pdest$[ebp]
	test	eax, eax
	je	SHORT $LN7@Cons_val
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN7@Cons_val:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@PAVframe@@@std@@PAVframe@@AAPAV3@@std@@YAXAAV?$allocator@PAVframe@@@0@PAPAVframe@@AAPAV2@@Z ENDP ; std::_Cons_val<std::allocator<frame *>,frame *,frame * &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVframe@@@std@@@std@@YAXPAPAVframe@@0AAV?$allocator@PAVframe@@@0@@Z ; std::_Destroy_range<std::allocator<frame *> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@PAVframe@@@std@@@std@@YAXPAPAVframe@@0AAV?$allocator@PAVframe@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVframe@@@std@@@std@@YAXPAPAVframe@@0AAV?$allocator@PAVframe@@@0@@Z PROC ; std::_Destroy_range<std::allocator<frame *> >, COMDAT
; Line 89
	ret	0
??$_Destroy_range@V?$allocator@PAVframe@@@std@@@std@@YAXPAPAVframe@@0AAV?$allocator@PAVframe@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<frame *> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVframe@@@std@@QAEXPAPAVframe@@ABQAV3@@Z ; std::allocator<frame *>::construct
; Function compile flags: /Ogtp
;	COMDAT ?construct@?$allocator@PAVframe@@@std@@QAEXPAPAVframe@@ABQAV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVframe@@@std@@QAEXPAPAVframe@@ABQAV3@@Z PROC ; std::allocator<frame *>::construct, COMDAT
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
; Line 197
	mov	eax, DWORD PTR __Ptr$[ebp]
	test	eax, eax
	je	SHORT $LN5@construct@2
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN5@construct@2:
; Line 198
	pop	ebp
	ret	8
?construct@?$allocator@PAVframe@@@std@@QAEXPAPAVframe@@ABQAV3@@Z ENDP ; std::allocator<frame *>::construct
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAPAVframe@@PAPAV1@V?$allocator@PAVframe@@@std@@@std@@YAPAPAVframe@@PAPAV1@00AAV?$allocator@PAVframe@@@0@@Z ; std::_Uninitialized_move<frame * *,frame * *,std::allocator<frame *> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninitialized_move@PAPAVframe@@PAPAV1@V?$allocator@PAVframe@@@std@@@std@@YAPAPAVframe@@PAPAV1@00AAV?$allocator@PAVframe@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVframe@@PAPAV1@V?$allocator@PAVframe@@@std@@@std@@YAPAPAVframe@@PAPAV1@00AAV?$allocator@PAVframe@@@0@@Z PROC ; std::_Uninitialized_move<frame * *,frame * *,std::allocator<frame *> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
; Line 469
	push	ebp
	mov	ebp, esp
; Line 471
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, ecx
	push	esi
	sar	eax, 2
	lea	esi, DWORD PTR [eax*4]
	mov	eax, DWORD PTR __Dest$[ebp]
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 472
	pop	ebp
	ret	0
??$_Uninitialized_move@PAPAVframe@@PAPAV1@V?$allocator@PAVframe@@@std@@@std@@YAPAPAVframe@@PAPAV1@00AAV?$allocator@PAVframe@@@0@@Z ENDP ; std::_Uninitialized_move<frame * *,frame * *,std::allocator<frame *> >
_TEXT	ENDS
PUBLIC	??0?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAE@XZ ; std::vector<frame *,std::allocator<frame *> >::vector<frame *,std::allocator<frame *> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAE@XZ PROC ; std::vector<frame *,std::allocator<frame *> >::vector<frame *,std::allocator<frame *> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 507
	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
; Line 508
	ret	0
??0?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAE@XZ ENDP ; std::vector<frame *,std::allocator<frame *> >::vector<frame *,std::allocator<frame *> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 1987
	push	ebp
	mov	ebp, esp
; Line 1988
	cmp	BYTE PTR __Built$[ebp], 0
	push	esi
	push	edi
	mov	edi, DWORD PTR __Newsize$[ebp]
	mov	esi, ecx
	je	SHORT $LN9@Tidy
; Line 1990
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN9@Tidy
; Line 1992
	push	ebx
	mov	ebx, DWORD PTR [esi]
; Line 1993
	test	edi, edi
	je	SHORT $LN7@Tidy
; Line 1994
	push	edi
	push	ebx
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN7@Tidy:
; Line 1995
	push	ebx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	pop	ebx
$LN9@Tidy:
; Line 1998
	mov	DWORD PTR [esi+16], edi
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	BYTE PTR [edi+esi], 0
	pop	edi
	pop	esi
; Line 1999
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx
; Line 1108
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 1109
	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR __Off$[ebp]
	push	edi
	cmp	eax, ecx
	jae	SHORT $LN3@erase
; Line 1110
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN28@erase:
$LN3@erase:
; Line 1111
	mov	edi, DWORD PTR __Count$[ebp]
	sub	eax, ecx
	cmp	eax, edi
	jae	SHORT $LN2@erase
; Line 1112
	mov	edi, eax
$LN2@erase:
; Line 1113
	test	edi, edi
	je	SHORT $LN25@erase
; Line 1116
	mov	edx, DWORD PTR [esi+20]
	push	ebx
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN11@erase
	mov	ebx, DWORD PTR [esi]
	jmp	SHORT $LN12@erase
$LN11@erase:
	mov	ebx, esi
$LN12@erase:
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN15@erase
	mov	edx, DWORD PTR [esi]
	jmp	SHORT $LN16@erase
$LN15@erase:
	mov	edx, esi
$LN16@erase:
	sub	eax, edi
	add	ebx, ecx
	push	eax
	add	ebx, edi
	add	edx, ecx
	push	ebx
	push	edx
	call	DWORD PTR __imp__memmove
; Line 1117
	mov	eax, DWORD PTR [esi+16]
	add	esp, 12					; 0000000cH
	sub	eax, edi
; Line 1118
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], eax
	pop	ebx
	jb	SHORT $LN23@erase
	mov	ecx, DWORD PTR [esi]
	mov	BYTE PTR [ecx+eax], 0
	pop	edi
; Line 1120
	mov	eax, esi
	pop	esi
; Line 1121
	pop	ebp
	ret	8
; Line 1118
$LN23@erase:
	mov	ecx, esi
	mov	BYTE PTR [ecx+eax], 0
$LN25@erase:
; Line 1120
	pop	edi
	mov	eax, esi
	pop	esi
; Line 1121
	pop	ebp
	ret	8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEXPAPAVframe@@0@Z ; std::vector<frame *,std::allocator<frame *> >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEXPAPAVframe@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEXPAPAVframe@@0@Z PROC ; std::vector<frame *,std::allocator<frame *> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1271
	ret	8
?_Destroy@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEXPAPAVframe@@0@Z ENDP ; std::vector<frame *,std::allocator<frame *> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
$T117903 = -40						; size = 12
__Newres$ = -28						; size = 4
$T117887 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 1918
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	edi, ecx
	mov	DWORD PTR _this$[ebp], edi
; Line 1919
	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	esi, eax
	or	esi, 15					; 0000000fH
; Line 1920
	cmp	esi, -2					; fffffffeH
	jbe	SHORT $LN9@Copy
; Line 1921
	mov	esi, eax
	jmp	SHORT $LN39@Copy
$LN9@Copy:
; Line 1922
	mov	ebx, DWORD PTR [edi+20]
	mov	eax, -1431655765			; aaaaaaabH
	mul	esi
	mov	ecx, ebx
	shr	ecx, 1
	shr	edx, 1
	cmp	ecx, edx
	jbe	SHORT $LN39@Copy
; Line 1924
	mov	eax, -2					; fffffffeH
	sub	eax, ecx
; Line 1926
	lea	esi, DWORD PTR [ecx+ebx]
	cmp	ebx, eax
	jbe	SHORT $LN39@Copy
; Line 1928
	mov	esi, -2					; fffffffeH
$LN39@Copy:
; Line 1931
	xor	eax, eax
; Line 1932
	lea	ecx, DWORD PTR [esi+1]
	mov	DWORD PTR __$EHRec$[ebp+12], eax
	cmp	ecx, eax
	jbe	SHORT $LN47@Copy
	cmp	ecx, -1
	ja	SHORT $LN46@Copy
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN46@Copy
$LN47@Copy:
	mov	DWORD PTR __Ptr$[ebp], eax
	jmp	SHORT $LN19@Copy
$LN46@Copy:
	lea	ecx, DWORD PTR $T117887[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T117903[ebp]
	mov	DWORD PTR $T117887[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T117903[ebp]
	push	edx
	mov	DWORD PTR $T117903[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN112@Copy:
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:
; Line 1934
	mov	eax, DWORD PTR __Newsize$[ebp]
; Line 1936
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax
	inc	eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	push	eax
	add	ecx, 24					; 00000018H
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
; Line 1941
	mov	eax, $LN107@Copy
	ret	0
$LN107@Copy:
	mov	edi, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR __Newres$[ebp]
$LN19@Copy:
; Line 1943
	mov	ebx, DWORD PTR __Oldlen$[ebp]
	test	ebx, ebx
	je	SHORT $LN78@Copy
; Line 1944
	cmp	DWORD PTR [edi+20], 16			; 00000010H
	jb	SHORT $LN76@Copy
	mov	eax, DWORD PTR [edi]
	jmp	SHORT $LN77@Copy
$LN76@Copy:
	mov	eax, edi
$LN77@Copy:
	push	ebx
	push	eax
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN78@Copy:
; Line 1945
	cmp	DWORD PTR [edi+20], 16			; 00000010H
	jb	SHORT $LN88@Copy
	mov	ecx, DWORD PTR [edi]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN88@Copy:
; Line 1946
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	BYTE PTR [edi], 0
	mov	DWORD PTR [edi], eax
; Line 1947
	mov	DWORD PTR [edi+20], esi
; Line 1948
	mov	DWORD PTR [edi+16], ebx
	cmp	esi, 16					; 00000010H
	jb	SHORT $LN102@Copy
	mov	edi, eax
$LN102@Copy:
	mov	BYTE PTR [edi+ebx], 0
; Line 1949
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:
; Line 1938
	mov	esi, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN64@Copy
	mov	edx, DWORD PTR [esi]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN64@Copy:
; Line 1939
	push	0
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	push	0
	mov	BYTE PTR [esi], 0
	call	__CxxThrowException@8
$LN113@Copy:
$LN111@Copy:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??$_Cons_val@V?$allocator@PAVframe@@@std@@PAVframe@@ABQAV3@@std@@YAXAAV?$allocator@PAVframe@@@0@PAPAVframe@@ABQAV2@@Z ; std::_Cons_val<std::allocator<frame *>,frame *,frame * const &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Cons_val@V?$allocator@PAVframe@@@std@@PAVframe@@ABQAV3@@std@@YAXAAV?$allocator@PAVframe@@@0@PAPAVframe@@ABQAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVframe@@@std@@PAVframe@@ABQAV3@@std@@YAXAAV?$allocator@PAVframe@@@0@PAPAVframe@@ABQAV2@@Z PROC ; std::_Cons_val<std::allocator<frame *>,frame *,frame * const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Pdest$[ebp]
	test	eax, eax
	je	SHORT $LN9@Cons_val@2
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN9@Cons_val@2:
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@PAVframe@@@std@@PAVframe@@ABQAV3@@std@@YAXAAV?$allocator@PAVframe@@@0@PAPAVframe@@ABQAV2@@Z ENDP ; std::_Cons_val<std::allocator<frame *>,frame *,frame * const &>
_TEXT	ENDS
PUBLIC	??$_Umove@PAPAVframe@@@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEPAPAVframe@@PAPAV2@00@Z ; std::vector<frame *,std::allocator<frame *> >::_Umove<frame * *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAPAVframe@@@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEPAPAVframe@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVframe@@@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEPAPAVframe@@PAPAV2@00@Z PROC ; std::vector<frame *,std::allocator<frame *> >::_Umove<frame * *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1322
	push	ebp
	mov	ebp, esp
; Line 1325
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, ecx
	push	esi
	sar	eax, 2
	lea	esi, DWORD PTR [eax*4]
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, esi
	pop	esi
; Line 1326
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPAVframe@@@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEPAPAVframe@@PAPAV2@00@Z ENDP ; std::vector<frame *,std::allocator<frame *> >::_Umove<frame * *>
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 752
	push	esi
	mov	esi, ecx
; Line 753
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN11@basic_stri
	mov	eax, DWORD PTR [esi]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN11@basic_stri:
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	BYTE PTR [esi], 0
	pop	esi
; Line 754
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEXXZ ; std::vector<frame *,std::allocator<frame *> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEXXZ PROC ; std::vector<frame *,std::allocator<frame *> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1301
	push	esi
	mov	esi, ecx
; Line 1302
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN6@Tidy@2
; Line 1307
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@Tidy@2:
; Line 1309
	mov	DWORD PTR [esi], 0
; Line 1310
	mov	DWORD PTR [esi+4], 0
; Line 1311
	mov	DWORD PTR [esi+8], 0
	pop	esi
; Line 1312
	ret	0
?_Tidy@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEXXZ ENDP ; std::vector<frame *,std::allocator<frame *> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogtp
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 1958
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 1959
	mov	ebx, DWORD PTR __Newsize$[ebp]
	push	esi
	mov	esi, ecx
	cmp	ebx, -2					; fffffffeH
	jbe	SHORT $LN6@Grow
; Line 1960
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN49@Grow:
$LN6@Grow:
; Line 1961
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, ebx
	jae	SHORT $LN5@Grow
; Line 1962
	mov	eax, DWORD PTR [esi+16]
	push	eax
	push	ebx
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Line 1968
	xor	ecx, ecx
	cmp	ecx, ebx
	sbb	eax, eax
	pop	esi
	neg	eax
	pop	ebx
; Line 1969
	pop	ebp
	ret	8
$LN5@Grow:
; Line 1963
	cmp	BYTE PTR __Trim$[ebp], 0
	je	SHORT $LN3@Grow
	cmp	ebx, 16					; 00000010H
	jae	SHORT $LN3@Grow
; Line 1965
	push	edi
	mov	edi, DWORD PTR [esi+16]
	cmp	ebx, edi
	jae	SHORT $LN9@Grow
	mov	edi, ebx
$LN9@Grow:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN30@Grow
	mov	ebx, DWORD PTR [esi]
	test	edi, edi
	je	SHORT $LN28@Grow
	push	edi
	push	ebx
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN28@Grow:
	push	ebx
	call	??3@YAXPAX@Z				; operator delete
	mov	ebx, DWORD PTR __Newsize$[ebp]
	add	esp, 4
$LN30@Grow:
	mov	DWORD PTR [esi+16], edi
	mov	DWORD PTR [esi+20], 15			; 0000000fH
; Line 1968
	xor	ecx, ecx
	mov	BYTE PTR [edi+esi], 0
	cmp	ecx, ebx
	pop	edi
	sbb	eax, eax
	pop	esi
	neg	eax
	pop	ebx
; Line 1969
	pop	ebp
	ret	8
$LN3@Grow:
; Line 1966
	test	ebx, ebx
	jne	SHORT $LN46@Grow
; Line 1967
	mov	DWORD PTR [esi+16], ebx
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN44@Grow
	mov	esi, DWORD PTR [esi]
$LN44@Grow:
	mov	BYTE PTR [esi], 0
$LN46@Grow:
; Line 1968
	xor	ecx, ecx
	cmp	ecx, ebx
	sbb	eax, eax
	pop	esi
	neg	eax
	pop	ebx
; Line 1969
	pop	ebp
	ret	8
$LN48@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?reserve@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXI@Z ; std::vector<frame *,std::allocator<frame *> >::reserve
; Function compile flags: /Ogtp
;	COMDAT ?reserve@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXI@Z PROC ; std::vector<frame *,std::allocator<frame *> >::reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 746
	push	ebp
	mov	ebp, esp
; Line 747
	mov	eax, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, ecx
	cmp	eax, 1073741823				; 3fffffffH
	jbe	SHORT $LN5@reserve
; Line 748
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN43@reserve:
$LN5@reserve:
; Line 749
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2
	cmp	ecx, eax
	jae	SHORT $LN3@reserve
; Line 751
	push	ebx
	push	edi
	push	eax
	lea	ecx, DWORD PTR [esi+12]
	call	?allocate@?$allocator@PAVframe@@@std@@QAEPAPAVframe@@I@Z ; std::allocator<frame *>::allocate
; Line 754
	mov	edx, DWORD PTR [esi+4]
	mov	ebx, eax
	mov	eax, DWORD PTR [esi]
	sub	edx, eax
	sar	edx, 2
	add	edx, edx
	add	edx, edx
	push	edx
	push	eax
	push	ebx
	call	DWORD PTR __imp__memmove
; Line 760
	mov	eax, DWORD PTR [esi]
	mov	edi, DWORD PTR [esi+4]
	sub	edi, eax
	add	esp, 12					; 0000000cH
	sar	edi, 2
; Line 761
	test	eax, eax
	je	SHORT $LN37@reserve
; Line 765
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN37@reserve:
; Line 769
	mov	eax, DWORD PTR __Count$[ebp]
; Line 770
	lea	edx, DWORD PTR [ebx+edi*4]
	lea	ecx, DWORD PTR [ebx+eax*4]
	pop	edi
; Line 771
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [esi+8], ecx
	mov	DWORD PTR [esi+4], edx
	pop	ebx
$LN3@reserve:
	pop	esi
; Line 773
	pop	ebp
	ret	4
$LN42@reserve:
?reserve@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXI@Z ENDP ; std::vector<frame *,std::allocator<frame *> >::reserve
_TEXT	ENDS
PUBLIC	??1?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAE@XZ ; std::vector<frame *,std::allocator<frame *> >::~vector<frame *,std::allocator<frame *> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAE@XZ PROC ; std::vector<frame *,std::allocator<frame *> >::~vector<frame *,std::allocator<frame *> >, COMDAT
; _this$ = ecx
; Line 704
	push	esi
	mov	esi, ecx
; Line 705
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN8@vector
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN8@vector:
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	pop	esi
; Line 706
	ret	0
??1?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAE@XZ ENDP ; std::vector<frame *,std::allocator<frame *> >::~vector<frame *,std::allocator<frame *> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 892
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 893
	mov	ebx, DWORD PTR __Roff$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	push	edi
	mov	edi, DWORD PTR [ecx+16]
	cmp	edi, ebx
	jae	SHORT $LN5@assign
; Line 894
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN83@assign:
$LN5@assign:
; Line 896
	mov	eax, DWORD PTR __Count$[ebp]
	sub	edi, ebx
	cmp	eax, edi
	jae	SHORT $LN4@assign
; Line 897
	mov	edi, eax
$LN4@assign:
; Line 899
	cmp	esi, ecx
	jne	SHORT $LN3@assign
; Line 900
	push	-1
	add	edi, ebx
	push	edi
	mov	ecx, esi
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	push	ebx
	push	0
	mov	ecx, esi
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	pop	edi
; Line 906
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 907
	pop	ebp
	ret	12					; 0000000cH
$LN3@assign:
; Line 901
	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN20@assign
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN84@assign:
$LN20@assign:
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, edi
	jae	SHORT $LN19@assign
	mov	eax, DWORD PTR [esi+16]
	push	eax
	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	mov	ecx, DWORD PTR __Right$[ebp]
	test	edi, edi
	je	SHORT $LN78@assign
$LN82@assign:
; Line 903
	mov	eax, 16					; 00000010H
	cmp	DWORD PTR [ecx+20], eax
	jb	SHORT $LN64@assign
	mov	ecx, DWORD PTR [ecx]
$LN64@assign:
	cmp	DWORD PTR [esi+20], eax
	jb	SHORT $LN68@assign
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN69@assign
; Line 901
$LN19@assign:
	test	edi, edi
	jne	SHORT $LN82@assign
	mov	DWORD PTR [esi+16], edi
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN58@assign
	mov	eax, DWORD PTR [esi]
	pop	edi
	mov	BYTE PTR [eax], 0
; Line 906
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 907
	pop	ebp
	ret	12					; 0000000cH
; Line 901
$LN58@assign:
	pop	edi
	mov	eax, esi
	pop	esi
	mov	BYTE PTR [eax], 0
	pop	ebx
; Line 907
	pop	ebp
	ret	12					; 0000000cH
; Line 903
$LN68@assign:
	mov	eax, esi
$LN69@assign:
	push	edi
	add	ecx, ebx
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 904
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], edi
	jb	SHORT $LN76@assign
	mov	eax, DWORD PTR [esi]
	mov	BYTE PTR [eax+edi], 0
	pop	edi
; Line 906
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 907
	pop	ebp
	ret	12					; 0000000cH
; Line 904
$LN76@assign:
	mov	eax, esi
	mov	BYTE PTR [eax+edi], 0
$LN78@assign:
; Line 906
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 907
	pop	ebp
	ret	12					; 0000000cH
$LN80@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEXI@Z ; std::vector<frame *,std::allocator<frame *> >::_Reserve
; Function compile flags: /Ogtp
;	COMDAT ?_Reserve@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEXI@Z PROC ; std::vector<frame *,std::allocator<frame *> >::_Reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1290
	push	ebp
	mov	ebp, esp
; Line 1291
	mov	eax, DWORD PTR [ecx+4]
; Line 1292
	mov	edx, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, DWORD PTR [ecx]
	push	edi
	sub	eax, esi
	mov	edi, 1073741823				; 3fffffffH
	sar	eax, 2
	sub	edi, edx
	cmp	edi, eax
	jae	SHORT $LN4@Reserve
; Line 1293
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN34@Reserve:
$LN4@Reserve:
; Line 1294
	add	eax, edx
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, esi
	sar	edx, 2
	cmp	eax, edx
	jbe	SHORT $LN1@Reserve
; Line 1297
	mov	esi, edx
	shr	esi, 1
	mov	edi, 1073741823				; 3fffffffH
	sub	edi, esi
	cmp	edi, edx
	jae	SHORT $LN23@Reserve
	xor	edx, edx
	jmp	SHORT $LN24@Reserve
$LN23@Reserve:
	add	edx, esi
$LN24@Reserve:
	cmp	edx, eax
	jae	SHORT $LN20@Reserve
	mov	edx, eax
$LN20@Reserve:
	push	edx
	call	?reserve@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXI@Z ; std::vector<frame *,std::allocator<frame *> >::reserve
$LN1@Reserve:
	pop	edi
	pop	esi
; Line 1298
	pop	ebp
	ret	4
$LN33@Reserve:
?_Reserve@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEXI@Z ENDP ; std::vector<frame *,std::allocator<frame *> >::_Reserve
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 910
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 916
	mov	ebx, DWORD PTR __Ptr$[ebp]
	push	esi
	mov	esi, ecx
	test	ebx, ebx
	je	SHORT $LN85@assign@2
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN12@assign@2
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN13@assign@2
$LN12@assign@2:
	mov	eax, esi
$LN13@assign@2:
	cmp	ebx, eax
	jb	SHORT $LN85@assign@2
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN16@assign@2
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN17@assign@2
$LN16@assign@2:
	mov	eax, esi
$LN17@assign@2:
	mov	edx, DWORD PTR [esi+16]
	add	edx, eax
	cmp	edx, ebx
	jbe	SHORT $LN85@assign@2
; Line 917
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN20@assign@2
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	sub	ebx, eax
	push	ebx
	push	esi
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	esi
	pop	ebx
; Line 925
	pop	ebp
	ret	8
; Line 917
$LN20@assign@2:
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	eax, esi
	push	ecx
	sub	ebx, eax
	push	ebx
	push	esi
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	esi
	pop	ebx
; Line 925
	pop	ebp
	ret	8
$LN85@assign@2:
	push	edi
; Line 919
	mov	edi, DWORD PTR __Count$[ebp]
	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN27@assign@2
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN89@assign@2:
$LN27@assign@2:
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, edi
	jae	SHORT $LN26@assign@2
	mov	edx, DWORD PTR [esi+16]
	push	edx
	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	test	edi, edi
	je	SHORT $LN82@assign@2
$LN88@assign@2:
; Line 921
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN72@assign@2
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN73@assign@2
; Line 919
$LN26@assign@2:
	test	edi, edi
	jne	SHORT $LN88@assign@2
	mov	DWORD PTR [esi+16], edi
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN65@assign@2
	mov	eax, DWORD PTR [esi]
	pop	edi
	mov	BYTE PTR [eax], 0
; Line 924
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 925
	pop	ebp
	ret	8
; Line 919
$LN65@assign@2:
	pop	edi
	mov	eax, esi
	pop	esi
	mov	BYTE PTR [eax], 0
	pop	ebx
; Line 925
	pop	ebp
	ret	8
; Line 921
$LN72@assign@2:
	mov	eax, esi
$LN73@assign@2:
	push	edi
	push	ebx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 922
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], edi
	jb	SHORT $LN80@assign@2
	mov	eax, DWORD PTR [esi]
	mov	BYTE PTR [eax+edi], 0
	pop	edi
; Line 924
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 925
	pop	ebp
	ret	8
; Line 922
$LN80@assign@2:
	mov	eax, esi
	mov	BYTE PTR [eax+edi], 0
$LN82@assign@2:
; Line 924
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 925
	pop	ebp
	ret	8
$LN86@assign@2:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??_7frame@@6B@					; frame::`vftable'
PUBLIC	??0frame@@QAE@XZ				; frame::frame
PUBLIC	??_R4frame@@6B@					; frame::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVframe@@@8				; frame `RTTI Type Descriptor'
PUBLIC	??_R3frame@@8					; frame::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2frame@@8					; frame::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@frame@@8				; frame::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?processUnclick@frame@@UAEXXZ			; frame::processUnclick
;	COMDAT ??_R1A@?0A@EA@frame@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@frame@@8 DD FLAT:??_R0?AVframe@@@8	; frame::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3frame@@8
rdata$r	ENDS
;	COMDAT ??_R2frame@@8
rdata$r	SEGMENT
??_R2frame@@8 DD FLAT:??_R1A@?0A@EA@frame@@8		; frame::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3frame@@8
rdata$r	SEGMENT
??_R3frame@@8 DD 00H					; frame::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2frame@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVframe@@@8
_DATA	SEGMENT
??_R0?AVframe@@@8 DD FLAT:??_7type_info@@6B@		; frame `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVframe@@', 00H
_DATA	ENDS
;	COMDAT ??_R4frame@@6B@
rdata$r	SEGMENT
??_R4frame@@6B@ DD 00H					; frame::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVframe@@@8
	DD	FLAT:??_R3frame@@8
rdata$r	ENDS
;	COMDAT ??_7frame@@6B@
CONST	SEGMENT
??_7frame@@6B@ DD FLAT:??_R4frame@@6B@			; frame::`vftable'
	DD	FLAT:?render@frame@@UAEXXZ
	DD	FLAT:?processLeftClick@frame@@UAEPAV1@MM@Z
	DD	FLAT:?processLeftDrag@frame@@UAE_NMMMM@Z
	DD	FLAT:?processUnclick@frame@@UAEXXZ
	DD	FLAT:?processRightClick@frame@@UAE_NMM@Z
	DD	FLAT:?processKey@frame@@UAE_ND_N00@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0frame@@QAE@XZ
_TEXT	SEGMENT
??0frame@@QAE@XZ PROC					; frame::frame, COMDAT
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\ui.h
; Line 25
	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], OFFSET ??_7frame@@6B@
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	WORD PTR [eax+45], cx
	mov	BYTE PTR [eax+47], cl
	mov	DWORD PTR [eax+36], ecx
	ret	0
??0frame@@QAE@XZ ENDP					; frame::frame
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?processUnclick@frame@@UAEXXZ
_TEXT	SEGMENT
?processUnclick@frame@@UAEXXZ PROC			; frame::processUnclick, COMDAT
; _this$ = ecx
; Line 31
	ret	0
?processUnclick@frame@@UAEXXZ ENDP			; frame::processUnclick
_TEXT	ENDS
PUBLIC	??1frame@@QAE@XZ				; frame::~frame
; Function compile flags: /Ogtp
;	COMDAT ??1frame@@QAE@XZ
_TEXT	SEGMENT
??1frame@@QAE@XZ PROC					; frame::~frame, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN11@frame
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN11@frame:
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	pop	esi
	ret	0
??1frame@@QAE@XZ ENDP					; frame::~frame
_TEXT	ENDS
PUBLIC	??_7textUI@@6B@					; textUI::`vftable'
PUBLIC	??0textUI@@QAE@MM@Z				; textUI::textUI
PUBLIC	??_R4textUI@@6B@				; textUI::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVtextUI@@@8				; textUI `RTTI Type Descriptor'
PUBLIC	??_R3textUI@@8					; textUI::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2textUI@@8					; textUI::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@textUI@@8				; textUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
;	COMDAT ??_R1A@?0A@EA@textUI@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@textUI@@8 DD FLAT:??_R0?AVtextUI@@@8	; textUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3textUI@@8
rdata$r	ENDS
;	COMDAT ??_R2textUI@@8
rdata$r	SEGMENT
??_R2textUI@@8 DD FLAT:??_R1A@?0A@EA@textUI@@8		; textUI::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@frame@@8
rdata$r	ENDS
;	COMDAT ??_R3textUI@@8
rdata$r	SEGMENT
??_R3textUI@@8 DD 00H					; textUI::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2textUI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVtextUI@@@8
_DATA	SEGMENT
??_R0?AVtextUI@@@8 DD FLAT:??_7type_info@@6B@		; textUI `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVtextUI@@', 00H
_DATA	ENDS
;	COMDAT ??_R4textUI@@6B@
rdata$r	SEGMENT
??_R4textUI@@6B@ DD 00H					; textUI::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVtextUI@@@8
	DD	FLAT:??_R3textUI@@8
rdata$r	ENDS
;	COMDAT ??_7textUI@@6B@
CONST	SEGMENT
??_7textUI@@6B@ DD FLAT:??_R4textUI@@6B@		; textUI::`vftable'
	DD	FLAT:?render@textUI@@UAEXXZ
	DD	FLAT:?processLeftClick@frame@@UAEPAV1@MM@Z
	DD	FLAT:?processLeftDrag@frame@@UAE_NMMMM@Z
	DD	FLAT:?processUnclick@frame@@UAEXXZ
	DD	FLAT:?processRightClick@frame@@UAE_NMM@Z
	DD	FLAT:?processKey@frame@@UAE_ND_N00@Z
; Function compile flags: /Ogtp
CONST	ENDS
_TEXT	SEGMENT
_xPos$ = 8						; size = 4
_yPos$ = 12						; size = 4
??0textUI@@QAE@MM@Z PROC				; textUI::textUI
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\ui.cpp
; Line 603
	push	ebp
	mov	ebp, esp
; Line 604
	mov	edx, DWORD PTR _xPos$[ebp]
	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+20], edx
; Line 605
	mov	edx, DWORD PTR _yPos$[ebp]
	mov	WORD PTR [eax+45], cx
	mov	BYTE PTR [eax+47], cl
	mov	DWORD PTR [eax+36], ecx
	mov	DWORD PTR [eax], OFFSET ??_7textUI@@6B@
	mov	DWORD PTR [eax+24], edx
; Line 606
	mov	BYTE PTR [eax+56], cl
; Line 607
	mov	BYTE PTR [eax+316], cl
; Line 608
	mov	DWORD PTR [eax+312], ecx
; Line 609
	pop	ebp
	ret	8
??0textUI@@QAE@MM@Z ENDP				; textUI::textUI
_TEXT	ENDS
PUBLIC	??0textUI@@QAE@MMPBD@Z				; textUI::textUI
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_xPos$ = 8						; size = 4
_yPos$ = 12						; size = 4
_t$ = 16						; size = 4
??0textUI@@QAE@MMPBD@Z PROC				; textUI::textUI
; _this$ = ecx
; Line 612
	push	ebp
	mov	ebp, esp
; Line 614
	mov	edx, DWORD PTR _yPos$[ebp]
	mov	eax, ecx
	mov	ecx, DWORD PTR _xPos$[ebp]
	push	ebx
	xor	ebx, ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	push	esi
	mov	DWORD PTR [eax+20], ecx
; Line 615
	mov	ecx, DWORD PTR _t$[ebp]
	lea	esi, DWORD PTR [eax+56]
	mov	WORD PTR [eax+45], bx
	mov	BYTE PTR [eax+47], bl
	mov	DWORD PTR [eax+36], ebx
	mov	DWORD PTR [eax], OFFSET ??_7textUI@@6B@
	mov	DWORD PTR [eax+24], edx
	sub	esi, ecx
$LL16@textUI:
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [esi+ecx], dl
	inc	ecx
	cmp	dl, bl
	jne	SHORT $LL16@textUI
; Line 616
	pop	esi
	mov	BYTE PTR [eax+316], bl
; Line 617
	mov	DWORD PTR [eax+312], ebx
	pop	ebx
; Line 618
	pop	ebp
	ret	12					; 0000000cH
??0textUI@@QAE@MMPBD@Z ENDP				; textUI::textUI
_TEXT	ENDS
PUBLIC	??_7textureUI@@6B@				; textureUI::`vftable'
PUBLIC	??0textureUI@@QAE@MMMMI@Z			; textureUI::textureUI
PUBLIC	??_R4textureUI@@6B@				; textureUI::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVtextureUI@@@8				; textureUI `RTTI Type Descriptor'
PUBLIC	??_R3textureUI@@8				; textureUI::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2textureUI@@8				; textureUI::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@textureUI@@8			; textureUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
;	COMDAT ??_R1A@?0A@EA@textureUI@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@textureUI@@8 DD FLAT:??_R0?AVtextureUI@@@8 ; textureUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3textureUI@@8
rdata$r	ENDS
;	COMDAT ??_R2textureUI@@8
rdata$r	SEGMENT
??_R2textureUI@@8 DD FLAT:??_R1A@?0A@EA@textureUI@@8	; textureUI::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@frame@@8
rdata$r	ENDS
;	COMDAT ??_R3textureUI@@8
rdata$r	SEGMENT
??_R3textureUI@@8 DD 00H				; textureUI::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2textureUI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVtextureUI@@@8
_DATA	SEGMENT
??_R0?AVtextureUI@@@8 DD FLAT:??_7type_info@@6B@	; textureUI `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVtextureUI@@', 00H
_DATA	ENDS
;	COMDAT ??_R4textureUI@@6B@
rdata$r	SEGMENT
??_R4textureUI@@6B@ DD 00H				; textureUI::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVtextureUI@@@8
	DD	FLAT:??_R3textureUI@@8
rdata$r	ENDS
;	COMDAT ??_7textureUI@@6B@
CONST	SEGMENT
??_7textureUI@@6B@ DD FLAT:??_R4textureUI@@6B@		; textureUI::`vftable'
	DD	FLAT:?render@textureUI@@UAEXXZ
	DD	FLAT:?processLeftClick@textureUI@@UAEPAVframe@@MM@Z
	DD	FLAT:?processLeftDrag@frame@@UAE_NMMMM@Z
	DD	FLAT:?processUnclick@frame@@UAEXXZ
	DD	FLAT:?processRightClick@frame@@UAE_NMM@Z
	DD	FLAT:?processKey@frame@@UAE_ND_N00@Z
; Function compile flags: /Ogtp
CONST	ENDS
_TEXT	SEGMENT
_xPos$ = 8						; size = 4
_yPos$ = 12						; size = 4
_w$ = 16						; size = 4
_h$ = 20						; size = 4
_tex$ = 24						; size = 4
??0textureUI@@QAE@MMMMI@Z PROC				; textureUI::textureUI
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\ui.cpp
; Line 687
	push	ebp
	mov	ebp, esp
; Line 688
	mov	edx, DWORD PTR _xPos$[ebp]
	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+20], edx
; Line 689
	mov	edx, DWORD PTR _yPos$[ebp]
	mov	DWORD PTR [eax+24], edx
; Line 690
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+28], edx
; Line 691
	mov	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+32], edx
; Line 692
	mov	edx, DWORD PTR _tex$[ebp]
	mov	WORD PTR [eax+45], cx
	mov	BYTE PTR [eax+47], cl
	mov	DWORD PTR [eax+36], ecx
	mov	DWORD PTR [eax], OFFSET ??_7textureUI@@6B@
	mov	DWORD PTR [eax+52], edx
; Line 693
	mov	BYTE PTR [eax+56], cl
; Line 694
	mov	DWORD PTR [eax+60], ecx
; Line 695
	mov	DWORD PTR [eax+64], ecx
; Line 696
	pop	ebp
	ret	20					; 00000014H
??0textureUI@@QAE@MMMMI@Z ENDP				; textureUI::textureUI
_TEXT	ENDS
PUBLIC	??_7buttonUI@@6B@				; buttonUI::`vftable'
PUBLIC	??0buttonUI@@QAE@MMMMII@Z			; buttonUI::buttonUI
PUBLIC	??_R4buttonUI@@6B@				; buttonUI::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbuttonUI@@@8				; buttonUI `RTTI Type Descriptor'
PUBLIC	??_R3buttonUI@@8				; buttonUI::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2buttonUI@@8				; buttonUI::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@buttonUI@@8			; buttonUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
;	COMDAT ??_R1A@?0A@EA@buttonUI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@buttonUI@@8 DD FLAT:??_R0?AVbuttonUI@@@8	; buttonUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3buttonUI@@8
rdata$r	ENDS
;	COMDAT ??_R2buttonUI@@8
rdata$r	SEGMENT
??_R2buttonUI@@8 DD FLAT:??_R1A@?0A@EA@buttonUI@@8	; buttonUI::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@frame@@8
rdata$r	ENDS
;	COMDAT ??_R3buttonUI@@8
rdata$r	SEGMENT
??_R3buttonUI@@8 DD 00H					; buttonUI::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2buttonUI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbuttonUI@@@8
_DATA	SEGMENT
??_R0?AVbuttonUI@@@8 DD FLAT:??_7type_info@@6B@		; buttonUI `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbuttonUI@@', 00H
_DATA	ENDS
;	COMDAT ??_R4buttonUI@@6B@
rdata$r	SEGMENT
??_R4buttonUI@@6B@ DD 00H				; buttonUI::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbuttonUI@@@8
	DD	FLAT:??_R3buttonUI@@8
rdata$r	ENDS
;	COMDAT ??_7buttonUI@@6B@
CONST	SEGMENT
??_7buttonUI@@6B@ DD FLAT:??_R4buttonUI@@6B@		; buttonUI::`vftable'
	DD	FLAT:?render@buttonUI@@UAEXXZ
	DD	FLAT:?processLeftClick@buttonUI@@UAEPAVframe@@MM@Z
	DD	FLAT:?processLeftDrag@frame@@UAE_NMMMM@Z
	DD	FLAT:?processUnclick@buttonUI@@UAEXXZ
	DD	FLAT:?processRightClick@frame@@UAE_NMM@Z
	DD	FLAT:?processKey@frame@@UAE_ND_N00@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0buttonUI@@QAE@MMMMII@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0buttonUI@@QAE@MMMMII@Z$0
__ehfuncinfo$??0buttonUI@@QAE@MMMMII@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0buttonUI@@QAE@MMMMII@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_xPos$ = 8						; size = 4
_yPos$ = 12						; size = 4
_w$ = 16						; size = 4
_h$ = 20						; size = 4
_tex$ = 24						; size = 4
_texd$ = 28						; size = 4
??0buttonUI@@QAE@MMMMII@Z PROC				; buttonUI::buttonUI
; _this$ = ecx
; Line 753
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0buttonUI@@QAE@MMMMII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ebx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	xor	ebx, ebx
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+12], ebx
	mov	WORD PTR [esi+45], bx
	mov	BYTE PTR [esi+47], bl
	mov	DWORD PTR [esi+36], ebx
; Line 754
	mov	eax, DWORD PTR _xPos$[ebp]
; Line 755
	mov	ecx, DWORD PTR _yPos$[ebp]
; Line 756
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [esi+20], eax
; Line 757
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [esi+24], ecx
; Line 758
	mov	ecx, DWORD PTR _tex$[ebp]
	mov	DWORD PTR [esi+28], edx
; Line 759
	mov	edx, DWORD PTR _texd$[ebp]
; Line 763
	push	336					; 00000150H
	mov	DWORD PTR __$EHRec$[ebp+8], ebx
	mov	DWORD PTR [esi], OFFSET ??_7buttonUI@@6B@
	mov	DWORD PTR [esi+32], eax
	mov	DWORD PTR [esi+52], ecx
	mov	DWORD PTR [esi+56], edx
	mov	DWORD PTR [esi+60], ebx
	mov	DWORD PTR [esi+64], ebx
	mov	BYTE PTR [esi+68], bl
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $LN3@buttonUI
	fld	DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+4], ebx
	fmul	QWORD PTR __real@3fe0000000000000
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	WORD PTR [eax+45], bx
	fstp	DWORD PTR [eax+20]
	mov	BYTE PTR [eax+47], bl
	mov	DWORD PTR [eax+36], ebx
	mov	DWORD PTR [eax], OFFSET ??_7textUI@@6B@
	mov	DWORD PTR [eax+24], 1073741824		; 40000000H
	mov	BYTE PTR [eax+56], bl
	mov	BYTE PTR [eax+316], bl
	mov	DWORD PTR [eax+312], ebx
	jmp	SHORT $LN4@buttonUI
$LN3@buttonUI:
	xor	eax, eax
$LN4@buttonUI:
	mov	DWORD PTR [esi+72], eax
; Line 764
	mov	DWORD PTR [eax+312], 1
; Line 765
	mov	eax, DWORD PTR [esi+72]
	mov	DWORD PTR [eax+52], OFFSET ?arial12@@3Ufont_data@freetype@@A ; arial12
; Line 766
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0buttonUI@@QAE@MMMMII@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1frame@@QAE@XZ
__ehhandler$??0buttonUI@@QAE@MMMMII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0buttonUI@@QAE@MMMMII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0buttonUI@@QAE@MMMMII@Z ENDP				; buttonUI::buttonUI
PUBLIC	??1window@@QAE@XZ				; window::~window
; Function compile flags: /Ogtp
;	COMDAT ??1window@@QAE@XZ
_TEXT	SEGMENT
??1window@@QAE@XZ PROC					; window::~window, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN13@window
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN13@window:
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	pop	esi
	ret	0
??1window@@QAE@XZ ENDP					; window::~window
_TEXT	ENDS
PUBLIC	?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z ; std::vector<frame *,std::allocator<frame *> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z PROC ; std::vector<frame *,std::allocator<frame *> >::push_back, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 976
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 977
	mov	eax, DWORD PTR [esi+4]
	push	edi
	mov	edi, DWORD PTR __Val$[ebp]
	cmp	edi, eax
	jae	SHORT $LN4@push_back
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, edi
	ja	SHORT $LN4@push_back
; Line 979
	sub	edi, ecx
	sar	edi, 2
; Line 980
	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN3@push_back
; Line 981
	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEXI@Z ; std::vector<frame *,std::allocator<frame *> >::_Reserve
$LN3@push_back:
; Line 985
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN39@push_back
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR [eax], edx
; Line 996
	add	DWORD PTR [esi+4], 4
	pop	edi
	pop	esi
; Line 998
	pop	ebp
	ret	4
$LN4@push_back:
; Line 990
	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN1@push_back
; Line 991
	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@IAEXI@Z ; std::vector<frame *,std::allocator<frame *> >::_Reserve
$LN1@push_back:
; Line 995
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN39@push_back
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [eax], ecx
$LN39@push_back:
; Line 996
	add	DWORD PTR [esi+4], 4
	pop	edi
	pop	esi
; Line 998
	pop	ebp
	ret	4
?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z ENDP ; std::vector<frame *,std::allocator<frame *> >::push_back
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 928
	push	ebp
	mov	ebp, esp
	push	esi
; Line 930
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	eax, esi
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	3
$LL5@assign@3:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL5@assign@3
	sub	eax, edi
	push	eax
	push	esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	edi
	pop	esi
; Line 931
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?addChild@frame@@QAEXPAV1@@Z			; frame::addChild
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_c$ = 8							; size = 4
?addChild@frame@@QAEXPAV1@@Z PROC			; frame::addChild
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\ui.cpp
; Line 19
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 20
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR [esi+4]
	call	?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z ; std::vector<frame *,std::allocator<frame *> >::push_back
; Line 21
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+36], esi
	pop	esi
; Line 22
	pop	ebp
	ret	4
?addChild@frame@@QAEXPAV1@@Z ENDP			; frame::addChild
_TEXT	ENDS
PUBLIC	?minimizeWindow@@YAXPAVframe@@H@Z		; minimizeWindow
; Function compile flags: /Ogtp
_TEXT	SEGMENT
$T119394 = 8						; size = 4
_button$ = 8						; size = 4
_id$ = 12						; size = 4
?minimizeWindow@@YAXPAVframe@@H@Z PROC			; minimizeWindow
; Line 827
	push	ebp
	mov	ebp, esp
	push	esi
; Line 828
	mov	esi, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [esi+36]
	mov	BYTE PTR [eax+68], 1
; Line 829
	mov	eax, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], edx
; Line 830
	mov	eax, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+24], edx
; Line 831
	mov	eax, DWORD PTR [esi+36]
	mov	BYTE PTR [eax+46], 1
; Line 832
	mov	ecx, DWORD PTR [esi+36]
	mov	edx, DWORD PTR [ecx+64]
	mov	BYTE PTR [edx+46], 0
; Line 833
	mov	eax, DWORD PTR [esi+36]
	cmp	BYTE PTR [eax+60], 0
	jne	SHORT $LN1@minimizeWi
; Line 835
	mov	ecx, DWORD PTR [eax+64]
	push	edi
	mov	edi, DWORD PTR [eax+36]
	lea	edx, DWORD PTR $T119394[ebp]
	mov	DWORD PTR $T119394[ebp], ecx
	push	edx
	lea	ecx, DWORD PTR [edi+4]
	call	?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z ; std::vector<frame *,std::allocator<frame *> >::push_back
	mov	eax, DWORD PTR $T119394[ebp]
	mov	DWORD PTR [eax+36], edi
; Line 836
	mov	ecx, DWORD PTR [esi+36]
	mov	BYTE PTR [ecx+60], 1
	pop	edi
$LN1@minimizeWi:
	pop	esi
; Line 838
	pop	ebp
	ret	0
?minimizeWindow@@YAXPAVframe@@H@Z ENDP			; minimizeWindow
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 592
	push	ebp
	mov	ebp, esp
; Line 594
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	esi
	mov	esi, ecx
	mov	eax, edx
	push	edi
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	BYTE PTR [esi], 0
	lea	edi, DWORD PTR [eax+1]
$LL31@basic_stri@2:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL31@basic_stri@2
	sub	eax, edi
	push	eax
	push	edx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	edi
; Line 595
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??_7window@@6B@					; window::`vftable'
PUBLIC	??0window@@QAE@MMMM@Z				; window::window
PUBLIC	??_R4window@@6B@				; window::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVwindow@@@8				; window `RTTI Type Descriptor'
PUBLIC	??_R3window@@8					; window::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2window@@8					; window::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@window@@8				; window::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; TextureManager::add
EXTRN	?video@@3VVideo@@A:BYTE				; video
;	COMDAT ??_R1A@?0A@EA@window@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@window@@8 DD FLAT:??_R0?AVwindow@@@8	; window::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3window@@8
rdata$r	ENDS
;	COMDAT ??_R2window@@8
rdata$r	SEGMENT
??_R2window@@8 DD FLAT:??_R1A@?0A@EA@window@@8		; window::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@frame@@8
rdata$r	ENDS
;	COMDAT ??_R3window@@8
rdata$r	SEGMENT
??_R3window@@8 DD 00H					; window::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2window@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVwindow@@@8
_DATA	SEGMENT
??_R0?AVwindow@@@8 DD FLAT:??_7type_info@@6B@		; window `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVwindow@@', 00H
_DATA	ENDS
;	COMDAT ??_R4window@@6B@
rdata$r	SEGMENT
??_R4window@@6B@ DD 00H					; window::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVwindow@@@8
	DD	FLAT:??_R3window@@8
rdata$r	ENDS
;	COMDAT ??_7window@@6B@
CONST	SEGMENT
??_7window@@6B@ DD FLAT:??_R4window@@6B@		; window::`vftable'
	DD	FLAT:?render@window@@UAEXXZ
	DD	FLAT:?processLeftClick@window@@UAEPAVframe@@MM@Z
	DD	FLAT:?processLeftDrag@frame@@UAE_NMMMM@Z
	DD	FLAT:?processUnclick@frame@@UAEXXZ
	DD	FLAT:?processRightClick@frame@@UAE_NMM@Z
	DD	FLAT:?processKey@frame@@UAE_ND_N00@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0window@@QAE@MMMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0window@@QAE@MMMM@Z$0
__ehfuncinfo$??0window@@QAE@MMMM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0window@@QAE@MMMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T119470 = 8						; size = 4
_xPos$ = 8						; size = 4
_yPos$ = 12						; size = 4
_w$ = 16						; size = 4
_h$ = 20						; size = 4
??0window@@QAE@MMMM@Z PROC				; window::window
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\ui.cpp
; Line 74
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0window@@QAE@MMMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	xor	eax, eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+36], eax
; Line 79
	mov	ecx, DWORD PTR _xPos$[ebp]
; Line 80
	mov	edx, DWORD PTR _yPos$[ebp]
	mov	DWORD PTR [esi+20], ecx
; Line 81
	mov	ecx, DWORD PTR _w$[ebp]
; Line 83
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR [esi+24], edx
	mov	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [esi+28], ecx
	mov	ecx, esp
	mov	DWORD PTR $T119470[ebp], esp
	mov	DWORD PTR [esi], OFFSET ??_7window@@6B@
	mov	WORD PTR [esi+45], ax
	mov	BYTE PTR [esi+47], al
	mov	BYTE PTR [esi+44], 1
	mov	DWORD PTR [esi+32], edx
	push	40					; 00000028H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], eax
	push	OFFSET $SG106489
	mov	DWORD PTR __$EHRec$[ebp+8], eax
	mov	BYTE PTR [ecx], al
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
	mov	DWORD PTR [esi+52], eax
; Line 84
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0window@@QAE@MMMM@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1frame@@QAE@XZ
__ehhandler$??0window@@QAE@MMMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0window@@QAE@MMMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0window@@QAE@MMMM@Z ENDP				; window::window
PUBLIC	??_7slider@@6B@					; slider::`vftable'
PUBLIC	??0slider@@QAE@MMMMM@Z				; slider::slider
PUBLIC	??_R4slider@@6B@				; slider::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVslider@@@8				; slider `RTTI Type Descriptor'
PUBLIC	??_R3slider@@8					; slider::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2slider@@8					; slider::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@slider@@8				; slider::`RTTI Base Class Descriptor at (0,-1,0,64)'
;	COMDAT ??_R1A@?0A@EA@slider@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@slider@@8 DD FLAT:??_R0?AVslider@@@8	; slider::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3slider@@8
rdata$r	ENDS
;	COMDAT ??_R2slider@@8
rdata$r	SEGMENT
??_R2slider@@8 DD FLAT:??_R1A@?0A@EA@slider@@8		; slider::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@frame@@8
rdata$r	ENDS
;	COMDAT ??_R3slider@@8
rdata$r	SEGMENT
??_R3slider@@8 DD 00H					; slider::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2slider@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVslider@@@8
_DATA	SEGMENT
??_R0?AVslider@@@8 DD FLAT:??_7type_info@@6B@		; slider `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVslider@@', 00H
_DATA	ENDS
;	COMDAT ??_R4slider@@6B@
rdata$r	SEGMENT
??_R4slider@@6B@ DD 00H					; slider::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVslider@@@8
	DD	FLAT:??_R3slider@@8
rdata$r	ENDS
;	COMDAT ??_7slider@@6B@
CONST	SEGMENT
??_7slider@@6B@ DD FLAT:??_R4slider@@6B@		; slider::`vftable'
	DD	FLAT:?render@slider@@UAEXXZ
	DD	FLAT:?processLeftClick@slider@@UAEPAVframe@@MM@Z
	DD	FLAT:?processLeftDrag@slider@@UAE_NMMMM@Z
	DD	FLAT:?processUnclick@frame@@UAEXXZ
	DD	FLAT:?processRightClick@frame@@UAE_NMM@Z
	DD	FLAT:?processKey@frame@@UAE_ND_N00@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0slider@@QAE@MMMMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0slider@@QAE@MMMMM@Z$0
__ehfuncinfo$??0slider@@QAE@MMMMM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0slider@@QAE@MMMMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T119622 = 8						; size = 4
$T119621 = 8						; size = 4
_xPos$ = 8						; size = 4
_yPos$ = 12						; size = 4
_w$ = 16						; size = 4
_s$ = 20						; size = 4
_o$ = 24						; size = 4
??0slider@@QAE@MMMMM@Z PROC				; slider::slider
; _this$ = ecx
; File c:\programovani\wow editor\test\src\editor\ui.cpp
; Line 237
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0slider@@QAE@MMMMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ebx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	xor	ebx, ebx
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+12], ebx
	mov	DWORD PTR [esi+36], ebx
; Line 243
	mov	ecx, DWORD PTR _yPos$[ebp]
; Line 244
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [esi+24], ecx
; Line 249
	mov	ecx, DWORD PTR _o$[ebp]
	mov	al, 1
	mov	BYTE PTR [esi+47], al
	mov	BYTE PTR [esi+44], al
	mov	eax, DWORD PTR _xPos$[ebp]
; Line 251
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR [esi+20], eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [esi+68], ecx
	mov	ecx, esp
	mov	DWORD PTR $T119621[ebp], esp
	mov	DWORD PTR [esi], OFFSET ??_7slider@@6B@
	mov	WORD PTR [esi+45], bx
	mov	DWORD PTR [esi+28], edx
	mov	DWORD PTR [esi+32], 1092616192		; 41200000H
	mov	DWORD PTR [esi+60], 1056964608		; 3f000000H
	mov	DWORD PTR [esi+72], ebx
	mov	DWORD PTR [esi+64], eax
	mov	BYTE PTR [esi+76], bl
	push	41					; 00000029H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106519
	mov	DWORD PTR __$EHRec$[ebp+8], ebx
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
; Line 252
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T119622[ebp], esp
	mov	DWORD PTR [esi+52], eax
	push	52					; 00000034H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106521
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
	mov	DWORD PTR [esi+56], eax
; Line 253
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0slider@@QAE@MMMMM@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1frame@@QAE@XZ
__ehhandler$??0slider@@QAE@MMMMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0slider@@QAE@MMMMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0slider@@QAE@MMMMM@Z ENDP				; slider::slider
PUBLIC	__real@4042000000000000
PUBLIC	??_7minWindowUI@@6B@				; minWindowUI::`vftable'
PUBLIC	??0minWindowUI@@QAE@MMMMPBD@Z			; minWindowUI::minWindowUI
PUBLIC	??_R4minWindowUI@@6B@				; minWindowUI::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVminWindowUI@@@8				; minWindowUI `RTTI Type Descriptor'
PUBLIC	??_R3minWindowUI@@8				; minWindowUI::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2minWindowUI@@8				; minWindowUI::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@minWindowUI@@8			; minWindowUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	?arial16@@3Ufont_data@freetype@@A:BYTE		; arial16
;	COMDAT ??_R1A@?0A@EA@minWindowUI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@minWindowUI@@8 DD FLAT:??_R0?AVminWindowUI@@@8 ; minWindowUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3minWindowUI@@8
rdata$r	ENDS
;	COMDAT ??_R2minWindowUI@@8
rdata$r	SEGMENT
??_R2minWindowUI@@8 DD FLAT:??_R1A@?0A@EA@minWindowUI@@8 ; minWindowUI::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@window@@8
	DD	FLAT:??_R1A@?0A@EA@frame@@8
rdata$r	ENDS
;	COMDAT ??_R3minWindowUI@@8
rdata$r	SEGMENT
??_R3minWindowUI@@8 DD 00H				; minWindowUI::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2minWindowUI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVminWindowUI@@@8
_DATA	SEGMENT
??_R0?AVminWindowUI@@@8 DD FLAT:??_7type_info@@6B@	; minWindowUI `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVminWindowUI@@', 00H
_DATA	ENDS
;	COMDAT ??_R4minWindowUI@@6B@
rdata$r	SEGMENT
??_R4minWindowUI@@6B@ DD 00H				; minWindowUI::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVminWindowUI@@@8
	DD	FLAT:??_R3minWindowUI@@8
rdata$r	ENDS
;	COMDAT __real@4042000000000000
CONST	SEGMENT
__real@4042000000000000 DQ 04042000000000000r	; 36
CONST	ENDS
;	COMDAT ??_7minWindowUI@@6B@
CONST	SEGMENT
??_7minWindowUI@@6B@ DD FLAT:??_R4minWindowUI@@6B@	; minWindowUI::`vftable'
	DD	FLAT:?render@minWindowUI@@UAEXXZ
	DD	FLAT:?processLeftClick@window@@UAEPAVframe@@MM@Z
	DD	FLAT:?processLeftDrag@frame@@UAE_NMMMM@Z
	DD	FLAT:?processUnclick@frame@@UAEXXZ
	DD	FLAT:?processRightClick@frame@@UAE_NMM@Z
	DD	FLAT:?processKey@frame@@UAE_ND_N00@Z
CONST	ENDS
xdata$x	SEGMENT
__ehfuncinfo$??0minWindowUI@@QAE@MMMMPBD@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0minWindowUI@@QAE@MMMMPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0minWindowUI@@QAE@MMMMPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0minWindowUI@@QAE@MMMMPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0minWindowUI@@QAE@MMMMPBD@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??0minWindowUI@@QAE@MMMMPBD@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$??0minWindowUI@@QAE@MMMMPBD@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$??0minWindowUI@@QAE@MMMMPBD@Z$8
; Function compile flags: /Ogtp
xdata$x	ENDS
_TEXT	SEGMENT
$T119888 = -20						; size = 4
$T119887 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_xPos$ = 8						; size = 4
$T119902 = 12						; size = 4
$T119901 = 12						; size = 4
_yPos$ = 12						; size = 4
tv1176 = 16						; size = 4
tv1166 = 16						; size = 4
tv1164 = 16						; size = 4
tv1153 = 16						; size = 4
tv1151 = 16						; size = 4
$T120250 = 16						; size = 4
$T120261 = 16						; size = 4
$T119900 = 16						; size = 4
$T119896 = 16						; size = 4
_w$ = 16						; size = 4
tv1187 = 20						; size = 4
$T120031 = 20						; size = 4
$T119892 = 20						; size = 4
$T119886 = 20						; size = 4
$T119880 = 20						; size = 4
_h$ = 20						; size = 4
tv1139 = 24						; size = 4
tv1137 = 24						; size = 4
$T120481 = 24						; size = 4
_title$ = 24						; size = 4
??0minWindowUI@@QAE@MMMMPBD@Z PROC			; minWindowUI::minWindowUI
; _this$ = ecx
; Line 850
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0minWindowUI@@QAE@MMMMPBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR _yPos$[ebp]
	sub	esp, 16					; 00000010H
	mov	DWORD PTR [esp+12], eax
	mov	eax, DWORD PTR _xPos$[ebp]
	mov	DWORD PTR [esp+8], ecx
	mov	DWORD PTR [esp+4], edx
	mov	ecx, esi
	mov	DWORD PTR [esp], eax
	call	??0window@@QAE@MMMM@Z			; window::window
; Line 851
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T119880[ebp], esp
	xor	ebx, ebx
	mov	DWORD PTR [esi], OFFSET ??_7minWindowUI@@6B@
	push	40					; 00000028H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106783
	mov	DWORD PTR __$EHRec$[ebp+8], ebx
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
; Line 855
	push	336					; 00000150H
	mov	DWORD PTR [esi+56], eax
	mov	BYTE PTR [esi+68], bl
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $LN3@minWindowU
	fld	DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _title$[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	push	ecx
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1073741824		; 40000000H
	fstp	DWORD PTR tv1187[ebp]
	mov	ecx, eax
	fld	DWORD PTR tv1187[ebp]
	fstp	DWORD PTR [esp]
	call	??0textUI@@QAE@MMPBD@Z			; textUI::textUI
	jmp	SHORT $LN4@minWindowU
$LN3@minWindowU:
	xor	eax, eax
$LN4@minWindowU:
; Line 859
	lea	edx, DWORD PTR $T120031[ebp]
	lea	ecx, DWORD PTR [esi+4]
	push	edx
	mov	DWORD PTR [eax+52], OFFSET ?arial16@@3Ufont_data@freetype@@A ; arial16
	mov	DWORD PTR [eax+312], 1
	mov	DWORD PTR $T120031[ebp], eax
	call	?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z ; std::vector<frame *,std::allocator<frame *> >::push_back
	mov	eax, DWORD PTR $T120031[ebp]
; Line 862
	push	76					; 0000004cH
	mov	DWORD PTR [eax+36], esi
	call	??2@YAPAXI@Z				; operator new
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR $T119886[ebp], edi
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	edi, ebx
	je	$LN5@minWindowU
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T119887[ebp], esp
	push	41					; 00000029H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106796
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
	push	eax
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T119888[ebp], esp
	push	39					; 00000027H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106797
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
	fld	DWORD PTR _w$[ebp]
	fsub	QWORD PTR __real@4030000000000000
	push	eax
	sub	esp, 16					; 00000010H
	mov	DWORD PTR [esp+12], 1098907648		; 41800000H
	fsub	QWORD PTR __real@4008000000000000
	mov	DWORD PTR [esp+8], 1098907648		; 41800000H
	mov	DWORD PTR [esp+4], 1077936128		; 40400000H
	mov	ecx, edi
	fstp	DWORD PTR tv1176[ebp]
	fld	DWORD PTR tv1176[ebp]
	fstp	DWORD PTR [esp]
	call	??0buttonUI@@QAE@MMMMII@Z		; buttonUI::buttonUI
	jmp	SHORT $LN6@minWindowU
$LN5@minWindowU:
	xor	eax, eax
$LN6@minWindowU:
; Line 865
	lea	ecx, DWORD PTR $T120250[ebp]
	push	ecx
	lea	ecx, DWORD PTR [esi+4]
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	mov	DWORD PTR [eax+60], OFFSET ?minimizeWindow@@YAXPAVframe@@H@Z ; minimizeWindow
	mov	DWORD PTR [eax+64], ebx
	mov	DWORD PTR $T120250[ebp], eax
	call	?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z ; std::vector<frame *,std::allocator<frame *> >::push_back
	mov	edx, DWORD PTR $T120250[ebp]
; Line 867
	push	56					; 00000038H
	mov	DWORD PTR [edx+36], esi
	call	??2@YAPAXI@Z				; operator new
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR $T119892[ebp], edi
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	edi, ebx
	je	SHORT $LN7@minWindowU
	mov	eax, DWORD PTR _title$[ebp]
	push	ecx
	mov	DWORD PTR [esp], 1101004800		; 41a00000H
	push	eax
	push	OFFSET ?arial16@@3Ufont_data@freetype@@A ; arial16
	call	?width@freetype@@YAHABUfont_data@1@PBDZZ ; freetype::width
	mov	ecx, DWORD PTR _yPos$[ebp]
	mov	edx, DWORD PTR _xPos$[ebp]
	mov	DWORD PTR tv1166[ebp], eax
	fild	DWORD PTR tv1166[ebp]
	fadd	QWORD PTR __real@4042000000000000
	fstp	DWORD PTR tv1164[ebp]
	fld	DWORD PTR tv1164[ebp]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], ecx
	push	ecx
	mov	ecx, edi
	mov	DWORD PTR [esp], edx
	call	??0window@@QAE@MMMM@Z			; window::window
	jmp	SHORT $LN8@minWindowU
$LN7@minWindowU:
	xor	eax, eax
$LN8@minWindowU:
	mov	DWORD PTR [esi+64], eax
; Line 870
	push	336					; 00000150H
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	mov	BYTE PTR [eax+45], 1
	call	??2@YAPAXI@Z				; operator new
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR $T119896[ebp], edi
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	edi, ebx
	je	SHORT $LN9@minWindowU
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	push	ecx
	mov	DWORD PTR [esp], 1073741824		; 40000000H
	push	eax
	push	OFFSET ?arial16@@3Ufont_data@freetype@@A ; arial16
	call	?width@freetype@@YAHABUfont_data@1@PBDZZ ; freetype::width
	mov	DWORD PTR tv1153[ebp], eax
	fild	DWORD PTR tv1153[ebp]
	add	esp, 4
	mov	ecx, edi
	fmul	QWORD PTR __real@3fe0000000000000
	fadd	QWORD PTR __real@4030000000000000
	fstp	DWORD PTR tv1151[ebp]
	fld	DWORD PTR tv1151[ebp]
	fstp	DWORD PTR [esp]
	call	??0textUI@@QAE@MMPBD@Z			; textUI::textUI
	jmp	SHORT $LN10@minWindowU
$LN9@minWindowU:
	xor	eax, eax
$LN10@minWindowU:
; Line 871
	mov	DWORD PTR [eax+52], OFFSET ?arial16@@3Ufont_data@freetype@@A ; arial16
; Line 872
	mov	DWORD PTR [eax+312], 1
; Line 873
	mov	edi, DWORD PTR [esi+64]
	mov	DWORD PTR $T120261[ebp], eax
	lea	eax, DWORD PTR $T120261[ebp]
	push	eax
	lea	ecx, DWORD PTR [edi+4]
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	call	?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z ; std::vector<frame *,std::allocator<frame *> >::push_back
	mov	ecx, DWORD PTR $T120261[ebp]
; Line 875
	push	76					; 0000004cH
	mov	DWORD PTR [ecx+36], edi
	call	??2@YAPAXI@Z				; operator new
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR $T119900[ebp], edi
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	cmp	edi, ebx
	je	$LN11@minWindowU
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T119901[ebp], esp
	push	40					; 00000028H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106812
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
	push	eax
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T119902[ebp], esp
	push	38					; 00000026H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106813
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
	mov	edx, DWORD PTR _title$[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [esp+8], 1098907648		; 41800000H
	mov	DWORD PTR [esp+4], 1098907648		; 41800000H
	mov	DWORD PTR [esp], 1077936128		; 40400000H
	push	edx
	push	OFFSET ?arial16@@3Ufont_data@freetype@@A ; arial16
	call	?width@freetype@@YAHABUfont_data@1@PBDZZ ; freetype::width
	mov	DWORD PTR tv1139[ebp], eax
	fild	DWORD PTR tv1139[ebp]
	add	esp, 4
	mov	ecx, edi
	fadd	QWORD PTR __real@4042000000000000
	fsub	QWORD PTR __real@4030000000000000
	fsub	QWORD PTR __real@4008000000000000
	fstp	DWORD PTR tv1137[ebp]
	fld	DWORD PTR tv1137[ebp]
	fstp	DWORD PTR [esp]
	call	??0buttonUI@@QAE@MMMMII@Z		; buttonUI::buttonUI
	jmp	SHORT $LN12@minWindowU
$LN11@minWindowU:
	xor	eax, eax
$LN12@minWindowU:
; Line 876
	mov	DWORD PTR [eax+60], OFFSET ?maximizeWindow@@YAXPAVframe@@H@Z ; maximizeWindow
	mov	DWORD PTR [eax+64], ebx
; Line 877
	mov	edi, DWORD PTR [esi+64]
	mov	DWORD PTR $T120481[ebp], eax
	lea	eax, DWORD PTR $T120481[ebp]
	push	eax
	lea	ecx, DWORD PTR [edi+4]
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	call	?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z ; std::vector<frame *,std::allocator<frame *> >::push_back
	mov	ecx, DWORD PTR $T120481[ebp]
	mov	DWORD PTR [ecx+36], edi
; Line 879
	mov	edx, DWORD PTR [esi+64]
	mov	DWORD PTR [edx+40], esi
; Line 881
	mov	BYTE PTR [esi+60], bl
; Line 882
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0minWindowUI@@QAE@MMMMPBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1window@@QAE@XZ
__unwindfunclet$??0minWindowUI@@QAE@MMMMPBD@Z$3:
	mov	eax, DWORD PTR $T119886[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0minWindowUI@@QAE@MMMMPBD@Z$6:
	mov	eax, DWORD PTR $T119892[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0minWindowUI@@QAE@MMMMPBD@Z$7:
	mov	eax, DWORD PTR $T119896[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0minWindowUI@@QAE@MMMMPBD@Z$8:
	mov	eax, DWORD PTR $T119900[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0minWindowUI@@QAE@MMMMPBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0minWindowUI@@QAE@MMMMPBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0minWindowUI@@QAE@MMMMPBD@Z ENDP			; minWindowUI::minWindowUI
PUBLIC	__real@4040000000000000
PUBLIC	??_7closeWindowUI@@6B@				; closeWindowUI::`vftable'
PUBLIC	??0closeWindowUI@@QAE@MMMMPBD@Z			; closeWindowUI::closeWindowUI
PUBLIC	??_R4closeWindowUI@@6B@				; closeWindowUI::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVcloseWindowUI@@@8			; closeWindowUI `RTTI Type Descriptor'
PUBLIC	??_R3closeWindowUI@@8				; closeWindowUI::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2closeWindowUI@@8				; closeWindowUI::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@closeWindowUI@@8			; closeWindowUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
;	COMDAT ??_R1A@?0A@EA@closeWindowUI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@closeWindowUI@@8 DD FLAT:??_R0?AVcloseWindowUI@@@8 ; closeWindowUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3closeWindowUI@@8
rdata$r	ENDS
;	COMDAT ??_R2closeWindowUI@@8
rdata$r	SEGMENT
??_R2closeWindowUI@@8 DD FLAT:??_R1A@?0A@EA@closeWindowUI@@8 ; closeWindowUI::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@window@@8
	DD	FLAT:??_R1A@?0A@EA@frame@@8
rdata$r	ENDS
;	COMDAT ??_R3closeWindowUI@@8
rdata$r	SEGMENT
??_R3closeWindowUI@@8 DD 00H				; closeWindowUI::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2closeWindowUI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVcloseWindowUI@@@8
_DATA	SEGMENT
??_R0?AVcloseWindowUI@@@8 DD FLAT:??_7type_info@@6B@	; closeWindowUI `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVcloseWindowUI@@', 00H
_DATA	ENDS
;	COMDAT ??_R4closeWindowUI@@6B@
rdata$r	SEGMENT
??_R4closeWindowUI@@6B@ DD 00H				; closeWindowUI::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVcloseWindowUI@@@8
	DD	FLAT:??_R3closeWindowUI@@8
rdata$r	ENDS
;	COMDAT __real@4040000000000000
CONST	SEGMENT
__real@4040000000000000 DQ 04040000000000000r	; 32
CONST	ENDS
;	COMDAT ??_7closeWindowUI@@6B@
CONST	SEGMENT
??_7closeWindowUI@@6B@ DD FLAT:??_R4closeWindowUI@@6B@	; closeWindowUI::`vftable'
	DD	FLAT:?render@window@@UAEXXZ
	DD	FLAT:?processLeftClick@window@@UAEPAVframe@@MM@Z
	DD	FLAT:?processLeftDrag@frame@@UAE_NMMMM@Z
	DD	FLAT:?processUnclick@frame@@UAEXXZ
	DD	FLAT:?processRightClick@frame@@UAE_NMM@Z
	DD	FLAT:?processKey@frame@@UAE_ND_N00@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0closeWindowUI@@QAE@MMMMPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0closeWindowUI@@QAE@MMMMPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0closeWindowUI@@QAE@MMMMPBD@Z$3
__ehfuncinfo$??0closeWindowUI@@QAE@MMMMPBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0closeWindowUI@@QAE@MMMMPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_xPos$ = 8						; size = 4
$T120497 = 12						; size = 4
$T120496 = 12						; size = 4
_yPos$ = 12						; size = 4
tv673 = 16						; size = 4
$T120840 = 16						; size = 4
_w$ = 16						; size = 4
tv684 = 20						; size = 4
$T120621 = 20						; size = 4
$T120495 = 20						; size = 4
$T120489 = 20						; size = 4
_h$ = 20						; size = 4
_title$ = 24						; size = 4
??0closeWindowUI@@QAE@MMMMPBD@Z PROC			; closeWindowUI::closeWindowUI
; _this$ = ecx
; Line 1015
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0closeWindowUI@@QAE@MMMMPBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR _yPos$[ebp]
	sub	esp, 16					; 00000010H
	mov	DWORD PTR [esp+12], eax
	mov	eax, DWORD PTR _xPos$[ebp]
	mov	DWORD PTR [esp+8], ecx
	mov	DWORD PTR [esp+4], edx
	mov	ecx, esi
	mov	DWORD PTR [esp], eax
	call	??0window@@QAE@MMMM@Z			; window::window
; Line 1016
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T120489[ebp], esp
	xor	ebx, ebx
	mov	DWORD PTR [esi], OFFSET ??_7closeWindowUI@@6B@
	push	40					; 00000028H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106837
	mov	DWORD PTR __$EHRec$[ebp+8], ebx
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
; Line 1018
	push	336					; 00000150H
	mov	DWORD PTR [esi+56], eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $LN3@closeWindo
	fld	DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _title$[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	push	ecx
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1073741824		; 40000000H
	fstp	DWORD PTR tv684[ebp]
	mov	ecx, eax
	fld	DWORD PTR tv684[ebp]
	fstp	DWORD PTR [esp]
	call	??0textUI@@QAE@MMPBD@Z			; textUI::textUI
	jmp	SHORT $LN4@closeWindo
$LN3@closeWindo:
	xor	eax, eax
$LN4@closeWindo:
; Line 1022
	lea	edx, DWORD PTR $T120621[ebp]
	lea	ecx, DWORD PTR [esi+4]
	push	edx
	mov	DWORD PTR [eax+52], OFFSET ?arial16@@3Ufont_data@freetype@@A ; arial16
	mov	DWORD PTR [eax+312], 1
	mov	DWORD PTR $T120621[ebp], eax
	call	?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z ; std::vector<frame *,std::allocator<frame *> >::push_back
	mov	eax, DWORD PTR $T120621[ebp]
; Line 1025
	push	76					; 0000004cH
	mov	DWORD PTR [eax+36], esi
	call	??2@YAPAXI@Z				; operator new
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR $T120495[ebp], edi
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	edi, ebx
	je	$LN5@closeWindo
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T120496[ebp], esp
	push	50					; 00000032H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106850
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
	push	eax
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T120497[ebp], esp
	push	48					; 00000030H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106851
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
	fld	DWORD PTR _w$[ebp]
	fsub	QWORD PTR __real@4040000000000000
	push	eax
	sub	esp, 16					; 00000010H
	mov	DWORD PTR [esp+12], 1107296256		; 42000000H
	fadd	QWORD PTR __real@3ff0000000000000
	mov	DWORD PTR [esp+8], 1107296256		; 42000000H
	mov	DWORD PTR [esp+4], -1069547520		; c0400000H
	mov	ecx, edi
	fstp	DWORD PTR tv673[ebp]
	fld	DWORD PTR tv673[ebp]
	fstp	DWORD PTR [esp]
	call	??0buttonUI@@QAE@MMMMII@Z		; buttonUI::buttonUI
	jmp	SHORT $LN6@closeWindo
$LN5@closeWindo:
	xor	eax, eax
$LN6@closeWindo:
; Line 1028
	lea	ecx, DWORD PTR $T120840[ebp]
	push	ecx
	lea	ecx, DWORD PTR [esi+4]
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	mov	DWORD PTR [eax+60], OFFSET ?closeWindow@@YAXPAVframe@@H@Z ; closeWindow
	mov	DWORD PTR [eax+64], ebx
	mov	DWORD PTR $T120840[ebp], eax
	call	?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z ; std::vector<frame *,std::allocator<frame *> >::push_back
	mov	edx, DWORD PTR $T120840[ebp]
	mov	DWORD PTR [edx+36], esi
; Line 1029
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0closeWindowUI@@QAE@MMMMPBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1window@@QAE@XZ
__unwindfunclet$??0closeWindowUI@@QAE@MMMMPBD@Z$3:
	mov	eax, DWORD PTR $T120495[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0closeWindowUI@@QAE@MMMMPBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0closeWindowUI@@QAE@MMMMPBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0closeWindowUI@@QAE@MMMMPBD@Z ENDP			; closeWindowUI::closeWindowUI
PUBLIC	??_7checkboxUI@@6B@				; checkboxUI::`vftable'
PUBLIC	??0checkboxUI@@QAE@MMPBD@Z			; checkboxUI::checkboxUI
PUBLIC	??_R4checkboxUI@@6B@				; checkboxUI::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVcheckboxUI@@@8				; checkboxUI `RTTI Type Descriptor'
PUBLIC	??_R3checkboxUI@@8				; checkboxUI::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2checkboxUI@@8				; checkboxUI::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@checkboxUI@@8			; checkboxUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	?arialn13@@3Ufont_data@freetype@@A:BYTE		; arialn13
;	COMDAT ??_R1A@?0A@EA@checkboxUI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@checkboxUI@@8 DD FLAT:??_R0?AVcheckboxUI@@@8 ; checkboxUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3checkboxUI@@8
rdata$r	ENDS
;	COMDAT ??_R2checkboxUI@@8
rdata$r	SEGMENT
??_R2checkboxUI@@8 DD FLAT:??_R1A@?0A@EA@checkboxUI@@8	; checkboxUI::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@frame@@8
rdata$r	ENDS
;	COMDAT ??_R3checkboxUI@@8
rdata$r	SEGMENT
??_R3checkboxUI@@8 DD 00H				; checkboxUI::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2checkboxUI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVcheckboxUI@@@8
_DATA	SEGMENT
??_R0?AVcheckboxUI@@@8 DD FLAT:??_7type_info@@6B@	; checkboxUI `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVcheckboxUI@@', 00H
_DATA	ENDS
;	COMDAT ??_R4checkboxUI@@6B@
rdata$r	SEGMENT
??_R4checkboxUI@@6B@ DD 00H				; checkboxUI::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVcheckboxUI@@@8
	DD	FLAT:??_R3checkboxUI@@8
rdata$r	ENDS
;	COMDAT ??_7checkboxUI@@6B@
CONST	SEGMENT
??_7checkboxUI@@6B@ DD FLAT:??_R4checkboxUI@@6B@	; checkboxUI::`vftable'
	DD	FLAT:?render@frame@@UAEXXZ
	DD	FLAT:?processLeftClick@checkboxUI@@UAEPAVframe@@MM@Z
	DD	FLAT:?processLeftDrag@frame@@UAE_NMMMM@Z
	DD	FLAT:?processUnclick@frame@@UAEXXZ
	DD	FLAT:?processRightClick@frame@@UAE_NMM@Z
	DD	FLAT:?processKey@frame@@UAE_ND_N00@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0checkboxUI@@QAE@MMPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0checkboxUI@@QAE@MMPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0checkboxUI@@QAE@MMPBD@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0checkboxUI@@QAE@MMPBD@Z$3
__ehfuncinfo$??0checkboxUI@@QAE@MMPBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0checkboxUI@@QAE@MMPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T121228 = 8						; size = 4
$T121066 = 8						; size = 4
$T121240 = 8						; size = 4
$T120854 = 8						; size = 4
$T120849 = 8						; size = 4
_xPos$ = 8						; size = 4
$T120855 = 12						; size = 4
$T120850 = 12						; size = 4
_yPos$ = 12						; size = 4
_t$ = 16						; size = 4
??0checkboxUI@@QAE@MMPBD@Z PROC				; checkboxUI::checkboxUI
; _this$ = ecx
; Line 1033
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0checkboxUI@@QAE@MMPBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	edi, ecx
	mov	DWORD PTR _this$[ebp], edi
	xor	ebx, ebx
	mov	DWORD PTR [edi+4], ebx
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+12], ebx
	mov	WORD PTR [edi+45], bx
	mov	BYTE PTR [edi+47], bl
	mov	DWORD PTR [edi+36], ebx
; Line 1034
	mov	eax, DWORD PTR _xPos$[ebp]
; Line 1035
	mov	ecx, DWORD PTR _yPos$[ebp]
	mov	DWORD PTR [edi+20], eax
; Line 1036
	mov	eax, 1106247680				; 41f00000H
; Line 1040
	push	68					; 00000044H
	mov	DWORD PTR __$EHRec$[ebp+8], ebx
	mov	DWORD PTR [edi], OFFSET ??_7checkboxUI@@6B@
	mov	DWORD PTR [edi+24], ecx
	mov	DWORD PTR [edi+28], eax
	mov	DWORD PTR [edi+32], eax
	mov	BYTE PTR [edi+64], bl
	call	??2@YAPAXI@Z				; operator new
	mov	esi, eax
	add	esp, 4
	mov	DWORD PTR $T120849[ebp], esi
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	esi, ebx
	je	SHORT $LN3@checkboxUI
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T120850[ebp], esp
	push	36					; 00000024H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106863
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+12], ebx
	mov	ecx, 1107296256				; 42000000H
	mov	WORD PTR [esi+45], bx
	mov	BYTE PTR [esi+47], bl
	mov	DWORD PTR [esi+36], ebx
	mov	DWORD PTR [esi], OFFSET ??_7textureUI@@6B@
	mov	DWORD PTR [esi+20], ebx
	mov	DWORD PTR [esi+24], ebx
	mov	DWORD PTR [esi+28], ecx
	mov	DWORD PTR [esi+32], ecx
	mov	DWORD PTR [esi+52], eax
	mov	BYTE PTR [esi+56], bl
	mov	DWORD PTR [esi+60], ebx
	mov	DWORD PTR [esi+64], ebx
	jmp	SHORT $LN4@checkboxUI
$LN3@checkboxUI:
	xor	esi, esi
$LN4@checkboxUI:
; Line 1041
	lea	edx, DWORD PTR $T121066[ebp]
	push	edx
	lea	ecx, DWORD PTR [edi+4]
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	mov	DWORD PTR [edi+52], esi
	mov	DWORD PTR $T121066[ebp], esi
	call	?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z ; std::vector<frame *,std::allocator<frame *> >::push_back
	mov	eax, DWORD PTR $T121066[ebp]
; Line 1042
	push	68					; 00000044H
	mov	DWORD PTR [eax+36], edi
	call	??2@YAPAXI@Z				; operator new
	mov	esi, eax
	add	esp, 4
	mov	DWORD PTR $T120854[ebp], esi
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	esi, ebx
	je	SHORT $LN5@checkboxUI
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T120855[ebp], esp
	push	39					; 00000027H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106869
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+12], ebx
	mov	ecx, 1107296256				; 42000000H
	mov	WORD PTR [esi+45], bx
	mov	BYTE PTR [esi+47], bl
	mov	DWORD PTR [esi+36], ebx
	mov	DWORD PTR [esi], OFFSET ??_7textureUI@@6B@
	mov	DWORD PTR [esi+20], ebx
	mov	DWORD PTR [esi+24], ebx
	mov	DWORD PTR [esi+28], ecx
	mov	DWORD PTR [esi+32], ecx
	mov	DWORD PTR [esi+52], eax
	mov	BYTE PTR [esi+56], bl
	mov	DWORD PTR [esi+60], ebx
	mov	DWORD PTR [esi+64], ebx
	jmp	SHORT $LN6@checkboxUI
$LN5@checkboxUI:
	xor	esi, esi
$LN6@checkboxUI:
	mov	DWORD PTR [edi+56], esi
; Line 1043
	mov	BYTE PTR [esi+46], 1
; Line 1044
	mov	ecx, DWORD PTR [edi+56]
	lea	edx, DWORD PTR $T121228[ebp]
	mov	DWORD PTR $T121228[ebp], ecx
	push	edx
	lea	ecx, DWORD PTR [edi+4]
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	call	?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z ; std::vector<frame *,std::allocator<frame *> >::push_back
	mov	eax, DWORD PTR $T121228[ebp]
; Line 1045
	push	336					; 00000150H
	mov	DWORD PTR [eax+36], edi
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $LN7@checkboxUI
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	sub	esp, 8
	mov	DWORD PTR [esp+4], 1090519040		; 41000000H
	mov	ecx, eax
	mov	DWORD PTR [esp], 1107296256		; 42000000H
	call	??0textUI@@QAE@MMPBD@Z			; textUI::textUI
	jmp	SHORT $LN8@checkboxUI
$LN7@checkboxUI:
	xor	eax, eax
$LN8@checkboxUI:
	mov	DWORD PTR [edi+60], eax
; Line 1046
	mov	DWORD PTR [eax+312], ebx
; Line 1047
	mov	edx, DWORD PTR [edi+60]
; Line 1048
	lea	ecx, DWORD PTR $T121240[ebp]
	mov	DWORD PTR [edx+52], OFFSET ?arialn13@@3Ufont_data@freetype@@A ; arialn13
	mov	eax, DWORD PTR [edi+60]
	push	ecx
	lea	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR $T121240[ebp], eax
	call	?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z ; std::vector<frame *,std::allocator<frame *> >::push_back
	mov	edx, DWORD PTR $T121240[ebp]
	mov	DWORD PTR [edx+36], edi
; Line 1050
	mov	DWORD PTR [edi+72], ebx
; Line 1051
	mov	eax, edi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0checkboxUI@@QAE@MMPBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1frame@@QAE@XZ
__unwindfunclet$??0checkboxUI@@QAE@MMPBD@Z$1:
	mov	eax, DWORD PTR $T120849[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0checkboxUI@@QAE@MMPBD@Z$3:
	mov	eax, DWORD PTR $T120854[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0checkboxUI@@QAE@MMPBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0checkboxUI@@QAE@MMPBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0checkboxUI@@QAE@MMPBD@Z ENDP				; checkboxUI::checkboxUI
PUBLIC	__real@4038000000000000
PUBLIC	??_7scrollbarUI@@6B@				; scrollbarUI::`vftable'
PUBLIC	??0scrollbarUI@@QAE@MMMH@Z			; scrollbarUI::scrollbarUI
PUBLIC	??_R4scrollbarUI@@6B@				; scrollbarUI::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVscrollbarUI@@@8				; scrollbarUI `RTTI Type Descriptor'
PUBLIC	??_R3scrollbarUI@@8				; scrollbarUI::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2scrollbarUI@@8				; scrollbarUI::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@scrollbarUI@@8			; scrollbarUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
;	COMDAT ??_R1A@?0A@EA@scrollbarUI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@scrollbarUI@@8 DD FLAT:??_R0?AVscrollbarUI@@@8 ; scrollbarUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3scrollbarUI@@8
rdata$r	ENDS
;	COMDAT ??_R2scrollbarUI@@8
rdata$r	SEGMENT
??_R2scrollbarUI@@8 DD FLAT:??_R1A@?0A@EA@scrollbarUI@@8 ; scrollbarUI::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@frame@@8
rdata$r	ENDS
;	COMDAT ??_R3scrollbarUI@@8
rdata$r	SEGMENT
??_R3scrollbarUI@@8 DD 00H				; scrollbarUI::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2scrollbarUI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVscrollbarUI@@@8
_DATA	SEGMENT
??_R0?AVscrollbarUI@@@8 DD FLAT:??_7type_info@@6B@	; scrollbarUI `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVscrollbarUI@@', 00H
_DATA	ENDS
;	COMDAT ??_R4scrollbarUI@@6B@
rdata$r	SEGMENT
??_R4scrollbarUI@@6B@ DD 00H				; scrollbarUI::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVscrollbarUI@@@8
	DD	FLAT:??_R3scrollbarUI@@8
rdata$r	ENDS
;	COMDAT __real@4038000000000000
CONST	SEGMENT
__real@4038000000000000 DQ 04038000000000000r	; 24
CONST	ENDS
;	COMDAT ??_7scrollbarUI@@6B@
CONST	SEGMENT
??_7scrollbarUI@@6B@ DD FLAT:??_R4scrollbarUI@@6B@	; scrollbarUI::`vftable'
	DD	FLAT:?render@frame@@UAEXXZ
	DD	FLAT:?processLeftClick@frame@@UAEPAV1@MM@Z
	DD	FLAT:?processLeftDrag@frame@@UAE_NMMMM@Z
	DD	FLAT:?processUnclick@frame@@UAEXXZ
	DD	FLAT:?processRightClick@frame@@UAE_NMM@Z
	DD	FLAT:?processKey@frame@@UAE_ND_N00@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0scrollbarUI@@QAE@MMMH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0scrollbarUI@@QAE@MMMH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0scrollbarUI@@QAE@MMMH@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0scrollbarUI@@QAE@MMMH@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$??0scrollbarUI@@QAE@MMMH@Z$7
__ehfuncinfo$??0scrollbarUI@@QAE@MMMH@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0scrollbarUI@@QAE@MMMH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv1267 = 8						; size = 4
$T121914 = 8						; size = 4
$T121748 = 8						; size = 4
$T121528 = 8						; size = 4
$T121259 = 8						; size = 4
$T121255 = 8						; size = 4
$T121254 = 8						; size = 4
$T121247 = 8						; size = 4
_xpos$ = 8						; size = 4
$T121260 = 12						; size = 4
$T121253 = 12						; size = 4
$T121249 = 12						; size = 4
$T121248 = 12						; size = 4
_ypos$ = 12						; size = 4
_h$ = 16						; size = 4
_n$ = 20						; size = 4
??0scrollbarUI@@QAE@MMMH@Z PROC				; scrollbarUI::scrollbarUI
; _this$ = ecx
; Line 1121
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0scrollbarUI@@QAE@MMMH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	xor	ebx, ebx
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+12], ebx
	mov	WORD PTR [esi+45], bx
	mov	BYTE PTR [esi+47], bl
	mov	DWORD PTR [esi+36], ebx
; Line 1122
	mov	eax, DWORD PTR _xpos$[ebp]
; Line 1123
	mov	ecx, DWORD PTR _ypos$[ebp]
; Line 1125
	mov	edx, DWORD PTR _h$[ebp]
; Line 1126
	push	76					; 0000004cH
	mov	DWORD PTR __$EHRec$[ebp+8], ebx
	mov	DWORD PTR [esi], OFFSET ??_7scrollbarUI@@6B@
	mov	DWORD PTR [esi+20], eax
	mov	DWORD PTR [esi+24], ecx
	mov	DWORD PTR [esi+28], 1098907648		; 41800000H
	mov	DWORD PTR [esi+32], edx
	call	??2@YAPAXI@Z				; operator new
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR $T121247[ebp], edi
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	edi, ebx
	je	$LN3@scrollbarU
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T121248[ebp], esp
	push	54					; 00000036H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106920
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
	push	eax
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T121249[ebp], esp
	push	52					; 00000034H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106921
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
	push	eax
	sub	esp, 16					; 00000010H
	mov	DWORD PTR [esp+12], 1107296256		; 42000000H
	mov	DWORD PTR [esp+8], 1107296256		; 42000000H
	mov	DWORD PTR [esp+4], -1056964608		; c1000000H
	mov	ecx, edi
	mov	DWORD PTR [esp], -1061158912		; c0c00000H
	call	??0buttonUI@@QAE@MMMMII@Z		; buttonUI::buttonUI
	jmp	SHORT $LN4@scrollbarU
$LN3@scrollbarU:
	xor	eax, eax
$LN4@scrollbarU:
	mov	DWORD PTR [esi+52], eax
; Line 1128
	lea	ecx, DWORD PTR $T121528[ebp]
	mov	DWORD PTR [eax+60], OFFSET ?scrollbarProcessClick@@YAXPAVframe@@H@Z ; scrollbarProcessClick
	mov	DWORD PTR [eax+64], ebx
	mov	eax, DWORD PTR [esi+52]
	push	ecx
	lea	ecx, DWORD PTR [esi+4]
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	mov	DWORD PTR $T121528[ebp], eax
	call	?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z ; std::vector<frame *,std::allocator<frame *> >::push_back
	mov	edx, DWORD PTR $T121528[ebp]
; Line 1130
	push	76					; 0000004cH
	mov	DWORD PTR [edx+36], esi
	call	??2@YAPAXI@Z				; operator new
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR $T121253[ebp], edi
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	edi, ebx
	je	$LN5@scrollbarU
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T121254[ebp], esp
	push	56					; 00000038H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106928
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
	push	eax
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T121255[ebp], esp
	push	54					; 00000036H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106929
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
	fld	DWORD PTR [esi+32]
	fsub	QWORD PTR __real@4038000000000000
	push	eax
	sub	esp, 16					; 00000010H
	mov	DWORD PTR [esp+12], 1107296256		; 42000000H
	fstp	DWORD PTR tv1267[ebp]
	mov	DWORD PTR [esp+8], 1107296256		; 42000000H
	fld	DWORD PTR tv1267[ebp]
	mov	ecx, edi
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR [esp], -1061158912		; c0c00000H
	call	??0buttonUI@@QAE@MMMMII@Z		; buttonUI::buttonUI
	jmp	SHORT $LN6@scrollbarU
$LN5@scrollbarU:
	xor	eax, eax
$LN6@scrollbarU:
	mov	DWORD PTR [esi+56], eax
; Line 1132
	lea	ecx, DWORD PTR $T121748[ebp]
	mov	DWORD PTR [eax+60], OFFSET ?scrollbarProcessClick@@YAXPAVframe@@H@Z ; scrollbarProcessClick
	mov	DWORD PTR [eax+64], 1
	mov	eax, DWORD PTR [esi+56]
	push	ecx
	lea	ecx, DWORD PTR [esi+4]
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	mov	DWORD PTR $T121748[ebp], eax
	call	?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z ; std::vector<frame *,std::allocator<frame *> >::push_back
	mov	edx, DWORD PTR $T121748[ebp]
; Line 1133
	push	68					; 00000044H
	mov	DWORD PTR [edx+36], esi
	call	??2@YAPAXI@Z				; operator new
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR $T121259[ebp], edi
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	edi, ebx
	je	SHORT $LN7@scrollbarU
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T121260[ebp], esp
	push	39					; 00000027H
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], ebx
	push	OFFSET $SG106935
	mov	BYTE PTR [ecx], bl
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	ecx, OFFSET ?video@@3VVideo@@A+16
	call	?add@TextureManager@@UAEIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TextureManager::add
	mov	DWORD PTR [edi+4], ebx
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+12], ebx
	mov	ecx, 1107296256				; 42000000H
	mov	WORD PTR [edi+45], bx
	mov	BYTE PTR [edi+47], bl
	mov	DWORD PTR [edi+36], ebx
	mov	DWORD PTR [edi], OFFSET ??_7textureUI@@6B@
	mov	DWORD PTR [edi+20], -1061158912		; c0c00000H
	mov	DWORD PTR [edi+24], 1092616192		; 41200000H
	mov	DWORD PTR [edi+28], ecx
	mov	DWORD PTR [edi+32], ecx
	mov	DWORD PTR [edi+52], eax
	mov	BYTE PTR [edi+56], bl
	mov	DWORD PTR [edi+60], ebx
	mov	DWORD PTR [edi+64], ebx
	jmp	SHORT $LN8@scrollbarU
$LN7@scrollbarU:
	xor	edi, edi
$LN8@scrollbarU:
	mov	DWORD PTR [esi+60], edi
; Line 1135
	lea	ecx, DWORD PTR $T121914[ebp]
	mov	DWORD PTR [edi+60], OFFSET ?scrollbarProcessClick@@YAXPAVframe@@H@Z ; scrollbarProcessClick
	mov	DWORD PTR [edi+64], 2
	mov	eax, DWORD PTR [esi+60]
	push	ecx
	lea	ecx, DWORD PTR [esi+4]
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	mov	DWORD PTR $T121914[ebp], eax
	call	?push_back@?$vector@PAVframe@@V?$allocator@PAVframe@@@std@@@std@@QAEXABQAVframe@@@Z ; std::vector<frame *,std::allocator<frame *> >::push_back
	mov	edx, DWORD PTR $T121914[ebp]
; Line 1137
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+36], esi
	mov	DWORD PTR [esi+64], eax
	mov	DWORD PTR [esi+68], ebx
; Line 1138
	mov	DWORD PTR [esi+72], ebx
; Line 1139
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0scrollbarUI@@QAE@MMMH@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1frame@@QAE@XZ
__unwindfunclet$??0scrollbarUI@@QAE@MMMH@Z$1:
	mov	eax, DWORD PTR $T121247[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0scrollbarUI@@QAE@MMMH@Z$4:
	mov	eax, DWORD PTR $T121253[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0scrollbarUI@@QAE@MMMH@Z$7:
	mov	eax, DWORD PTR $T121259[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0scrollbarUI@@QAE@MMMH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0scrollbarUI@@QAE@MMMH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0scrollbarUI@@QAE@MMMH@Z ENDP				; scrollbarUI::scrollbarUI
END
