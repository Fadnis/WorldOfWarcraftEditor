; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\programovani\WoW Editor\Test\src\libmpq\huffman.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_table_1502A630 DB 0aH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	054H
	DB	016H
	DB	016H
	DB	0dH
	DB	0cH
	DB	08H
	DB	06H
	DB	05H
	DB	06H
	DB	05H
	DB	06H
	DB	03H
	DB	04H
	DB	04H
	DB	03H
	DB	05H
	DB	0eH
	DB	0bH
	DB	014H
	DB	013H
	DB	013H
	DB	09H
	DB	0bH
	DB	06H
	DB	05H
	DB	04H
	DB	03H
	DB	02H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	0dH
	DB	07H
	DB	09H
	DB	06H
	DB	06H
	DB	04H
	DB	03H
	DB	02H
	DB	04H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	09H
	DB	06H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	03H
	DB	02H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	02H
	DB	04H
	DB	08H
	DB	03H
	DB	04H
	DB	07H
	DB	09H
	DB	05H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	02H
	DB	02H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	06H
	DB	0aH
	DB	08H
	DB	08H
	DB	06H
	DB	07H
	DB	04H
	DB	03H
	DB	04H
	DB	04H
	DB	02H
	DB	02H
	DB	04H
	DB	02H
	DB	03H
	DB	03H
	DB	04H
	DB	03H
	DB	07H
	DB	07H
	DB	09H
	DB	06H
	DB	04H
	DB	03H
	DB	03H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	0aH
	DB	02H
	DB	02H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	06H
	DB	03H
	DB	05H
	DB	02H
	DB	03H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	03H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	04H
	DB	04H
	DB	04H
	DB	07H
	DB	09H
	DB	08H
	DB	0cH
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	03H
	DB	04H
	DB	01H
	DB	02H
	DB	04H
	DB	05H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	04H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	03H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	06H
	DB	04bH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	027H
	DB	00H
	DB	00H
	DB	023H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
	DB	06H
	DB	0eH
	DB	010H
	DB	04H
	DB	06H
	DB	08H
	DB	05H
	DB	04H
	DB	04H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	04H
	DB	02H
	DB	04H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
	DB	04H
	DB	01H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	02H
	DB	03H
	DB	01H
	DB	03H
	DB	06H
	DB	04H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	029H
	DB	07H
	DB	016H
	DB	012H
	DB	040H
	DB	0aH
	DB	0aH
	DB	011H
	DB	025H
	DB	01H
	DB	03H
	DB	017H
	DB	010H
	DB	026H
	DB	02aH
	DB	010H
	DB	01H
	DB	023H
	DB	023H
	DB	02fH
	DB	010H
	DB	06H
	DB	07H
	DB	02H
	DB	09H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0bH
	DB	07H
	DB	05H
	DB	0bH
	DB	02H
	DB	02H
	DB	02H
	DB	06H
	DB	02H
	DB	02H
	DB	01H
	DB	04H
	DB	02H
	DB	01H
	DB	03H
	DB	09H
	DB	01H
	DB	01H
	DB	01H
	DB	03H
	DB	04H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	05H
	DB	01H
	DB	01H
	DB	01H
	DB	0dH
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	03H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	0aH
	DB	04H
	DB	02H
	DB	01H
	DB	06H
	DB	03H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	03H
	DB	01H
	DB	01H
	DB	01H
	DB	05H
	DB	02H
	DB	03H
	DB	04H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	01H
	DB	02H
	DB	05H
	DB	01H
	DB	01H
	DB	04H
	DB	03H
	DB	05H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	02H
	DB	01H
	DB	04H
	DB	03H
	DB	0aH
	DB	06H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	01H
	DB	0aH
	DB	02H
	DB	05H
	DB	01H
	DB	01H
	DB	02H
	DB	07H
	DB	02H
	DB	017H
	DB	01H
	DB	05H
	DB	01H
	DB	01H
	DB	0eH
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	06H
	DB	02H
	DB	01H
	DB	04H
	DB	05H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	07H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	011H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0fbH
	DB	098H
	DB	09aH
	DB	084H
	DB	085H
	DB	063H
	DB	064H
	DB	03eH
	DB	03eH
	DB	022H
	DB	022H
	DB	013H
	DB	013H
	DB	018H
	DB	017H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0f1H
	DB	09dH
	DB	09eH
	DB	09aH
	DB	09bH
	DB	09aH
	DB	097H
	DB	093H
	DB	093H
	DB	08cH
	DB	08eH
	DB	086H
	DB	088H
	DB	080H
	DB	082H
	DB	07cH
	DB	07cH
	DB	072H
	DB	073H
	DB	069H
	DB	06bH
	DB	05fH
	DB	060H
	DB	055H
	DB	056H
	DB	04aH
	DB	04bH
	DB	040H
	DB	041H
	DB	037H
	DB	037H
	DB	02fH
	DB	02fH
	DB	027H
	DB	027H
	DB	021H
	DB	021H
	DB	01bH
	DB	01cH
	DB	017H
	DB	017H
	DB	013H
	DB	013H
	DB	010H
	DB	010H
	DB	0dH
	DB	0dH
	DB	0bH
	DB	0bH
	DB	09H
	DB	09H
	DB	08H
	DB	08H
	DB	07H
	DB	07H
	DB	06H
	DB	05H
	DB	05H
	DB	04H
	DB	04H
	DB	04H
	DB	019H
	DB	018H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0c3H
	DB	0cbH
	DB	0f5H
	DB	041H
	DB	0ffH
	DB	07bH
	DB	0f7H
	DB	021H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0bfH
	DB	0ccH
	DB	0f2H
	DB	040H
	DB	0fdH
	DB	07cH
	DB	0f7H
	DB	022H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	07aH
	DB	046H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0c3H
	DB	0d9H
	DB	0efH
	DB	03dH
	DB	0f9H
	DB	07cH
	DB	0e9H
	DB	01eH
	DB	0fdH
	DB	0abH
	DB	0f1H
	DB	02cH
	DB	0fcH
	DB	05bH
	DB	0feH
	DB	017H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0bdH
	DB	0d9H
	DB	0ecH
	DB	03dH
	DB	0f5H
	DB	07dH
	DB	0e8H
	DB	01dH
	DB	0fbH
	DB	0aeH
	DB	0f0H
	DB	02cH
	DB	0fbH
	DB	05cH
	DB	0ffH
	DB	018H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	070H
	DB	06cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0baH
	DB	0c5H
	DB	0daH
	DB	033H
	DB	0e3H
	DB	06dH
	DB	0d8H
	DB	018H
	DB	0e5H
	DB	094H
	DB	0daH
	DB	023H
	DB	0dfH
	DB	04aH
	DB	0d1H
	DB	010H
	DB	0eeH
	DB	0afH
	DB	0e4H
	DB	02cH
	DB	0eaH
	DB	05aH
	DB	0deH
	DB	015H
	DB	0f4H
	DB	087H
	DB	0e9H
	DB	021H
	DB	0f6H
	DB	043H
	DB	0fcH
	DB	012H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0b0H
	DB	0c7H
	DB	0d8H
	DB	033H
	DB	0e3H
	DB	06bH
	DB	0d6H
	DB	018H
	DB	0e7H
	DB	095H
	DB	0d8H
	DB	023H
	DB	0dbH
	DB	049H
	DB	0d0H
	DB	011H
	DB	0e9H
	DB	0b2H
	DB	0e2H
	DB	02bH
	DB	0e8H
	DB	05cH
	DB	0ddH
	DB	015H
	DB	0f1H
	DB	087H
	DB	0e7H
	DB	020H
	DB	0f7H
	DB	044H
	DB	0ffH
	DB	013H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05fH
	DB	09eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
PUBLIC	_libmpq__huffman_insert_item
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_p_item$ = 8						; size = 4
_item$ = 12						; size = 4
_where$ = 16						; size = 4
_item2$ = 20						; size = 4
_libmpq__huffman_insert_item PROC
; File c:\programovani\wow editor\test\src\libmpq\huffman.c
; Line 190
	push	ebp
	mov	ebp, esp
; Line 192
	mov	ecx, DWORD PTR _item$[ebp]
	push	esi
	mov	esi, DWORD PTR [ecx]
	push	edi
; Line 195
	mov	edi, DWORD PTR [ecx+4]
; Line 204
	test	esi, esi
	je	SHORT $LN11@libmpq__hu
; Line 207
	test	edi, edi
	jns	SHORT $LN10@libmpq__hu
; Line 210
	not	edi
; Line 212
	jmp	SHORT $LN9@libmpq__hu
$LN10@libmpq__hu:
; Line 216
	mov	edx, ecx
	sub	edx, DWORD PTR [esi+4]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	eax, DWORD PTR [eax+eax*2]
	lea	edi, DWORD PTR [edi+eax*8]
$LN9@libmpq__hu:
; Line 220
	mov	DWORD PTR [edi], esi
; Line 221
	mov	DWORD PTR [esi+4], edi
; Line 224
	mov	DWORD PTR [ecx], 0
; Line 225
	mov	DWORD PTR [ecx+4], 0
$LN11@libmpq__hu:
; Line 229
	mov	esi, DWORD PTR _item2$[ebp]
	mov	edx, DWORD PTR _p_item$[ebp]
	test	esi, esi
	jne	SHORT $LN8@libmpq__hu
; Line 232
	lea	esi, DWORD PTR [edx+4]
$LN8@libmpq__hu:
; Line 236
	mov	eax, DWORD PTR _where$[ebp]
	dec	eax
	je	SHORT $LN4@libmpq__hu
	dec	eax
	jne	SHORT $LN6@libmpq__hu
; Line 241
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [ecx], edx
; Line 242
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
; Line 243
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax+4], ecx
	pop	edi
; Line 246
	mov	DWORD PTR [esi], ecx
	pop	esi
; Line 299
	pop	ebp
	ret	0
$LN4@libmpq__hu:
; Line 253
	mov	DWORD PTR [ecx], esi
; Line 256
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax
; Line 259
	mov	eax, DWORD PTR [edx]
	push	ebx
; Line 262
	mov	ebx, DWORD PTR [esi+4]
; Line 265
	test	ebx, ebx
	jns	SHORT $LN3@libmpq__hu
; Line 268
	not	edi
	pop	ebx
; Line 269
	mov	DWORD PTR [edi], ecx
	pop	edi
; Line 290
	mov	DWORD PTR [esi+4], ecx
	pop	esi
; Line 299
	pop	ebp
	ret	0
$LN3@libmpq__hu:
; Line 279
	test	eax, eax
	jns	SHORT $LN2@libmpq__hu
; Line 282
	mov	eax, DWORD PTR [esi]
	mov	edx, esi
	sub	edx, DWORD PTR [eax+4]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
$LN2@libmpq__hu:
; Line 286
	lea	edx, DWORD PTR [eax+eax*2]
; Line 287
	mov	DWORD PTR [ebx+edx*8], ecx
; Line 290
	mov	DWORD PTR [esi+4], ecx
	pop	ebx
$LN6@libmpq__hu:
	pop	edi
	pop	esi
; Line 299
	pop	ebp
	ret	0
_libmpq__huffman_insert_item ENDP
_TEXT	ENDS
PUBLIC	_libmpq__huffman_remove_item
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_hi$ = 8						; size = 4
_libmpq__huffman_remove_item PROC
; Line 303
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 308
	mov	esi, DWORD PTR _hi$[ebp]
	mov	ebx, DWORD PTR [esi]
	test	ebx, ebx
	je	SHORT $LN3@libmpq__hu@2
; Line 311
	push	edi
	mov	edi, DWORD PTR [esi+4]
; Line 314
	test	edi, edi
	jg	SHORT $LN2@libmpq__hu@2
; Line 316
	not	edi
; Line 318
	jmp	SHORT $LN1@libmpq__hu@2
$LN2@libmpq__hu@2:
; Line 320
	mov	ecx, esi
	sub	ecx, DWORD PTR [ebx+4]
	mov	eax, 715827883				; 2aaaaaabH
	imul	ecx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	eax, DWORD PTR [eax+eax*2]
	lea	edi, DWORD PTR [edi+eax*8]
$LN1@libmpq__hu@2:
; Line 324
	mov	DWORD PTR [edi], ebx
; Line 325
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], edx
; Line 326
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi], 0
	pop	edi
$LN3@libmpq__hu@2:
	pop	esi
	pop	ebx
; Line 328
	pop	ebp
	ret	0
_libmpq__huffman_remove_item ENDP
_TEXT	ENDS
PUBLIC	_libmpq__huffman_previous_item
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_hi$ = 8						; size = 4
_value$ = 12						; size = 4
_libmpq__huffman_previous_item PROC
; Line 332
	push	ebp
	mov	ebp, esp
; Line 334
	mov	ecx, DWORD PTR _hi$[ebp]
	push	esi
	mov	esi, DWORD PTR [ecx+4]
	test	esi, esi
	jns	SHORT $LN2@libmpq__hu@3
; Line 337
	mov	eax, esi
	not	eax
	pop	esi
; Line 349
	pop	ebp
	ret	0
$LN2@libmpq__hu@3:
; Line 341
	mov	eax, DWORD PTR _value$[ebp]
	test	eax, eax
	jns	SHORT $LN1@libmpq__hu@3
; Line 344
	mov	eax, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, 715827883				; 2aaaaaabH
	imul	ecx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
$LN1@libmpq__hu@3:
; Line 348
	lea	ecx, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [esi+ecx*8]
	pop	esi
; Line 349
	pop	ebp
	ret	0
_libmpq__huffman_previous_item ENDP
_TEXT	ENDS
PUBLIC	_libmpq__huffman_get_1bit
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_is$ = 8						; size = 4
_libmpq__huffman_get_1bit PROC
; Line 353
	push	ebp
	mov	ebp, esp
; Line 355
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, edx
; Line 358
	shr	edx, 1
	and	eax, 1
; Line 361
	dec	DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+4], edx
	jne	SHORT $LN1@libmpq__hu@4
; Line 363
	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [edx]
; Line 364
	add	edx, 4
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
; Line 365
	mov	DWORD PTR [ecx+8], 32			; 00000020H
	pop	esi
$LN1@libmpq__hu@4:
; Line 370
	pop	ebp
	ret	0
_libmpq__huffman_get_1bit ENDP
_TEXT	ENDS
PUBLIC	_libmpq__huffman_get_7bit
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_is$ = 8						; size = 4
_libmpq__huffman_get_7bit PROC
; Line 374
	push	ebp
	mov	ebp, esp
; Line 376
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, 7
	ja	SHORT $LN1@libmpq__hu@5
; Line 378
	mov	edx, DWORD PTR [eax]
	push	esi
	movzx	esi, WORD PTR [edx]
	shl	esi, cl
; Line 379
	add	edx, 2
	mov	DWORD PTR [eax], edx
	or	DWORD PTR [eax+4], esi
; Line 380
	add	ecx, 16					; 00000010H
	mov	DWORD PTR [eax+8], ecx
	pop	esi
$LN1@libmpq__hu@5:
; Line 384
	mov	eax, DWORD PTR [eax+4]
	and	eax, 127				; 0000007fH
; Line 385
	pop	ebp
	ret	0
_libmpq__huffman_get_7bit ENDP
_TEXT	ENDS
PUBLIC	_libmpq__huffman_get_8bit
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_is$ = 8						; size = 4
_libmpq__huffman_get_8bit PROC
; Line 389
	push	ebp
	mov	ebp, esp
; Line 394
	mov	edx, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, 8
	ja	SHORT $LN1@libmpq__hu@6
; Line 396
	mov	eax, DWORD PTR [edx]
	push	esi
	movzx	esi, WORD PTR [eax]
	shl	esi, cl
; Line 397
	add	eax, 2
	mov	DWORD PTR [edx], eax
	or	DWORD PTR [edx+4], esi
; Line 398
	add	ecx, 16					; 00000010H
	mov	DWORD PTR [edx+8], ecx
	pop	esi
$LN1@libmpq__hu@6:
; Line 402
	mov	ecx, DWORD PTR [edx+4]
	movzx	eax, cl
; Line 403
	shr	ecx, 8
; Line 404
	add	DWORD PTR [edx+8], -8			; fffffff8H
	mov	DWORD PTR [edx+4], ecx
; Line 408
	pop	ebp
	ret	0
_libmpq__huffman_get_8bit ENDP
_TEXT	ENDS
PUBLIC	_libmpq__huffman_call_1500E740
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_ht$ = 8						; size = 4
_libmpq__huffman_call_1500E740 PROC
; Line 412
	push	ebp
	mov	ebp, esp
; Line 414
	mov	eax, DWORD PTR _ht$[ebp]
	mov	ecx, DWORD PTR [eax+12376]
	push	ebx
; Line 425
	xor	edx, edx
	push	esi
	push	edi
	cmp	ecx, edx
	jle	SHORT $LN11@libmpq__hu@7
	mov	ebx, ecx
; Line 439
	jne	SHORT $LN9@libmpq__hu@7
$LN11@libmpq__hu@7:
; Line 428
	mov	ecx, DWORD PTR [eax+12392]
	lea	esi, DWORD PTR [ecx+ecx*2]
	inc	ecx
	lea	ebx, DWORD PTR [eax+esi*8+8]
	mov	DWORD PTR [eax+12392], ecx
; Line 430
	mov	ecx, ebx
	cmp	ebx, edx
	jne	SHORT $LN9@libmpq__hu@7
; Line 434
	mov	ecx, DWORD PTR [eax+12384]
$LN9@libmpq__hu@7:
; Line 443
	mov	esi, DWORD PTR [ecx]
; Line 446
	cmp	esi, edx
	je	SHORT $LN7@libmpq__hu@7
; Line 449
	mov	edi, DWORD PTR [ecx+4]
; Line 452
	cmp	edi, edx
	jg	SHORT $LN6@libmpq__hu@7
; Line 454
	not	edi
; Line 456
	jmp	SHORT $LN5@libmpq__hu@7
$LN6@libmpq__hu@7:
; Line 458
	mov	edx, ecx
	sub	edx, DWORD PTR [esi+4]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	eax, DWORD PTR [eax+eax*2]
	lea	edi, DWORD PTR [edi+eax*8]
	mov	eax, DWORD PTR _ht$[ebp]
	xor	edx, edx
$LN5@libmpq__hu@7:
; Line 462
	mov	DWORD PTR [edi], esi
; Line 463
	mov	DWORD PTR [esi+4], edi
; Line 464
	mov	DWORD PTR [ecx], edx
; Line 465
	mov	DWORD PTR [ecx+4], edx
$LN7@libmpq__hu@7:
; Line 469
	lea	esi, DWORD PTR [eax+12384]
; Line 470
	mov	DWORD PTR [ecx], esi
; Line 471
	mov	edi, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], edi
; Line 474
	mov	edi, DWORD PTR [esi+4]
; Line 477
	cmp	edi, edx
	ja	SHORT $LN4@libmpq__hu@7
; Line 480
	not	edi
; Line 482
	mov	DWORD PTR [edi+4], ebx
	mov	DWORD PTR [edi], ecx
	pop	edi
	pop	esi
; Line 506
	mov	eax, ebx
	mov	DWORD PTR [ebx+20], edx
	mov	DWORD PTR [ebx+16], edx
	pop	ebx
; Line 507
	pop	ebp
	ret	0
$LN4@libmpq__hu@7:
; Line 489
	mov	eax, DWORD PTR [eax+12380]
	cmp	eax, edx
	jge	SHORT $LN2@libmpq__hu@7
; Line 491
	mov	eax, DWORD PTR [esi]
	mov	edx, esi
	sub	edx, DWORD PTR [eax+4]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	edx, DWORD PTR [eax+eax*2]
	lea	edi, DWORD PTR [edi+edx*8]
; Line 499
	mov	DWORD PTR [edi], ecx
; Line 500
	mov	DWORD PTR [esi+4], ebx
	pop	edi
	xor	edx, edx
	pop	esi
; Line 506
	mov	eax, ebx
	mov	DWORD PTR [ebx+20], edx
	mov	DWORD PTR [ebx+16], edx
	pop	ebx
; Line 507
	pop	ebp
	ret	0
$LN2@libmpq__hu@7:
; Line 495
	lea	eax, DWORD PTR [eax+eax*2]
	lea	edi, DWORD PTR [edi+eax*8]
; Line 499
	mov	DWORD PTR [edi], ecx
; Line 500
	mov	DWORD PTR [esi+4], ebx
	pop	edi
	pop	esi
; Line 506
	mov	eax, ebx
	mov	DWORD PTR [ebx+20], edx
	mov	DWORD PTR [ebx+16], edx
	pop	ebx
; Line 507
	pop	ebp
	ret	0
_libmpq__huffman_call_1500E740 ENDP
_TEXT	ENDS
PUBLIC	_libmpq__huffman_call_1500E820
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_ht$ = 8						; size = 4
_p_item$ = 12						; size = 4
_libmpq__huffman_call_1500E820 PROC
; Line 511
	push	ebp
	mov	ebp, esp
; Line 525
	mov	ecx, DWORD PTR _p_item$[ebp]
	test	ecx, ecx
	je	$LN12@libmpq__hu@8
	push	ebx
	push	esi
	push	edi
$LL14@libmpq__hu@8:
; Line 528
	inc	DWORD PTR [ecx+12]
; Line 534
	mov	edi, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [ecx+12]
	mov	esi, ecx
; Line 537
	test	edi, edi
	jle	SHORT $LN28@libmpq__hu@8
$LL11@libmpq__hu@8:
; Line 544
	cmp	DWORD PTR [edi+12], eax
	jae	SHORT $LN29@libmpq__hu@8
; Line 534
	mov	esi, edi
	mov	edi, DWORD PTR [edi+4]
; Line 537
	test	edi, edi
	jg	SHORT $LL11@libmpq__hu@8
$LN28@libmpq__hu@8:
; Line 539
	xor	edi, edi
$LN29@libmpq__hu@8:
; Line 551
	cmp	esi, ecx
	je	$LN13@libmpq__hu@8
; Line 557
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN5@libmpq__hu@8
; Line 560
	mov	ebx, DWORD PTR [esi+4]
	test	ebx, ebx
	jns	SHORT $LN31@libmpq__hu@8
	not	ebx
	jmp	SHORT $LN19@libmpq__hu@8
$LN31@libmpq__hu@8:
	mov	edx, esi
	sub	edx, DWORD PTR [eax+4]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	eax, DWORD PTR [eax+eax*2]
	lea	ebx, DWORD PTR [ebx+eax*8]
$LN19@libmpq__hu@8:
; Line 561
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx], eax
; Line 562
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edx+4], eax
; Line 563
	mov	DWORD PTR [esi], 0
; Line 564
	mov	DWORD PTR [esi+4], 0
$LN5@libmpq__hu@8:
; Line 568
	mov	eax, DWORD PTR [ecx]
; Line 569
	mov	DWORD PTR [esi], eax
; Line 570
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi+4], edx
; Line 571
	mov	DWORD PTR [eax+4], esi
; Line 578
	mov	ebx, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], esi
	test	ebx, ebx
	jns	SHORT $LN32@libmpq__hu@8
	not	ebx
	jmp	SHORT $LN23@libmpq__hu@8
$LN32@libmpq__hu@8:
	mov	edx, ecx
	sub	edx, DWORD PTR [esi+4]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	eax, DWORD PTR [eax+eax*2]
	lea	ebx, DWORD PTR [ebx+eax*8]
$LN23@libmpq__hu@8:
; Line 579
	mov	DWORD PTR [ebx], esi
; Line 580
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
; Line 588
	mov	ebx, DWORD PTR _ht$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	test	edi, edi
	jne	SHORT $LN3@libmpq__hu@8
	lea	edi, DWORD PTR [ebx+12384]
$LN3@libmpq__hu@8:
; Line 592
	mov	eax, DWORD PTR [edi]
; Line 593
	mov	DWORD PTR [ecx], eax
; Line 594
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
; Line 595
	mov	DWORD PTR [eax+4], ecx
; Line 596
	mov	DWORD PTR [edi], ecx
; Line 597
	mov	eax, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [eax+20]
; Line 598
	mov	eax, DWORD PTR [ecx+16]
; Line 601
	cmp	DWORD PTR [eax+20], ecx
	jne	SHORT $LN2@libmpq__hu@8
; Line 603
	mov	DWORD PTR [eax+20], esi
$LN2@libmpq__hu@8:
; Line 607
	cmp	edx, esi
	jne	SHORT $LN1@libmpq__hu@8
; Line 609
	mov	edx, DWORD PTR [esi+16]
	mov	DWORD PTR [edx+20], ecx
$LN1@libmpq__hu@8:
; Line 614
	mov	edx, DWORD PTR [esi+16]
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [ecx+16], edx
; Line 615
	mov	DWORD PTR [esi+16], eax
; Line 618
	inc	DWORD PTR [ebx+4]
$LN13@libmpq__hu@8:
; Line 525
	mov	ecx, DWORD PTR [ecx+16]
	test	ecx, ecx
	jne	$LL14@libmpq__hu@8
	pop	edi
	pop	esi
	pop	ebx
$LN12@libmpq__hu@8:
; Line 620
	pop	ebp
	ret	0
_libmpq__huffman_call_1500E820 ENDP
_TEXT	ENDS
PUBLIC	_libmpq__huffman_tree_init
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_ht$ = 8						; size = 4
_cmp$ = 12						; size = 4
_libmpq__huffman_tree_init PROC
; Line 624
	push	ebp
	mov	ebp, esp
; Line 630
	mov	eax, DWORD PTR _ht$[ebp]
	push	esi
	lea	ecx, DWORD PTR [eax+8]
	mov	edx, 515				; 00000203H
	xor	esi, esi
$LL7@libmpq__hu@9:
; Line 632
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], esi
	add	ecx, 24					; 00000018H
	dec	edx
	jne	SHORT $LL7@libmpq__hu@9
; Line 637
	lea	ecx, DWORD PTR [eax+12372]
	mov	DWORD PTR [ecx], ecx
; Line 638
	not	ecx
	mov	DWORD PTR [eax+12376], ecx
; Line 640
	lea	ecx, DWORD PTR [eax+12384]
	mov	DWORD PTR [ecx], ecx
; Line 641
	not	ecx
	mov	DWORD PTR [eax+12368], esi
	mov	DWORD PTR [eax+12380], esi
	mov	DWORD PTR [eax+12388], ecx
; Line 642
	mov	DWORD PTR [eax+4], 1
; Line 643
	mov	DWORD PTR [eax+12392], esi
; Line 646
	cmp	DWORD PTR _cmp$[ebp], esi
	jne	SHORT $LN1@libmpq__hu@9
; Line 648
	add	eax, 13428				; 00003474H
	mov	ecx, 128				; 00000080H
$LL3@libmpq__hu@9:
; Line 650
	mov	DWORD PTR [eax], esi
	add	eax, 12					; 0000000cH
	dec	ecx
	jne	SHORT $LL3@libmpq__hu@9
$LN1@libmpq__hu@9:
	pop	esi
; Line 653
	pop	ebp
	ret	0
_libmpq__huffman_tree_init ENDP
_TEXT	ENDS
PUBLIC	_libmpq__huffman_tree_build
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_byte_array$ = -12					; size = 4
_p_item$ = -8						; size = 4
_max_byte$ = -4						; size = 4
tv1131 = 8						; size = 4
_child2$5403 = 8					; size = 4
_ht$ = 8						; size = 4
tv601 = 11						; size = 1
_prev$5602 = 12						; size = 4
_i$ = 12						; size = 4
_cmp_type$ = 12						; size = 4
_libmpq__huffman_tree_build PROC
; Line 657
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
; Line 675
	mov	esi, DWORD PTR _ht$[ebp]
	mov	ecx, DWORD PTR [esi+12388]
	push	edi
	test	ecx, ecx
	jle	$LN36@libmpq__hu@10
	lea	ebx, DWORD PTR [esi+12372]
$LL37@libmpq__hu@10:
; Line 681
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN119@libmpq__hu@10
; Line 683
	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN119@libmpq__hu@10
	mov	edi, DWORD PTR [ecx+4]
	test	edi, edi
	jg	SHORT $LN41@libmpq__hu@10
	not	edi
	jmp	SHORT $LN40@libmpq__hu@10
$LN41@libmpq__hu@10:
	mov	edx, ecx
	sub	edx, DWORD PTR [eax+4]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	eax, DWORD PTR [eax+eax*2]
	lea	edi, DWORD PTR [edi+eax*8]
$LN40@libmpq__hu@10:
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edi], eax
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx], 0
$LN119@libmpq__hu@10:
; Line 690
	mov	ecx, DWORD PTR [esi+12388]
	mov	DWORD PTR [esi+12376], ebx
	mov	DWORD PTR [ecx+4], ebx
; Line 691
	mov	edi, DWORD PTR [ebx+4]
	lea	eax, DWORD PTR [esi+12368]
	test	edi, edi
	jns	SHORT $LN46@libmpq__hu@10
	not	edi
	jmp	SHORT $LN47@libmpq__hu@10
$LN46@libmpq__hu@10:
	test	eax, eax
	jns	SHORT $LN45@libmpq__hu@10
	mov	edx, DWORD PTR [ebx]
	mov	ecx, ebx
	sub	ecx, DWORD PTR [edx+4]
	mov	eax, 715827883				; 2aaaaaabH
	imul	ecx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
$LN45@libmpq__hu@10:
	lea	eax, DWORD PTR [eax+eax*2]
	lea	edi, DWORD PTR [edi+eax*8]
$LN47@libmpq__hu@10:
; Line 692
	mov	ecx, DWORD PTR [esi+12388]
	mov	DWORD PTR [edi], ecx
; Line 693
	mov	ecx, DWORD PTR [esi+12388]
	mov	DWORD PTR [ebx], ecx
	test	ecx, ecx
	jg	$LL37@libmpq__hu@10
$LN36@libmpq__hu@10:
; Line 697
	push	1032					; 00000408H
	lea	edi, DWORD PTR [esi+12396]
	push	0
	push	edi
	call	_memset
; Line 706
	mov	eax, DWORD PTR _cmp_type$[ebp]
	and	eax, 255				; 000000ffH
; Line 709
	imul	eax, 258				; 00000102H
	add	eax, OFFSET _table_1502A630
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _p_item$[ebp], edi
; Line 712
	xor	edi, edi
	mov	DWORD PTR _max_byte$[ebp], 0
	mov	DWORD PTR _byte_array$[ebp], eax
	mov	DWORD PTR _i$[ebp], edi
$LL125@libmpq__hu@10:
; Line 717
	mov	dl, BYTE PTR [edi+eax]
	mov	ecx, DWORD PTR [esi+12376]
	mov	BYTE PTR tv601[ebp], dl
; Line 720
	test	dl, dl
	je	$LN33@libmpq__hu@10
; Line 726
	test	ecx, ecx
	jg	SHORT $LN30@libmpq__hu@10
; Line 728
	mov	eax, DWORD PTR [esi+12392]
	lea	ecx, DWORD PTR [eax+eax*2]
	inc	eax
	lea	ecx, DWORD PTR [esi+ecx*8+8]
	mov	DWORD PTR [esi+12392], eax
$LN30@libmpq__hu@10:
; Line 732
	mov	edi, DWORD PTR [ecx]
	mov	ebx, DWORD PTR [ecx+4]
	xor	eax, eax
	cmp	edi, eax
	je	SHORT $LN120@libmpq__hu@10
	cmp	ebx, eax
	jge	SHORT $LN58@libmpq__hu@10
	not	ebx
	jmp	SHORT $LN57@libmpq__hu@10
$LN58@libmpq__hu@10:
	mov	edx, ecx
	sub	edx, DWORD PTR [edi+4]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	edx, DWORD PTR [eax+eax*2]
	lea	ebx, DWORD PTR [ebx+edx*8]
	mov	dl, BYTE PTR tv601[ebp]
	xor	eax, eax
$LN57@libmpq__hu@10:
	mov	DWORD PTR [ebx], edi
	mov	DWORD PTR [edi+4], ebx
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
$LN120@libmpq__hu@10:
	mov	edi, DWORD PTR [esi+12384]
	mov	DWORD PTR [ecx], edi
	mov	edi, DWORD PTR [esi+12384]
	mov	edi, DWORD PTR [edi+4]
	mov	DWORD PTR [ecx+4], edi
	mov	edi, DWORD PTR [esi+12384]
	mov	DWORD PTR [edi+4], ecx
	mov	DWORD PTR [esi+12384], ecx
; Line 735
	mov	DWORD PTR [ecx+16], eax
; Line 736
	mov	DWORD PTR [ecx+20], eax
; Line 739
	mov	eax, DWORD PTR _p_item$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 742
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 745
	movzx	eax, dl
	mov	DWORD PTR [ecx+12], eax
; Line 748
	cmp	eax, DWORD PTR _max_byte$[ebp]
	jb	SHORT $LN29@libmpq__hu@10
; Line 751
	mov	DWORD PTR _max_byte$[ebp], eax
; Line 754
	jmp	$LN126@libmpq__hu@10
$LN29@libmpq__hu@10:
; Line 761
	mov	edi, DWORD PTR [esi+12388]
	test	edi, edi
	jle	SHORT $LN110@libmpq__hu@10
	npad	5
$LL26@libmpq__hu@10:
; Line 770
	cmp	DWORD PTR [edi+12], eax
	jae	SHORT $LN22@libmpq__hu@10
; Line 777
	mov	edi, DWORD PTR [edi+4]
; Line 779
	test	edi, edi
	jg	SHORT $LL26@libmpq__hu@10
$LN110@libmpq__hu@10:
; Line 786
	xor	edi, edi
$LN22@libmpq__hu@10:
; Line 790
	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN64@libmpq__hu@10
; Line 792
	mov	ebx, DWORD PTR [ecx+4]
	test	ebx, ebx
	jg	SHORT $LN63@libmpq__hu@10
	not	ebx
	jmp	SHORT $LN62@libmpq__hu@10
$LN63@libmpq__hu@10:
	mov	edx, ecx
	sub	edx, DWORD PTR [eax+4]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	edx, DWORD PTR [eax+eax*2]
	lea	ebx, DWORD PTR [ebx+edx*8]
$LN62@libmpq__hu@10:
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ebx], eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx], 0
$LN64@libmpq__hu@10:
; Line 796
	test	edi, edi
	jne	SHORT $LN20@libmpq__hu@10
; Line 798
	lea	edi, DWORD PTR [esi+12384]
$LN20@libmpq__hu@10:
; Line 802
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ecx], eax
; Line 803
	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
; Line 804
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR [edx+4], ecx
; Line 805
	mov	DWORD PTR [edi], ecx
$LN126@libmpq__hu@10:
	mov	eax, DWORD PTR _byte_array$[ebp]
	mov	edi, DWORD PTR _i$[ebp]
$LN33@libmpq__hu@10:
; Line 712
	add	DWORD PTR _p_item$[ebp], 4
	inc	edi
	mov	DWORD PTR _i$[ebp], edi
	cmp	edi, 256				; 00000100H
	jb	$LL125@libmpq__hu@10
; Line 809
	cmp	edi, 258				; 00000102H
	jae	$LN17@libmpq__hu@10
	lea	eax, DWORD PTR [esi+edi*4+12396]
	mov	DWORD PTR tv1131[ebp], eax
$LL123@libmpq__hu@10:
; Line 815
	mov	ecx, DWORD PTR [esi+12376]
; Line 818
	test	ecx, ecx
	jg	SHORT $LN16@libmpq__hu@10
; Line 820
	mov	eax, DWORD PTR [esi+12392]
	lea	ecx, DWORD PTR [eax+eax*2]
	inc	eax
	lea	ecx, DWORD PTR [esi+ecx*8+8]
	mov	DWORD PTR [esi+12392], eax
$LN16@libmpq__hu@10:
; Line 824
	mov	ebx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	test	ebx, ebx
	je	SHORT $LN121@libmpq__hu@10
	test	edi, edi
	jns	SHORT $LN76@libmpq__hu@10
	not	edi
	jmp	SHORT $LN75@libmpq__hu@10
$LN76@libmpq__hu@10:
	mov	edx, ecx
	sub	edx, DWORD PTR [ebx+4]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	edx, DWORD PTR [eax+eax*2]
	lea	edi, DWORD PTR [edi+edx*8]
$LN75@libmpq__hu@10:
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [ebx+4], edi
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
$LN121@libmpq__hu@10:
	lea	edx, DWORD PTR [esi+12384]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ebx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [esi+12380]
	test	ebx, ebx
	jns	SHORT $LN69@libmpq__hu@10
	not	edi
	mov	DWORD PTR [edi], ecx
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN72@libmpq__hu@10
$LN69@libmpq__hu@10:
	test	eax, eax
	jns	SHORT $LN68@libmpq__hu@10
	mov	eax, DWORD PTR [edx]
	sub	edx, DWORD PTR [eax+4]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
$LN68@libmpq__hu@10:
	lea	edx, DWORD PTR [eax+eax*2]
	mov	DWORD PTR [ebx+edx*8], ecx
	mov	DWORD PTR [esi+12388], ecx
$LN72@libmpq__hu@10:
; Line 827
	mov	eax, DWORD PTR _i$[ebp]
; Line 829
	xor	edx, edx
	mov	DWORD PTR [ecx+16], edx
; Line 830
	mov	DWORD PTR [ecx+20], edx
; Line 831
	mov	edx, DWORD PTR tv1131[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], 1
	inc	eax
	mov	DWORD PTR [edx], ecx
	add	edx, 4
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR tv1131[ebp], edx
	cmp	eax, 258				; 00000102H
	jb	$LL123@libmpq__hu@10
$LN17@libmpq__hu@10:
; Line 835
	mov	ebx, DWORD PTR [esi+12388]
	xor	edx, edx
	cmp	ebx, edx
	jle	$LN118@libmpq__hu@10
; Line 844
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR _child2$5403[ebp], eax
	cmp	eax, edx
	jle	$LN118@libmpq__hu@10
$LL14@libmpq__hu@10:
; Line 846
	mov	ecx, DWORD PTR [esi+12376]
	cmp	ecx, edx
	jg	SHORT $LN12@libmpq__hu@10
; Line 848
	mov	eax, DWORD PTR [esi+12392]
	lea	ecx, DWORD PTR [eax+eax*2]
	inc	eax
	lea	ecx, DWORD PTR [esi+ecx*8+8]
	mov	DWORD PTR [esi+12392], eax
$LN12@libmpq__hu@10:
; Line 852
	mov	edi, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _prev$5602[ebp], eax
	cmp	edi, edx
	je	SHORT $LN113@libmpq__hu@10
	cmp	eax, edx
	jge	SHORT $LN89@libmpq__hu@10
	not	eax
	jmp	SHORT $LN88@libmpq__hu@10
$LN89@libmpq__hu@10:
	mov	edx, ecx
	sub	edx, DWORD PTR [edi+4]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _prev$5602[ebp]
	lea	eax, DWORD PTR [eax+edx*8]
	xor	edx, edx
$LN88@libmpq__hu@10:
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], edx
$LN113@libmpq__hu@10:
	mov	eax, DWORD PTR [esi+12384]
; Line 864
	mov	edi, DWORD PTR _child2$5403[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [esi+12384]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [esi+12384]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [esi+12384], ecx
	mov	DWORD PTR [ecx+20], edx
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [edi+12]
	add	eax, DWORD PTR [ebx+12]
; Line 867
	mov	DWORD PTR [ecx+20], ebx
	mov	DWORD PTR [ecx+12], eax
; Line 868
	mov	DWORD PTR [ebx+16], ecx
; Line 869
	mov	DWORD PTR [edi+16], ecx
; Line 872
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR _max_byte$[ebp]
	jb	SHORT $LN11@libmpq__hu@10
; Line 874
	mov	DWORD PTR _max_byte$[ebp], eax
; Line 876
	jmp	$LN10@libmpq__hu@10
$LN11@libmpq__hu@10:
; Line 880
	mov	edi, DWORD PTR [edi+4]
; Line 884
	cmp	edi, edx
	jle	SHORT $LN114@libmpq__hu@10
$LL8@libmpq__hu@10:
; Line 890
	cmp	DWORD PTR [edi+12], eax
	jae	SHORT $LN4@libmpq__hu@10
; Line 897
	mov	edi, DWORD PTR [edi+4]
; Line 899
	cmp	edi, edx
	jg	SHORT $LL8@libmpq__hu@10
$LN114@libmpq__hu@10:
; Line 905
	xor	edi, edi
$LN4@libmpq__hu@10:
; Line 909
	mov	eax, DWORD PTR [ecx]
	cmp	eax, edx
	je	SHORT $LN3@libmpq__hu@10
; Line 912
	mov	ebx, DWORD PTR [ecx+4]
	cmp	ebx, edx
	jge	SHORT $LN115@libmpq__hu@10
	not	ebx
	jmp	SHORT $LN95@libmpq__hu@10
$LN115@libmpq__hu@10:
	mov	edx, ecx
	sub	edx, DWORD PTR [eax+4]
	mov	eax, 715827883				; 2aaaaaabH
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	edx, DWORD PTR [eax+eax*2]
	lea	ebx, DWORD PTR [ebx+edx*8]
	xor	edx, edx
$LN95@libmpq__hu@10:
; Line 915
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ebx], eax
; Line 918
	mov	eax, DWORD PTR [ecx]
	mov	ebx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ebx
; Line 919
	mov	DWORD PTR [ecx], edx
; Line 920
	mov	DWORD PTR [ecx+4], edx
$LN3@libmpq__hu@10:
; Line 924
	cmp	edi, edx
	jne	SHORT $LN2@libmpq__hu@10
; Line 926
	lea	edi, DWORD PTR [esi+12384]
$LN2@libmpq__hu@10:
; Line 930
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ecx], eax
; Line 933
	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], eax
; Line 936
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [eax+4], ecx
; Line 937
	mov	DWORD PTR [edi], ecx
	mov	edi, DWORD PTR _child2$5403[ebp]
$LN10@libmpq__hu@10:
; Line 941
	mov	ebx, DWORD PTR [edi+4]
	cmp	ebx, edx
	jle	SHORT $LN118@libmpq__hu@10
; Line 844
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR _child2$5403[ebp], eax
	cmp	eax, edx
	jg	$LL14@libmpq__hu@10
$LN118@libmpq__hu@10:
	pop	edi
; Line 949
	mov	DWORD PTR [esi+4], 1
	pop	esi
	pop	ebx
; Line 950
	mov	esp, ebp
	pop	ebp
	ret	0
_libmpq__huffman_tree_build ENDP
_TEXT	ENDS
PUBLIC	_libmpq__do_decompress_huffman
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv444 = -28						; size = 4
_n7bits$ = -28						; size = 4
_has_qd$ = -24						; size = 4
_p_item1$ = -20						; size = 4
_p_item2$ = -16						; size = 4
_qd$ = -12						; size = 4
_out_pos$ = -8						; size = 4
_one_byte$5675 = -4					; size = 4
_bit_count$ = -4					; size = 4
_ht$ = 8						; size = 4
_is$ = 12						; size = 4
_out_buf$ = 16						; size = 4
_out_length$ = 20					; size = 4
_libmpq__do_decompress_huffman PROC
; Line 954
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 976
	cmp	DWORD PTR _out_length$[ebp], 0
	mov	eax, DWORD PTR _out_buf$[ebp]
	mov	DWORD PTR _out_pos$[ebp], eax
	jne	SHORT $LN25@libmpq__do
; Line 978
	xor	eax, eax
; Line 1138
	mov	esp, ebp
	pop	ebp
	ret	0
$LN25@libmpq__do:
	push	ebx
	push	esi
; Line 982
	mov	esi, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [esi+8]
	push	edi
	cmp	ecx, 8
	ja	SHORT $LN30@libmpq__do
	mov	eax, DWORD PTR [esi]
	movzx	edx, WORD PTR [eax]
	shl	edx, cl
	add	eax, 2
	mov	DWORD PTR [esi], eax
	or	DWORD PTR [esi+4], edx
	add	ecx, 16					; 00000010H
	mov	DWORD PTR [esi+8], ecx
$LN30@libmpq__do:
	mov	eax, DWORD PTR [esi+4]
; Line 985
	mov	edi, DWORD PTR _ht$[ebp]
	add	DWORD PTR [esi+8], -8			; fffffff8H
	movzx	ebx, al
	shr	eax, 8
	push	ebx
	push	edi
	mov	DWORD PTR [esi+4], eax
	call	_libmpq__huffman_tree_build
; Line 988
	xor	eax, eax
	add	esp, 8
	test	ebx, ebx
	sete	al
	mov	DWORD PTR [edi], eax
$LL24@libmpq__do:
; Line 994
	mov	ecx, DWORD PTR [esi+8]
	cmp	ecx, 7
	ja	SHORT $LN33@libmpq__do
	mov	eax, DWORD PTR [esi]
	movzx	edx, WORD PTR [eax]
	shl	edx, cl
	add	eax, 2
	mov	DWORD PTR [esi], eax
	or	DWORD PTR [esi+4], edx
	add	ecx, 16					; 00000010H
	mov	DWORD PTR [esi+8], ecx
$LN33@libmpq__do:
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, eax
	and	ecx, 127				; 0000007fH
	mov	DWORD PTR _n7bits$[ebp], ecx
; Line 997
	lea	ecx, DWORD PTR [ecx+ecx*2+3357]
	lea	edx, DWORD PTR [edi+ecx*4]
; Line 1000
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR _qd$[ebp], edx
	sbb	ecx, ecx
	inc	ecx
	mov	DWORD PTR _has_qd$[ebp], ecx
; Line 1003
	je	SHORT $LN22@libmpq__do
; Line 1006
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, 7
	jbe	SHORT $LN49@libmpq__do
; Line 1008
	shr	eax, 7
; Line 1009
	add	DWORD PTR [esi+8], -7			; fffffff9H
	mov	DWORD PTR [esi+4], eax
; Line 1010
	mov	ebx, DWORD PTR [edx+8]
; Line 1013
	jmp	SHORT $LN50@libmpq__do
$LN49@libmpq__do:
; Line 1015
	shr	eax, cl
	mov	DWORD PTR [esi+4], eax
; Line 1016
	mov	eax, edx
	mov	edx, DWORD PTR [eax+4]
	sub	DWORD PTR [esi+8], edx
; Line 1017
	mov	ebx, DWORD PTR [eax+8]
; Line 1020
	jmp	$LN17@libmpq__do
$LN22@libmpq__do:
; Line 1023
	mov	eax, DWORD PTR [edi+12384]
	mov	ecx, DWORD PTR [eax]
	mov	ebx, DWORD PTR [ecx+4]
; Line 1024
	test	ebx, ebx
	jg	SHORT $LN50@libmpq__do
; Line 1026
	xor	ebx, ebx
$LN50@libmpq__do:
; Line 1054
	mov	edx, DWORD PTR [esi+8]
	xor	eax, eax
	mov	DWORD PTR _bit_count$[ebp], eax
	mov	DWORD PTR _p_item2$[ebp], eax
	mov	eax, DWORD PTR [esi+4]
	npad	2
$LL16@libmpq__do:
; Line 1043
	mov	ebx, DWORD PTR [ebx+20]
	mov	ecx, eax
	shr	eax, 1
	and	ecx, 1
	dec	edx
; Line 1054
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], edx
	jne	SHORT $LN36@libmpq__do
; Line 1043
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx]
	add	edx, 4
	mov	DWORD PTR [esi], edx
	mov	edx, 32					; 00000020H
; Line 1054
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], edx
$LN36@libmpq__do:
; Line 1043
	test	ecx, ecx
	je	SHORT $LN13@libmpq__do
; Line 1045
	mov	ebx, DWORD PTR [ebx+4]
$LN13@libmpq__do:
; Line 1049
	mov	ecx, DWORD PTR _bit_count$[ebp]
	inc	ecx
	mov	DWORD PTR _bit_count$[ebp], ecx
	cmp	ecx, 7
	jne	SHORT $LN15@libmpq__do
; Line 1051
	mov	DWORD PTR _p_item2$[ebp], ebx
$LN15@libmpq__do:
; Line 1054
	cmp	DWORD PTR [ebx+20], 0
	jne	SHORT $LL16@libmpq__do
; Line 1057
	cmp	DWORD PTR _has_qd$[ebp], 0
	mov	DWORD PTR _p_item1$[ebp], ebx
	jne	SHORT $LN6@libmpq__do
; Line 1060
	mov	eax, DWORD PTR _bit_count$[ebp]
	cmp	eax, 7
	jbe	SHORT $LN10@libmpq__do
; Line 1062
	mov	ecx, DWORD PTR _qd$[ebp]
	mov	edx, DWORD PTR [edi+4]
; Line 1063
	mov	DWORD PTR [ecx+4], eax
; Line 1064
	mov	eax, DWORD PTR _p_item2$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+8], eax
; Line 1066
	jmp	SHORT $LN6@libmpq__do
$LN10@libmpq__do:
; Line 1068
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	or	eax, -1
	shr	eax, cl
; Line 1069
	mov	ecx, DWORD PTR _bit_count$[ebp]
	mov	edx, 1
	shl	edx, cl
	and	eax, DWORD PTR _n7bits$[ebp]
; Line 1072
	lea	ecx, DWORD PTR [eax+eax*2+3357]
	lea	ecx, DWORD PTR [edi+ecx*4]
	cmp	eax, 127				; 0000007fH
	ja	SHORT $LN6@libmpq__do
	lea	ebx, DWORD PTR [edx+edx*2]
	add	ebx, ebx
	add	ebx, ebx
	mov	DWORD PTR tv444[ebp], ebx
	npad	7
$LL8@libmpq__do:
; Line 1074
	mov	ebx, DWORD PTR [edi+4]
	mov	DWORD PTR [ecx], ebx
; Line 1075
	mov	ebx, DWORD PTR _bit_count$[ebp]
	mov	DWORD PTR [ecx+4], ebx
; Line 1076
	mov	ebx, DWORD PTR _p_item1$[ebp]
	mov	ebx, DWORD PTR [ebx+8]
	mov	DWORD PTR [ecx+8], ebx
	add	ecx, DWORD PTR tv444[ebp]
	add	eax, edx
	cmp	eax, 127				; 0000007fH
	jbe	SHORT $LL8@libmpq__do
; Line 1072
	mov	ebx, DWORD PTR _p_item1$[ebp]
$LN6@libmpq__do:
; Line 1082
	mov	ebx, DWORD PTR [ebx+8]
$LN17@libmpq__do:
; Line 1086
	cmp	ebx, 257				; 00000101H
	jne	$LN5@libmpq__do
; Line 1089
	mov	ecx, DWORD PTR [esi+8]
	cmp	ecx, 8
	ja	SHORT $LN39@libmpq__do
	mov	eax, DWORD PTR [esi]
	movzx	edx, WORD PTR [eax]
	shl	edx, cl
	add	eax, 2
	mov	DWORD PTR [esi], eax
	or	DWORD PTR [esi+4], edx
	add	ecx, 16					; 00000010H
	mov	DWORD PTR [esi+8], ecx
$LN39@libmpq__do:
	mov	eax, DWORD PTR [esi+4]
	add	DWORD PTR [esi+8], -8			; fffffff8H
	movzx	ecx, al
	shr	eax, 8
	mov	DWORD PTR [esi+4], eax
; Line 1090
	mov	eax, DWORD PTR [edi+12388]
	xor	edx, edx
	cmp	edx, eax
	sbb	ebx, ebx
; Line 1091
	push	edi
	mov	DWORD PTR _one_byte$5675[ebp], ecx
	and	ebx, eax
	call	_libmpq__huffman_call_1500E740
; Line 1092
	mov	DWORD PTR [eax+16], ebx
; Line 1093
	mov	ecx, DWORD PTR [ebx+8]
	mov	DWORD PTR [eax+8], ecx
; Line 1094
	mov	edx, DWORD PTR [ebx+12]
	mov	DWORD PTR [eax+12], edx
; Line 1096
	push	edi
	mov	DWORD PTR [edi+ecx*4+12396], eax
	call	_libmpq__huffman_call_1500E740
; Line 1098
	mov	ecx, DWORD PTR _one_byte$5675[ebp]
	mov	DWORD PTR [eax+16], ebx
	mov	DWORD PTR [eax+8], ecx
; Line 1099
	mov	DWORD PTR [eax+12], 0
; Line 1104
	push	eax
	mov	DWORD PTR [edi+ecx*4+12396], eax
	push	edi
	mov	DWORD PTR [ebx+20], eax
	call	_libmpq__huffman_call_1500E820
	add	esp, 16					; 00000010H
; Line 1107
	cmp	DWORD PTR [edi], 0
	jne	SHORT $LN51@libmpq__do
; Line 1109
	mov	edx, DWORD PTR _one_byte$5675[ebp]
	mov	eax, DWORD PTR [edi+edx*4+12396]
	push	eax
	push	edi
	call	_libmpq__huffman_call_1500E820
	add	esp, 8
$LN51@libmpq__do:
; Line 1113
	mov	ebx, DWORD PTR _one_byte$5675[ebp]
$LN5@libmpq__do:
; Line 1117
	cmp	ebx, 256				; 00000100H
	je	SHORT $LN53@libmpq__do
; Line 1123
	mov	eax, DWORD PTR _out_pos$[ebp]
	mov	BYTE PTR [eax], bl
	inc	eax
; Line 1124
	dec	DWORD PTR _out_length$[ebp]
	mov	DWORD PTR _out_pos$[ebp], eax
	je	SHORT $LN53@libmpq__do
; Line 1130
	cmp	DWORD PTR [edi], 0
	je	$LL24@libmpq__do
; Line 1132
	mov	ecx, DWORD PTR [edi+ebx*4+12396]
	push	ecx
	push	edi
	call	_libmpq__huffman_call_1500E820
	add	esp, 8
; Line 1134
	jmp	$LL24@libmpq__do
$LN53@libmpq__do:
; Line 1137
	mov	eax, DWORD PTR _out_pos$[ebp]
	sub	eax, DWORD PTR _out_buf$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 1138
	mov	esp, ebp
	pop	ebp
	ret	0
_libmpq__do_decompress_huffman ENDP
_TEXT	ENDS
END
