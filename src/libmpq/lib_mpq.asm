; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\programovani\WoW Editor\Test\src\libmpq\lib_mpq.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG5266	DB	'0.4.2', 00H
	ORG $+2
$SG5268	DB	'success', 00H
$SG5269	DB	'open error on file', 00H
	ORG $+1
$SG5270	DB	'close error on file', 00H
$SG5271	DB	'lseek error on file', 00H
$SG5272	DB	'read error on file', 00H
	ORG $+1
$SG5273	DB	'write error on file', 00H
$SG5274	DB	'memory allocation error', 00H
$SG5275	DB	'format errror', 00H
	ORG $+2
$SG5276	DB	'init() wasn''t called', 00H
	ORG $+3
$SG5277	DB	'buffer size is to small', 00H
$SG5278	DB	'file or block does not exist in archive', 00H
$SG5279	DB	'we don''t know the decryption seed', 00H
	ORG $+2
$SG5280	DB	'error on unpacking file', 00H
___libmpq_error_strings DD FLAT:$SG5268
	DD	FLAT:$SG5269
	DD	FLAT:$SG5270
	DD	FLAT:$SG5271
	DD	FLAT:$SG5272
	DD	FLAT:$SG5273
	DD	FLAT:$SG5274
	DD	FLAT:$SG5275
	DD	FLAT:$SG5276
	DD	FLAT:$SG5277
	DD	FLAT:$SG5278
	DD	FLAT:$SG5279
	DD	FLAT:$SG5280
$SG5306	DB	'rb', 00H
	ORG $+1
$SG5351	DB	'(hash table)', 00H
	ORG $+3
$SG5358	DB	'(block table)', 00H
_DATA	ENDS
PUBLIC	_libmpq__version
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_libmpq__version PROC
; File c:\programovani\wow editor\test\src\libmpq\lib_mpq.c
; Line 24
	mov	eax, OFFSET $SG5266
; Line 25
	ret	0
_libmpq__version ENDP
_TEXT	ENDS
PUBLIC	_libmpq__strerror
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_returncode$ = 8					; size = 4
_libmpq__strerror PROC
; Line 46
	push	ebp
	mov	ebp, esp
; Line 48
	mov	ecx, DWORD PTR _returncode$[ebp]
	mov	eax, ecx
	neg	eax
	js	SHORT $LN1@libmpq__st
	cmp	eax, 13					; 0000000dH
	ja	SHORT $LN1@libmpq__st
; Line 52
	lea	eax, DWORD PTR [ecx*4]
	mov	ecx, OFFSET ___libmpq_error_strings
	sub	ecx, eax
	mov	eax, DWORD PTR [ecx]
; Line 53
	pop	ebp
	ret	0
$LN1@libmpq__st:
; Line 49
	xor	eax, eax
; Line 53
	pop	ebp
	ret	0
_libmpq__strerror ENDP
_TEXT	ENDS
PUBLIC	_libmpq__archive_open
EXTRN	__imp__free:PROC
EXTRN	__imp__fclose:PROC
EXTRN	_libmpq__decrypt_block:PROC
EXTRN	_libmpq__hash_string:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp___fseeki64:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__calloc:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_header_search$ = -4					; size = 4
_mpq_archive$ = 8					; size = 4
_mpq_filename$ = 12					; size = 4
_archive_offset$ = 16					; size = 8
_libmpq__archive_open PROC
; Line 57
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
; Line 65
	mov	ebx, DWORD PTR _archive_offset$[ebp+4]
	push	esi
	push	edi
	mov	edi, DWORD PTR _archive_offset$[ebp]
	mov	ecx, edi
	xor	eax, eax
	and	ecx, ebx
	mov	DWORD PTR _header_search$[ebp], eax
	cmp	ecx, -1
	jne	SHORT $LN45@libmpq__ar
; Line 67
	xor	edi, edi
	xor	ebx, ebx
	mov	DWORD PTR _archive_offset$[ebp], edi
	mov	DWORD PTR _archive_offset$[ebp+4], ebx
; Line 68
	mov	DWORD PTR _header_search$[ebp], 1
$LN45@libmpq__ar:
; Line 71
	push	80					; 00000050H
	push	1
	call	DWORD PTR __imp__calloc
	mov	esi, DWORD PTR _mpq_archive$[ebp]
	add	esp, 8
	mov	DWORD PTR [esi], eax
	test	eax, eax
	jne	SHORT $LN29@libmpq__ar
; Line 74
	pop	edi
	pop	esi
	mov	eax, -6					; fffffffaH
	pop	ebx
; Line 286
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@libmpq__ar:
; Line 78
	mov	edx, DWORD PTR _mpq_filename$[ebp]
	push	OFFSET $SG5306
	push	edx
	call	DWORD PTR __imp__fopen
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax
	xor	ecx, ecx
	add	esp, 8
	cmp	eax, ecx
	jne	SHORT $LN28@libmpq__ar
; Line 81
	or	ebx, -1
; Line 82
	jmp	$error$5307
$LN28@libmpq__ar:
; Line 86
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [edx+12], ecx
; Line 87
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax+76], ecx
; Line 93
	mov	edx, DWORD PTR [esi]
; Line 96
	push	ecx
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	edi
	push	ecx
	call	DWORD PTR __imp___fseeki64
	add	esp, 16					; 00000010H
	test	eax, eax
	js	SHORT $LN36@libmpq__ar
$LL27@libmpq__ar:
; Line 104
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	edx
	push	32					; 00000020H
	add	eax, 12					; 0000000cH
	push	1
	push	eax
	call	DWORD PTR __imp__fread
	add	esp, 16					; 00000010H
	cmp	eax, 32					; 00000020H
	jne	$LN39@libmpq__ar
; Line 112
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax+12], 441536589		; 1a51504dH
	je	SHORT $LN38@libmpq__ar
; Line 141
	cmp	DWORD PTR _header_search$[ebp], 0
	je	$LN39@libmpq__ar
; Line 147
	add	edi, 512				; 00000200H
	mov	ecx, eax
	push	0
	adc	ebx, 0
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx]
	push	ebx
	push	edi
	push	eax
	call	DWORD PTR __imp___fseeki64
	add	esp, 16					; 00000010H
	test	eax, eax
	jns	SHORT $LL27@libmpq__ar
	mov	DWORD PTR _archive_offset$[ebp+4], ebx
	mov	DWORD PTR _archive_offset$[ebp], edi
$LN36@libmpq__ar:
; Line 99
	mov	ebx, -3					; fffffffdH
; Line 108
	jmp	$error$5307
$LN38@libmpq__ar:
; Line 115
	cmp	WORD PTR [eax+24], 0
; Line 147
	mov	DWORD PTR _archive_offset$[ebp+4], ebx
	mov	DWORD PTR _archive_offset$[ebp], edi
	jne	SHORT $LN21@libmpq__ar
; Line 118
	cmp	DWORD PTR [eax+16], 32			; 00000020H
	je	SHORT $LN21@libmpq__ar
; Line 121
	mov	DWORD PTR [eax+16], 32			; 00000020H
$LN21@libmpq__ar:
; Line 126
	mov	eax, DWORD PTR [esi]
	cmp	WORD PTR [eax+24], 1
	jne	SHORT $LN19@libmpq__ar
; Line 129
	mov	ecx, 44					; 0000002cH
	cmp	DWORD PTR [eax+16], ecx
	je	SHORT $LN19@libmpq__ar
; Line 132
	mov	DWORD PTR [eax+16], ecx
$LN19@libmpq__ar:
; Line 151
	mov	eax, DWORD PTR [esi]
	mov	cl, BYTE PTR [eax+26]
	mov	edx, 512				; 00000200H
	shl	edx, cl
	mov	DWORD PTR [eax+4], edx
; Line 154
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax+8], edi
; Line 157
	mov	eax, DWORD PTR [esi]
	cmp	WORD PTR [eax+24], 1
	jne	SHORT $LN46@libmpq__ar
; Line 160
	mov	ecx, DWORD PTR [eax]
	add	edi, 32					; 00000020H
	push	0
	adc	ebx, 0
	push	ebx
	push	edi
	push	ecx
	call	DWORD PTR __imp___fseeki64
	add	esp, 16					; 00000010H
	test	eax, eax
	jns	SHORT $LN16@libmpq__ar
; Line 163
	mov	ebx, -3					; fffffffdH
; Line 164
	jmp	$error$5307
$LN16@libmpq__ar:
; Line 168
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	edx
	push	12					; 0000000cH
	add	eax, 44					; 0000002cH
	push	1
	push	eax
	call	DWORD PTR __imp__fread
	add	esp, 16					; 00000010H
	cmp	eax, 12					; 0000000cH
; Line 172
	jne	$LN48@libmpq__ar
$LN46@libmpq__ar:
; Line 181
	mov	ebx, DWORD PTR [esi]
	mov	eax, DWORD PTR [ebx+40]
	mov	edi, DWORD PTR __imp__calloc
	push	16					; 00000010H
	push	eax
	call	edi
	add	esp, 8
	mov	DWORD PTR [ebx+60], eax
	test	eax, eax
	je	$LN13@libmpq__ar
	mov	ebx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ebx+40]
	push	2
	push	ecx
	call	edi
	add	esp, 8
	mov	DWORD PTR [ebx+64], eax
	test	eax, eax
	je	$LN13@libmpq__ar
	mov	ebx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ebx+36]
	push	16					; 00000010H
	push	edx
	call	edi
	add	esp, 8
	mov	DWORD PTR [ebx+56], eax
	test	eax, eax
	je	$LN13@libmpq__ar
	mov	ebx, DWORD PTR [esi]
	mov	eax, DWORD PTR [ebx+40]
	push	12					; 0000000cH
	push	eax
	call	edi
	add	esp, 8
	mov	DWORD PTR [ebx+68], eax
	test	eax, eax
	je	$LN13@libmpq__ar
	mov	ebx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ebx+40]
	push	8
	push	ecx
	call	edi
	add	esp, 8
	mov	DWORD PTR [ebx+72], eax
	test	eax, eax
	je	$LN13@libmpq__ar
; Line 189
	mov	ecx, DWORD PTR [esi]
	movzx	eax, WORD PTR [ecx+52]
	cdq
	mov	ebx, eax
	xor	eax, eax
	xor	edi, edi
	add	edi, DWORD PTR [ecx+28]
	push	0
	adc	ebx, eax
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [ecx]
	cdq
	add	edi, eax
	adc	ebx, edx
	push	ebx
	push	edi
	push	ecx
	call	DWORD PTR __imp___fseeki64
	add	esp, 16					; 00000010H
	test	eax, eax
	jns	SHORT $LN12@libmpq__ar
; Line 192
	mov	ebx, -3					; fffffffdH
; Line 193
	jmp	$error$5307
$LN12@libmpq__ar:
; Line 197
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+36]
	push	edx
	mov	edx, DWORD PTR [eax+56]
	shl	ecx, 4
	push	ecx
	push	1
	push	edx
	call	DWORD PTR __imp__fread
; Line 205
	mov	edi, DWORD PTR [esi]
	push	768					; 00000300H
	push	OFFSET $SG5351
	call	_libmpq__hash_string
	mov	ecx, DWORD PTR [edi+56]
	push	eax
	mov	eax, DWORD PTR [edi+36]
	shl	eax, 4
	push	eax
	push	ecx
	call	_libmpq__decrypt_block
; Line 208
	mov	ecx, DWORD PTR [esi]
	movzx	eax, WORD PTR [ecx+54]
	cdq
	mov	ebx, eax
	xor	eax, eax
	xor	edi, edi
	add	edi, DWORD PTR [ecx+32]
	push	0
	adc	ebx, eax
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [ecx]
	cdq
	add	edi, eax
	adc	ebx, edx
	push	ebx
	push	edi
	push	ecx
	call	DWORD PTR __imp___fseeki64
	add	esp, 52					; 00000034H
	test	eax, eax
	jns	SHORT $LN10@libmpq__ar
; Line 211
	mov	ebx, -3					; fffffffdH
; Line 212
	jmp	$error$5307
$LN10@libmpq__ar:
; Line 216
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+40]
	mov	ebx, DWORD PTR __imp__fread
	push	edx
	mov	edx, DWORD PTR [eax+60]
	shl	ecx, 4
	push	ecx
	push	1
	push	edx
	call	ebx
; Line 224
	mov	edi, DWORD PTR [esi]
	push	768					; 00000300H
	push	OFFSET $SG5358
	call	_libmpq__hash_string
	mov	ecx, DWORD PTR [edi+60]
	push	eax
	mov	eax, DWORD PTR [edi+40]
	shl	eax, 4
	push	eax
	push	ecx
	call	_libmpq__decrypt_block
; Line 227
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR [ecx+44]
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	SHORT $LN42@libmpq__ar
	test	edx, edx
	je	SHORT $LN6@libmpq__ar
$LN42@libmpq__ar:
; Line 230
	add	edx, DWORD PTR _archive_offset$[ebp]
	push	0
	adc	eax, DWORD PTR _archive_offset$[ebp+4]
	push	eax
	push	edx
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp___fseeki64
	add	esp, 16					; 00000010H
	test	eax, eax
	jns	SHORT $LN7@libmpq__ar
; Line 233
	mov	ebx, -3					; fffffffdH
; Line 234
	jmp	SHORT $error$5307
$LN7@libmpq__ar:
; Line 238
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+40]
	mov	eax, DWORD PTR [eax+64]
	push	ecx
	add	edx, edx
	push	edx
	push	1
	push	eax
	call	ebx
	add	esp, 16					; 00000010H
$LN6@libmpq__ar:
; Line 247
	mov	ecx, DWORD PTR [esi]
	xor	eax, eax
	mov	edx, eax
	cmp	DWORD PTR [ecx+40], eax
	jbe	SHORT $LN3@libmpq__ar
	xor	edi, edi
	npad	1
$LL5@libmpq__ar:
; Line 250
	mov	ebx, DWORD PTR [esi]
	mov	ebx, DWORD PTR [ebx+72]
	mov	ecx, eax
	sub	ecx, edx
	mov	DWORD PTR [ebx+eax*8+4], ecx
; Line 253
	mov	ecx, DWORD PTR [esi]
	mov	ebx, DWORD PTR [ecx+60]
	test	DWORD PTR [ebx+edi+12], -2147483648	; 80000000H
	je	SHORT $LN4@libmpq__ar
; Line 260
	mov	ecx, DWORD PTR [ecx+72]
	mov	DWORD PTR [ecx+edx*8], eax
; Line 263
	inc	edx
$LN4@libmpq__ar:
; Line 247
	mov	ecx, DWORD PTR [esi]
	inc	eax
	add	edi, 16					; 00000010H
	cmp	eax, DWORD PTR [ecx+40]
	jb	SHORT $LL5@libmpq__ar
$LN3@libmpq__ar:
; Line 267
	mov	eax, DWORD PTR [esi]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax+76], edx
; Line 270
	xor	eax, eax
	pop	ebx
; Line 286
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@libmpq__ar:
; Line 184
	mov	ebx, -6					; fffffffaH
; Line 185
	jmp	SHORT $error$5307
$LN39@libmpq__ar:
; Line 147
	mov	DWORD PTR _archive_offset$[ebp+4], ebx
	mov	DWORD PTR _archive_offset$[ebp], edi
$LN48@libmpq__ar:
; Line 144
	mov	ebx, -7					; fffffff9H
$error$5307:
; Line 273
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@libmpq__ar
; Line 274
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__fclose
	add	esp, 4
$LN1@libmpq__ar:
; Line 276
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+72]
	mov	edi, DWORD PTR __imp__free
	push	eax
	call	edi
; Line 277
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	call	edi
; Line 278
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	edi
; Line 279
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	call	edi
; Line 280
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	call	edi
; Line 281
	mov	eax, DWORD PTR [esi]
	push	eax
	call	edi
	add	esp, 24					; 00000018H
	pop	edi
; Line 283
	mov	DWORD PTR [esi], 0
	pop	esi
; Line 285
	mov	eax, ebx
	pop	ebx
; Line 286
	mov	esp, ebp
	pop	ebp
	ret	0
_libmpq__archive_open ENDP
_TEXT	ENDS
PUBLIC	_libmpq__archive_close
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mpq_archive$ = 8					; size = 4
_libmpq__archive_close PROC
; Line 290
	push	ebp
	mov	ebp, esp
	push	esi
; Line 292
	mov	esi, DWORD PTR _mpq_archive$[ebp]
	mov	eax, DWORD PTR [esi]
	push	eax
	call	DWORD PTR __imp__fclose
	add	esp, 4
	test	eax, eax
	jns	SHORT $LN1@libmpq__ar@2
; Line 294
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 307
	pop	ebp
	ret	0
$LN1@libmpq__ar@2:
; Line 298
	mov	ecx, DWORD PTR [esi+72]
	push	edi
	mov	edi, DWORD PTR __imp__free
	push	ecx
	call	edi
; Line 299
	mov	edx, DWORD PTR [esi+68]
	push	edx
	call	edi
; Line 300
	mov	eax, DWORD PTR [esi+56]
	push	eax
	call	edi
; Line 301
	mov	ecx, DWORD PTR [esi+60]
	push	ecx
	call	edi
; Line 302
	mov	edx, DWORD PTR [esi+64]
	push	edx
	call	edi
; Line 303
	push	esi
	call	edi
	add	esp, 24					; 00000018H
	pop	edi
; Line 306
	xor	eax, eax
	pop	esi
; Line 307
	pop	ebp
	ret	0
_libmpq__archive_close ENDP
_TEXT	ENDS
PUBLIC	_libmpq__archive_packed_size
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mpq_archive$ = 8					; size = 4
_packed_size$ = 12					; size = 4
_libmpq__archive_packed_size PROC
; Line 311
	push	ebp
	mov	ebp, esp
; Line 316
	mov	edx, DWORD PTR _mpq_archive$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [edx+76], ecx
	jbe	SHORT $LN8@libmpq__ar@3
	mov	eax, DWORD PTR _packed_size$[ebp]
	push	ebx
	push	edi
$LL3@libmpq__ar@3:
; Line 318
	mov	edi, DWORD PTR [edx+72]
	mov	edi, DWORD PTR [edi+ecx*8]
	mov	ebx, DWORD PTR [edx+60]
	add	edi, edi
	mov	edi, DWORD PTR [ebx+edi*8+4]
	add	DWORD PTR [eax], edi
	adc	DWORD PTR [eax+4], 0
	inc	ecx
	cmp	ecx, DWORD PTR [edx+76]
	jb	SHORT $LL3@libmpq__ar@3
	pop	edi
	pop	ebx
$LN8@libmpq__ar@3:
; Line 322
	xor	eax, eax
; Line 323
	pop	ebp
	ret	0
_libmpq__archive_packed_size ENDP
_TEXT	ENDS
PUBLIC	_libmpq__archive_unpacked_size
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mpq_archive$ = 8					; size = 4
_unpacked_size$ = 12					; size = 4
_libmpq__archive_unpacked_size PROC
; Line 327
	push	ebp
	mov	ebp, esp
; Line 332
	mov	edx, DWORD PTR _mpq_archive$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [edx+76], ecx
	jbe	SHORT $LN8@libmpq__ar@4
	mov	eax, DWORD PTR _unpacked_size$[ebp]
	push	ebx
	push	edi
$LL3@libmpq__ar@4:
; Line 334
	mov	edi, DWORD PTR [edx+72]
	mov	edi, DWORD PTR [edi+ecx*8]
	mov	ebx, DWORD PTR [edx+60]
	add	edi, edi
	mov	edi, DWORD PTR [ebx+edi*8+8]
	add	DWORD PTR [eax], edi
	adc	DWORD PTR [eax+4], 0
	inc	ecx
	cmp	ecx, DWORD PTR [edx+76]
	jb	SHORT $LL3@libmpq__ar@4
	pop	edi
	pop	ebx
$LN8@libmpq__ar@4:
; Line 338
	xor	eax, eax
; Line 339
	pop	ebp
	ret	0
_libmpq__archive_unpacked_size ENDP
_TEXT	ENDS
PUBLIC	_libmpq__archive_offset
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mpq_archive$ = 8					; size = 4
_offset$ = 12						; size = 4
_libmpq__archive_offset PROC
; Line 343
	push	ebp
	mov	ebp, esp
; Line 345
	mov	eax, DWORD PTR _mpq_archive$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _offset$[ebp]
	cdq
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 348
	xor	eax, eax
; Line 349
	pop	ebp
	ret	0
_libmpq__archive_offset ENDP
_TEXT	ENDS
PUBLIC	_libmpq__archive_version
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mpq_archive$ = 8					; size = 4
_version$ = 12						; size = 4
_libmpq__archive_version PROC
; Line 353
	push	ebp
	mov	ebp, esp
; Line 355
	mov	eax, DWORD PTR _mpq_archive$[ebp]
	movzx	ecx, WORD PTR [eax+24]
	mov	edx, DWORD PTR _version$[ebp]
	inc	ecx
	mov	DWORD PTR [edx], ecx
; Line 358
	xor	eax, eax
; Line 359
	pop	ebp
	ret	0
_libmpq__archive_version ENDP
_TEXT	ENDS
PUBLIC	_libmpq__archive_files
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mpq_archive$ = 8					; size = 4
_files$ = 12						; size = 4
_libmpq__archive_files PROC
; Line 363
	push	ebp
	mov	ebp, esp
; Line 365
	mov	eax, DWORD PTR _mpq_archive$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _files$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 368
	xor	eax, eax
; Line 369
	pop	ebp
	ret	0
_libmpq__archive_files ENDP
_TEXT	ENDS
PUBLIC	_libmpq__file_packed_size
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mpq_archive$ = 8					; size = 4
_file_number$ = 12					; size = 4
_packed_size$ = 16					; size = 4
_libmpq__file_packed_size PROC
; Line 385
	push	ebp
	mov	ebp, esp
; Line 387
	mov	eax, DWORD PTR _mpq_archive$[ebp]
	mov	edx, DWORD PTR [eax+76]
	mov	ecx, DWORD PTR _file_number$[ebp]
	dec	edx
	cmp	ecx, edx
	ja	SHORT $LN1@libmpq__fi
; Line 390
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR [eax+60]
	mov	eax, DWORD PTR _packed_size$[ebp]
	add	ecx, ecx
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], 0
; Line 393
	xor	eax, eax
; Line 394
	pop	ebp
	ret	0
$LN1@libmpq__fi:
; Line 387
	mov	eax, -10				; fffffff6H
; Line 394
	pop	ebp
	ret	0
_libmpq__file_packed_size ENDP
_TEXT	ENDS
PUBLIC	_libmpq__file_unpacked_size
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mpq_archive$ = 8					; size = 4
_file_number$ = 12					; size = 4
_unpacked_size$ = 16					; size = 4
_libmpq__file_unpacked_size PROC
; Line 398
	push	ebp
	mov	ebp, esp
; Line 400
	mov	eax, DWORD PTR _mpq_archive$[ebp]
	mov	edx, DWORD PTR [eax+76]
	mov	ecx, DWORD PTR _file_number$[ebp]
	dec	edx
	cmp	ecx, edx
	ja	SHORT $LN1@libmpq__fi@2
; Line 403
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR [eax+60]
	mov	eax, DWORD PTR _unpacked_size$[ebp]
	add	ecx, ecx
	mov	ecx, DWORD PTR [edx+ecx*8+8]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], 0
; Line 406
	xor	eax, eax
; Line 407
	pop	ebp
	ret	0
$LN1@libmpq__fi@2:
; Line 400
	mov	eax, -10				; fffffff6H
; Line 407
	pop	ebp
	ret	0
_libmpq__file_unpacked_size ENDP
_TEXT	ENDS
PUBLIC	_libmpq__file_offset
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mpq_archive$ = 8					; size = 4
_file_number$ = 12					; size = 4
_offset$ = 16						; size = 4
_libmpq__file_offset PROC
; Line 411
	push	ebp
	mov	ebp, esp
; Line 413
	mov	eax, DWORD PTR _file_number$[ebp]
	push	esi
	mov	esi, DWORD PTR _mpq_archive$[ebp]
	mov	ecx, DWORD PTR [esi+76]
	dec	ecx
	cmp	eax, ecx
	ja	SHORT $LN1@libmpq__fi@3
; Line 416
	mov	edx, DWORD PTR [esi+72]
	mov	ecx, DWORD PTR [edx+eax*8]
	mov	eax, DWORD PTR [esi+64]
	movzx	eax, WORD PTR [eax+ecx*2]
	cdq
	push	edi
	mov	edi, eax
	mov	eax, DWORD PTR [esi+60]
	add	ecx, ecx
	mov	ecx, DWORD PTR [eax+ecx*8]
	xor	eax, eax
	xor	edx, edx
	add	edx, ecx
	adc	edi, eax
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax+4], edi
	pop	edi
	mov	DWORD PTR [eax], edx
; Line 419
	xor	eax, eax
	pop	esi
; Line 420
	pop	ebp
	ret	0
$LN1@libmpq__fi@3:
; Line 413
	mov	eax, -10				; fffffff6H
	pop	esi
; Line 420
	pop	ebp
	ret	0
_libmpq__file_offset ENDP
_TEXT	ENDS
PUBLIC	_libmpq__file_blocks
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mpq_archive$ = 8					; size = 4
_file_number$ = 12					; size = 4
_blocks$ = 16						; size = 4
_libmpq__file_blocks PROC
; Line 424
	push	ebp
	mov	ebp, esp
; Line 426
	mov	eax, DWORD PTR _mpq_archive$[ebp]
	mov	edx, DWORD PTR [eax+76]
	mov	ecx, DWORD PTR _file_number$[ebp]
	dec	edx
	cmp	ecx, edx
	ja	SHORT $LN1@libmpq__fi@4
; Line 429
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR [eax+60]
	shl	ecx, 4
	add	edx, ecx
	test	DWORD PTR [edx+12], 16777216		; 01000000H
	je	SHORT $LN5@libmpq__fi@4
	mov	ecx, DWORD PTR _blocks$[ebp]
	mov	eax, 1
	mov	DWORD PTR [ecx], eax
; Line 432
	xor	eax, eax
; Line 433
	pop	ebp
	ret	0
$LN5@libmpq__fi@4:
; Line 429
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [edx+8]
	lea	eax, DWORD PTR [eax+ecx-1]
	xor	edx, edx
	div	ecx
	mov	ecx, DWORD PTR _blocks$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 432
	xor	eax, eax
; Line 433
	pop	ebp
	ret	0
$LN1@libmpq__fi@4:
; Line 426
	mov	eax, -10				; fffffff6H
; Line 433
	pop	ebp
	ret	0
_libmpq__file_blocks ENDP
_TEXT	ENDS
PUBLIC	_libmpq__file_encrypted
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mpq_archive$ = 8					; size = 4
_file_number$ = 12					; size = 4
_encrypted$ = 16					; size = 4
_libmpq__file_encrypted PROC
; Line 437
	push	ebp
	mov	ebp, esp
; Line 439
	mov	eax, DWORD PTR _mpq_archive$[ebp]
	mov	edx, DWORD PTR [eax+76]
	mov	ecx, DWORD PTR _file_number$[ebp]
	dec	edx
	cmp	ecx, edx
	ja	SHORT $LN1@libmpq__fi@5
; Line 442
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR [eax+60]
	add	ecx, ecx
	movzx	eax, WORD PTR [edx+ecx*8+14]
	mov	ecx, DWORD PTR _encrypted$[ebp]
	and	eax, 1
	mov	DWORD PTR [ecx], eax
; Line 445
	xor	eax, eax
; Line 446
	pop	ebp
	ret	0
$LN1@libmpq__fi@5:
; Line 439
	mov	eax, -10				; fffffff6H
; Line 446
	pop	ebp
	ret	0
_libmpq__file_encrypted ENDP
_TEXT	ENDS
PUBLIC	_libmpq__file_compressed
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mpq_archive$ = 8					; size = 4
_file_number$ = 12					; size = 4
_compressed$ = 16					; size = 4
_libmpq__file_compressed PROC
; Line 450
	push	ebp
	mov	ebp, esp
; Line 452
	mov	eax, DWORD PTR _mpq_archive$[ebp]
	mov	edx, DWORD PTR [eax+76]
	mov	ecx, DWORD PTR _file_number$[ebp]
	dec	edx
	cmp	ecx, edx
	ja	SHORT $LN1@libmpq__fi@6
; Line 455
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR [eax+60]
	add	ecx, ecx
	mov	eax, DWORD PTR [edx+ecx*8+12]
	mov	ecx, DWORD PTR _compressed$[ebp]
	shr	eax, 9
	and	eax, 1
	mov	DWORD PTR [ecx], eax
; Line 458
	xor	eax, eax
; Line 459
	pop	ebp
	ret	0
$LN1@libmpq__fi@6:
; Line 452
	mov	eax, -10				; fffffff6H
; Line 459
	pop	ebp
	ret	0
_libmpq__file_compressed ENDP
_TEXT	ENDS
PUBLIC	_libmpq__file_imploded
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mpq_archive$ = 8					; size = 4
_file_number$ = 12					; size = 4
_imploded$ = 16						; size = 4
_libmpq__file_imploded PROC
; Line 463
	push	ebp
	mov	ebp, esp
; Line 465
	mov	eax, DWORD PTR _mpq_archive$[ebp]
	mov	edx, DWORD PTR [eax+76]
	mov	ecx, DWORD PTR _file_number$[ebp]
	dec	edx
	cmp	ecx, edx
	ja	SHORT $LN1@libmpq__fi@7
; Line 468
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR [eax+60]
	add	ecx, ecx
	mov	eax, DWORD PTR [edx+ecx*8+12]
	mov	ecx, DWORD PTR _imploded$[ebp]
	shr	eax, 8
	and	eax, 1
	mov	DWORD PTR [ecx], eax
; Line 471
	xor	eax, eax
; Line 472
	pop	ebp
	ret	0
$LN1@libmpq__fi@7:
; Line 465
	mov	eax, -10				; fffffff6H
; Line 472
	pop	ebp
	ret	0
_libmpq__file_imploded ENDP
_TEXT	ENDS
PUBLIC	_libmpq__file_number
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_hash3$ = -8						; size = 4
_hash2$ = -4						; size = 4
_mpq_archive$ = 8					; size = 4
_filename$ = 12						; size = 4
_number$ = 16						; size = 4
_libmpq__file_number PROC
; Line 476
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 483
	mov	eax, DWORD PTR _mpq_archive$[ebp]
	push	ebx
	mov	ebx, DWORD PTR [eax+36]
	push	esi
	push	edi
; Line 485
	mov	edi, DWORD PTR _filename$[ebp]
	push	0
	push	edi
	dec	ebx
	call	_libmpq__hash_string
	mov	esi, eax
; Line 486
	push	256					; 00000100H
	push	edi
	and	esi, ebx
	call	_libmpq__hash_string
; Line 487
	push	512					; 00000200H
	push	edi
	mov	DWORD PTR _hash2$[ebp], eax
	call	_libmpq__hash_string
; Line 493
	mov	edx, DWORD PTR _mpq_archive$[ebp]
	mov	edi, DWORD PTR [edx+56]
	mov	edx, esi
	shl	edx, 4
	add	edx, edi
	add	esp, 24					; 00000018H
	cmp	DWORD PTR [edx+12], -1
	mov	DWORD PTR _hash3$[ebp], eax
	mov	ecx, esi
	je	SHORT $LN10@libmpq__fi@8
$LL5@libmpq__fi@8:
; Line 497
	mov	eax, DWORD PTR _hash2$[ebp]
	cmp	DWORD PTR [edx], eax
	jne	SHORT $LN2@libmpq__fi@8
	mov	eax, DWORD PTR _hash3$[ebp]
	cmp	DWORD PTR [edx+4], eax
	je	SHORT $LN9@libmpq__fi@8
$LN2@libmpq__fi@8:
; Line 507
	inc	ecx
	and	ecx, ebx
	cmp	ecx, esi
	je	SHORT $LN10@libmpq__fi@8
; Line 493
	mov	edx, ecx
	shl	edx, 4
	add	edx, edi
	cmp	DWORD PTR [edx+12], -1
	jne	SHORT $LL5@libmpq__fi@8
$LN10@libmpq__fi@8:
	pop	edi
	pop	esi
; Line 514
	mov	eax, -10				; fffffff6H
	pop	ebx
; Line 515
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@libmpq__fi@8:
; Line 500
	mov	eax, DWORD PTR _mpq_archive$[ebp]
	mov	edx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [eax+72]
	add	ecx, ecx
	mov	ecx, DWORD PTR [edx+ecx*8+12]
	sub	ecx, DWORD PTR [eax+ecx*8+4]
	mov	edx, DWORD PTR _number$[ebp]
	pop	edi
	pop	esi
	mov	DWORD PTR [edx], ecx
; Line 503
	xor	eax, eax
	pop	ebx
; Line 515
	mov	esp, ebp
	pop	ebp
	ret	0
_libmpq__file_number ENDP
_TEXT	ENDS
PUBLIC	_libmpq__block_open_offset
EXTRN	_libmpq__decrypt_key:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv691 = -8						; size = 4
tv689 = -4						; size = 4
tv618 = -4						; size = 4
_mpq_archive$ = 8					; size = 4
tv651 = 12						; size = 4
_packed_size$ = 12					; size = 4
_file_number$ = 12					; size = 4
_libmpq__block_open_offset PROC
; Line 594
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
; Line 602
	mov	esi, DWORD PTR _mpq_archive$[ebp]
	mov	eax, DWORD PTR [esi+76]
	push	edi
	mov	edi, DWORD PTR _file_number$[ebp]
	dec	eax
	cmp	edi, eax
	ja	$LN23@libmpq__bl
; Line 604
	mov	ecx, DWORD PTR [esi+68]
	cmp	DWORD PTR [ecx+edi*4], 0
	lea	eax, DWORD PTR [ecx+edi*4]
	mov	DWORD PTR tv618[ebp], eax
	je	SHORT $LN22@libmpq__bl
; Line 607
	mov	edi, DWORD PTR [ecx+edi*4]
	inc	DWORD PTR [edi+8]
	pop	edi
; Line 608
	xor	eax, eax
	pop	esi
; Line 748
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@libmpq__bl:
; Line 612
	mov	eax, DWORD PTR [esi+72]
	mov	eax, DWORD PTR [eax+edi*8]
	mov	edx, DWORD PTR [esi+60]
	add	eax, eax
	push	ebx
	mov	ebx, DWORD PTR [edx+eax*8+12]
	test	ebx, 16777216				; 01000000H
	jne	SHORT $LN21@libmpq__bl
; Line 615
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [edx+eax*8+8]
	lea	eax, DWORD PTR [eax+ecx-1]
	xor	edx, edx
	div	ecx
	lea	ecx, DWORD PTR [eax*4+4]
	mov	DWORD PTR _packed_size$[ebp], ecx
; Line 617
	jmp	SHORT $LN20@libmpq__bl
$LN21@libmpq__bl:
; Line 620
	mov	DWORD PTR _packed_size$[ebp], 8
$LN20@libmpq__bl:
; Line 624
	test	ebx, 67108864				; 04000000H
	je	SHORT $LN19@libmpq__bl
; Line 627
	add	DWORD PTR _packed_size$[ebp], 4
$LN19@libmpq__bl:
; Line 631
	mov	ebx, DWORD PTR __imp__calloc
	push	12					; 0000000cH
	push	1
	call	ebx
	mov	edx, DWORD PTR tv618[ebp]
	add	esp, 8
	mov	DWORD PTR [edx], eax
	test	eax, eax
	jne	SHORT $LN18@libmpq__bl
$LN33@libmpq__bl:
; Line 634
	mov	ebx, -6					; fffffffaH
; Line 635
	jmp	$error$5536
$LN18@libmpq__bl:
; Line 639
	mov	eax, DWORD PTR _packed_size$[ebp]
	push	eax
	push	1
	call	ebx
	mov	ecx, DWORD PTR [esi+68]
	mov	edx, DWORD PTR [ecx+edi*4]
	add	esp, 8
	mov	DWORD PTR [edx+4], eax
	test	eax, eax
; Line 643
	je	SHORT $LN33@libmpq__bl
; Line 647
	mov	eax, DWORD PTR [esi+68]
	mov	ecx, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [ecx+8], 1
; Line 651
	mov	edx, DWORD PTR [esi+72]
	mov	eax, DWORD PTR [edx+edi*8]
	mov	ebx, DWORD PTR [esi+60]
	add	eax, eax
	mov	ecx, DWORD PTR [ebx+eax*8+12]
	test	ecx, 65280				; 0000ff00H
	je	$LN29@libmpq__bl
	test	ecx, 16777216				; 01000000H
	jne	$LN7@libmpq__bl
; Line 654
	mov	ecx, DWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR [esi+64]
	movzx	eax, WORD PTR [edx+ecx*2]
	cdq
	add	ecx, ecx
	mov	ecx, DWORD PTR [ebx+ecx*8]
	xor	edx, edx
	xor	ebx, ebx
	add	edx, ecx
	adc	eax, ebx
	mov	DWORD PTR tv691[ebp], eax
	mov	eax, DWORD PTR [esi+8]
	mov	ecx, edx
	cdq
	add	ecx, eax
	mov	eax, DWORD PTR tv691[ebp]
	push	0
	adc	eax, edx
	mov	edx, DWORD PTR [esi]
	push	eax
	push	ecx
	push	edx
	call	DWORD PTR __imp___fseeki64
	add	esp, 16					; 00000010H
	test	eax, eax
	jns	SHORT $LN15@libmpq__bl
; Line 657
	mov	ebx, -3					; fffffffdH
; Line 658
	jmp	$error$5536
$LN15@libmpq__bl:
; Line 662
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+68]
	mov	ebx, DWORD PTR _packed_size$[ebp]
	mov	edx, DWORD PTR [ecx+edi*4]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	push	ebx
	push	1
	push	eax
	call	DWORD PTR __imp__fread
	add	esp, 16					; 00000010H
	test	eax, eax
	jns	SHORT $LN14@libmpq__bl
; Line 665
	mov	ebx, -4					; fffffffcH
; Line 666
	jmp	$error$5536
$LN14@libmpq__bl:
; Line 673
	mov	ecx, DWORD PTR [esi+68]
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, eax
	je	SHORT $LN13@libmpq__bl
	add	eax, 4
	cmp	ecx, eax
	je	SHORT $LN13@libmpq__bl
; Line 676
	mov	edx, DWORD PTR [esi+72]
	mov	eax, DWORD PTR [edx+edi*8]
	mov	ecx, DWORD PTR [esi+60]
	add	eax, eax
	or	DWORD PTR [ecx+eax*8+12], 65536		; 00010000H
	lea	eax, DWORD PTR [ecx+eax*8+12]
$LN13@libmpq__bl:
; Line 680
	mov	edx, DWORD PTR [esi+72]
	mov	eax, DWORD PTR [edx+edi*8]
	mov	ecx, DWORD PTR [esi+60]
	add	eax, eax
	test	DWORD PTR [ecx+eax*8+12], 65536		; 00010000H
	je	$LN1@libmpq__bl
; Line 683
	mov	edx, DWORD PTR [esi+68]
	mov	eax, DWORD PTR [edx+edi*4]
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [eax+4]
	push	eax
	push	ecx
	push	ebx
	push	edx
	call	_libmpq__decrypt_key
	add	esp, 16					; 00000010H
	test	eax, eax
; Line 687
	js	SHORT $LN32@libmpq__bl
; Line 691
	mov	eax, DWORD PTR [esi+68]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	dec	ecx
	push	ecx
	push	ebx
	push	edx
	call	_libmpq__decrypt_block
	add	esp, 12					; 0000000cH
	test	eax, eax
; Line 695
	js	SHORT $LN32@libmpq__bl
; Line 699
	mov	eax, DWORD PTR [esi+68]
	mov	ecx, DWORD PTR [eax+edi*4]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx], ebx
	je	$LN1@libmpq__bl
$LN32@libmpq__bl:
; Line 703
	mov	ebx, -11				; fffffff5H
$error$5536:
; Line 743
	mov	eax, DWORD PTR [esi+68]
	mov	ecx, DWORD PTR [eax+edi*4]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__free
; Line 744
	mov	eax, DWORD PTR [esi+68]
	mov	ecx, DWORD PTR [eax+edi*4]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 8
; Line 747
	mov	eax, ebx
	pop	ebx
	pop	edi
	pop	esi
; Line 748
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@libmpq__bl:
; Line 711
	test	ecx, 16777216				; 01000000H
	jne	$LN7@libmpq__bl
; Line 714
	mov	eax, DWORD PTR [ebx+eax*8+8]
	mov	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR tv651[ebp], eax
	lea	eax, DWORD PTR [ebx+eax-1]
	xor	edx, edx
	div	ebx
	xor	ecx, ecx
	inc	eax
	je	$LN1@libmpq__bl
	npad	2
$LL6@libmpq__bl:
; Line 717
	mov	ebx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR tv651[ebp]
	lea	eax, DWORD PTR [ebx+edx-1]
	xor	edx, edx
	div	ebx
	cmp	ecx, eax
	jne	SHORT $LN3@libmpq__bl
; Line 720
	mov	eax, DWORD PTR [esi+68]
	mov	edx, DWORD PTR [eax+edi*4]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR tv651[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 722
	jmp	SHORT $LN5@libmpq__bl
$LN3@libmpq__bl:
; Line 725
	mov	edx, DWORD PTR [esi+68]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [edx+4]
	mov	eax, ebx
	imul	eax, ecx
	mov	DWORD PTR [edx+ecx*4], eax
$LN5@libmpq__bl:
; Line 714
	mov	eax, DWORD PTR [esi+72]
	mov	edx, DWORD PTR [eax+edi*8]
	mov	eax, DWORD PTR [esi+60]
	mov	ebx, DWORD PTR [esi+4]
	add	edx, edx
	mov	eax, DWORD PTR [eax+edx*8+8]
	mov	DWORD PTR tv651[ebp], eax
	lea	eax, DWORD PTR [ebx+eax-1]
	xor	edx, edx
	div	ebx
	inc	ecx
	inc	eax
	cmp	ecx, eax
	jb	SHORT $LL6@libmpq__bl
; Line 738
	pop	ebx
	pop	edi
	xor	eax, eax
	pop	esi
; Line 748
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@libmpq__bl:
; Line 732
	mov	ecx, DWORD PTR [esi+68]
	mov	edx, DWORD PTR [ecx+edi*4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], 0
; Line 733
	mov	ecx, DWORD PTR [esi+72]
	mov	edx, DWORD PTR [ecx+edi*8]
	mov	ecx, DWORD PTR [esi+68]
	mov	eax, DWORD PTR [esi+60]
	mov	ecx, DWORD PTR [ecx+edi*4]
	mov	ecx, DWORD PTR [ecx+4]
	add	edx, edx
	mov	edx, DWORD PTR [eax+edx*8+4]
	mov	DWORD PTR [ecx+4], edx
$LN1@libmpq__bl:
; Line 738
	pop	ebx
	pop	edi
	xor	eax, eax
	pop	esi
; Line 748
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@libmpq__bl:
	pop	edi
; Line 602
	mov	eax, -10				; fffffff6H
	pop	esi
; Line 748
	mov	esp, ebp
	pop	ebp
	ret	0
_libmpq__block_open_offset ENDP
_TEXT	ENDS
PUBLIC	_libmpq__block_close_offset
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mpq_archive$ = 8					; size = 4
_file_number$ = 12					; size = 4
_libmpq__block_close_offset PROC
; Line 752
	push	ebp
	mov	ebp, esp
	push	esi
; Line 754
	mov	esi, DWORD PTR _mpq_archive$[ebp]
	mov	eax, DWORD PTR [esi+76]
	push	edi
	mov	edi, DWORD PTR _file_number$[ebp]
	dec	eax
	cmp	edi, eax
	ja	SHORT $LN3@libmpq__bl@2
; Line 756
	mov	ecx, DWORD PTR [esi+68]
	cmp	DWORD PTR [ecx+edi*4], 0
	jne	SHORT $LN2@libmpq__bl@2
; Line 759
	pop	edi
	or	eax, -1
	pop	esi
; Line 779
	pop	ebp
	ret	0
$LN2@libmpq__bl@2:
; Line 762
	mov	eax, DWORD PTR [ecx+edi*4]
	dec	DWORD PTR [eax+8]
; Line 764
	mov	eax, DWORD PTR [esi+68]
	mov	ecx, DWORD PTR [eax+edi*4]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN1@libmpq__bl@2
; Line 767
	pop	edi
	xor	eax, eax
	pop	esi
; Line 779
	pop	ebp
	ret	0
$LN1@libmpq__bl@2:
; Line 771
	mov	ecx, DWORD PTR [ecx+4]
	push	ebx
	mov	ebx, DWORD PTR __imp__free
	push	ecx
	call	ebx
; Line 772
	mov	edx, DWORD PTR [esi+68]
	mov	eax, DWORD PTR [edx+edi*4]
	push	eax
	call	ebx
; Line 775
	mov	ecx, DWORD PTR [esi+68]
	add	esp, 8
	pop	ebx
	mov	DWORD PTR [ecx+edi*4], 0
	pop	edi
; Line 778
	xor	eax, eax
	pop	esi
; Line 779
	pop	ebp
	ret	0
$LN3@libmpq__bl@2:
	pop	edi
; Line 754
	mov	eax, -10				; fffffff6H
	pop	esi
; Line 779
	pop	ebp
	ret	0
_libmpq__block_close_offset ENDP
_TEXT	ENDS
PUBLIC	_libmpq__block_unpacked_size
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv278 = -4						; size = 4
_mpq_archive$ = 8					; size = 4
_file_number$ = 12					; size = 4
_block_number$ = 16					; size = 4
_unpacked_size$ = 20					; size = 4
_libmpq__block_unpacked_size PROC
; Line 783
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 785
	mov	ecx, DWORD PTR _mpq_archive$[ebp]
	mov	eax, DWORD PTR [ecx+76]
	push	ebx
	mov	ebx, DWORD PTR _file_number$[ebp]
	dec	eax
	cmp	ebx, eax
	ja	$LN9@libmpq__bl@3
; Line 788
	mov	edx, DWORD PTR [ecx+72]
	push	esi
	push	edi
	mov	edi, DWORD PTR [edx+ebx*8]
	shl	edi, 4
	add	edi, DWORD PTR [ecx+60]
	mov	edx, DWORD PTR [edi+12]
	and	edx, 16777216				; 01000000H
	mov	DWORD PTR tv278[ebp], edx
	je	SHORT $LN13@libmpq__bl@3
	mov	eax, 1
	jmp	SHORT $LN14@libmpq__bl@3
$LN13@libmpq__bl@3:
	mov	esi, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edi+8]
	xor	edx, edx
	lea	eax, DWORD PTR [eax+esi-1]
	div	esi
	mov	edx, DWORD PTR tv278[ebp]
$LN14@libmpq__bl@3:
	cmp	DWORD PTR _block_number$[ebp], eax
	jae	$LN7@libmpq__bl@3
; Line 792
	mov	eax, DWORD PTR [ecx+68]
	cmp	DWORD PTR [eax+ebx*4], 0
	lea	eax, DWORD PTR [eax+ebx*4]
	je	SHORT $LN5@libmpq__bl@3
	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@libmpq__bl@3
; Line 799
	mov	ebx, DWORD PTR _unpacked_size$[ebp]
	test	edx, edx
	je	SHORT $LN4@libmpq__bl@3
; Line 802
	mov	edx, DWORD PTR [edi+8]
	mov	DWORD PTR [ebx], edx
	mov	DWORD PTR [ebx+4], 0
$LN4@libmpq__bl@3:
; Line 806
	mov	edx, DWORD PTR _file_number$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	mov	eax, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [ecx+60]
	add	eax, eax
	test	DWORD PTR [edx+eax*8+12], 16777216	; 01000000H
	jne	SHORT $LN1@libmpq__bl@3
; Line 809
	mov	esi, DWORD PTR [edx+eax*8+8]
	mov	edi, DWORD PTR [ecx+4]
	xor	edx, edx
	lea	eax, DWORD PTR [edi+esi-1]
	div	edi
; Line 812
	mov	DWORD PTR [ebx+4], 0
	lea	edx, DWORD PTR [eax-1]
	mov	eax, DWORD PTR _block_number$[ebp]
	cmp	eax, edx
	jae	SHORT $LN2@libmpq__bl@3
	mov	eax, edi
	pop	edi
	mov	DWORD PTR [ebx], eax
	pop	esi
; Line 822
	xor	eax, eax
	pop	ebx
; Line 823
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@libmpq__bl@3:
; Line 817
	mov	ecx, edi
	imul	ecx, eax
	sub	esi, ecx
	mov	DWORD PTR [ebx], esi
$LN1@libmpq__bl@3:
; Line 822
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 823
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@libmpq__bl@3:
	pop	edi
	pop	esi
; Line 795
	or	eax, -1
	pop	ebx
; Line 823
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@libmpq__bl@3:
	pop	edi
	pop	esi
; Line 788
	mov	eax, -10				; fffffff6H
	pop	ebx
; Line 823
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@libmpq__bl@3:
; Line 785
	mov	eax, -10				; fffffff6H
	pop	ebx
; Line 823
	mov	esp, ebp
	pop	ebp
	ret	0
_libmpq__block_unpacked_size ENDP
_TEXT	ENDS
PUBLIC	_libmpq__block_seed
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_mpq_archive$ = 8					; size = 4
_file_number$ = 12					; size = 4
_block_number$ = 16					; size = 4
_seed$ = 20						; size = 4
_libmpq__block_seed PROC
; Line 827
	push	ebp
	mov	ebp, esp
; Line 829
	mov	ecx, DWORD PTR _mpq_archive$[ebp]
	mov	eax, DWORD PTR [ecx+76]
	push	edi
	mov	edi, DWORD PTR _file_number$[ebp]
	dec	eax
	cmp	edi, eax
	ja	SHORT $LN5@libmpq__bl@4
; Line 832
	mov	edx, DWORD PTR [ecx+72]
	mov	eax, DWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR [ecx+60]
	add	eax, eax
	test	DWORD PTR [edx+eax*8+12], 16777216	; 01000000H
	je	SHORT $LN9@libmpq__bl@4
	mov	eax, 1
	jmp	SHORT $LN10@libmpq__bl@4
$LN9@libmpq__bl@4:
	mov	eax, DWORD PTR [edx+eax*8+8]
	push	esi
	mov	esi, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [eax+esi-1]
	xor	edx, edx
	div	esi
	pop	esi
$LN10@libmpq__bl@4:
	mov	edx, DWORD PTR _block_number$[ebp]
	cmp	edx, eax
	jae	SHORT $LN5@libmpq__bl@4
; Line 836
	mov	ecx, DWORD PTR [ecx+68]
	cmp	DWORD PTR [ecx+edi*4], 0
	lea	eax, DWORD PTR [ecx+edi*4]
	je	SHORT $LN1@libmpq__bl@4
	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@libmpq__bl@4
; Line 843
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _seed$[ebp]
	add	eax, edx
	mov	DWORD PTR [ecx], eax
; Line 846
	xor	eax, eax
	pop	edi
; Line 847
	pop	ebp
	ret	0
$LN1@libmpq__bl@4:
; Line 839
	or	eax, -1
	pop	edi
; Line 847
	pop	ebp
	ret	0
$LN5@libmpq__bl@4:
; Line 829
	mov	eax, -10				; fffffff6H
	pop	edi
; Line 847
	pop	ebp
	ret	0
_libmpq__block_seed ENDP
_TEXT	ENDS
PUBLIC	_libmpq__block_read
EXTRN	_libmpq__decompress_block:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_block_offset$ = -36					; size = 8
_imploded$ = -28					; size = 4
_seed$ = -24						; size = 4
_encrypted$ = -20					; size = 4
_unpacked_size$ = -16					; size = 8
tv433 = -12						; size = 4
_compressed$ = -8					; size = 4
_tb$ = -4						; size = 4
_mpq_archive$ = 8					; size = 4
_file_number$ = 12					; size = 4
_block_number$ = 16					; size = 4
_out_buf$ = 20						; size = 4
_out_size$ = 24						; size = 8
_transferred$ = 32					; size = 4
_libmpq__block_read PROC
; Line 851
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
; Line 864
	mov	esi, DWORD PTR _mpq_archive$[ebp]
	mov	eax, DWORD PTR [esi+76]
	xor	ecx, ecx
	push	edi
	mov	edi, DWORD PTR _file_number$[ebp]
	dec	eax
	mov	DWORD PTR _seed$[ebp], ecx
	mov	DWORD PTR _encrypted$[ebp], ecx
	mov	DWORD PTR _compressed$[ebp], ecx
	mov	DWORD PTR _imploded$[ebp], ecx
	mov	DWORD PTR _tb$[ebp], ecx
	mov	DWORD PTR _unpacked_size$[ebp], ecx
	mov	DWORD PTR _unpacked_size$[ebp+4], ecx
	cmp	edi, eax
	ja	$LN18@libmpq__bl@5
; Line 867
	mov	edx, DWORD PTR [esi+72]
	mov	edx, DWORD PTR [edx+edi*8]
	mov	eax, DWORD PTR [esi+60]
	add	edx, edx
	test	DWORD PTR [eax+edx*8+12], 16777216	; 01000000H
	push	ebx
	je	SHORT $LN22@libmpq__bl@5
	lea	eax, DWORD PTR [ecx+1]
	jmp	SHORT $LN23@libmpq__bl@5
$LN22@libmpq__bl@5:
	mov	eax, DWORD PTR [eax+edx*8+8]
	mov	ebx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [eax+ebx-1]
	xor	edx, edx
	div	ebx
$LN23@libmpq__bl@5:
	mov	ebx, DWORD PTR _block_number$[ebp]
	cmp	ebx, eax
	jae	$LN16@libmpq__bl@5
; Line 871
	mov	edx, DWORD PTR [esi+68]
	cmp	DWORD PTR [edx+edi*4], ecx
	lea	eax, DWORD PTR [edx+edi*4]
	je	$LN14@libmpq__bl@5
	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR [eax+4], ecx
	je	$LN14@libmpq__bl@5
; Line 878
	lea	ecx, DWORD PTR _unpacked_size$[ebp]
	push	ecx
	push	ebx
	push	edi
	push	esi
	call	_libmpq__block_unpacked_size
; Line 881
	mov	edx, DWORD PTR _unpacked_size$[ebp+4]
	add	esp, 16					; 00000010H
	cmp	edx, DWORD PTR _out_size$[ebp+4]
	jl	SHORT $LN13@libmpq__bl@5
	jg	SHORT $LN24@libmpq__bl@5
	mov	eax, DWORD PTR _unpacked_size$[ebp]
	cmp	eax, DWORD PTR _out_size$[ebp]
	jbe	SHORT $LN13@libmpq__bl@5
$LN24@libmpq__bl@5:
	pop	ebx
	pop	edi
; Line 884
	mov	eax, -9					; fffffff7H
	pop	esi
; Line 995
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@libmpq__bl@5:
; Line 888
	mov	edx, DWORD PTR [esi+68]
	mov	eax, DWORD PTR [edx+edi*4]
	mov	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [esi+72]
	mov	ecx, DWORD PTR [ecx+edi*8]
	mov	eax, DWORD PTR [edx+ebx*4]
	lea	edi, DWORD PTR [edx+ebx*4]
	mov	edx, DWORD PTR [esi+64]
; Line 889
	mov	edi, DWORD PTR [edi+4]
	mov	DWORD PTR tv433[ebp], eax
	movzx	eax, WORD PTR [edx+ecx*2]
	cdq
	mov	edx, DWORD PTR [esi+60]
	add	ecx, ecx
	mov	ecx, DWORD PTR [edx+ecx*8]
	xor	edx, edx
	xor	ebx, ebx
	add	ebx, ecx
	adc	eax, edx
	xor	ecx, ecx
	add	ebx, DWORD PTR tv433[ebp]
; Line 892
	push	ecx
	adc	eax, ecx
	sub	edi, DWORD PTR tv433[ebp]
	mov	DWORD PTR _block_offset$[ebp+4], eax
	mov	eax, DWORD PTR [esi+8]
	cdq
	add	eax, ebx
	adc	edx, DWORD PTR _block_offset$[ebp+4]
	push	edx
	mov	edx, DWORD PTR [esi]
	push	eax
	push	edx
	call	DWORD PTR __imp___fseeki64
	add	esp, 16					; 00000010H
	test	eax, eax
	jns	SHORT $LN12@libmpq__bl@5
; Line 895
	pop	ebx
	pop	edi
	mov	eax, -3					; fffffffdH
	pop	esi
; Line 995
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@libmpq__bl@5:
; Line 899
	push	edi
	push	1
	call	DWORD PTR __imp__calloc
	mov	ebx, eax
	add	esp, 8
	test	ebx, ebx
	jne	SHORT $LN11@libmpq__bl@5
; Line 902
	lea	eax, DWORD PTR [ebx-6]
	pop	ebx
	pop	edi
	pop	esi
; Line 995
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@libmpq__bl@5:
; Line 906
	mov	eax, DWORD PTR [esi]
	push	eax
	push	edi
	push	1
	push	ebx
	call	DWORD PTR __imp__fread
; Line 916
	mov	edx, DWORD PTR _file_number$[ebp]
	lea	ecx, DWORD PTR _encrypted$[ebp]
	push	ecx
	push	edx
	push	esi
	call	_libmpq__file_encrypted
	add	esp, 28					; 0000001cH
; Line 919
	cmp	DWORD PTR _encrypted$[ebp], 1
	jne	SHORT $LN8@libmpq__bl@5
; Line 922
	mov	ecx, DWORD PTR _block_number$[ebp]
	mov	edx, DWORD PTR _file_number$[ebp]
	lea	eax, DWORD PTR _seed$[ebp]
	push	eax
	push	ecx
	push	edx
	push	esi
	call	_libmpq__block_seed
; Line 925
	mov	eax, DWORD PTR _seed$[ebp]
	push	eax
	push	edi
	push	ebx
	call	_libmpq__decrypt_block
	add	esp, 28					; 0000001cH
	test	eax, eax
	jns	SHORT $LN8@libmpq__bl@5
; Line 928
	push	ebx
	call	DWORD PTR __imp__free
	add	esp, 4
	pop	ebx
	pop	edi
; Line 931
	mov	eax, -11				; fffffff5H
	pop	esi
; Line 995
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@libmpq__bl@5:
; Line 936
	mov	edx, DWORD PTR _file_number$[ebp]
	lea	ecx, DWORD PTR _compressed$[ebp]
	push	ecx
	push	edx
	push	esi
	call	_libmpq__file_compressed
	add	esp, 12					; 0000000cH
; Line 939
	cmp	DWORD PTR _compressed$[ebp], 1
	jne	SHORT $LN25@libmpq__bl@5
; Line 942
	mov	eax, DWORD PTR _out_size$[ebp]
	mov	ecx, DWORD PTR _out_buf$[ebp]
	push	512					; 00000200H
	push	eax
	push	ecx
	push	edi
	push	ebx
	call	_libmpq__decompress_block
	add	esp, 20					; 00000014H
	mov	DWORD PTR _tb$[ebp], eax
	test	eax, eax
; Line 948
	js	SHORT $LN30@libmpq__bl@5
$LN25@libmpq__bl@5:
; Line 953
	mov	eax, DWORD PTR _file_number$[ebp]
	lea	edx, DWORD PTR _imploded$[ebp]
	push	edx
	push	eax
	push	esi
	call	_libmpq__file_imploded
; Line 956
	mov	esi, DWORD PTR _imploded$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, 1
	jne	SHORT $LN26@libmpq__bl@5
; Line 959
	mov	ecx, DWORD PTR _out_size$[ebp]
	mov	edx, DWORD PTR _out_buf$[ebp]
	push	256					; 00000100H
	push	ecx
	push	edx
	push	edi
	push	ebx
	call	_libmpq__decompress_block
	add	esp, 20					; 00000014H
	mov	DWORD PTR _tb$[ebp], eax
	test	eax, eax
; Line 965
	js	SHORT $LN30@libmpq__bl@5
$LN26@libmpq__bl@5:
; Line 970
	cmp	DWORD PTR _compressed$[ebp], 0
	jne	SHORT $LN27@libmpq__bl@5
	test	esi, esi
	jne	SHORT $LN27@libmpq__bl@5
; Line 973
	mov	eax, DWORD PTR _out_size$[ebp]
	mov	ecx, DWORD PTR _out_buf$[ebp]
	push	768					; 00000300H
	push	eax
	push	ecx
	push	edi
	push	ebx
	call	_libmpq__decompress_block
	add	esp, 20					; 00000014H
	mov	DWORD PTR _tb$[ebp], eax
	test	eax, eax
	jns	SHORT $LN27@libmpq__bl@5
$LN30@libmpq__bl@5:
; Line 976
	push	ebx
	call	DWORD PTR __imp__free
	add	esp, 4
	pop	ebx
	pop	edi
; Line 979
	mov	eax, -12				; fffffff4H
	pop	esi
; Line 995
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@libmpq__bl@5:
; Line 984
	push	ebx
	call	DWORD PTR __imp__free
; Line 987
	mov	ecx, DWORD PTR _transferred$[ebp]
	add	esp, 4
	test	ecx, ecx
	je	SHORT $LN1@libmpq__bl@5
; Line 990
	mov	eax, DWORD PTR _tb$[ebp]
	cdq
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
$LN1@libmpq__bl@5:
; Line 994
	pop	ebx
	pop	edi
	xor	eax, eax
	pop	esi
; Line 995
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@libmpq__bl@5:
	pop	ebx
	pop	edi
; Line 874
	or	eax, -1
	pop	esi
; Line 995
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@libmpq__bl@5:
	pop	ebx
	pop	edi
; Line 867
	mov	eax, -10				; fffffff6H
	pop	esi
; Line 995
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@libmpq__bl@5:
	pop	edi
; Line 864
	mov	eax, -10				; fffffff6H
	pop	esi
; Line 995
	mov	esp, ebp
	pop	ebp
	ret	0
_libmpq__block_read ENDP
_TEXT	ENDS
PUBLIC	_libmpq__file_read
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_transferred_block$ = -28				; size = 8
_unpacked_size$ = -20					; size = 8
_transferred_total$ = -12				; size = 8
_blocks$ = -4						; size = 4
_mpq_archive$ = 8					; size = 4
_result$ = 12						; size = 4
_file_number$ = 12					; size = 4
_out_buf$ = 16						; size = 4
_out_size$ = 20						; size = 8
_transferred$ = 28					; size = 4
_libmpq__file_read PROC
; Line 519
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	ebx
; Line 530
	mov	ebx, DWORD PTR _file_number$[ebp]
	push	esi
	mov	esi, DWORD PTR _mpq_archive$[ebp]
	mov	eax, DWORD PTR [esi+76]
	push	edi
	xor	edi, edi
	dec	eax
	mov	DWORD PTR _blocks$[ebp], edi
	mov	DWORD PTR _transferred_block$[ebp], edi
	mov	DWORD PTR _transferred_block$[ebp+4], edi
	mov	DWORD PTR _transferred_total$[ebp], edi
	mov	DWORD PTR _transferred_total$[ebp+4], edi
	cmp	ebx, eax
	ja	$LN8@libmpq__fi@9
; Line 533
	mov	ecx, DWORD PTR [esi+72]
	mov	edx, DWORD PTR [ecx+ebx*8]
	mov	eax, DWORD PTR [esi+60]
	add	edx, edx
	mov	ecx, DWORD PTR [eax+edx*8+8]
	xor	eax, eax
; Line 536
	cmp	eax, DWORD PTR _out_size$[ebp+4]
	jl	SHORT $LN7@libmpq__fi@9
	jg	SHORT $LN19@libmpq__fi@9
	cmp	ecx, DWORD PTR _out_size$[ebp]
	jbe	SHORT $LN7@libmpq__fi@9
$LN19@libmpq__fi@9:
	pop	edi
	pop	esi
; Line 539
	mov	eax, -9					; fffffff7H
	pop	ebx
; Line 590
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@libmpq__fi@9:
; Line 546
	lea	ecx, DWORD PTR _blocks$[ebp]
	push	ecx
	push	ebx
	push	esi
	call	_libmpq__file_blocks
; Line 549
	push	ebx
	push	esi
	call	_libmpq__block_open_offset
	add	esp, 20					; 00000014H
	cmp	eax, edi
; Line 552
	jl	$LN10@libmpq__fi@9
; Line 556
	xor	eax, eax
	cmp	DWORD PTR _blocks$[ebp], eax
	ja	SHORT $LN5@libmpq__fi@9
$LN3@libmpq__fi@9:
; Line 579
	push	ebx
	push	esi
	call	_libmpq__block_close_offset
; Line 582
	mov	eax, DWORD PTR _transferred$[ebp]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@libmpq__fi@9
; Line 585
	mov	ecx, DWORD PTR _transferred_total$[ebp]
	mov	edx, DWORD PTR _transferred_total$[ebp+4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
$LN1@libmpq__fi@9:
; Line 589
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 590
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LL20@libmpq__fi@9:
; Line 556
	xor	eax, eax
$LN5@libmpq__fi@9:
; Line 562
	lea	edx, DWORD PTR _unpacked_size$[ebp]
	push	edx
	push	edi
	push	ebx
	push	esi
	mov	DWORD PTR _unpacked_size$[ebp], eax
	mov	DWORD PTR _unpacked_size$[ebp+4], eax
	call	_libmpq__block_unpacked_size
; Line 565
	mov	ecx, DWORD PTR _unpacked_size$[ebp+4]
	mov	edx, DWORD PTR _unpacked_size$[ebp]
	lea	eax, DWORD PTR _transferred_block$[ebp]
	push	eax
	mov	eax, DWORD PTR _transferred_total$[ebp]
	add	eax, DWORD PTR _out_buf$[ebp]
	push	ecx
	push	edx
	push	eax
	push	edi
	push	ebx
	push	esi
	call	_libmpq__block_read
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _result$[ebp], eax
	test	eax, eax
	js	SHORT $LN17@libmpq__fi@9
; Line 574
	mov	edx, DWORD PTR _transferred_block$[ebp]
	add	DWORD PTR _transferred_total$[ebp], edx
	mov	eax, DWORD PTR _transferred_block$[ebp+4]
	adc	DWORD PTR _transferred_total$[ebp+4], eax
	inc	edi
	cmp	edi, DWORD PTR _blocks$[ebp]
	jb	SHORT $LL20@libmpq__fi@9
; Line 565
	jmp	SHORT $LN3@libmpq__fi@9
$LN17@libmpq__fi@9:
; Line 568
	push	ebx
	push	esi
	call	_libmpq__block_close_offset
; Line 571
	mov	eax, DWORD PTR _result$[ebp]
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
; Line 590
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@libmpq__fi@9:
; Line 530
	mov	eax, -10				; fffffff6H
$LN10@libmpq__fi@9:
	pop	edi
	pop	esi
	pop	ebx
; Line 590
	mov	esp, ebp
	pop	ebp
	ret	0
_libmpq__file_read ENDP
_TEXT	ENDS
END
