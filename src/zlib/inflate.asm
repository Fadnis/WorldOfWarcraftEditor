; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\programovani\WoW Editor\Test\src\zlib\inflate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?lenfix@?1??fixedtables@@9@9 DB 060H			; `fixedtables'::`2'::lenfix
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c0H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a0H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e0H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	090H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d0H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b0H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f0H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c8H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a8H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e8H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	098H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d8H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b8H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f8H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c4H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a4H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e4H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	094H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d4H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b4H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f4H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0ccH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0acH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0ecH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09cH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0dcH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bcH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fcH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c2H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a2H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e2H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	092H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d2H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b2H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f2H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0caH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0aaH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0eaH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09aH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0daH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0baH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0faH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c6H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a6H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e6H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	096H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d6H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b6H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f6H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0ceH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0aeH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0eeH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09eH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0deH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0beH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0feH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c1H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a1H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e1H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	091H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d1H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b1H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f1H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c9H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a9H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e9H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	099H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d9H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b9H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f9H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c5H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a5H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e5H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	095H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d5H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b5H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f5H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0cdH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0adH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0edH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09dH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0ddH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bdH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fdH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c3H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a3H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e3H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	093H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d3H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b3H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f3H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0cbH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0abH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0ebH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09bH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0dbH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0bbH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0fbH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c7H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a7H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e7H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	097H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d7H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b7H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f7H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0cfH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0afH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0efH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09fH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0dfH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0bfH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0ffH
?distfix@?1??fixedtables@@9@9 DB 010H			; `fixedtables'::`2'::distfix
	DB	05H
	DW	01H
	DB	017H
	DB	05H
	DW	0101H
	DB	013H
	DB	05H
	DW	011H
	DB	01bH
	DB	05H
	DW	01001H
	DB	011H
	DB	05H
	DW	05H
	DB	019H
	DB	05H
	DW	0401H
	DB	015H
	DB	05H
	DW	041H
	DB	01dH
	DB	05H
	DW	04001H
	DB	010H
	DB	05H
	DW	03H
	DB	018H
	DB	05H
	DW	0201H
	DB	014H
	DB	05H
	DW	021H
	DB	01cH
	DB	05H
	DW	02001H
	DB	012H
	DB	05H
	DW	09H
	DB	01aH
	DB	05H
	DW	0801H
	DB	016H
	DB	05H
	DW	081H
	DB	040H
	DB	05H
	DW	00H
	DB	010H
	DB	05H
	DW	02H
	DB	017H
	DB	05H
	DW	0181H
	DB	013H
	DB	05H
	DW	019H
	DB	01bH
	DB	05H
	DW	01801H
	DB	011H
	DB	05H
	DW	07H
	DB	019H
	DB	05H
	DW	0601H
	DB	015H
	DB	05H
	DW	061H
	DB	01dH
	DB	05H
	DW	06001H
	DB	010H
	DB	05H
	DW	04H
	DB	018H
	DB	05H
	DW	0301H
	DB	014H
	DB	05H
	DW	031H
	DB	01cH
	DB	05H
	DW	03001H
	DB	012H
	DB	05H
	DW	0dH
	DB	01aH
	DB	05H
	DW	0c01H
	DB	016H
	DB	05H
	DW	0c1H
	DB	040H
	DB	05H
	DW	00H
?order@?1??inflate@@9@9 DW 010H				; `inflate'::`2'::order
	DW	011H
	DW	012H
	DW	00H
	DW	08H
	DW	07H
	DW	09H
	DW	06H
	DW	0aH
	DW	05H
	DW	0bH
	DW	04H
	DW	0cH
	DW	03H
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0fH
CONST	ENDS
_DATA	SEGMENT
$SG3864	DB	'1.2.5', 00H
	ORG $+2
$SG3987	DB	'incorrect header check', 00H
	ORG $+1
$SG3991	DB	'unknown compression method', 00H
	ORG $+1
$SG4001	DB	'invalid window size', 00H
$SG4021	DB	'unknown compression method', 00H
	ORG $+1
$SG4024	DB	'unknown header flags set', 00H
	ORG $+3
$SG4163	DB	'header crc mismatch', 00H
$SG4230	DB	'invalid block type', 00H
	ORG $+1
$SG4253	DB	'invalid stored block lengths', 00H
	ORG $+3
$SG4296	DB	'too many length or distance symbols', 00H
$SG4325	DB	'invalid code lengths set', 00H
	ORG $+3
$SG4378	DB	'invalid bit length repeat', 00H
	ORG $+2
$SG4431	DB	'invalid bit length repeat', 00H
	ORG $+2
$SG4439	DB	'invalid code -- missing end-of-block', 00H
	ORG $+3
$SG4443	DB	'invalid literal/lengths set', 00H
$SG4447	DB	'invalid distances set', 00H
	ORG $+2
$SG4496	DB	'invalid literal/length code', 00H
$SG4551	DB	'invalid distance code', 00H
	ORG $+2
$SG4579	DB	'invalid distance too far back', 00H
	ORG $+2
$SG4609	DB	'incorrect data check', 00H
	ORG $+3
$SG4629	DB	'incorrect length check', 00H
_DATA	ENDS
PUBLIC	_inflateReset
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateReset PROC
; File c:\programovani\wow editor\test\src\zlib\inflate.c
; Line 105
	push	ebp
	mov	ebp, esp
; Line 108
	mov	edx, DWORD PTR _strm$[ebp]
	xor	ecx, ecx
	cmp	edx, ecx
	je	SHORT $LN1@inflateRes
	mov	eax, DWORD PTR [edx+28]
	cmp	eax, ecx
	je	SHORT $LN1@inflateRes
; Line 110
	mov	DWORD PTR [eax+28], ecx
	mov	DWORD PTR [edx+20], ecx
	mov	DWORD PTR [edx+8], ecx
; Line 111
	mov	DWORD PTR [edx+24], ecx
; Line 112
	mov	DWORD PTR [edx+48], 1
; Line 113
	mov	DWORD PTR [eax], ecx
; Line 114
	mov	DWORD PTR [eax+4], ecx
; Line 115
	mov	DWORD PTR [eax+12], ecx
; Line 117
	mov	DWORD PTR [eax+32], ecx
; Line 118
	mov	DWORD PTR [eax+40], ecx
; Line 119
	mov	DWORD PTR [eax+44], ecx
; Line 120
	mov	DWORD PTR [eax+48], ecx
; Line 121
	mov	DWORD PTR [eax+56], ecx
; Line 122
	mov	DWORD PTR [eax+60], ecx
; Line 123
	lea	ecx, DWORD PTR [eax+1328]
	mov	DWORD PTR [eax+20], 32768		; 00008000H
	mov	DWORD PTR [eax+108], ecx
	mov	DWORD PTR [eax+80], ecx
	mov	DWORD PTR [eax+76], ecx
; Line 124
	mov	DWORD PTR [eax+7104], 1
; Line 125
	mov	DWORD PTR [eax+7108], -1
; Line 127
	xor	eax, eax
; Line 128
	pop	ebp
	ret	0
$LN1@inflateRes:
; Line 108
	mov	eax, -2					; fffffffeH
; Line 128
	pop	ebp
	ret	0
_inflateReset ENDP
_TEXT	ENDS
PUBLIC	_inflateReset2
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_inflateReset2 PROC
; Line 133
	push	ebp
	mov	ebp, esp
; Line 138
	mov	ecx, DWORD PTR _strm$[ebp]
	push	edi
	test	ecx, ecx
	je	SHORT $LN7@inflateRes@2
	mov	edi, DWORD PTR [ecx+28]
	test	edi, edi
	je	SHORT $LN7@inflateRes@2
; Line 142
	push	ebx
	push	esi
	mov	esi, DWORD PTR _windowBits$[ebp]
	test	esi, esi
	jns	SHORT $LN6@inflateRes@2
; Line 143
	xor	ebx, ebx
; Line 144
	neg	esi
; Line 146
	jmp	SHORT $LN4@inflateRes@2
$LN6@inflateRes@2:
; Line 147
	mov	ebx, esi
	sar	ebx, 4
	inc	ebx
; Line 149
	cmp	esi, 48					; 00000030H
	jge	SHORT $LN4@inflateRes@2
; Line 150
	and	esi, 15					; 0000000fH
$LN4@inflateRes@2:
; Line 155
	test	esi, esi
	je	SHORT $LN3@inflateRes@2
	cmp	esi, 8
	jl	SHORT $LN2@inflateRes@2
	cmp	esi, 15					; 0000000fH
	jle	SHORT $LN3@inflateRes@2
$LN2@inflateRes@2:
	pop	esi
	pop	ebx
; Line 156
	mov	eax, -2					; fffffffeH
	pop	edi
; Line 166
	pop	ebp
	ret	0
$LN3@inflateRes@2:
; Line 157
	mov	eax, DWORD PTR [edi+52]
	test	eax, eax
	je	SHORT $LN1@inflateRes@2
	cmp	DWORD PTR [edi+36], esi
	je	SHORT $LN1@inflateRes@2
; Line 158
	push	eax
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [ecx+36]
	push	eax
	call	ecx
; Line 159
	mov	ecx, DWORD PTR _strm$[ebp]
	add	esp, 8
	mov	DWORD PTR [edi+52], 0
$LN1@inflateRes@2:
; Line 165
	push	ecx
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+36], esi
	call	_inflateReset
	add	esp, 4
	pop	esi
	pop	ebx
	pop	edi
; Line 166
	pop	ebp
	ret	0
$LN7@inflateRes@2:
; Line 138
	mov	eax, -2					; fffffffeH
	pop	edi
; Line 166
	pop	ebp
	ret	0
_inflateReset2 ENDP
_TEXT	ENDS
PUBLIC	_inflateInit2_
EXTRN	_zcfree:PROC
EXTRN	_zcalloc:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_inflateInit2_ PROC
; Line 173
	push	ebp
	mov	ebp, esp
; Line 178
	mov	eax, DWORD PTR _version$[ebp]
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	je	$LN6@inflateIni
	mov	al, BYTE PTR [eax]
	cmp	al, BYTE PTR $SG3864
	jne	$LN6@inflateIni
	cmp	DWORD PTR _stream_size$[ebp], 56	; 00000038H
	jne	$LN6@inflateIni
; Line 180
	push	esi
	mov	esi, DWORD PTR _strm$[ebp]
	cmp	esi, ebx
	jne	SHORT $LN5@inflateIni
	pop	esi
	lea	eax, DWORD PTR [ebx-2]
	pop	ebx
; Line 199
	pop	ebp
	ret	0
$LN5@inflateIni:
; Line 181
	mov	DWORD PTR [esi+24], ebx
; Line 182
	cmp	DWORD PTR [esi+32], ebx
	jne	SHORT $LN4@inflateIni
; Line 183
	mov	DWORD PTR [esi+32], OFFSET _zcalloc
; Line 184
	mov	DWORD PTR [esi+40], ebx
$LN4@inflateIni:
; Line 186
	cmp	DWORD PTR [esi+36], ebx
	jne	SHORT $LN3@inflateIni
	mov	DWORD PTR [esi+36], OFFSET _zcfree
$LN3@inflateIni:
; Line 188
	mov	ecx, DWORD PTR [esi+40]
	mov	edx, DWORD PTR [esi+32]
	push	edi
	push	7116					; 00001bccH
	push	1
	push	ecx
	call	edx
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 189
	cmp	edi, ebx
	jne	SHORT $LN2@inflateIni
	pop	edi
	pop	esi
	mov	eax, -4					; fffffffcH
	pop	ebx
; Line 199
	pop	ebp
	ret	0
$LN2@inflateIni:
; Line 193
	mov	eax, DWORD PTR _windowBits$[ebp]
	push	eax
	mov	DWORD PTR [esi+28], edi
	push	esi
	mov	DWORD PTR [edi+52], ebx
	call	_inflateReset2
	mov	ebx, eax
	add	esp, 8
; Line 194
	test	ebx, ebx
	je	SHORT $LN1@inflateIni
; Line 195
	mov	ecx, DWORD PTR [esi+40]
	mov	edx, DWORD PTR [esi+36]
	push	edi
	push	ecx
	call	edx
	add	esp, 8
; Line 196
	mov	DWORD PTR [esi+28], 0
$LN1@inflateIni:
; Line 198
	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
; Line 199
	pop	ebp
	ret	0
$LN6@inflateIni:
; Line 179
	mov	eax, -6					; fffffffaH
	pop	ebx
; Line 199
	pop	ebp
	ret	0
_inflateInit2_ ENDP
_TEXT	ENDS
PUBLIC	_inflateInit_
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_version$ = 12						; size = 4
_stream_size$ = 16					; size = 4
_inflateInit_ PROC
; Line 205
	push	ebp
	mov	ebp, esp
; Line 206
	mov	eax, DWORD PTR _stream_size$[ebp]
	mov	ecx, DWORD PTR _version$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	push	eax
	push	ecx
	push	15					; 0000000fH
	push	edx
	call	_inflateInit2_
	add	esp, 16					; 00000010H
; Line 207
	pop	ebp
	ret	0
_inflateInit_ ENDP
_TEXT	ENDS
PUBLIC	_inflatePrime
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_inflatePrime PROC
; Line 213
	push	ebp
	mov	ebp, esp
; Line 216
	mov	eax, DWORD PTR _strm$[ebp]
	xor	edx, edx
	cmp	eax, edx
	je	SHORT $LN4@inflatePri
	mov	eax, DWORD PTR [eax+28]
	cmp	eax, edx
	je	SHORT $LN4@inflatePri
; Line 218
	mov	ecx, DWORD PTR _bits$[ebp]
	cmp	ecx, edx
	jge	SHORT $LN3@inflatePri
; Line 219
	mov	DWORD PTR [eax+56], edx
; Line 220
	mov	DWORD PTR [eax+60], edx
; Line 221
	xor	eax, eax
; Line 228
	pop	ebp
	ret	0
$LN3@inflatePri:
	push	esi
; Line 223
	cmp	ecx, 16					; 00000010H
	jg	SHORT $LN1@inflatePri
	mov	edx, DWORD PTR [eax+60]
	lea	esi, DWORD PTR [edx+ecx]
	cmp	esi, 32					; 00000020H
	ja	SHORT $LN1@inflatePri
; Line 224
	push	edi
	mov	edi, 1
	shl	edi, cl
; Line 225
	mov	ecx, edx
; Line 226
	mov	DWORD PTR [eax+60], esi
	dec	edi
	and	edi, DWORD PTR _value$[ebp]
	shl	edi, cl
	add	DWORD PTR [eax+56], edi
	pop	edi
; Line 227
	xor	eax, eax
	pop	esi
; Line 228
	pop	ebp
	ret	0
$LN1@inflatePri:
; Line 223
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 228
	pop	ebp
	ret	0
$LN4@inflatePri:
; Line 216
	mov	eax, -2					; fffffffeH
; Line 228
	pop	ebp
	ret	0
_inflatePrime ENDP
; Function compile flags: /Ogtp
_fixedtables PROC
; _state$ = eax
; Line 277
	mov	DWORD PTR [eax+76], OFFSET ?lenfix@?1??fixedtables@@9@9
; Line 278
	mov	DWORD PTR [eax+84], 9
; Line 279
	mov	DWORD PTR [eax+80], OFFSET ?distfix@?1??fixedtables@@9@9
; Line 280
	mov	DWORD PTR [eax+88], 5
; Line 281
	ret	0
_fixedtables ENDP
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_dist$ = -4						; size = 4
_updatewindow PROC
; _strm$ = ebx
; _out$ = eax
; Line 361
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 365
	mov	esi, DWORD PTR [ebx+28]
; Line 368
	cmp	DWORD PTR [esi+52], 0
	push	edi
	mov	edi, eax
	jne	SHORT $LN13@updatewind
; Line 371
	mov	ecx, DWORD PTR [esi+36]
	mov	edx, DWORD PTR [ebx+32]
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR [ebx+40]
	push	1
	push	eax
	push	ecx
	call	edx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+52], eax
; Line 372
	test	eax, eax
	jne	SHORT $LN13@updatewind
	pop	edi
	mov	eax, 1
	pop	esi
; Line 406
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@updatewind:
; Line 376
	xor	eax, eax
	cmp	DWORD PTR [esi+40], eax
	jne	SHORT $LN8@updatewind
; Line 377
	mov	ecx, DWORD PTR [esi+36]
	mov	edx, 1
	shl	edx, cl
; Line 378
	mov	DWORD PTR [esi+48], eax
; Line 379
	mov	DWORD PTR [esi+44], eax
	mov	DWORD PTR [esi+40], edx
$LN8@updatewind:
; Line 383
	sub	edi, DWORD PTR [ebx+16]
; Line 384
	mov	eax, DWORD PTR [esi+40]
	cmp	edi, eax
	jb	SHORT $LN7@updatewind
; Line 385
	mov	ecx, DWORD PTR [ebx+12]
	mov	edx, DWORD PTR [esi+52]
	push	eax
	sub	ecx, eax
	push	ecx
	push	edx
	call	_memcpy
; Line 387
	mov	eax, DWORD PTR [esi+40]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+44], eax
	pop	edi
	mov	DWORD PTR [esi+48], 0
; Line 405
	xor	eax, eax
	pop	esi
; Line 406
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@updatewind:
; Line 390
	sub	eax, DWORD PTR [esi+48]
	mov	DWORD PTR _dist$[ebp], eax
; Line 391
	cmp	eax, edi
	jbe	SHORT $LN5@updatewind
	mov	DWORD PTR _dist$[ebp], edi
	mov	eax, edi
$LN5@updatewind:
; Line 392
	mov	ecx, DWORD PTR [ebx+12]
	mov	edx, DWORD PTR [esi+52]
	add	edx, DWORD PTR [esi+48]
	push	eax
	sub	ecx, edi
	push	ecx
	push	edx
	call	_memcpy
; Line 393
	mov	ecx, DWORD PTR _dist$[ebp]
	add	esp, 12					; 0000000cH
	sub	edi, ecx
; Line 394
	je	SHORT $LN4@updatewind
; Line 395
	mov	eax, DWORD PTR [ebx+12]
	mov	ecx, DWORD PTR [esi+52]
	push	edi
	sub	eax, edi
	push	eax
	push	ecx
	call	_memcpy
; Line 397
	mov	edx, DWORD PTR [esi+40]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+48], edi
	pop	edi
; Line 402
	mov	DWORD PTR [esi+44], edx
; Line 405
	xor	eax, eax
	pop	esi
; Line 406
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@updatewind:
; Line 401
	mov	eax, DWORD PTR [esi+40]
	add	DWORD PTR [esi+48], ecx
	cmp	DWORD PTR [esi+48], eax
	jne	SHORT $LN2@updatewind
	mov	DWORD PTR [esi+48], 0
$LN2@updatewind:
; Line 402
	mov	edx, DWORD PTR [esi+44]
	cmp	edx, eax
	jae	SHORT $LN1@updatewind
	add	edx, ecx
	mov	DWORD PTR [esi+44], edx
$LN1@updatewind:
; Line 405
	pop	edi
	xor	eax, eax
	pop	esi
; Line 406
	mov	esp, ebp
	pop	ebp
	ret	0
_updatewindow ENDP
_TEXT	ENDS
PUBLIC	_inflate
EXTRN	_inflate_fast:PROC
EXTRN	_inflate_table:PROC
EXTRN	_adler32:PROC
EXTRN	_crc32:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_in$ = -48						; size = 4
tv3073 = -44						; size = 4
tv2359 = -44						; size = 4
tv2354 = -44						; size = 4
tv2286 = -44						; size = 4
tv2171 = -44						; size = 4
tv2155 = -44						; size = 4
tv2132 = -44						; size = 4
_from$ = -44						; size = 4
_ret$ = -40						; size = 4
tv2304 = -36						; size = 4
tv2129 = -36						; size = 4
_last$ = -36						; size = 4
_out$ = -32						; size = 4
tv2384 = -28						; size = 4
tv2357 = -28						; size = 4
tv2351 = -28						; size = 4
tv2287 = -28						; size = 4
_len$ = -28						; size = 4
_put$ = -24						; size = 4
_hbuf$ = -20						; size = 4
_left$ = -16						; size = 4
_here$ = -12						; size = 4
_copy$ = -12						; size = 4
_next$ = -8						; size = 4
_have$ = -4						; size = 4
tv1330 = 8						; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_inflate PROC
; Line 592
	push	ebp
	mov	ebp, esp
; Line 613
	mov	eax, DWORD PTR _strm$[ebp]
	sub	esp, 48					; 00000030H
	push	edi
	test	eax, eax
	je	$LN506@inflate
	mov	edi, DWORD PTR [eax+28]
	test	edi, edi
	je	$LN506@inflate
	cmp	DWORD PTR [eax+12], 0
	je	$LN506@inflate
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN507@inflate
	cmp	DWORD PTR [eax+4], 0
	jne	$LN506@inflate
$LN507@inflate:
; Line 617
	cmp	DWORD PTR [edi], 11			; 0000000bH
	jne	SHORT $LN504@inflate
	mov	DWORD PTR [edi], 12			; 0000000cH
$LN504@inflate:
; Line 618
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _put$[ebp], ecx
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [eax+4]
	push	ebx
	mov	ebx, DWORD PTR [edi+56]
	mov	DWORD PTR _have$[ebp], eax
; Line 619
	mov	DWORD PTR _in$[ebp], eax
; Line 623
	mov	eax, DWORD PTR [edi]
	push	esi
	mov	esi, DWORD PTR [edi+60]
	mov	DWORD PTR _left$[ebp], ecx
	mov	DWORD PTR _next$[ebp], edx
	mov	DWORD PTR _out$[ebp], ecx
	mov	DWORD PTR _ret$[ebp], 0
	cmp	eax, 30					; 0000001eH
	ja	$LN11@inflate
$LL501@inflate:
	jmp	DWORD PTR $LN803@inflate[eax*4]
$LN497@inflate:
; Line 625
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	jne	SHORT $LN495@inflate
; Line 626
	mov	DWORD PTR [edi], 12			; 0000000cH
; Line 627
	jmp	$LN498@inflate
$LN495@inflate:
; Line 629
	cmp	esi, 16					; 00000010H
	jae	SHORT $LN494@inflate
$LL492@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	inc	edx
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	add	ebx, eax
	cmp	esi, 16					; 00000010H
	jb	SHORT $LL492@inflate
$LN494@inflate:
; Line 631
	test	BYTE PTR [edi+8], 2
	je	SHORT $LN486@inflate
	cmp	ebx, 35615				; 00008b1fH
	jne	SHORT $LN486@inflate
; Line 632
	push	0
	push	0
	push	0
	call	_crc32
	mov	DWORD PTR [edi+24], eax
; Line 633
	push	2
	lea	ecx, DWORD PTR _hbuf$[ebp]
	mov	WORD PTR _hbuf$[ebp], bx
	mov	edx, DWORD PTR [edi+24]
	push	ecx
	push	edx
	call	_crc32
; Line 636
	mov	edx, DWORD PTR _next$[ebp]
	add	esp, 24					; 00000018H
	xor	ebx, ebx
	mov	DWORD PTR [edi+24], eax
	xor	esi, esi
	mov	DWORD PTR [edi], 1
	jmp	$LN498@inflate
$LN486@inflate:
; Line 639
	mov	eax, DWORD PTR [edi+32]
	mov	DWORD PTR [edi+16], 0
	test	eax, eax
	je	SHORT $LN479@inflate
; Line 640
	mov	DWORD PTR [eax+48], -1
$LN479@inflate:
; Line 645
	test	BYTE PTR [edi+8], 1
	je	$LN477@inflate
	movzx	eax, bl
	shl	eax, 8
	mov	ecx, ebx
	shr	ecx, 8
	add	eax, ecx
	xor	edx, edx
	mov	ecx, 31					; 0000001fH
	div	ecx
	test	edx, edx
	jne	$LN477@inflate
; Line 650
	mov	edx, ebx
	and	dl, 15					; 0000000fH
	cmp	dl, 8
	je	SHORT $LN475@inflate
; Line 651
	mov	eax, DWORD PTR _strm$[ebp]
; Line 653
	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG3991
	jmp	$LN802@inflate
$LN475@inflate:
; Line 657
	mov	eax, DWORD PTR [edi+36]
	shr	ebx, 4
	mov	ecx, ebx
	and	ecx, 15					; 0000000fH
	sub	esi, 4
	add	ecx, 8
	test	eax, eax
	jne	SHORT $LN472@inflate
; Line 658
	mov	DWORD PTR [edi+36], ecx
$LN470@inflate:
; Line 664
	mov	edx, 1
	shl	edx, cl
; Line 666
	push	0
	push	0
	push	0
	mov	DWORD PTR [edi+20], edx
	call	_adler32
	mov	ecx, DWORD PTR _strm$[ebp]
; Line 669
	mov	edx, DWORD PTR _next$[ebp]
	shr	ebx, 8
	not	ebx
	and	ebx, 2
	or	ebx, 9
	mov	DWORD PTR [edi+24], eax
	mov	DWORD PTR [ecx+48], eax
	mov	DWORD PTR [edi], ebx
	add	esp, 12					; 0000000cH
	xor	ebx, ebx
	xor	esi, esi
	jmp	$LN498@inflate
$LN472@inflate:
; Line 659
	cmp	ecx, eax
	jbe	SHORT $LN470@inflate
; Line 660
	mov	ecx, DWORD PTR _strm$[ebp]
; Line 662
	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG4001
	jmp	$LN802@inflate
$LN477@inflate:
; Line 646
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG3987
; Line 648
	mov	edx, DWORD PTR _next$[ebp]
	jmp	$LN802@inflate
$LN465@inflate:
; Line 672
	cmp	esi, 16					; 00000010H
	jae	SHORT $LN464@inflate
	npad	9
$LL462@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	inc	edx
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	add	ebx, eax
	cmp	esi, 16					; 00000010H
	jb	SHORT $LL462@inflate
$LN464@inflate:
; Line 673
	mov	DWORD PTR [edi+16], ebx
; Line 674
	cmp	bl, 8
	je	SHORT $LN456@inflate
; Line 675
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG4021
; Line 677
	jmp	$LN802@inflate
$LN456@inflate:
; Line 679
	test	ebx, 57344				; 0000e000H
	je	SHORT $LN455@inflate
; Line 680
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG4024
; Line 682
	jmp	$LN802@inflate
$LN455@inflate:
; Line 684
	mov	eax, DWORD PTR [edi+32]
	test	eax, eax
	je	SHORT $LN454@inflate
; Line 685
	mov	ecx, ebx
	shr	ecx, 8
	and	ecx, 1
	mov	DWORD PTR [eax], ecx
$LN454@inflate:
; Line 686
	test	DWORD PTR [edi+16], 512			; 00000200H
	je	SHORT $LN450@inflate
	mov	BYTE PTR _hbuf$[ebp], bl
	shr	ebx, 8
	push	2
	lea	edx, DWORD PTR _hbuf$[ebp]
	mov	BYTE PTR _hbuf$[ebp+1], bl
	mov	eax, DWORD PTR [edi+24]
	push	edx
	push	eax
	call	_crc32
	mov	edx, DWORD PTR _next$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+24], eax
$LN450@inflate:
; Line 687
	xor	ebx, ebx
	xor	esi, esi
; Line 688
	mov	DWORD PTR [edi], 2
; Line 690
	jmp	SHORT $LL442@inflate
$LN445@inflate:
	cmp	esi, 32					; 00000020H
	jae	SHORT $LN444@inflate
	npad	4
$LL442@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	inc	edx
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	add	ebx, eax
	cmp	esi, 32					; 00000020H
	jb	SHORT $LL442@inflate
$LN444@inflate:
; Line 691
	mov	eax, DWORD PTR [edi+32]
	test	eax, eax
	je	SHORT $LN436@inflate
; Line 692
	mov	DWORD PTR [eax+4], ebx
$LN436@inflate:
; Line 693
	test	DWORD PTR [edi+16], 512			; 00000200H
	je	SHORT $LN432@inflate
	mov	BYTE PTR _hbuf$[ebp], bl
	mov	ecx, ebx
	mov	edx, ebx
	shr	ecx, 8
	shr	edx, 16					; 00000010H
	shr	ebx, 24					; 00000018H
	push	4
	lea	eax, DWORD PTR _hbuf$[ebp]
	mov	BYTE PTR _hbuf$[ebp+1], cl
	mov	BYTE PTR _hbuf$[ebp+2], dl
	mov	BYTE PTR _hbuf$[ebp+3], bl
	mov	ecx, DWORD PTR [edi+24]
	push	eax
	push	ecx
	call	_crc32
	mov	edx, DWORD PTR _next$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+24], eax
$LN432@inflate:
; Line 694
	xor	ebx, ebx
	xor	esi, esi
; Line 695
	mov	DWORD PTR [edi], 3
; Line 697
	jmp	SHORT $LL424@inflate
$LN427@inflate:
	cmp	esi, 16					; 00000010H
	jae	SHORT $LN426@inflate
	npad	9
$LL424@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	inc	edx
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	add	ebx, eax
	cmp	esi, 16					; 00000010H
	jb	SHORT $LL424@inflate
$LN426@inflate:
; Line 698
	mov	eax, DWORD PTR [edi+32]
	test	eax, eax
	je	SHORT $LN418@inflate
; Line 699
	mov	ecx, ebx
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR [eax+8], ecx
; Line 700
	mov	ecx, DWORD PTR [edi+32]
	mov	eax, ebx
	shr	eax, 8
	mov	DWORD PTR [ecx+12], eax
$LN418@inflate:
; Line 702
	test	DWORD PTR [edi+16], 512			; 00000200H
	je	SHORT $LN414@inflate
	mov	BYTE PTR _hbuf$[ebp], bl
	shr	ebx, 8
	push	2
	lea	edx, DWORD PTR _hbuf$[ebp]
	mov	BYTE PTR _hbuf$[ebp+1], bl
	mov	eax, DWORD PTR [edi+24]
	push	edx
	push	eax
	call	_crc32
	mov	edx, DWORD PTR _next$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+24], eax
$LN414@inflate:
; Line 703
	xor	ebx, ebx
	xor	esi, esi
; Line 704
	mov	DWORD PTR [edi], 4
$LN727@inflate:
; Line 706
	test	DWORD PTR [edi+16], 1024		; 00000400H
	je	SHORT $LN409@inflate
; Line 707
	cmp	esi, 16					; 00000010H
	jae	SHORT $LN407@inflate
$LL405@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	inc	edx
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	add	ebx, eax
	cmp	esi, 16					; 00000010H
	jb	SHORT $LL405@inflate
$LN407@inflate:
; Line 709
	mov	eax, DWORD PTR [edi+32]
	mov	DWORD PTR [edi+64], ebx
	test	eax, eax
	je	SHORT $LN399@inflate
; Line 710
	mov	DWORD PTR [eax+20], ebx
$LN399@inflate:
; Line 711
	test	DWORD PTR [edi+16], 512			; 00000200H
	je	SHORT $LN395@inflate
	mov	BYTE PTR _hbuf$[ebp], bl
	shr	ebx, 8
	push	2
	lea	ecx, DWORD PTR _hbuf$[ebp]
	mov	BYTE PTR _hbuf$[ebp+1], bl
	mov	edx, DWORD PTR [edi+24]
	push	ecx
	push	edx
	call	_crc32
	mov	edx, DWORD PTR _next$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+24], eax
$LN395@inflate:
; Line 712
	xor	ebx, ebx
	xor	esi, esi
; Line 714
	jmp	SHORT $LN390@inflate
$LN409@inflate:
	mov	eax, DWORD PTR [edi+32]
	test	eax, eax
	je	SHORT $LN390@inflate
; Line 715
	mov	DWORD PTR [eax+16], 0
$LN390@inflate:
; Line 716
	mov	DWORD PTR [edi], 5
$LN729@inflate:
; Line 718
	test	DWORD PTR [edi+16], 1024		; 00000400H
	je	$LN383@inflate
; Line 719
	mov	eax, DWORD PTR [edi+64]
; Line 720
	mov	ecx, DWORD PTR _have$[ebp]
	mov	DWORD PTR _copy$[ebp], eax
	cmp	eax, ecx
	jbe	SHORT $LN387@inflate
	mov	eax, ecx
	mov	DWORD PTR _copy$[ebp], ecx
$LN387@inflate:
; Line 721
	test	eax, eax
	je	SHORT $LN386@inflate
; Line 723
	mov	ecx, DWORD PTR [edi+32]
	test	ecx, ecx
	je	SHORT $LN764@inflate
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR tv2132[ebp], ecx
	test	ecx, ecx
	je	SHORT $LN764@inflate
; Line 724
	mov	edx, DWORD PTR [edi+32]
	mov	ecx, DWORD PTR [edx+20]
	sub	ecx, DWORD PTR [edi+64]
; Line 727
	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR _len$[ebp], ecx
	add	ecx, eax
	cmp	ecx, edx
	jbe	SHORT $LN510@inflate
	sub	edx, DWORD PTR _len$[ebp]
	mov	eax, edx
$LN510@inflate:
	mov	edx, DWORD PTR _next$[ebp]
	push	eax
	mov	eax, DWORD PTR tv2132[ebp]
	add	eax, DWORD PTR _len$[ebp]
	push	edx
	push	eax
	call	_memcpy
	mov	eax, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR _next$[ebp]
	add	esp, 12					; 0000000cH
$LN764@inflate:
; Line 729
	test	DWORD PTR [edi+16], 512			; 00000200H
	je	SHORT $LN384@inflate
; Line 730
	mov	edx, DWORD PTR _copy$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	mov	ecx, DWORD PTR [edi+24]
	push	edx
	push	eax
	push	ecx
	call	_crc32
	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR _copy$[ebp]
	add	esp, 12					; 0000000cH
$LN384@inflate:
; Line 731
	sub	DWORD PTR _have$[ebp], eax
; Line 732
	add	edx, eax
; Line 733
	sub	DWORD PTR [edi+64], eax
	mov	DWORD PTR _next$[ebp], edx
$LN386@inflate:
; Line 735
	cmp	DWORD PTR [edi+64], 0
	jne	$inf_leave$3971
$LN383@inflate:
; Line 737
	mov	DWORD PTR [edi+64], 0
; Line 738
	mov	DWORD PTR [edi], 6
$LN730@inflate:
; Line 740
	test	DWORD PTR [edi+16], 2048		; 00000800H
	je	$LN381@inflate
; Line 741
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
; Line 742
	xor	eax, eax
	npad	3
$LL379@inflate:
; Line 744
	movzx	ecx, BYTE PTR [eax+edx]
	inc	eax
	mov	DWORD PTR _copy$[ebp], eax
; Line 747
	mov	eax, DWORD PTR [edi+32]
	mov	DWORD PTR _len$[ebp], ecx
	test	eax, eax
	je	SHORT $LN378@inflate
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR tv2155[ebp], ecx
	test	ecx, ecx
	je	SHORT $LN378@inflate
	mov	ecx, DWORD PTR [edi+64]
	cmp	ecx, DWORD PTR [eax+32]
	jae	SHORT $LN378@inflate
; Line 748
	mov	edx, DWORD PTR tv2155[ebp]
	mov	al, BYTE PTR _len$[ebp]
	mov	BYTE PTR [edx+ecx], al
	inc	DWORD PTR [edi+64]
	mov	edx, DWORD PTR _next$[ebp]
$LN378@inflate:
; Line 749
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN375@inflate
	mov	eax, DWORD PTR _copy$[ebp]
	cmp	eax, DWORD PTR _have$[ebp]
	jb	SHORT $LL379@inflate
$LN375@inflate:
; Line 750
	test	DWORD PTR [edi+16], 512			; 00000200H
	je	SHORT $LN374@inflate
; Line 751
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR _next$[ebp]
	mov	eax, DWORD PTR [edi+24]
	push	ecx
	push	edx
	push	eax
	call	_crc32
	mov	edx, DWORD PTR _next$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+24], eax
$LN374@inflate:
; Line 752
	mov	eax, DWORD PTR _copy$[ebp]
	sub	DWORD PTR _have$[ebp], eax
; Line 753
	add	edx, eax
; Line 754
	cmp	DWORD PTR _len$[ebp], 0
	mov	DWORD PTR _next$[ebp], edx
	jne	$inf_leave$3971
; Line 756
	jmp	SHORT $LN371@inflate
$LN381@inflate:
	mov	eax, DWORD PTR [edi+32]
	test	eax, eax
	je	SHORT $LN371@inflate
; Line 757
	mov	DWORD PTR [eax+28], 0
$LN371@inflate:
; Line 758
	mov	DWORD PTR [edi+64], 0
; Line 759
	mov	DWORD PTR [edi], 7
$LN734@inflate:
; Line 761
	test	DWORD PTR [edi+16], 4096		; 00001000H
	je	$LN369@inflate
; Line 762
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
; Line 763
	xor	eax, eax
	npad	1
$LL367@inflate:
; Line 765
	movzx	ecx, BYTE PTR [eax+edx]
	inc	eax
	mov	DWORD PTR _copy$[ebp], eax
; Line 768
	mov	eax, DWORD PTR [edi+32]
	mov	DWORD PTR _len$[ebp], ecx
	test	eax, eax
	je	SHORT $LN366@inflate
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR tv2171[ebp], ecx
	test	ecx, ecx
	je	SHORT $LN366@inflate
	mov	ecx, DWORD PTR [edi+64]
	cmp	ecx, DWORD PTR [eax+40]
	jae	SHORT $LN366@inflate
; Line 769
	mov	edx, DWORD PTR tv2171[ebp]
	mov	al, BYTE PTR _len$[ebp]
	mov	BYTE PTR [edx+ecx], al
	inc	DWORD PTR [edi+64]
	mov	edx, DWORD PTR _next$[ebp]
$LN366@inflate:
; Line 770
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN363@inflate
	mov	eax, DWORD PTR _copy$[ebp]
	cmp	eax, DWORD PTR _have$[ebp]
	jb	SHORT $LL367@inflate
$LN363@inflate:
; Line 771
	test	DWORD PTR [edi+16], 512			; 00000200H
	je	SHORT $LN362@inflate
; Line 772
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR _next$[ebp]
	mov	eax, DWORD PTR [edi+24]
	push	ecx
	push	edx
	push	eax
	call	_crc32
	mov	edx, DWORD PTR _next$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+24], eax
$LN362@inflate:
; Line 773
	mov	eax, DWORD PTR _copy$[ebp]
	sub	DWORD PTR _have$[ebp], eax
; Line 774
	add	edx, eax
; Line 775
	cmp	DWORD PTR _len$[ebp], 0
	mov	DWORD PTR _next$[ebp], edx
	jne	$inf_leave$3971
; Line 777
	jmp	SHORT $LN359@inflate
$LN369@inflate:
	mov	eax, DWORD PTR [edi+32]
	test	eax, eax
	je	SHORT $LN359@inflate
; Line 778
	mov	DWORD PTR [eax+36], 0
$LN359@inflate:
; Line 779
	mov	DWORD PTR [edi], 8
$LN738@inflate:
; Line 781
	test	DWORD PTR [edi+16], 512			; 00000200H
	je	SHORT $LN344@inflate
; Line 782
	cmp	esi, 16					; 00000010H
	jae	SHORT $LN355@inflate
	npad	3
$LL353@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	inc	edx
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	add	ebx, eax
	cmp	esi, 16					; 00000010H
	jb	SHORT $LL353@inflate
$LN355@inflate:
; Line 783
	movzx	ecx, WORD PTR [edi+24]
	cmp	ebx, ecx
	je	SHORT $LN346@inflate
; Line 784
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG4163
; Line 786
	jmp	$LN802@inflate
$LN346@inflate:
; Line 788
	xor	ebx, ebx
	xor	esi, esi
$LN344@inflate:
; Line 790
	mov	eax, DWORD PTR [edi+32]
	test	eax, eax
	je	SHORT $LN343@inflate
; Line 791
	mov	ecx, DWORD PTR [edi+16]
	sar	ecx, 9
	and	ecx, 1
	mov	DWORD PTR [eax+44], ecx
; Line 792
	mov	edx, DWORD PTR [edi+32]
	mov	DWORD PTR [edx+48], 1
$LN343@inflate:
; Line 794
	push	0
	push	0
	push	0
	call	_crc32
	mov	ecx, DWORD PTR _strm$[ebp]
; Line 796
	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edi+24], eax
	mov	DWORD PTR [ecx+48], eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi], 11			; 0000000bH
	jmp	$LN498@inflate
$LN341@inflate:
; Line 799
	cmp	esi, 32					; 00000020H
	jae	SHORT $LN340@inflate
$LL338@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	inc	edx
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	add	ebx, eax
	cmp	esi, 32					; 00000020H
	jb	SHORT $LL338@inflate
$LN340@inflate:
; Line 800
	mov	ecx, ebx
	mov	eax, ebx
	shl	eax, 16					; 00000010H
	and	ecx, 65280				; 0000ff00H
	add	ecx, eax
	mov	eax, ebx
	shr	eax, 8
	shl	ecx, 8
	and	eax, 65280				; 0000ff00H
	add	eax, ecx
	mov	ecx, DWORD PTR _strm$[ebp]
	shr	ebx, 24					; 00000018H
	add	eax, ebx
	mov	DWORD PTR [edi+24], eax
	mov	DWORD PTR [ecx+48], eax
; Line 801
	xor	ebx, ebx
	xor	esi, esi
; Line 802
	mov	DWORD PTR [edi], 10			; 0000000aH
$LN740@inflate:
; Line 804
	cmp	DWORD PTR [edi+12], 0
	je	$LN589@inflate
; Line 808
	push	0
	push	0
	push	0
	call	_adler32
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edi+24], eax
	mov	DWORD PTR [edx+48], eax
; Line 809
	mov	edx, DWORD PTR _next$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi], 11			; 0000000bH
$LN324@inflate:
; Line 811
	cmp	DWORD PTR _flush$[ebp], 5
	je	$inf_leave$3971
	cmp	DWORD PTR _flush$[ebp], 6
	je	$inf_leave$3971
$LN323@inflate:
; Line 813
	cmp	DWORD PTR [edi+4], 0
	je	SHORT $LN316@inflate
; Line 814
	mov	ecx, esi
	and	ecx, 7
	shr	ebx, cl
	sub	esi, ecx
; Line 815
	mov	DWORD PTR [edi], 26			; 0000001aH
; Line 816
	jmp	$LN498@inflate
$LN316@inflate:
; Line 818
	cmp	esi, 3
	jae	SHORT $LN315@inflate
	npad	7
$LL313@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	inc	edx
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	add	ebx, eax
	cmp	esi, 3
	jb	SHORT $LL313@inflate
$LN315@inflate:
; Line 819
	mov	ecx, ebx
; Line 820
	shr	ebx, 1
; Line 821
	mov	eax, ebx
	and	ecx, 1
	and	eax, 3
	mov	DWORD PTR [edi+4], ecx
	cmp	eax, 3
	ja	SHORT $LN294@inflate
	jmp	DWORD PTR $LN804@inflate[eax*4]
$LN302@inflate:
; Line 846
	shr	ebx, 2
	mov	DWORD PTR [edi], 13			; 0000000dH
	sub	esi, 3
; Line 847
	jmp	$LN498@inflate
$LN301@inflate:
; Line 828
	mov	eax, edi
	call	_fixedtables
; Line 832
	cmp	DWORD PTR _flush$[ebp], 6
	mov	DWORD PTR [edi], 19			; 00000013H
	jne	SHORT $LN294@inflate
; Line 833
	shr	ebx, 2
	sub	esi, 3
; Line 834
	jmp	$inf_leave$3971
$LN296@inflate:
; Line 846
	shr	ebx, 2
	mov	DWORD PTR [edi], 16			; 00000010H
	sub	esi, 3
; Line 847
	jmp	$LN498@inflate
$LN295@inflate:
; Line 843
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG4230
; Line 844
	mov	DWORD PTR [edi], 29			; 0000001dH
$LN294@inflate:
; Line 846
	shr	ebx, 2
	sub	esi, 3
; Line 847
	jmp	$LN498@inflate
$LN290@inflate:
; Line 849
	mov	ecx, esi
	and	ecx, 7
	sub	esi, ecx
	shr	ebx, cl
; Line 850
	cmp	esi, 32					; 00000020H
	jae	SHORT $LN286@inflate
$LL284@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	inc	edx
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	add	ebx, eax
	cmp	esi, 32					; 00000020H
	jb	SHORT $LL284@inflate
$LN286@inflate:
; Line 851
	mov	ecx, ebx
	mov	eax, ebx
	not	ecx
	and	eax, 65535				; 0000ffffH
	shr	ecx, 16					; 00000010H
	cmp	eax, ecx
	je	SHORT $LN278@inflate
; Line 852
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG4253
; Line 854
	jmp	$LN802@inflate
$LN278@inflate:
; Line 859
	xor	ebx, ebx
	xor	esi, esi
; Line 861
	cmp	DWORD PTR _flush$[ebp], 6
	mov	DWORD PTR [edi+64], eax
	mov	DWORD PTR [edi], 14			; 0000000eH
	je	$inf_leave$3971
$LN274@inflate:
; Line 863
	mov	DWORD PTR [edi], 15			; 0000000fH
$LN272@inflate:
; Line 865
	mov	eax, DWORD PTR [edi+64]
	mov	DWORD PTR _copy$[ebp], eax
; Line 866
	test	eax, eax
	je	$LN271@inflate
; Line 867
	mov	ecx, DWORD PTR _have$[ebp]
	cmp	eax, ecx
	jbe	SHORT $LN270@inflate
	mov	eax, ecx
	mov	DWORD PTR _copy$[ebp], ecx
$LN270@inflate:
; Line 868
	mov	ecx, DWORD PTR _left$[ebp]
	cmp	eax, ecx
	jbe	SHORT $LN269@inflate
	mov	eax, ecx
	mov	DWORD PTR _copy$[ebp], eax
$LN269@inflate:
; Line 869
	test	eax, eax
	je	$inf_leave$3971
; Line 870
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR _next$[ebp]
	mov	eax, DWORD PTR _put$[ebp]
	push	ecx
	push	edx
	push	eax
	call	_memcpy
; Line 871
	mov	eax, DWORD PTR _copy$[ebp]
; Line 872
	add	DWORD PTR _next$[ebp], eax
	sub	DWORD PTR _have$[ebp], eax
; Line 873
	sub	DWORD PTR _left$[ebp], eax
; Line 874
	add	DWORD PTR _put$[ebp], eax
; Line 876
	mov	edx, DWORD PTR _next$[ebp]
	add	esp, 12					; 0000000cH
	sub	DWORD PTR [edi+64], eax
	jmp	$LN498@inflate
$LN266@inflate:
; Line 882
	cmp	esi, 14					; 0000000eH
	jae	SHORT $LN265@inflate
	npad	9
$LL263@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	inc	edx
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	add	ebx, eax
	cmp	esi, 14					; 0000000eH
	jb	SHORT $LL263@inflate
$LN265@inflate:
; Line 883
	mov	ecx, ebx
	and	ecx, 31					; 0000001fH
; Line 884
	shr	ebx, 5
	add	ecx, 257				; 00000101H
; Line 885
	mov	eax, ebx
	mov	DWORD PTR [edi+96], ecx
; Line 886
	shr	ebx, 5
; Line 887
	mov	ecx, ebx
	and	eax, 31					; 0000001fH
	and	ecx, 15					; 0000000fH
	inc	eax
	add	ecx, 4
; Line 888
	shr	ebx, 4
	sub	esi, 14					; 0000000eH
; Line 890
	cmp	DWORD PTR [edi+96], 286			; 0000011eH
	mov	DWORD PTR [edi+100], eax
	mov	DWORD PTR [edi+92], ecx
	ja	$LN247@inflate
	cmp	eax, 30					; 0000001eH
	ja	$LN247@inflate
; Line 897
	mov	DWORD PTR [edi+104], 0
; Line 898
	mov	DWORD PTR [edi], 17			; 00000011H
$LN744@inflate:
; Line 900
	mov	ecx, DWORD PTR [edi+104]
	cmp	ecx, DWORD PTR [edi+92]
	jae	SHORT $LN535@inflate
	npad	5
$LL245@inflate:
; Line 901
	cmp	esi, 3
	jae	SHORT $LN242@inflate
$LL240@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	inc	edx
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	add	ebx, eax
	cmp	esi, 3
	jb	SHORT $LL240@inflate
$LN242@inflate:
; Line 902
	mov	eax, DWORD PTR [edi+104]
	movzx	eax, WORD PTR ?order@?1??inflate@@9@9[eax*2]
	mov	ecx, ebx
	and	ecx, 7
	mov	WORD PTR [edi+eax*2+112], cx
	inc	DWORD PTR [edi+104]
	mov	ecx, DWORD PTR [edi+104]
; Line 903
	shr	ebx, 3
	sub	esi, 3
	cmp	ecx, DWORD PTR [edi+92]
	jb	SHORT $LL245@inflate
$LN535@inflate:
; Line 905
	mov	eax, 19					; 00000013H
	cmp	DWORD PTR [edi+104], eax
	jae	SHORT $LN230@inflate
	npad	9
$LL231@inflate:
; Line 906
	mov	edx, DWORD PTR [edi+104]
	movzx	ecx, WORD PTR ?order@?1??inflate@@9@9[edx*2]
	xor	edx, edx
	mov	WORD PTR [edi+ecx*2+112], dx
	inc	DWORD PTR [edi+104]
	cmp	DWORD PTR [edi+104], eax
	jb	SHORT $LL231@inflate
$LN230@inflate:
; Line 907
	lea	eax, DWORD PTR [edi+1328]
	lea	ecx, DWORD PTR [edi+108]
	mov	DWORD PTR [ecx], eax
; Line 908
	mov	DWORD PTR [edi+76], eax
; Line 911
	lea	edx, DWORD PTR [edi+752]
	push	edx
	lea	eax, DWORD PTR [edi+84]
	push	eax
	push	ecx
	mov	DWORD PTR [eax], 7
	push	19					; 00000013H
	lea	eax, DWORD PTR [edi+112]
	push	eax
	push	0
	call	_inflate_table
; Line 915
	mov	edx, DWORD PTR _next$[ebp]
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ret$[ebp], eax
	test	eax, eax
	je	SHORT $LN229@inflate
; Line 913
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG4325
; Line 915
	jmp	$LN802@inflate
$LN247@inflate:
; Line 891
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG4296
; Line 893
	jmp	$LN802@inflate
$LN229@inflate:
; Line 918
	mov	DWORD PTR [edi+104], 0
; Line 919
	mov	DWORD PTR [edi], 18			; 00000012H
$LN536@inflate:
; Line 921
	mov	eax, DWORD PTR [edi+100]
	add	eax, DWORD PTR [edi+96]
	cmp	DWORD PTR [edi+104], eax
	jae	$LN226@inflate
	npad	2
$LL227@inflate:
; Line 923
	mov	ecx, DWORD PTR [edi+84]
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR [edi+76]
	dec	eax
	and	eax, ebx
	mov	eax, DWORD PTR [ecx+eax*4]
; Line 924
	mov	ecx, eax
	shr	ecx, 8
	movzx	ecx, cl
	mov	DWORD PTR _here$[ebp], eax
	cmp	ecx, esi
	jbe	SHORT $LN564@inflate
$LL225@inflate:
; Line 925
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	mov	ecx, DWORD PTR [edi+84]
	inc	edx
	add	esi, 8
	add	ebx, eax
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR [edi+76]
	mov	DWORD PTR _next$[ebp], edx
	dec	eax
	and	eax, ebx
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, eax
	shr	ecx, 8
	movzx	ecx, cl
	mov	DWORD PTR _here$[ebp], eax
	cmp	ecx, esi
	ja	SHORT $LL225@inflate
$LN564@inflate:
; Line 927
	mov	ecx, eax
	shr	ecx, 16					; 00000010H
	cmp	ecx, 16					; 00000010H
	jae	SHORT $LN218@inflate
; Line 928
	mov	ecx, eax
	shr	ecx, 8
	movzx	ecx, cl
	cmp	esi, ecx
	jae	SHORT $LN216@inflate
	npad	9
$LL214@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	inc	edx
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	add	ebx, eax
	mov	eax, DWORD PTR _here$[ebp]
	movzx	ecx, ah
	cmp	esi, ecx
	jb	SHORT $LL214@inflate
$LN216@inflate:
; Line 929
	movzx	ecx, ah
; Line 930
	mov	eax, DWORD PTR [edi+104]
	shr	ebx, cl
	sub	esi, ecx
	mov	cx, WORD PTR _here$[ebp+2]
	mov	WORD PTR [edi+eax*2+112], cx
	inc	DWORD PTR [edi+104]
; Line 932
	jmp	$LN747@inflate
$LN218@inflate:
; Line 933
	mov	cx, WORD PTR _here$[ebp+2]
	cmp	cx, 16					; 00000010H
	jne	SHORT $LN204@inflate
; Line 934
	movzx	ecx, ah
	lea	eax, DWORD PTR [ecx+2]
	mov	DWORD PTR tv2304[ebp], ecx
	cmp	esi, eax
	jae	SHORT $LN202@inflate
	npad	7
$LL200@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	mov	ecx, DWORD PTR tv2304[ebp]
	inc	edx
	add	esi, 8
	add	ebx, eax
	lea	eax, DWORD PTR [ecx+2]
	mov	DWORD PTR _next$[ebp], edx
	cmp	esi, eax
	jb	SHORT $LL200@inflate
$LN202@inflate:
; Line 936
	mov	eax, DWORD PTR [edi+104]
	shr	ebx, cl
	sub	esi, ecx
	test	eax, eax
	je	$LN570@inflate
; Line 941
	movzx	ecx, WORD PTR [edi+eax*2+110]
; Line 942
	mov	eax, ebx
	and	eax, 3
	add	eax, 3
; Line 943
	shr	ebx, 2
	mov	DWORD PTR _len$[ebp], ecx
	mov	DWORD PTR _copy$[ebp], eax
	sub	esi, 2
; Line 945
	jmp	$LN155@inflate
$LN204@inflate:
	cmp	cx, 17					; 00000011H
; Line 946
	movzx	ecx, ah
	mov	DWORD PTR tv2304[ebp], ecx
	jne	SHORT $LN169@inflate
	lea	eax, DWORD PTR [ecx+3]
	cmp	esi, eax
	jae	SHORT $LN184@inflate
	npad	9
$LL182@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	mov	ecx, DWORD PTR tv2304[ebp]
	inc	edx
	add	esi, 8
	add	ebx, eax
	lea	eax, DWORD PTR [ecx+3]
	mov	DWORD PTR _next$[ebp], edx
	cmp	esi, eax
	jb	SHORT $LL182@inflate
$LN184@inflate:
; Line 947
	shr	ebx, cl
; Line 949
	mov	eax, ebx
	and	eax, 7
	add	eax, 3
	mov	DWORD PTR _copy$[ebp], eax
; Line 950
	shr	ebx, 3
	mov	eax, -3					; fffffffdH
; Line 952
	jmp	SHORT $LN797@inflate
$LN169@inflate:
; Line 953
	lea	eax, DWORD PTR [ecx+7]
	cmp	esi, eax
	jae	SHORT $LN168@inflate
$LL166@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	mov	ecx, DWORD PTR tv2304[ebp]
	inc	edx
	add	esi, 8
	add	ebx, eax
	lea	eax, DWORD PTR [ecx+7]
	mov	DWORD PTR _next$[ebp], edx
	cmp	esi, eax
	jb	SHORT $LL166@inflate
$LN168@inflate:
; Line 954
	shr	ebx, cl
; Line 956
	mov	eax, ebx
	and	eax, 127				; 0000007fH
	add	eax, 11					; 0000000bH
	mov	DWORD PTR _copy$[ebp], eax
; Line 957
	shr	ebx, 7
	mov	eax, -7					; fffffff9H
$LN797@inflate:
	sub	eax, ecx
	add	esi, eax
	mov	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _len$[ebp], 0
$LN155@inflate:
; Line 959
	mov	ecx, DWORD PTR [edi+104]
	add	ecx, eax
	mov	eax, DWORD PTR [edi+100]
	add	eax, DWORD PTR [edi+96]
	cmp	ecx, eax
	ja	SHORT $LN571@inflate
; Line 964
	cmp	DWORD PTR _copy$[ebp], 0
	je	SHORT $LN747@inflate
	mov	eax, DWORD PTR _len$[ebp]
	npad	9
$LL153@inflate:
; Line 965
	mov	ecx, DWORD PTR [edi+104]
	dec	DWORD PTR _copy$[ebp]
	mov	WORD PTR [edi+ecx*2+112], ax
	inc	DWORD PTR [edi+104]
	cmp	DWORD PTR _copy$[ebp], 0
	jne	SHORT $LL153@inflate
$LN747@inflate:
; Line 921
	mov	eax, DWORD PTR [edi+100]
	add	eax, DWORD PTR [edi+96]
	cmp	DWORD PTR [edi+104], eax
	jb	$LL227@inflate
$LN226@inflate:
; Line 970
	cmp	DWORD PTR [edi], 29			; 0000001dH
	je	$LN498@inflate
; Line 973
	cmp	WORD PTR [edi+624], 0
	jne	SHORT $LN150@inflate
; Line 974
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG4439
; Line 976
	jmp	$LN802@inflate
$LN570@inflate:
; Line 937
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG4378
; Line 939
	jmp	$LN802@inflate
$LN571@inflate:
; Line 960
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG4431
; Line 970
	jmp	$LN802@inflate
$LN150@inflate:
; Line 982
	lea	eax, DWORD PTR [edi+1328]
	lea	ecx, DWORD PTR [edi+108]
	mov	DWORD PTR [ecx], eax
; Line 983
	mov	DWORD PTR [edi+76], eax
; Line 986
	lea	edx, DWORD PTR [edi+752]
	push	edx
	mov	edx, DWORD PTR [edi+96]
	lea	eax, DWORD PTR [edi+84]
	push	eax
	push	ecx
	mov	DWORD PTR [eax], 9
	push	edx
	lea	eax, DWORD PTR [edi+112]
	push	eax
	push	1
	call	_inflate_table
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ret$[ebp], eax
; Line 987
	test	eax, eax
	je	SHORT $LN149@inflate
; Line 988
	mov	ecx, DWORD PTR _strm$[ebp]
; Line 990
	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG4443
	jmp	$LN802@inflate
$LN149@inflate:
; Line 992
	mov	edx, DWORD PTR [edi+108]
	lea	ecx, DWORD PTR [edi+108]
	mov	DWORD PTR [edi+80], edx
; Line 995
	lea	edx, DWORD PTR [edi+752]
	push	edx
	lea	eax, DWORD PTR [edi+88]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR [edi+96]
	mov	DWORD PTR [eax], 6
	mov	eax, DWORD PTR [edi+100]
	push	eax
	lea	edx, DWORD PTR [edi+ecx*2+112]
	push	edx
	push	2
	call	_inflate_table
; Line 999
	mov	edx, DWORD PTR _next$[ebp]
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ret$[ebp], eax
	test	eax, eax
	je	SHORT $LN148@inflate
; Line 997
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG4447
; Line 999
	jmp	$LN802@inflate
$LN148@inflate:
; Line 1003
	cmp	DWORD PTR _flush$[ebp], 6
	mov	DWORD PTR [edi], 19			; 00000013H
	je	$inf_leave$3971
$LN147@inflate:
; Line 1005
	mov	DWORD PTR [edi], 20			; 00000014H
$LN145@inflate:
; Line 1007
	cmp	DWORD PTR _have$[ebp], 6
	jb	$LN144@inflate
	cmp	DWORD PTR _left$[ebp], 258		; 00000102H
	jb	SHORT $LN144@inflate
; Line 1008
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _put$[ebp]
	mov	edx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1009
	mov	ecx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR _have$[ebp]
	push	ecx
	mov	DWORD PTR [eax+4], edx
	push	eax
	mov	DWORD PTR [edi+56], ebx
	mov	DWORD PTR [edi+60], esi
	call	_inflate_fast
; Line 1010
	mov	eax, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR [eax+16]
	mov	ebx, DWORD PTR [edi+56]
	mov	esi, DWORD PTR [edi+60]
	mov	DWORD PTR _put$[ebp], edx
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	add	esp, 8
; Line 1011
	cmp	DWORD PTR [edi], 11			; 0000000bH
	mov	DWORD PTR _left$[ebp], ecx
	mov	DWORD PTR _next$[ebp], edx
	mov	DWORD PTR _have$[ebp], eax
	jne	$LN498@inflate
; Line 1012
	mov	DWORD PTR [edi+7108], -1
; Line 1013
	jmp	$LN498@inflate
$LN144@inflate:
; Line 1017
	mov	ecx, DWORD PTR [edi+84]
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR [edi+7108], 0
	dec	eax
	and	eax, ebx
	mov	ecx, eax
	mov	eax, DWORD PTR [edi+76]
	mov	eax, DWORD PTR [eax+ecx*4]
; Line 1018
	mov	ecx, eax
	shr	ecx, 8
	movzx	ecx, cl
	mov	DWORD PTR _here$[ebp], eax
	cmp	ecx, esi
	jbe	SHORT $LN572@inflate
$LL136@inflate:
; Line 1019
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	mov	ecx, DWORD PTR [edi+84]
	inc	edx
	add	esi, 8
	add	ebx, eax
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR [edi+76]
	mov	DWORD PTR _next$[ebp], edx
	dec	eax
	and	eax, ebx
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, eax
	shr	ecx, 8
	movzx	ecx, cl
	mov	DWORD PTR _here$[ebp], eax
	cmp	ecx, esi
	ja	SHORT $LL136@inflate
$LN572@inflate:
; Line 1021
	test	al, al
	je	$LN118@inflate
	test	al, 240					; 000000f0H
	jne	$LN118@inflate
; Line 1025
	mov	ecx, eax
	shr	ecx, 8
	mov	DWORD PTR tv2286[ebp], ecx
	movzx	ecx, cl
	mov	DWORD PTR tv2287[ebp], ecx
	movzx	ecx, al
	add	ecx, DWORD PTR tv2287[ebp]
	mov	DWORD PTR _last$[ebp], eax
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR tv2287[ebp]
	dec	eax
	and	eax, ebx
	shr	eax, cl
	mov	ecx, DWORD PTR _here$[ebp]
	shr	ecx, 16					; 00000010H
	add	eax, ecx
	mov	ecx, eax
	mov	eax, DWORD PTR [edi+76]
	mov	eax, DWORD PTR [eax+ecx*4]
; Line 1026
	movzx	ecx, BYTE PTR tv2286[ebp]
	mov	DWORD PTR _here$[ebp], eax
	shr	eax, 8
	movzx	eax, al
	add	eax, ecx
	cmp	eax, esi
	jbe	SHORT $LN121@inflate
	npad	4
$LL128@inflate:
; Line 1027
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	mov	ecx, esi
	shl	eax, cl
	mov	ecx, DWORD PTR _last$[ebp]
	dec	DWORD PTR _have$[ebp]
	inc	edx
	add	ebx, eax
	movzx	eax, ch
	mov	DWORD PTR tv2384[ebp], eax
	movzx	ecx, cl
	add	ecx, eax
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR tv2384[ebp]
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	dec	eax
	and	eax, ebx
	shr	eax, cl
	movzx	ecx, WORD PTR _last$[ebp+2]
	add	eax, ecx
	mov	ecx, DWORD PTR [edi+76]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _here$[ebp], eax
	shr	eax, 8
	movzx	eax, al
	add	eax, DWORD PTR tv2384[ebp]
	cmp	eax, esi
	ja	SHORT $LL128@inflate
$LN121@inflate:
; Line 1029
	movzx	ecx, BYTE PTR _last$[ebp+1]
; Line 1030
	mov	eax, DWORD PTR _here$[ebp]
	shr	ebx, cl
	sub	esi, ecx
	mov	DWORD PTR [edi+7108], ecx
$LN118@inflate:
; Line 1032
	mov	ecx, eax
	shr	ecx, 8
	movzx	ecx, cl
; Line 1033
	add	DWORD PTR [edi+7108], ecx
	shr	ebx, cl
	sub	esi, ecx
	mov	DWORD PTR tv2287[ebp], ecx
; Line 1034
	mov	ecx, eax
	shr	ecx, 16					; 00000010H
	mov	DWORD PTR [edi+64], ecx
; Line 1035
	test	al, al
	jne	SHORT $LN115@inflate
; Line 1039
	mov	DWORD PTR [edi], 25			; 00000019H
; Line 1040
	jmp	$LN498@inflate
$LN115@inflate:
; Line 1042
	test	al, 32					; 00000020H
	je	SHORT $LN114@inflate
; Line 1044
	mov	DWORD PTR [edi+7108], -1
$LN271@inflate:
; Line 1045
	mov	DWORD PTR [edi], 11			; 0000000bH
; Line 1046
	jmp	$LN498@inflate
$LN114@inflate:
; Line 1048
	test	al, 64					; 00000040H
	je	SHORT $LN113@inflate
; Line 1049
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG4496
; Line 1051
	jmp	$LN802@inflate
$LN113@inflate:
; Line 1053
	movzx	ecx, al
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR [edi+72], ecx
; Line 1054
	mov	DWORD PTR [edi], 21			; 00000015H
$LN713@inflate:
; Line 1056
	mov	eax, DWORD PTR [edi+72]
	test	eax, eax
	je	SHORT $LN750@inflate
; Line 1057
	cmp	esi, eax
	jae	SHORT $LN109@inflate
	npad	7
$LL107@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	inc	edx
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	add	ebx, eax
	cmp	esi, DWORD PTR [edi+72]
	jb	SHORT $LL107@inflate
$LN109@inflate:
; Line 1058
	mov	ecx, DWORD PTR [edi+72]
	mov	eax, 1
	shl	eax, cl
; Line 1059
	sub	esi, ecx
	dec	eax
	and	eax, ebx
	add	DWORD PTR [edi+64], eax
	shr	ebx, cl
; Line 1060
	add	DWORD PTR [edi+7108], ecx
$LN750@inflate:
; Line 1063
	mov	ecx, DWORD PTR [edi+64]
	mov	DWORD PTR [edi+7112], ecx
; Line 1064
	mov	DWORD PTR [edi], 22			; 00000016H
$LN714@inflate:
; Line 1067
	mov	ecx, DWORD PTR [edi+88]
	mov	eax, 1
	shl	eax, cl
	dec	eax
	and	eax, ebx
	mov	ecx, eax
	mov	eax, DWORD PTR [edi+80]
	mov	eax, DWORD PTR [eax+ecx*4]
; Line 1068
	mov	ecx, eax
	shr	ecx, 8
	movzx	ecx, cl
	mov	DWORD PTR _here$[ebp], eax
	cmp	ecx, esi
	jbe	SHORT $LN577@inflate
	npad	1
$LL97@inflate:
; Line 1069
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	mov	ecx, DWORD PTR [edi+88]
	inc	edx
	add	esi, 8
	add	ebx, eax
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR [edi+80]
	mov	DWORD PTR _next$[ebp], edx
	dec	eax
	and	eax, ebx
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, eax
	shr	ecx, 8
	movzx	ecx, cl
	mov	DWORD PTR _here$[ebp], eax
	cmp	ecx, esi
	ja	SHORT $LL97@inflate
$LN577@inflate:
; Line 1071
	test	al, 240					; 000000f0H
	jne	$LN79@inflate
; Line 1075
	mov	ecx, eax
	shr	ecx, 8
	mov	DWORD PTR tv2286[ebp], ecx
	movzx	ecx, cl
	mov	DWORD PTR tv2287[ebp], ecx
	movzx	ecx, al
	add	ecx, DWORD PTR tv2287[ebp]
	mov	DWORD PTR _last$[ebp], eax
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR tv2287[ebp]
	dec	eax
	and	eax, ebx
	shr	eax, cl
	mov	ecx, DWORD PTR _here$[ebp]
	shr	ecx, 16					; 00000010H
	add	eax, ecx
	mov	ecx, eax
	mov	eax, DWORD PTR [edi+80]
	mov	eax, DWORD PTR [eax+ecx*4]
; Line 1076
	movzx	ecx, BYTE PTR tv2286[ebp]
	mov	DWORD PTR _here$[ebp], eax
	shr	eax, 8
	movzx	eax, al
	add	eax, ecx
	cmp	eax, esi
	jbe	SHORT $LN82@inflate
$LL89@inflate:
; Line 1077
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	mov	ecx, esi
	shl	eax, cl
	mov	ecx, DWORD PTR _last$[ebp]
	dec	DWORD PTR _have$[ebp]
	inc	edx
	add	ebx, eax
	movzx	eax, ch
	mov	DWORD PTR tv2384[ebp], eax
	movzx	ecx, cl
	add	ecx, eax
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR tv2384[ebp]
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	dec	eax
	and	eax, ebx
	shr	eax, cl
	movzx	ecx, WORD PTR _last$[ebp+2]
	add	eax, ecx
	mov	ecx, DWORD PTR [edi+80]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _here$[ebp], eax
	shr	eax, 8
	movzx	eax, al
	add	eax, DWORD PTR tv2384[ebp]
	cmp	eax, esi
	ja	SHORT $LL89@inflate
$LN82@inflate:
; Line 1079
	movzx	ecx, BYTE PTR _last$[ebp+1]
; Line 1080
	mov	eax, DWORD PTR _here$[ebp]
	shr	ebx, cl
	sub	esi, ecx
	add	DWORD PTR [edi+7108], ecx
$LN79@inflate:
; Line 1082
	mov	ecx, eax
	shr	ecx, 8
	movzx	ecx, cl
; Line 1083
	add	DWORD PTR [edi+7108], ecx
	shr	ebx, cl
	sub	esi, ecx
	mov	DWORD PTR tv2287[ebp], ecx
; Line 1084
	test	al, 64					; 00000040H
	je	SHORT $LN76@inflate
; Line 1085
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG4551
; Line 1087
	jmp	$LN802@inflate
$LN76@inflate:
; Line 1089
	mov	ecx, eax
; Line 1090
	movzx	eax, al
	shr	ecx, 16					; 00000010H
	and	eax, 15					; 0000000fH
	mov	DWORD PTR [edi+68], ecx
	mov	DWORD PTR [edi+72], eax
; Line 1091
	mov	DWORD PTR [edi], 23			; 00000017H
$LN715@inflate:
; Line 1093
	mov	eax, DWORD PTR [edi+72]
	test	eax, eax
	je	SHORT $LN74@inflate
; Line 1094
	cmp	esi, eax
	jae	SHORT $LN72@inflate
$LL70@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	inc	edx
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	add	ebx, eax
	cmp	esi, DWORD PTR [edi+72]
	jb	SHORT $LL70@inflate
$LN72@inflate:
; Line 1095
	mov	ecx, DWORD PTR [edi+72]
	mov	eax, 1
	shl	eax, cl
; Line 1096
	sub	esi, ecx
	dec	eax
	and	eax, ebx
	add	DWORD PTR [edi+68], eax
	shr	ebx, cl
; Line 1097
	add	DWORD PTR [edi+7108], ecx
$LN74@inflate:
; Line 1107
	mov	DWORD PTR [edi], 24			; 00000018H
$LN716@inflate:
; Line 1109
	cmp	DWORD PTR _left$[ebp], 0
	je	$inf_leave$3971
; Line 1110
	mov	ecx, DWORD PTR _out$[ebp]
	sub	ecx, DWORD PTR _left$[ebp]
; Line 1111
	mov	eax, DWORD PTR [edi+68]
	cmp	eax, ecx
	jbe	SHORT $LN59@inflate
; Line 1112
	sub	eax, ecx
	mov	DWORD PTR _copy$[ebp], eax
; Line 1113
	cmp	eax, DWORD PTR [edi+44]
	jbe	SHORT $LN57@inflate
; Line 1114
	cmp	DWORD PTR [edi+7104], 0
	je	SHORT $LN57@inflate
; Line 1115
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG4579
; Line 1117
	jmp	$LN802@inflate
$LN57@inflate:
; Line 1133
	mov	ecx, DWORD PTR [edi+48]
	cmp	eax, ecx
	jbe	SHORT $LN56@inflate
; Line 1134
	sub	eax, ecx
; Line 1135
	mov	ecx, DWORD PTR [edi+52]
	add	ecx, DWORD PTR [edi+40]
	mov	DWORD PTR _copy$[ebp], eax
	sub	ecx, eax
; Line 1137
	jmp	SHORT $LN798@inflate
$LN56@inflate:
; Line 1138
	mov	ecx, DWORD PTR [edi+52]
	sub	ecx, eax
	add	ecx, DWORD PTR [edi+48]
	mov	eax, DWORD PTR _copy$[ebp]
$LN798@inflate:
	mov	DWORD PTR _from$[ebp], ecx
; Line 1139
	mov	ecx, DWORD PTR [edi+64]
	mov	DWORD PTR tv2129[ebp], ecx
	cmp	eax, ecx
	jbe	SHORT $LN53@inflate
	mov	eax, ecx
; Line 1141
	jmp	SHORT $LN799@inflate
$LN59@inflate:
; Line 1142
	mov	ecx, DWORD PTR _put$[ebp]
	sub	ecx, eax
; Line 1143
	mov	eax, DWORD PTR [edi+64]
	mov	DWORD PTR _from$[ebp], ecx
	mov	DWORD PTR tv2129[ebp], eax
$LN799@inflate:
	mov	DWORD PTR _copy$[ebp], eax
$LN53@inflate:
; Line 1145
	mov	ecx, DWORD PTR _left$[ebp]
	cmp	eax, ecx
	jbe	SHORT $LN52@inflate
	mov	eax, ecx
	mov	DWORD PTR _copy$[ebp], eax
$LN52@inflate:
; Line 1146
	sub	ecx, eax
	mov	DWORD PTR _left$[ebp], ecx
; Line 1147
	mov	ecx, DWORD PTR tv2129[ebp]
	sub	ecx, eax
; Line 1150
	mov	eax, DWORD PTR _put$[ebp]
	mov	DWORD PTR [edi+64], ecx
	mov	ecx, DWORD PTR _from$[ebp]
	sub	ecx, DWORD PTR _put$[ebp]
	mov	DWORD PTR tv3073[ebp], ecx
	jmp	SHORT $LN51@inflate
$LL753@inflate:
	mov	ecx, DWORD PTR tv3073[ebp]
$LN51@inflate:
; Line 1149
	mov	cl, BYTE PTR [eax+ecx]
	mov	eax, DWORD PTR _put$[ebp]
	mov	BYTE PTR [eax], cl
	inc	eax
; Line 1150
	dec	DWORD PTR _copy$[ebp]
	mov	DWORD PTR _put$[ebp], eax
	jne	SHORT $LL753@inflate
; Line 1151
	cmp	DWORD PTR [edi+64], 0
	jne	$LN498@inflate
	mov	DWORD PTR [edi], 20			; 00000014H
; Line 1152
	jmp	$LN498@inflate
$LN47@inflate:
; Line 1154
	cmp	DWORD PTR _left$[ebp], 0
	je	$inf_leave$3971
; Line 1155
	mov	eax, DWORD PTR _put$[ebp]
	mov	cl, BYTE PTR [edi+64]
	mov	BYTE PTR [eax], cl
	inc	eax
; Line 1156
	dec	DWORD PTR _left$[ebp]
	mov	DWORD PTR _put$[ebp], eax
; Line 1157
	mov	DWORD PTR [edi], 20			; 00000014H
; Line 1158
	jmp	$LN498@inflate
$LN45@inflate:
; Line 1160
	cmp	DWORD PTR [edi+8], 0
	je	$LN30@inflate
; Line 1161
	cmp	esi, 32					; 00000020H
	jae	SHORT $LN42@inflate
$LL40@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	inc	edx
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	add	ebx, eax
	cmp	esi, 32					; 00000020H
	jb	SHORT $LL40@inflate
$LN42@inflate:
; Line 1162
	mov	eax, DWORD PTR _out$[ebp]
	sub	eax, DWORD PTR _left$[ebp]
; Line 1163
	mov	ecx, DWORD PTR _strm$[ebp]
	add	DWORD PTR [ecx+20], eax
; Line 1164
	add	DWORD PTR [edi+28], eax
	mov	DWORD PTR _out$[ebp], eax
; Line 1165
	test	eax, eax
	je	SHORT $LN34@inflate
; Line 1167
	mov	ecx, DWORD PTR _put$[ebp]
	mov	edx, DWORD PTR [edi+24]
	push	eax
	sub	ecx, eax
	cmp	DWORD PTR [edi+16], 0
	push	ecx
	push	edx
	je	SHORT $LN512@inflate
	call	_crc32
	jmp	SHORT $LN800@inflate
$LN512@inflate:
	call	_adler32
$LN800@inflate:
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edi+24], eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ecx+48], eax
$LN34@inflate:
; Line 1173
	cmp	DWORD PTR [edi+16], 0
	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _out$[ebp], eax
	mov	eax, ebx
	jne	SHORT $LN515@inflate
	and	eax, 65280				; 0000ff00H
	mov	ecx, ebx
	shl	ecx, 16					; 00000010H
	add	eax, ecx
	mov	ecx, ebx
	shr	ecx, 8
	and	ecx, 65280				; 0000ff00H
	shl	eax, 8
	add	eax, ecx
	mov	ecx, ebx
	shr	ecx, 24					; 00000018H
	add	eax, ecx
$LN515@inflate:
	cmp	eax, DWORD PTR [edi+24]
	je	SHORT $LN32@inflate
; Line 1174
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG4609
; Line 1176
	jmp	SHORT $LN802@inflate
$LN32@inflate:
; Line 1178
	xor	ebx, ebx
	xor	esi, esi
$LN30@inflate:
; Line 1182
	mov	DWORD PTR [edi], 27			; 0000001bH
$LN756@inflate:
; Line 1184
	cmp	DWORD PTR [edi+8], 0
	je	$LN15@inflate
	cmp	DWORD PTR [edi+16], 0
	je	$LN15@inflate
; Line 1185
	cmp	esi, 32					; 00000020H
	jae	SHORT $LN26@inflate
	npad	5
$LL24@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	je	$inf_leave$3971
	movzx	eax, BYTE PTR [edx]
	dec	DWORD PTR _have$[ebp]
	mov	ecx, esi
	shl	eax, cl
	inc	edx
	add	esi, 8
	mov	DWORD PTR _next$[ebp], edx
	add	ebx, eax
	cmp	esi, 32					; 00000020H
	jb	SHORT $LL24@inflate
$LN26@inflate:
; Line 1186
	cmp	ebx, DWORD PTR [edi+28]
	je	SHORT $LN17@inflate
; Line 1187
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG4629
$LN802@inflate:
; Line 1188
	mov	DWORD PTR [edi], 29			; 0000001dH
$LN498@inflate:
; Line 623
	mov	eax, DWORD PTR [edi]
	cmp	eax, 30					; 0000001eH
	jbe	$LL501@inflate
$LN11@inflate:
; Line 1206
	mov	eax, -2					; fffffffeH
$LN795@inflate:
	pop	esi
	pop	ebx
	pop	edi
; Line 1236
	mov	esp, ebp
	pop	ebp
	ret	0
$LN589@inflate:
; Line 805
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _put$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _have$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [edi+60], esi
	pop	esi
	mov	DWORD PTR [edi+56], ebx
	pop	ebx
; Line 806
	mov	eax, 2
	pop	edi
; Line 1236
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@inflate:
; Line 1191
	xor	ebx, ebx
	xor	esi, esi
$LN15@inflate:
; Line 1195
	mov	DWORD PTR [edi], 28			; 0000001cH
$LN761@inflate:
; Line 1197
	mov	DWORD PTR _ret$[ebp], 1
; Line 1198
	jmp	SHORT $inf_leave$3971
$LN13@inflate:
; Line 1200
	mov	DWORD PTR _ret$[ebp], -3		; fffffffdH
$inf_leave$3971:
; Line 1216
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _put$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _have$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+4], edx
; Line 1217
	cmp	DWORD PTR [edi+40], 0
	mov	DWORD PTR [edi+56], ebx
	mov	DWORD PTR [edi+60], esi
	jne	SHORT $LN6@inflate
	cmp	DWORD PTR [edi], 26			; 0000001aH
	jge	SHORT $LN718@inflate
	mov	eax, DWORD PTR _out$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	je	SHORT $LN718@inflate
$LN6@inflate:
; Line 1218
	mov	eax, DWORD PTR _out$[ebp]
	mov	ebx, DWORD PTR _strm$[ebp]
	call	_updatewindow
	test	eax, eax
	je	SHORT $LN718@inflate
; Line 1219
	mov	DWORD PTR [edi], 30			; 0000001eH
$LN12@inflate:
	pop	esi
	pop	ebx
; Line 1220
	mov	eax, -4					; fffffffcH
	pop	edi
; Line 1236
	mov	esp, ebp
	pop	ebp
	ret	0
$LN718@inflate:
; Line 1222
	mov	esi, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _in$[ebp]
	sub	eax, DWORD PTR [esi+4]
; Line 1223
	mov	ebx, DWORD PTR _out$[ebp]
	sub	ebx, DWORD PTR [esi+16]
; Line 1224
	add	DWORD PTR [esi+8], eax
; Line 1225
	add	DWORD PTR [esi+20], ebx
; Line 1226
	add	DWORD PTR [edi+28], ebx
; Line 1227
	cmp	DWORD PTR [edi+8], 0
	mov	DWORD PTR _in$[ebp], eax
	je	SHORT $LN4@inflate
	test	ebx, ebx
	je	SHORT $LN4@inflate
; Line 1229
	cmp	DWORD PTR [edi+16], 0
	push	ebx
	je	SHORT $LN516@inflate
	mov	edx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [edi+24]
	sub	edx, ebx
	push	edx
	push	eax
	call	_crc32
	jmp	SHORT $LN801@inflate
$LN516@inflate:
	mov	ecx, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [edi+24]
	sub	ecx, ebx
	push	ecx
	push	edx
	call	_adler32
$LN801@inflate:
	mov	DWORD PTR [edi+24], eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+48], eax
$LN4@inflate:
; Line 1232
	mov	eax, DWORD PTR [edi]
	cmp	eax, 19					; 00000013H
	je	SHORT $LN518@inflate
	mov	DWORD PTR tv1330[ebp], 0
	cmp	eax, 14					; 0000000eH
	jne	SHORT $LN519@inflate
$LN518@inflate:
	mov	DWORD PTR tv1330[ebp], 256		; 00000100H
$LN519@inflate:
	mov	ecx, DWORD PTR [edi+4]
	neg	ecx
	sbb	ecx, ecx
	xor	edx, edx
	and	ecx, 64					; 00000040H
	cmp	eax, 11					; 0000000bH
	setne	dl
	add	ecx, DWORD PTR tv1330[ebp]
	dec	edx
	and	edx, 128				; 00000080H
	add	edx, ecx
	add	edx, DWORD PTR [edi+60]
; Line 1233
	cmp	DWORD PTR _in$[ebp], 0
	mov	DWORD PTR [esi+44], edx
	jne	SHORT $LN1@inflate
	test	ebx, ebx
	je	SHORT $LN2@inflate
$LN1@inflate:
	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN719@inflate
$LN2@inflate:
	mov	eax, DWORD PTR _ret$[ebp]
	test	eax, eax
	jne	$LN795@inflate
; Line 1234
	pop	esi
	pop	ebx
	mov	eax, -5					; fffffffbH
	pop	edi
; Line 1236
	mov	esp, ebp
	pop	ebp
	ret	0
$LN719@inflate:
; Line 1234
	mov	eax, DWORD PTR _ret$[ebp]
	pop	esi
	pop	ebx
	pop	edi
; Line 1236
	mov	esp, ebp
	pop	ebp
	ret	0
$LN506@inflate:
; Line 614
	mov	eax, -2					; fffffffeH
	pop	edi
; Line 1236
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN803@inflate:
	DD	$LN497@inflate
	DD	$LN465@inflate
	DD	$LN445@inflate
	DD	$LN427@inflate
	DD	$LN727@inflate
	DD	$LN729@inflate
	DD	$LN730@inflate
	DD	$LN734@inflate
	DD	$LN738@inflate
	DD	$LN341@inflate
	DD	$LN740@inflate
	DD	$LN324@inflate
	DD	$LN323@inflate
	DD	$LN290@inflate
	DD	$LN274@inflate
	DD	$LN272@inflate
	DD	$LN266@inflate
	DD	$LN744@inflate
	DD	$LN536@inflate
	DD	$LN147@inflate
	DD	$LN145@inflate
	DD	$LN713@inflate
	DD	$LN714@inflate
	DD	$LN715@inflate
	DD	$LN716@inflate
	DD	$LN47@inflate
	DD	$LN45@inflate
	DD	$LN756@inflate
	DD	$LN761@inflate
	DD	$LN13@inflate
	DD	$LN12@inflate
$LN804@inflate:
	DD	$LN302@inflate
	DD	$LN301@inflate
	DD	$LN296@inflate
	DD	$LN295@inflate
_inflate ENDP
_TEXT	ENDS
PUBLIC	_inflateEnd
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateEnd PROC
; Line 1240
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1242
	mov	esi, DWORD PTR _strm$[ebp]
	test	esi, esi
	je	SHORT $LN2@inflateEnd
	mov	eax, DWORD PTR [esi+28]
	test	eax, eax
	je	SHORT $LN2@inflateEnd
	mov	ecx, DWORD PTR [esi+36]
	test	ecx, ecx
	je	SHORT $LN2@inflateEnd
; Line 1245
	mov	eax, DWORD PTR [eax+52]
	test	eax, eax
	je	SHORT $LN1@inflateEnd
	push	eax
	mov	eax, DWORD PTR [esi+40]
	push	eax
	call	ecx
	add	esp, 8
$LN1@inflateEnd:
; Line 1246
	mov	ecx, DWORD PTR [esi+28]
	mov	edx, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [esi+36]
	push	ecx
	push	edx
	call	eax
	add	esp, 8
; Line 1247
	mov	DWORD PTR [esi+28], 0
; Line 1249
	xor	eax, eax
	pop	esi
; Line 1250
	pop	ebp
	ret	0
$LN2@inflateEnd:
; Line 1243
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 1250
	pop	ebp
	ret	0
_inflateEnd ENDP
_TEXT	ENDS
PUBLIC	_inflateSetDictionary
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_inflateSetDictionary PROC
; Line 1256
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 1261
	mov	ebx, DWORD PTR _strm$[ebp]
	push	esi
	test	ebx, ebx
	je	$LN7@inflateSet
	mov	esi, DWORD PTR [ebx+28]
	test	esi, esi
	je	$LN7@inflateSet
; Line 1263
	cmp	DWORD PTR [esi+8], 0
	push	edi
	mov	edi, DWORD PTR _dictLength$[ebp]
	je	SHORT $LN6@inflateSet
	cmp	DWORD PTR [esi], 10			; 0000000aH
	je	SHORT $LN11@inflateSet
; Line 1264
	pop	edi
	pop	esi
	mov	eax, -2					; fffffffeH
	pop	ebx
; Line 1292
	pop	ebp
	ret	0
$LN6@inflateSet:
; Line 1267
	cmp	DWORD PTR [esi], 10			; 0000000aH
	jne	SHORT $LN4@inflateSet
$LN11@inflateSet:
; Line 1268
	push	0
	push	0
	push	0
	call	_adler32
; Line 1269
	mov	ecx, DWORD PTR _dictionary$[ebp]
	push	edi
	push	ecx
	push	eax
	call	_adler32
	add	esp, 24					; 00000018H
; Line 1270
	cmp	eax, DWORD PTR [esi+24]
	je	SHORT $LN4@inflateSet
; Line 1271
	pop	edi
	pop	esi
	mov	eax, -3					; fffffffdH
	pop	ebx
; Line 1292
	pop	ebp
	ret	0
$LN4@inflateSet:
; Line 1275
	mov	eax, DWORD PTR [ebx+16]
	call	_updatewindow
	test	eax, eax
	je	SHORT $LN3@inflateSet
; Line 1276
	pop	edi
	mov	DWORD PTR [esi], 30			; 0000001eH
	pop	esi
; Line 1277
	mov	eax, -4					; fffffffcH
	pop	ebx
; Line 1292
	pop	ebp
	ret	0
$LN3@inflateSet:
; Line 1279
	mov	eax, DWORD PTR [esi+40]
; Line 1281
	mov	ecx, DWORD PTR _dictionary$[ebp]
	mov	edx, DWORD PTR [esi+52]
	cmp	edi, eax
	jbe	SHORT $LN2@inflateSet
	sub	ecx, eax
	push	eax
	add	ecx, edi
	push	ecx
	push	edx
	call	_memcpy
; Line 1282
	mov	eax, DWORD PTR [esi+40]
; Line 1286
	add	esp, 12					; 0000000cH
	pop	edi
	mov	DWORD PTR [esi+44], eax
; Line 1289
	mov	DWORD PTR [esi+12], 1
	pop	esi
; Line 1291
	xor	eax, eax
	pop	ebx
; Line 1292
	pop	ebp
	ret	0
$LN2@inflateSet:
; Line 1286
	push	edi
	sub	edx, edi
	push	ecx
	add	edx, eax
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1287
	mov	DWORD PTR [esi+44], edi
	pop	edi
; Line 1289
	mov	DWORD PTR [esi+12], 1
	pop	esi
; Line 1291
	xor	eax, eax
	pop	ebx
; Line 1292
	pop	ebp
	ret	0
$LN7@inflateSet:
	pop	esi
; Line 1261
	mov	eax, -2					; fffffffeH
	pop	ebx
; Line 1292
	pop	ebp
	ret	0
_inflateSetDictionary ENDP
_TEXT	ENDS
PUBLIC	_inflateGetHeader
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_inflateGetHeader PROC
; Line 1297
	push	ebp
	mov	ebp, esp
; Line 1301
	mov	eax, DWORD PTR _strm$[ebp]
	test	eax, eax
	je	SHORT $LN2@inflateGet
	mov	eax, DWORD PTR [eax+28]
	test	eax, eax
	je	SHORT $LN2@inflateGet
; Line 1303
	test	BYTE PTR [eax+8], 2
	je	SHORT $LN2@inflateGet
; Line 1306
	mov	ecx, DWORD PTR _head$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 1307
	mov	DWORD PTR [ecx+48], 0
; Line 1308
	xor	eax, eax
; Line 1309
	pop	ebp
	ret	0
$LN2@inflateGet:
; Line 1301
	mov	eax, -2					; fffffffeH
; Line 1309
	pop	ebp
	ret	0
_inflateGetHeader ENDP
; Function compile flags: /Ogtp
_have$ = 8						; size = 4
_len$ = 12						; size = 4
_syncsearch PROC
; _buf$ = esi
; Line 1326
	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _have$[ebp]
; Line 1330
	mov	ecx, DWORD PTR [edx]
; Line 1331
	xor	eax, eax
; Line 1332
	cmp	DWORD PTR _len$[ebp], eax
	jbe	SHORT $LN11@syncsearch
	push	ebx
	push	edi
$LL6@syncsearch:
	cmp	ecx, 4
	jae	SHORT $LN12@syncsearch
; Line 1333
	mov	dl, BYTE PTR [eax+esi]
	cmp	ecx, 2
	sbb	edi, edi
	and	edi, -255				; ffffff01H
	movzx	ebx, dl
	add	edi, 255				; 000000ffH
	cmp	ebx, edi
	jne	SHORT $LN4@syncsearch
; Line 1334
	inc	ecx
	jmp	SHORT $LN1@syncsearch
$LN4@syncsearch:
; Line 1335
	test	dl, dl
	je	SHORT $LN2@syncsearch
; Line 1336
	xor	ecx, ecx
; Line 1337
	jmp	SHORT $LN1@syncsearch
$LN2@syncsearch:
; Line 1338
	mov	edx, 4
	sub	edx, ecx
	mov	ecx, edx
$LN1@syncsearch:
; Line 1339
	inc	eax
	cmp	eax, DWORD PTR _len$[ebp]
	jb	SHORT $LL6@syncsearch
$LN12@syncsearch:
; Line 1341
	mov	edx, DWORD PTR _have$[ebp]
	pop	edi
	pop	ebx
$LN11@syncsearch:
	mov	DWORD PTR [edx], ecx
; Line 1343
	pop	ebp
	ret	0
_syncsearch ENDP
_TEXT	ENDS
PUBLIC	_inflateSync
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_out$ = 8						; size = 4
_buf$ = 8						; size = 4
_strm$ = 8						; size = 4
_inflateSync PROC
; Line 1347
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 1354
	mov	ebx, DWORD PTR _strm$[ebp]
	push	edi
	test	ebx, ebx
	je	$LN6@inflateSyn
	mov	edi, DWORD PTR [ebx+28]
	test	edi, edi
	je	$LN6@inflateSyn
; Line 1356
	cmp	DWORD PTR [ebx+4], 0
	jne	SHORT $LN5@inflateSyn
	cmp	DWORD PTR [edi+60], 8
	jae	SHORT $LN5@inflateSyn
	pop	edi
	mov	eax, -5					; fffffffbH
	pop	ebx
; Line 1386
	pop	ebp
	ret	0
$LN5@inflateSyn:
; Line 1359
	cmp	DWORD PTR [edi], 31			; 0000001fH
	push	esi
	je	SHORT $LN4@inflateSyn
; Line 1361
	mov	eax, DWORD PTR [edi+60]
	mov	ecx, eax
	and	ecx, 7
	shl	DWORD PTR [edi+56], cl
; Line 1362
	sub	eax, ecx
; Line 1363
	xor	ecx, ecx
	mov	DWORD PTR [edi], 31			; 0000001fH
	mov	DWORD PTR [edi+60], eax
; Line 1364
	cmp	eax, 8
	jb	SHORT $LN2@inflateSyn
	mov	esi, DWORD PTR [edi+56]
$LL3@inflateSyn:
; Line 1365
	mov	dl, BYTE PTR [edi+56]
; Line 1367
	sub	eax, 8
	mov	BYTE PTR _buf$[ebp+ecx], dl
	shr	esi, 8
	inc	ecx
	mov	DWORD PTR [edi+56], esi
	mov	DWORD PTR [edi+60], eax
	cmp	eax, 8
	jae	SHORT $LL3@inflateSyn
$LN2@inflateSyn:
; Line 1369
	lea	eax, DWORD PTR [edi+104]
; Line 1370
	push	ecx
	push	eax
	lea	esi, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax], 0
	call	_syncsearch
	add	esp, 8
$LN4@inflateSyn:
; Line 1374
	mov	ecx, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR [ebx]
	lea	eax, DWORD PTR [edi+104]
	push	ecx
	push	eax
	call	_syncsearch
; Line 1377
	add	DWORD PTR [ebx+8], eax
	sub	DWORD PTR [ebx+4], eax
	add	DWORD PTR [ebx], eax
	mov	esi, DWORD PTR [ebx+8]
	add	esp, 8
; Line 1380
	cmp	DWORD PTR [edi+104], 4
	je	SHORT $LN1@inflateSyn
	pop	esi
	pop	edi
	mov	eax, -3					; fffffffdH
	pop	ebx
; Line 1386
	pop	ebp
	ret	0
$LN1@inflateSyn:
; Line 1381
	mov	edx, DWORD PTR [ebx+20]
; Line 1382
	push	ebx
	mov	DWORD PTR _out$[ebp], edx
	call	_inflateReset
; Line 1383
	mov	eax, DWORD PTR _out$[ebp]
	add	esp, 4
	mov	DWORD PTR [ebx+8], esi
	mov	DWORD PTR [ebx+20], eax
	pop	esi
; Line 1384
	mov	DWORD PTR [edi], 11			; 0000000bH
	pop	edi
; Line 1385
	xor	eax, eax
	pop	ebx
; Line 1386
	pop	ebp
	ret	0
$LN6@inflateSyn:
	pop	edi
; Line 1354
	mov	eax, -2					; fffffffeH
	pop	ebx
; Line 1386
	pop	ebp
	ret	0
_inflateSync ENDP
_TEXT	ENDS
PUBLIC	_inflateSyncPoint
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateSyncPoint PROC
; Line 1398
	push	ebp
	mov	ebp, esp
; Line 1401
	mov	eax, DWORD PTR _strm$[ebp]
	test	eax, eax
	je	SHORT $LN1@inflateSyn@2
	mov	eax, DWORD PTR [eax+28]
	test	eax, eax
	je	SHORT $LN1@inflateSyn@2
; Line 1403
	cmp	DWORD PTR [eax], 13			; 0000000dH
	jne	SHORT $LN5@inflateSyn@2
	cmp	DWORD PTR [eax+60], 0
	jne	SHORT $LN5@inflateSyn@2
	mov	eax, 1
; Line 1404
	pop	ebp
	ret	0
$LN5@inflateSyn@2:
; Line 1403
	xor	eax, eax
; Line 1404
	pop	ebp
	ret	0
$LN1@inflateSyn@2:
; Line 1401
	mov	eax, -2					; fffffffeH
; Line 1404
	pop	ebp
	ret	0
_inflateSyncPoint ENDP
_TEXT	ENDS
PUBLIC	_inflateCopy
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_copy$ = -8						; size = 4
_window$ = -4						; size = 4
_dest$ = 8						; size = 4
_source$ = 12						; size = 4
_inflateCopy PROC
; Line 1409
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 1417
	cmp	DWORD PTR _dest$[ebp], 0
	push	ebx
	push	esi
	je	$LN6@inflateCop
	mov	esi, DWORD PTR _source$[ebp]
	test	esi, esi
	je	$LN6@inflateCop
	mov	ebx, DWORD PTR [esi+28]
	test	ebx, ebx
	je	$LN6@inflateCop
	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	$LN6@inflateCop
	cmp	DWORD PTR [esi+36], 0
	je	$LN6@inflateCop
; Line 1423
	mov	ecx, DWORD PTR [esi+40]
	push	edi
	push	7116					; 00001bccH
	push	1
	push	ecx
	call	eax
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _copy$[ebp], edi
; Line 1424
	test	edi, edi
	je	SHORT $LN11@inflateCop
; Line 1426
	cmp	DWORD PTR [ebx+52], 0
	mov	DWORD PTR _window$[ebp], 0
	je	SHORT $LN3@inflateCop
; Line 1428
	mov	ecx, DWORD PTR [ebx+36]
	mov	eax, DWORD PTR [esi+40]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, DWORD PTR [esi+32]
	push	1
	push	edx
	push	eax
	call	ecx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _window$[ebp], eax
; Line 1429
	test	eax, eax
	jne	SHORT $LN3@inflateCop
; Line 1430
	mov	edx, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [esi+36]
	push	edi
	push	edx
	call	eax
	add	esp, 8
$LN11@inflateCop:
; Line 1431
	pop	edi
	pop	esi
	mov	eax, -4					; fffffffcH
	pop	ebx
; Line 1451
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@inflateCop:
; Line 1436
	mov	edi, DWORD PTR _dest$[ebp]
	mov	ecx, 14					; 0000000eH
; Line 1437
	push	7116					; 00001bccH
	rep movsd
	mov	esi, DWORD PTR _copy$[ebp]
	push	ebx
	push	esi
	call	_memcpy
; Line 1439
	mov	eax, DWORD PTR [ebx+76]
	lea	ecx, DWORD PTR [ebx+1328]
	add	esp, 12					; 0000000cH
	cmp	eax, ecx
	jb	SHORT $LN2@inflateCop
	lea	edx, DWORD PTR [ebx+7100]
	cmp	eax, edx
	ja	SHORT $LN2@inflateCop
; Line 1440
	sub	eax, ebx
	sub	eax, 1328				; 00000530H
	sar	eax, 2
	lea	eax, DWORD PTR [esi+eax*4+1328]
	mov	DWORD PTR [esi+76], eax
; Line 1441
	mov	ecx, DWORD PTR [ebx+80]
	sub	ecx, ebx
	sub	ecx, 1328				; 00000530H
	sar	ecx, 2
	lea	edx, DWORD PTR [esi+ecx*4+1328]
	mov	DWORD PTR [esi+80], edx
$LN2@inflateCop:
; Line 1443
	mov	eax, DWORD PTR [ebx+108]
; Line 1444
	mov	edi, DWORD PTR _window$[ebp]
	sub	eax, ebx
	sub	eax, 1328				; 00000530H
	sar	eax, 2
	lea	ecx, DWORD PTR [esi+eax*4+1328]
	mov	DWORD PTR [esi+108], ecx
	test	edi, edi
	je	SHORT $LN1@inflateCop
; Line 1445
	mov	ecx, DWORD PTR [ebx+36]
; Line 1446
	mov	eax, DWORD PTR [ebx+52]
	mov	edx, 1
	shl	edx, cl
	push	edx
	push	eax
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@inflateCop:
; Line 1449
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [esi+52], edi
	pop	edi
	mov	DWORD PTR [ecx+28], esi
	pop	esi
; Line 1450
	xor	eax, eax
	pop	ebx
; Line 1451
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@inflateCop:
	pop	esi
; Line 1418
	mov	eax, -2					; fffffffeH
	pop	ebx
; Line 1451
	mov	esp, ebp
	pop	ebp
	ret	0
_inflateCopy ENDP
_TEXT	ENDS
PUBLIC	_inflateUndermine
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_subvert$ = 12						; size = 4
_inflateUndermine PROC
; Line 1456
	push	ebp
	mov	ebp, esp
; Line 1459
	mov	eax, DWORD PTR _strm$[ebp]
	test	eax, eax
	je	SHORT $LN1@inflateUnd
	mov	eax, DWORD PTR [eax+28]
	test	eax, eax
	je	SHORT $LN1@inflateUnd
; Line 1465
	mov	DWORD PTR [eax+7104], 1
; Line 1466
	mov	eax, -3					; fffffffdH
; Line 1468
	pop	ebp
	ret	0
$LN1@inflateUnd:
; Line 1459
	mov	eax, -2					; fffffffeH
; Line 1468
	pop	ebp
	ret	0
_inflateUndermine ENDP
_TEXT	ENDS
PUBLIC	_inflateMark
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateMark PROC
; Line 1472
	push	ebp
	mov	ebp, esp
; Line 1475
	mov	eax, DWORD PTR _strm$[ebp]
	test	eax, eax
	je	SHORT $LN1@inflateMar
	mov	eax, DWORD PTR [eax+28]
	test	eax, eax
	je	SHORT $LN1@inflateMar
; Line 1479
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, 15					; 0000000fH
	jne	SHORT $LN7@inflateMar
	mov	ecx, DWORD PTR [eax+64]
	mov	eax, DWORD PTR [eax+7108]
	shl	eax, 16					; 00000010H
	add	eax, ecx
; Line 1480
	pop	ebp
	ret	0
$LN7@inflateMar:
; Line 1479
	cmp	ecx, 24					; 00000018H
	jne	SHORT $LN5@inflateMar
	mov	ecx, DWORD PTR [eax+7112]
	sub	ecx, DWORD PTR [eax+64]
	mov	eax, DWORD PTR [eax+7108]
	shl	eax, 16					; 00000010H
	add	eax, ecx
; Line 1480
	pop	ebp
	ret	0
$LN5@inflateMar:
; Line 1479
	mov	eax, DWORD PTR [eax+7108]
	xor	ecx, ecx
	shl	eax, 16					; 00000010H
	add	eax, ecx
; Line 1480
	pop	ebp
	ret	0
$LN1@inflateMar:
; Line 1475
	mov	eax, -65536				; ffff0000H
; Line 1480
	pop	ebp
	ret	0
_inflateMark ENDP
_TEXT	ENDS
END
