; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\programovani\WoW Editor\Test\src\zlib\gzread.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG5819	DB	'out of memory', 00H
	ORG $+2
$SG5822	DB	'1.2.5', 00H
	ORG $+2
$SG5823	DB	'out of memory', 00H
	ORG $+2
$SG5831	DB	'unknown compression method', 00H
	ORG $+1
$SG5833	DB	'unknown header flags set', 00H
	ORG $+3
$SG5865	DB	'unexpected end of file', 00H
	ORG $+1
$SG5868	DB	'internal error: inflate stream corrupt', 00H
	ORG $+1
$SG5870	DB	'out of memory', 00H
	ORG $+2
$SG5873	DB	'compressed data error', 00H
	ORG $+2
$SG5878	DB	'unexpected end of file', 00H
	ORG $+1
$SG5880	DB	'incorrect data check', 00H
	ORG $+3
$SG5882	DB	'incorrect length check', 00H
	ORG $+1
$SG5928	DB	'requested length does not fit in int', 00H
	ORG $+3
$SG5976	DB	'out of room to push characters', 00H
_DATA	ENDS
EXTRN	_gz_error:PROC
EXTRN	__imp__strerror:PROC
EXTRN	__imp___errno:PROC
EXTRN	__imp___read:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_gz_load PROC
; _state$ = ebx
; _len$ = edi
; _have$ = esi
; File c:\programovani\wow editor\test\src\zlib\gzread.c
; Line 22
	push	ebp
	mov	ebp, esp
; Line 25
	mov	DWORD PTR [esi], 0
	npad	7
$LL6@gz_load:
; Line 27
	mov	eax, DWORD PTR [esi]
	mov	ecx, edi
	sub	ecx, eax
	add	eax, DWORD PTR _buf$[ebp]
	push	ecx
	push	eax
	mov	eax, DWORD PTR [ebx+4]
	push	eax
	call	DWORD PTR __imp___read
	add	esp, 12					; 0000000cH
; Line 28
	test	eax, eax
	jle	SHORT $LN11@gz_load
; Line 30
	add	DWORD PTR [esi], eax
; Line 31
	cmp	DWORD PTR [esi], edi
	jb	SHORT $LL6@gz_load
; Line 32
	test	eax, eax
$LN11@gz_load:
	jns	SHORT $LN2@gz_load
; Line 33
	call	DWORD PTR __imp___errno
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__strerror
	push	eax
	push	-1
	push	ebx
	call	_gz_error
	add	esp, 16					; 00000010H
; Line 34
	or	eax, -1
; Line 39
	pop	ebp
	ret	0
$LN2@gz_load:
; Line 36
	test	eax, eax
	jne	SHORT $LN1@gz_load
; Line 37
	mov	DWORD PTR [ebx+40], 1
$LN1@gz_load:
; Line 38
	xor	eax, eax
; Line 39
	pop	ebp
	ret	0
_gz_load ENDP
; Function compile flags: /Ogtp
_gz_avail PROC
; _state$ = eax
; Line 48
	push	ebx
	mov	ebx, eax
; Line 51
	cmp	DWORD PTR [ebx+76], 0
	je	SHORT $LN3@gz_avail
$LN6@gz_avail:
; Line 52
	or	eax, -1
	pop	ebx
; Line 60
	ret	0
$LN3@gz_avail:
; Line 53
	cmp	DWORD PTR [ebx+40], 0
	jne	SHORT $LN2@gz_avail
; Line 55
	mov	eax, DWORD PTR [ebx+24]
	push	esi
	push	edi
	mov	edi, DWORD PTR [ebx+16]
	lea	esi, DWORD PTR [ebx+88]
	push	eax
	call	_gz_load
	add	esp, 4
	pop	edi
	pop	esi
	cmp	eax, -1
; Line 56
	je	SHORT $LN6@gz_avail
; Line 57
	mov	ecx, DWORD PTR [ebx+24]
	mov	DWORD PTR [ebx+84], ecx
$LN2@gz_avail:
; Line 59
	xor	eax, eax
	pop	ebx
; Line 60
	ret	0
_gz_avail ENDP
; Function compile flags: /Ogtp
_val$ = -4						; size = 4
_ret$ = 8						; size = 4
_gz_next4 PROC
; _state$ = eax
; Line 72
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	ebx, eax
; Line 77
	cmp	DWORD PTR [ebx+88], 0
	push	esi
	push	edi
	jne	SHORT $LN47@gz_next4
	cmp	DWORD PTR [ebx+76], 0
	jne	SHORT $LN45@gz_next4
	cmp	DWORD PTR [ebx+40], 0
	jne	SHORT $LN47@gz_next4
	mov	eax, DWORD PTR [ebx+24]
	mov	edi, DWORD PTR [ebx+16]
	lea	esi, DWORD PTR [ebx+88]
	push	eax
	call	_gz_load
	add	esp, 4
	cmp	eax, -1
	je	SHORT $LN45@gz_next4
	mov	ecx, DWORD PTR [ebx+24]
	mov	DWORD PTR [ebx+84], ecx
$LN47@gz_next4:
	mov	eax, DWORD PTR [ebx+88]
	test	eax, eax
	jne	SHORT $LN5@gz_next4
$LN45@gz_next4:
	mov	DWORD PTR _val$[ebp], -1
	jmp	SHORT $LN6@gz_next4
$LN5@gz_next4:
	dec	eax
	mov	DWORD PTR [ebx+88], eax
	mov	eax, DWORD PTR [ebx+84]
	movzx	edx, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR _val$[ebp], edx
	mov	DWORD PTR [ebx+84], eax
$LN6@gz_next4:
; Line 78
	cmp	DWORD PTR [ebx+88], 0
	jne	SHORT $LN8@gz_next4
	cmp	DWORD PTR [ebx+76], 0
	jne	SHORT $LN48@gz_next4
	cmp	DWORD PTR [ebx+40], 0
	jne	SHORT $LN8@gz_next4
	mov	eax, DWORD PTR [ebx+24]
	mov	edi, DWORD PTR [ebx+16]
	lea	esi, DWORD PTR [ebx+88]
	push	eax
	call	_gz_load
	add	esp, 4
	cmp	eax, -1
	je	SHORT $LN48@gz_next4
	mov	ecx, DWORD PTR [ebx+24]
	mov	DWORD PTR [ebx+84], ecx
$LN8@gz_next4:
	mov	eax, DWORD PTR [ebx+88]
	test	eax, eax
	jne	SHORT $LN9@gz_next4
$LN48@gz_next4:
	or	eax, -1
	jmp	SHORT $LN10@gz_next4
$LN9@gz_next4:
	mov	ecx, DWORD PTR [ebx+84]
	dec	eax
	mov	DWORD PTR [ebx+88], eax
	movzx	eax, BYTE PTR [ecx]
	inc	ecx
	mov	DWORD PTR [ebx+84], ecx
$LN10@gz_next4:
	shl	eax, 8
	add	DWORD PTR _val$[ebp], eax
; Line 79
	cmp	DWORD PTR [ebx+88], 0
	jne	SHORT $LN12@gz_next4
	cmp	DWORD PTR [ebx+76], 0
	jne	SHORT $LN49@gz_next4
	cmp	DWORD PTR [ebx+40], 0
	jne	SHORT $LN12@gz_next4
	mov	edx, DWORD PTR [ebx+24]
	mov	edi, DWORD PTR [ebx+16]
	lea	esi, DWORD PTR [ebx+88]
	push	edx
	call	_gz_load
	add	esp, 4
	cmp	eax, -1
	je	SHORT $LN49@gz_next4
	mov	eax, DWORD PTR [ebx+24]
	mov	DWORD PTR [ebx+84], eax
$LN12@gz_next4:
	mov	eax, DWORD PTR [ebx+88]
	test	eax, eax
	jne	SHORT $LN13@gz_next4
$LN49@gz_next4:
	or	eax, -1
	jmp	SHORT $LN14@gz_next4
$LN13@gz_next4:
	mov	ecx, DWORD PTR [ebx+84]
	dec	eax
	mov	DWORD PTR [ebx+88], eax
	movzx	eax, BYTE PTR [ecx]
	inc	ecx
	mov	DWORD PTR [ebx+84], ecx
$LN14@gz_next4:
	shl	eax, 16					; 00000010H
	add	DWORD PTR _val$[ebp], eax
; Line 80
	cmp	DWORD PTR [ebx+88], 0
	jne	SHORT $LN16@gz_next4
	cmp	DWORD PTR [ebx+76], 0
	jne	SHORT $LN50@gz_next4
	cmp	DWORD PTR [ebx+40], 0
	jne	SHORT $LN16@gz_next4
	mov	ecx, DWORD PTR [ebx+24]
	mov	edi, DWORD PTR [ebx+16]
	lea	esi, DWORD PTR [ebx+88]
	push	ecx
	call	_gz_load
	add	esp, 4
	cmp	eax, -1
	je	SHORT $LN50@gz_next4
	mov	edx, DWORD PTR [ebx+24]
	mov	DWORD PTR [ebx+84], edx
$LN16@gz_next4:
	mov	eax, DWORD PTR [ebx+88]
	test	eax, eax
	je	SHORT $LN50@gz_next4
	mov	ecx, DWORD PTR [ebx+84]
	dec	eax
	mov	DWORD PTR [ebx+88], eax
	movzx	eax, BYTE PTR [ecx]
	inc	ecx
	mov	DWORD PTR [ebx+84], ecx
; Line 81
	cmp	eax, -1
	jne	SHORT $LN1@gz_next4
$LN50@gz_next4:
	pop	edi
	pop	esi
; Line 82
	or	eax, -1
	pop	ebx
; Line 86
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1@gz_next4:
; Line 84
	mov	ecx, DWORD PTR _ret$[ebp]
	shl	eax, 24					; 00000018H
	add	eax, DWORD PTR _val$[ebp]
	pop	edi
	pop	esi
	mov	DWORD PTR [ecx], eax
; Line 85
	xor	eax, eax
	pop	ebx
; Line 86
	mov	esp, ebp
	pop	ebp
	ret	0
_gz_next4 ENDP
_TEXT	ENDS
EXTRN	_crc32:PROC
EXTRN	_inflateReset:PROC
EXTRN	__imp__free:PROC
EXTRN	_inflateInit2_:PROC
EXTRN	__imp__malloc:PROC
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv68 = -8						; size = 4
tv608 = -4						; size = 4
_flags$ = -4						; size = 4
_gz_head PROC
; _state$ = eax
; Line 102
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	mov	ebx, eax
; Line 108
	cmp	DWORD PTR [ebx+16], 0
	push	esi
	lea	esi, DWORD PTR [ebx+84]
	push	edi
	mov	DWORD PTR tv608[ebp], esi
	jne	$LN130@gz_head
; Line 110
	mov	edi, DWORD PTR [ebx+20]
	push	edi
	call	DWORD PTR __imp__malloc
	mov	DWORD PTR tv68[ebp], eax
	mov	DWORD PTR [ebx+24], eax
; Line 111
	lea	eax, DWORD PTR [edi+edi]
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 8
; Line 112
	cmp	DWORD PTR tv68[ebp], 0
	mov	DWORD PTR [ebx+28], eax
	je	SHORT $LN25@gz_head
	test	eax, eax
	je	SHORT $LN128@gz_head
; Line 128
	push	56					; 00000038H
	xor	eax, eax
	push	OFFSET $SG5822
	push	-15					; fffffff1H
	push	esi
	mov	DWORD PTR [ebx+16], edi
	mov	DWORD PTR [ebx+116], eax
	mov	DWORD PTR [ebx+120], eax
	mov	DWORD PTR [ebx+124], eax
	mov	DWORD PTR [ebx+88], eax
	mov	DWORD PTR [esi], eax
	call	_inflateInit2_
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN130@gz_head
; Line 129
	mov	ecx, DWORD PTR [ebx+28]
	mov	esi, DWORD PTR __imp__free
	push	ecx
	call	esi
; Line 130
	mov	edx, DWORD PTR [ebx+24]
	push	edx
	call	esi
; Line 132
	push	OFFSET $SG5823
	push	-4					; fffffffcH
	push	ebx
	mov	DWORD PTR [ebx+16], 0
	call	_gz_error
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
; Line 133
	or	eax, -1
	pop	ebx
; Line 219
	mov	esp, ebp
	pop	ebp
	ret	0
$LN25@gz_head:
; Line 113
	test	eax, eax
	je	SHORT $LN128@gz_head
; Line 114
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN128@gz_head:
; Line 115
	mov	eax, DWORD PTR [ebx+24]
	test	eax, eax
	je	SHORT $LN23@gz_head
; Line 116
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN23@gz_head:
; Line 117
	push	OFFSET $SG5819
	push	-4					; fffffffcH
	push	ebx
	call	_gz_error
	add	esp, 12					; 0000000cH
$LN114@gz_head:
; Line 118
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
; Line 219
	mov	esp, ebp
	pop	ebp
	ret	0
$LN130@gz_head:
; Line 138
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $LN116@gz_head
; Line 139
	cmp	DWORD PTR [ebx+76], eax
	jne	SHORT $LN114@gz_head
	cmp	DWORD PTR [ebx+40], eax
	jne	SHORT $LN115@gz_head
	mov	eax, DWORD PTR [ebx+24]
	mov	edi, DWORD PTR [ebx+16]
	add	esi, 4
	push	eax
	call	_gz_load
	add	esp, 4
	cmp	eax, -1
	je	SHORT $LN114@gz_head
	mov	edx, DWORD PTR tv608[ebp]
	mov	ecx, DWORD PTR [ebx+24]
	mov	DWORD PTR [edx], ecx
	mov	esi, edx
$LN115@gz_head:
; Line 141
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
; Line 142
	je	$LN152@gz_head
$LN116@gz_head:
; Line 146
	mov	ecx, DWORD PTR [esi]
	cmp	BYTE PTR [ecx], 31			; 0000001fH
	mov	edi, 1
	jne	$LN2@gz_head
; Line 147
	dec	eax
; Line 148
	inc	ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi], ecx
; Line 149
	test	eax, eax
	jne	SHORT $LN137@gz_head
	mov	eax, ebx
	call	_gz_avail
	cmp	eax, -1
; Line 150
	je	SHORT $LN114@gz_head
$LN137@gz_head:
; Line 151
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	$LN16@gz_head
	mov	ecx, DWORD PTR [esi]
	cmp	BYTE PTR [ecx], 139			; 0000008bH
	jne	$LN16@gz_head
; Line 153
	dec	eax
; Line 154
	inc	ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi], ecx
; Line 157
	test	eax, eax
	jne	SHORT $LN30@gz_head
	mov	eax, ebx
	call	_gz_avail
	cmp	eax, -1
	je	SHORT $LN101@gz_head
$LN30@gz_head:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN101@gz_head
	lea	ecx, DWORD PTR [eax-1]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [esi+4], ecx
	movzx	edx, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR [esi], eax
	cmp	edx, 8
	je	SHORT $LN15@gz_head
$LN101@gz_head:
; Line 158
	push	OFFSET $SG5831
	push	-3					; fffffffdH
	push	ebx
	call	_gz_error
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
; Line 159
	or	eax, -1
	pop	ebx
; Line 219
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@gz_head:
; Line 161
	test	ecx, ecx
	jne	SHORT $LN138@gz_head
	mov	eax, ebx
	call	_gz_avail
	cmp	eax, -1
	jne	SHORT $LN138@gz_head
	mov	DWORD PTR _flags$[ebp], eax
	jmp	SHORT $LN36@gz_head
$LN138@gz_head:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $LN35@gz_head
	mov	DWORD PTR _flags$[ebp], -1
	jmp	SHORT $LN36@gz_head
$LN35@gz_head:
	dec	eax
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR [esi]
	movzx	ecx, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR _flags$[ebp], ecx
	mov	DWORD PTR [esi], eax
$LN36@gz_head:
; Line 162
	test	BYTE PTR _flags$[ebp], -32		; ffffffe0H
	je	SHORT $LN14@gz_head
; Line 163
	push	OFFSET $SG5833
	push	-3					; fffffffdH
	push	ebx
	call	_gz_error
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
; Line 164
	or	eax, -1
	pop	ebx
; Line 219
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@gz_head:
; Line 166
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $LN141@gz_head
	mov	eax, ebx
	call	_gz_avail
	cmp	eax, -1
	je	SHORT $LN117@gz_head
$LN141@gz_head:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN117@gz_head
	dec	eax
	inc	DWORD PTR [esi]
	mov	DWORD PTR [esi+4], eax
$LN117@gz_head:
; Line 167
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $LN144@gz_head
	mov	eax, ebx
	call	_gz_avail
	cmp	eax, -1
	je	SHORT $LN118@gz_head
$LN144@gz_head:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN118@gz_head
	dec	eax
	inc	DWORD PTR [esi]
	mov	DWORD PTR [esi+4], eax
$LN118@gz_head:
; Line 168
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $LN146@gz_head
	mov	eax, ebx
	call	_gz_avail
	cmp	eax, -1
	je	SHORT $LN119@gz_head
$LN146@gz_head:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN119@gz_head
	dec	eax
	inc	DWORD PTR [esi]
	mov	DWORD PTR [esi+4], eax
$LN119@gz_head:
; Line 169
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $LN148@gz_head
	mov	eax, ebx
	call	_gz_avail
	cmp	eax, -1
	je	SHORT $LN120@gz_head
$LN148@gz_head:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN120@gz_head
	dec	eax
	inc	DWORD PTR [esi]
	mov	DWORD PTR [esi+4], eax
$LN120@gz_head:
; Line 170
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $LN150@gz_head
	mov	eax, ebx
	call	_gz_avail
	cmp	eax, -1
	je	SHORT $LN121@gz_head
$LN150@gz_head:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN121@gz_head
	dec	eax
	inc	DWORD PTR [esi]
	mov	DWORD PTR [esi+4], eax
$LN121@gz_head:
; Line 171
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $LN58@gz_head
	mov	eax, ebx
	call	_gz_avail
	cmp	eax, -1
	je	SHORT $LN122@gz_head
$LN58@gz_head:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN122@gz_head
	dec	eax
	inc	DWORD PTR [esi]
	mov	DWORD PTR [esi+4], eax
$LN122@gz_head:
; Line 172
	test	BYTE PTR _flags$[ebp], 4
	je	$LN125@gz_head
; Line 173
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $LN123@gz_head
	mov	eax, ebx
	call	_gz_avail
	cmp	eax, -1
	jne	SHORT $LN123@gz_head
	or	edi, eax
	jmp	SHORT $LN64@gz_head
$LN123@gz_head:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $LN63@gz_head
	or	edi, -1
	jmp	SHORT $LN64@gz_head
$LN63@gz_head:
	dec	eax
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR [esi]
	movzx	edi, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR [esi], eax
$LN64@gz_head:
; Line 174
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $LN124@gz_head
	mov	eax, ebx
	call	_gz_avail
	cmp	eax, -1
	jne	SHORT $LN124@gz_head
	or	eax, eax
	jmp	SHORT $LN68@gz_head
$LN124@gz_head:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $LN67@gz_head
	or	eax, -1
	jmp	SHORT $LN68@gz_head
$LN67@gz_head:
	mov	ecx, DWORD PTR [esi]
	dec	eax
	mov	DWORD PTR [esi+4], eax
	movzx	eax, BYTE PTR [ecx]
	inc	ecx
	mov	DWORD PTR [esi], ecx
$LN68@gz_head:
	shl	eax, 8
	add	edi, eax
; Line 175
	je	SHORT $LN125@gz_head
	npad	6
$LL12@gz_head:
; Line 176
	mov	eax, DWORD PTR [esi+4]
	dec	edi
	test	eax, eax
	jne	SHORT $LN133@gz_head
	mov	eax, ebx
	call	_gz_avail
	cmp	eax, -1
	je	SHORT $LN125@gz_head
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN125@gz_head
$LN133@gz_head:
	dec	eax
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR [esi]
	movzx	ecx, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR [esi], eax
	test	ecx, ecx
	js	SHORT $LN125@gz_head
; Line 175
	test	edi, edi
	jne	SHORT $LL12@gz_head
$LN125@gz_head:
; Line 179
	test	BYTE PTR _flags$[ebp], 8
	je	SHORT $LN126@gz_head
$LL8@gz_head:
; Line 180
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $LN134@gz_head
	mov	eax, ebx
	call	_gz_avail
	cmp	eax, -1
	je	SHORT $LN126@gz_head
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN126@gz_head
$LN134@gz_head:
	dec	eax
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR [esi]
	movzx	ecx, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR [esi], eax
	test	ecx, ecx
	jg	SHORT $LL8@gz_head
$LN126@gz_head:
; Line 182
	test	BYTE PTR _flags$[ebp], 16		; 00000010H
	je	SHORT $LN127@gz_head
$LL5@gz_head:
; Line 183
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $LN113@gz_head
	mov	eax, ebx
	call	_gz_avail
	cmp	eax, -1
	je	SHORT $LN127@gz_head
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN127@gz_head
$LN113@gz_head:
	dec	eax
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR [esi]
	movzx	ecx, BYTE PTR [eax]
	inc	eax
	mov	DWORD PTR [esi], eax
	test	ecx, ecx
	jg	SHORT $LL5@gz_head
$LN127@gz_head:
; Line 185
	test	BYTE PTR _flags$[ebp], 2
	je	SHORT $LN140@gz_head
; Line 186
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $LN139@gz_head
	mov	eax, ebx
	call	_gz_avail
	cmp	eax, -1
	je	SHORT $LN142@gz_head
$LN139@gz_head:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN142@gz_head
	dec	eax
	inc	DWORD PTR [esi]
	mov	DWORD PTR [esi+4], eax
$LN142@gz_head:
; Line 187
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $LN86@gz_head
	mov	eax, ebx
	call	_gz_avail
	cmp	eax, -1
	je	SHORT $LN140@gz_head
$LN86@gz_head:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN140@gz_head
	dec	eax
	inc	DWORD PTR [esi]
	mov	DWORD PTR [esi+4], eax
$LN140@gz_head:
; Line 193
	push	esi
	call	_inflateReset
; Line 194
	push	0
	push	0
	push	0
	call	_crc32
	add	esp, 16					; 00000010H
	mov	DWORD PTR [esi+48], eax
	pop	edi
	pop	esi
; Line 195
	mov	DWORD PTR [ebx+52], 2
; Line 196
	mov	DWORD PTR [ebx+56], 0
; Line 218
	xor	eax, eax
	pop	ebx
; Line 219
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@gz_head:
; Line 201
	mov	edx, DWORD PTR [ebx+28]
	mov	BYTE PTR [edx], 31			; 0000001fH
; Line 202
	mov	DWORD PTR [ebx+36], edi
$LN2@gz_head:
; Line 209
	mov	eax, DWORD PTR [ebx+12]
	mov	DWORD PTR [ebx+48], eax
; Line 210
	mov	eax, DWORD PTR [ebx+28]
	mov	DWORD PTR [ebx+32], eax
; Line 211
	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN1@gz_head
; Line 212
	mov	edx, DWORD PTR [ebx+36]
	push	ecx
	mov	ecx, DWORD PTR [esi]
	push	ecx
	add	edx, eax
	push	edx
	call	_memcpy
; Line 213
	mov	eax, DWORD PTR [esi+4]
	add	esp, 12					; 0000000cH
	add	DWORD PTR [ebx+36], eax
; Line 214
	mov	DWORD PTR [esi+4], 0
$LN1@gz_head:
; Line 216
	mov	DWORD PTR [ebx+52], edi
; Line 217
	mov	DWORD PTR [ebx+56], edi
$LN152@gz_head:
; Line 218
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 219
	mov	esp, ebp
	pop	ebp
	ret	0
_gz_head ENDP
_TEXT	ENDS
EXTRN	_inflate:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_crc$ = -8						; size = 4
_had$ = -8						; size = 4
tv224 = -4						; size = 4
_len$ = -4						; size = 4
_gz_decomp PROC
; _state$ = eax
; Line 231
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	mov	ebx, eax
; Line 238
	mov	eax, DWORD PTR [ebx+100]
	push	esi
	lea	esi, DWORD PTR [ebx+84]
	push	edi
	mov	DWORD PTR tv224[ebp], esi
	mov	DWORD PTR _had$[ebp], eax
$LL15@gz_decomp:
; Line 241
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $LN35@gz_decomp
	cmp	DWORD PTR [ebx+76], 0
	jne	$LN36@gz_decomp
	cmp	DWORD PTR [ebx+40], 0
	jne	SHORT $LN34@gz_decomp
	mov	ecx, DWORD PTR [ebx+24]
	mov	edi, DWORD PTR [ebx+16]
	add	esi, 4
	push	ecx
	call	_gz_load
	add	esp, 4
	cmp	eax, -1
	je	$LN36@gz_decomp
	mov	eax, DWORD PTR tv224[ebp]
	mov	edx, DWORD PTR [ebx+24]
	mov	DWORD PTR [eax], edx
	mov	esi, eax
$LN34@gz_decomp:
; Line 243
	cmp	DWORD PTR [esi+4], 0
	je	$LN27@gz_decomp
$LN35@gz_decomp:
; Line 249
	push	0
	push	esi
	call	_inflate
	mov	edi, eax
	add	esp, 8
; Line 250
	cmp	edi, -2					; fffffffeH
	je	$LN9@gz_decomp
	cmp	edi, 2
	je	$LN9@gz_decomp
; Line 255
	cmp	edi, -4					; fffffffcH
	je	$LN29@gz_decomp
; Line 259
	cmp	edi, -3					; fffffffdH
	je	$LN30@gz_decomp
; Line 264
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN6@gz_decomp
	cmp	edi, 1
	jne	$LL15@gz_decomp
$LN6@gz_decomp:
; Line 267
	mov	eax, DWORD PTR _had$[ebp]
	sub	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [ebx+36], eax
; Line 268
	mov	ecx, DWORD PTR [esi+12]
	sub	ecx, eax
; Line 269
	push	eax
	mov	DWORD PTR [ebx+32], ecx
	mov	eax, DWORD PTR [esi+48]
	push	ecx
	push	eax
	call	_crc32
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+48], eax
; Line 272
	cmp	edi, 1
	jne	$LN5@gz_decomp
; Line 273
	lea	ecx, DWORD PTR _crc$[ebp]
	push	ecx
	mov	eax, ebx
	call	_gz_next4
	add	esp, 4
	cmp	eax, -1
	je	$LN3@gz_decomp
	lea	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, ebx
	call	_gz_next4
	add	esp, 4
	cmp	eax, -1
	je	$LN3@gz_decomp
; Line 277
	mov	eax, DWORD PTR _crc$[ebp]
	cmp	eax, DWORD PTR [esi+48]
	je	SHORT $LN2@gz_decomp
; Line 278
	push	OFFSET $SG5880
	push	-3					; fffffffdH
	push	ebx
	call	_gz_error
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
; Line 291
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@gz_decomp:
; Line 244
	push	OFFSET $SG5865
	push	-3					; fffffffdH
; Line 252
	push	ebx
	call	_gz_error
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
; Line 253
	or	eax, -1
	pop	ebx
; Line 291
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@gz_decomp:
; Line 256
	push	OFFSET $SG5870
	push	-4					; fffffffcH
	push	ebx
	call	_gz_error
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
; Line 291
	mov	esp, ebp
	pop	ebp
	ret	0
$LN30@gz_decomp:
; Line 261
	mov	esi, DWORD PTR [esi+24]
	test	esi, esi
	jne	SHORT $LN18@gz_decomp
	mov	esi, OFFSET $SG5873
$LN18@gz_decomp:
	push	esi
	push	-3					; fffffffdH
	push	ebx
	call	_gz_error
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
; Line 291
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@gz_decomp:
; Line 281
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [esi+20]
	je	SHORT $LN1@gz_decomp
; Line 282
	push	OFFSET $SG5882
	push	-3					; fffffffdH
	push	ebx
	call	_gz_error
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
; Line 291
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1@gz_decomp:
; Line 285
	mov	DWORD PTR [ebx+52], 0
$LN5@gz_decomp:
	pop	edi
	pop	esi
; Line 290
	xor	eax, eax
	pop	ebx
; Line 291
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@gz_decomp:
; Line 274
	push	OFFSET $SG5878
	push	-3					; fffffffdH
	push	ebx
	call	_gz_error
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
; Line 291
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@gz_decomp:
; Line 252
	push	OFFSET $SG5868
	push	-2					; fffffffeH
	push	ebx
	call	_gz_error
	add	esp, 12					; 0000000cH
$LN36@gz_decomp:
; Line 253
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
; Line 291
	mov	esp, ebp
	pop	ebp
	ret	0
_gz_decomp ENDP
; Function compile flags: /Ogtp
_gz_make PROC
; _state$ = eax
; Line 302
	push	ebx
	mov	ebx, eax
; Line 305
	cmp	DWORD PTR [ebx+52], 0
	jne	SHORT $LN11@gz_make
; Line 306
	call	_gz_head
	cmp	eax, -1
	jne	SHORT $LN7@gz_make
$LN12@gz_make:
; Line 307
	or	eax, -1
	pop	ebx
; Line 323
	ret	0
$LN7@gz_make:
; Line 308
	cmp	DWORD PTR [ebx+36], 0
; Line 309
	jne	SHORT $LN1@gz_make
$LN11@gz_make:
; Line 311
	mov	eax, DWORD PTR [ebx+52]
	cmp	eax, 1
	jne	SHORT $LN5@gz_make
; Line 312
	mov	eax, DWORD PTR [ebx+28]
	push	esi
	push	edi
	mov	edi, DWORD PTR [ebx+16]
	lea	esi, DWORD PTR [ebx+36]
	add	edi, edi
	push	eax
	call	_gz_load
	add	esp, 4
	pop	edi
	pop	esi
	cmp	eax, -1
; Line 313
	je	SHORT $LN12@gz_make
; Line 314
	mov	ecx, DWORD PTR [ebx+28]
	mov	DWORD PTR [ebx+32], ecx
; Line 322
	xor	eax, eax
	pop	ebx
; Line 323
	ret	0
$LN5@gz_make:
; Line 316
	cmp	eax, 2
	jne	SHORT $LN1@gz_make
; Line 317
	mov	edx, DWORD PTR [ebx+16]
	add	edx, edx
	mov	DWORD PTR [ebx+100], edx
; Line 318
	mov	eax, DWORD PTR [ebx+28]
	mov	DWORD PTR [ebx+96], eax
; Line 319
	mov	eax, ebx
	call	_gz_decomp
	cmp	eax, -1
; Line 320
	je	SHORT $LN12@gz_make
$LN1@gz_make:
; Line 322
	xor	eax, eax
	pop	ebx
; Line 323
	ret	0
_gz_make ENDP
; Function compile flags: /Ogtp
_len$ = 8						; size = 4
_gz_skip PROC
; _state$ = eax
; Line 329
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 333
	mov	edi, DWORD PTR _len$[ebp]
	mov	ebx, eax
	test	edi, edi
	je	$LN6@gz_skip
	lea	esi, DWORD PTR [ebx+36]
$LL7@gz_skip:
; Line 335
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN5@gz_skip
; Line 337
	cmp	eax, 2147483647				; 7fffffffH
	ja	SHORT $LN11@gz_skip
	mov	ecx, eax
	cmp	eax, edi
	jle	SHORT $LN12@gz_skip
$LN11@gz_skip:
	mov	ecx, edi
$LN12@gz_skip:
; Line 339
	add	DWORD PTR [ebx+32], ecx
; Line 340
	add	DWORD PTR [ebx+12], ecx
	sub	eax, ecx
; Line 341
	sub	edi, ecx
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR _len$[ebp], edi
	jmp	SHORT $LN33@gz_skip
$LN5@gz_skip:
; Line 345
	cmp	DWORD PTR [ebx+40], 0
	je	SHORT $LN3@gz_skip
	cmp	DWORD PTR [ebx+88], 0
	je	SHORT $LN6@gz_skip
$LN3@gz_skip:
; Line 351
	cmp	DWORD PTR [ebx+52], 0
	jne	SHORT $LN30@gz_skip
	mov	eax, ebx
	call	_gz_head
	cmp	eax, -1
	je	SHORT $LN31@gz_skip
	cmp	DWORD PTR [esi], 0
	jne	SHORT $LN33@gz_skip
$LN30@gz_skip:
	mov	eax, DWORD PTR [ebx+52]
	cmp	eax, 1
	jne	SHORT $LN17@gz_skip
	mov	edi, DWORD PTR [ebx+16]
	mov	eax, DWORD PTR [ebx+28]
	add	edi, edi
	push	eax
	call	_gz_load
	add	esp, 4
	cmp	eax, -1
	je	SHORT $LN31@gz_skip
	mov	ecx, DWORD PTR [ebx+28]
	mov	edi, DWORD PTR _len$[ebp]
	mov	DWORD PTR [ebx+32], ecx
	jmp	SHORT $LN33@gz_skip
$LN17@gz_skip:
	cmp	eax, 2
	jne	SHORT $LN33@gz_skip
	mov	edx, DWORD PTR [ebx+16]
	add	edx, edx
	mov	DWORD PTR [ebx+100], edx
	mov	eax, DWORD PTR [ebx+28]
	mov	DWORD PTR [ebx+96], eax
	mov	eax, ebx
	call	_gz_decomp
	cmp	eax, -1
	je	SHORT $LN31@gz_skip
$LN33@gz_skip:
; Line 333
	test	edi, edi
	jne	$LL7@gz_skip
$LN6@gz_skip:
	pop	edi
	pop	esi
; Line 354
	xor	eax, eax
	pop	ebx
; Line 355
	pop	ebp
	ret	0
$LN31@gz_skip:
	pop	edi
	pop	esi
; Line 352
	or	eax, -1
	pop	ebx
; Line 355
	pop	ebp
	ret	0
_gz_skip ENDP
_TEXT	ENDS
PUBLIC	_gzread
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_got$ = -4						; size = 4
_n$ = 8							; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_gzread	PROC
; Line 362
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 368
	mov	ebx, DWORD PTR _file$[ebp]
	push	esi
	xor	esi, esi
	cmp	ebx, esi
	jne	SHORT $LN22@gzread
$LN20@gzread:
	pop	esi
; Line 369
	or	eax, -1
	pop	ebx
; Line 446
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@gzread:
; Line 374
	cmp	DWORD PTR [ebx], 7247			; 00001c4fH
	jne	SHORT $LN20@gzread
	cmp	DWORD PTR [ebx+76], esi
	jne	SHORT $LN20@gzread
; Line 379
	push	edi
	mov	edi, DWORD PTR _len$[ebp]
	cmp	edi, esi
	jge	SHORT $LN35@gzread
; Line 380
	push	OFFSET $SG5928
	push	-5					; fffffffbH
	push	ebx
	call	_gz_error
	add	esp, 12					; 0000000cH
$LN31@gzread:
; Line 381
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
; Line 446
	mov	esp, ebp
	pop	ebp
	ret	0
$LN35@gzread:
; Line 385
	jne	SHORT $LN18@gzread
; Line 386
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 446
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@gzread:
; Line 389
	cmp	DWORD PTR [ebx+72], esi
	je	SHORT $LN32@gzread
; Line 391
	mov	eax, DWORD PTR [ebx+68]
	push	eax
	mov	eax, ebx
	mov	DWORD PTR [ebx+72], esi
	call	_gz_skip
	add	esp, 4
	cmp	eax, -1
; Line 392
	je	SHORT $LN31@gzread
$LN32@gzread:
; Line 396
	mov	DWORD PTR _got$[ebp], esi
$LL15@gzread:
; Line 399
	mov	esi, DWORD PTR [ebx+36]
	test	esi, esi
	je	SHORT $LN12@gzread
; Line 400
	cmp	esi, edi
	jbe	SHORT $LN25@gzread
	mov	esi, edi
$LN25@gzread:
; Line 401
	mov	ecx, DWORD PTR [ebx+32]
	mov	edx, DWORD PTR _buf$[ebp]
	push	esi
	push	ecx
	push	edx
	mov	DWORD PTR _n$[ebp], esi
	call	_memcpy
; Line 402
	add	DWORD PTR [ebx+32], esi
; Line 403
	sub	DWORD PTR [ebx+36], esi
; Line 439
	add	DWORD PTR _buf$[ebp], esi
; Line 440
	add	DWORD PTR _got$[ebp], esi
	add	esp, 12					; 0000000cH
	sub	edi, esi
; Line 441
	add	DWORD PTR [ebx+12], esi
	jmp	$LN14@gzread
$LN12@gzread:
; Line 407
	cmp	DWORD PTR [ebx+40], 0
	je	SHORT $LN10@gzread
	cmp	DWORD PTR [ebx+88], 0
	je	$LN13@gzread
$LN10@gzread:
; Line 412
	mov	eax, DWORD PTR [ebx+52]
	test	eax, eax
	je	SHORT $LN7@gzread
	mov	ecx, DWORD PTR [ebx+16]
	add	ecx, ecx
	cmp	edi, ecx
	jb	SHORT $LN7@gzread
; Line 422
	cmp	eax, 1
	jne	SHORT $LN4@gzread
; Line 423
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	lea	esi, DWORD PTR _n$[ebp]
	call	_gz_load
	add	esp, 4
	cmp	eax, -1
	je	$LN31@gzread
; Line 428
	mov	esi, DWORD PTR _n$[ebp]
; Line 439
	add	DWORD PTR _buf$[ebp], esi
; Line 440
	add	DWORD PTR _got$[ebp], esi
	sub	edi, esi
; Line 441
	add	DWORD PTR [ebx+12], esi
	jmp	SHORT $LN14@gzread
$LN4@gzread:
; Line 430
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ebx+96], eax
; Line 431
	mov	eax, ebx
	mov	DWORD PTR [ebx+100], edi
	call	_gz_decomp
	cmp	eax, -1
	je	$LN31@gzread
; Line 433
	mov	esi, DWORD PTR [ebx+36]
; Line 439
	add	DWORD PTR _buf$[ebp], esi
; Line 440
	add	DWORD PTR _got$[ebp], esi
	sub	edi, esi
; Line 441
	add	DWORD PTR [ebx+12], esi
	mov	DWORD PTR _n$[ebp], esi
	mov	DWORD PTR [ebx+36], 0
	jmp	SHORT $LN14@gzread
$LN7@gzread:
; Line 414
	mov	eax, ebx
	call	_gz_make
	cmp	eax, -1
	je	$LN31@gzread
$LN14@gzread:
; Line 442
	test	edi, edi
	jne	$LL15@gzread
$LN13@gzread:
; Line 445
	mov	eax, DWORD PTR _got$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 446
	mov	esp, ebp
	pop	ebp
	ret	0
_gzread	ENDP
_TEXT	ENDS
PUBLIC	_gzgetc
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 11						; size = 1
_gzgetc	PROC
; Line 451
	push	ebp
	mov	ebp, esp
; Line 457
	mov	eax, DWORD PTR _file$[ebp]
	test	eax, eax
; Line 458
	je	SHORT $LN2@gzgetc
; Line 462
	cmp	DWORD PTR [eax], 7247			; 00001c4fH
	jne	SHORT $LN2@gzgetc
	cmp	DWORD PTR [eax+76], 0
	jne	SHORT $LN2@gzgetc
; Line 466
	mov	ecx, DWORD PTR [eax+36]
	test	ecx, ecx
	je	SHORT $LN1@gzgetc
; Line 468
	inc	DWORD PTR [eax+12]
	dec	ecx
	mov	DWORD PTR [eax+36], ecx
; Line 469
	mov	ecx, DWORD PTR [eax+32]
	mov	dl, BYTE PTR [ecx]
	inc	ecx
	mov	DWORD PTR [eax+32], ecx
	movzx	eax, dl
; Line 475
	pop	ebp
	ret	0
$LN1@gzgetc:
; Line 473
	push	1
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	push	eax
	call	_gzread
	add	esp, 12					; 0000000cH
; Line 474
	cmp	eax, 1
	jl	SHORT $LN2@gzgetc
	movzx	eax, BYTE PTR _buf$[ebp]
; Line 475
	pop	ebp
	ret	0
$LN2@gzgetc:
; Line 463
	or	eax, -1
; Line 475
	pop	ebp
	ret	0
_gzgetc	ENDP
_TEXT	ENDS
PUBLIC	_gzungetc
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_c$ = 8							; size = 4
_file$ = 12						; size = 4
_gzungetc PROC
; Line 481
	push	ebp
	mov	ebp, esp
	push	esi
; Line 485
	mov	esi, DWORD PTR _file$[ebp]
	test	esi, esi
	jne	SHORT $LN11@gzungetc
$LN9@gzungetc:
; Line 486
	or	eax, -1
	pop	esi
; Line 532
	pop	ebp
	ret	0
$LN11@gzungetc:
; Line 490
	cmp	DWORD PTR [esi], 7247			; 00001c4fH
	jne	SHORT $LN9@gzungetc
	cmp	DWORD PTR [esi+76], 0
	jne	SHORT $LN9@gzungetc
; Line 494
	push	ebx
	or	ebx, -1
	cmp	DWORD PTR [esi+72], 0
	je	SHORT $LN7@gzungetc
; Line 496
	mov	eax, DWORD PTR [esi+68]
	push	eax
	mov	eax, esi
	mov	DWORD PTR [esi+72], 0
	call	_gz_skip
	add	esp, 4
	cmp	eax, ebx
; Line 497
	je	SHORT $LN19@gzungetc
$LN7@gzungetc:
; Line 501
	mov	eax, DWORD PTR _c$[ebp]
	test	eax, eax
	jns	SHORT $LN6@gzungetc
$LN19@gzungetc:
; Line 502
	mov	eax, ebx
	pop	ebx
	pop	esi
; Line 532
	pop	ebp
	ret	0
$LN6@gzungetc:
; Line 505
	mov	ecx, DWORD PTR [esi+36]
	test	ecx, ecx
	jne	SHORT $LN5@gzungetc
; Line 507
	mov	ecx, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [esi+28]
	lea	ecx, DWORD PTR [edx+ecx*2-1]
	mov	DWORD PTR [esi+36], 1
	mov	DWORD PTR [esi+32], ecx
; Line 508
	mov	BYTE PTR [ecx], al
; Line 509
	add	DWORD PTR [esi+12], ebx
	pop	ebx
	pop	esi
; Line 532
	pop	ebp
	ret	0
$LN5@gzungetc:
; Line 514
	mov	edx, DWORD PTR [esi+16]
	push	edi
	lea	edi, DWORD PTR [edx+edx]
	cmp	ecx, edi
	jne	SHORT $LN4@gzungetc
; Line 515
	push	OFFSET $SG5976
	push	-5					; fffffffbH
	push	esi
	call	_gz_error
	add	esp, 12					; 0000000cH
	pop	edi
; Line 516
	mov	eax, ebx
	pop	ebx
	pop	esi
; Line 532
	pop	ebp
	ret	0
$LN4@gzungetc:
; Line 520
	mov	edi, DWORD PTR [esi+28]
	cmp	DWORD PTR [esi+32], edi
	jne	SHORT $LN3@gzungetc
; Line 521
	add	ecx, edi
; Line 522
	lea	edx, DWORD PTR [edi+edx*2]
; Line 523
	cmp	ecx, edi
	jbe	SHORT $LN1@gzungetc
$LL2@gzungetc:
; Line 524
	mov	bl, BYTE PTR [ecx-1]
	dec	ecx
	dec	edx
	mov	BYTE PTR [edx], bl
	cmp	ecx, DWORD PTR [esi+28]
	ja	SHORT $LL2@gzungetc
; Line 523
	or	ebx, -1
$LN1@gzungetc:
; Line 525
	mov	DWORD PTR [esi+32], edx
$LN3@gzungetc:
; Line 528
	add	DWORD PTR [esi+32], ebx
	inc	DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [esi+32]
	pop	edi
; Line 529
	mov	BYTE PTR [ecx], al
; Line 530
	add	DWORD PTR [esi+12], ebx
	pop	ebx
	pop	esi
; Line 532
	pop	ebp
	ret	0
_gzungetc ENDP
_TEXT	ENDS
PUBLIC	_gzgets
EXTRN	__imp__memchr:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_str$ = -4						; size = 4
_left$ = 8						; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_gzgets	PROC
; Line 539
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 546
	mov	edi, DWORD PTR _file$[ebp]
	test	edi, edi
	je	$LN15@gzgets
	mov	esi, DWORD PTR _buf$[ebp]
	test	esi, esi
	je	$LN15@gzgets
	mov	ebx, DWORD PTR _len$[ebp]
	cmp	ebx, 1
	jl	$LN15@gzgets
; Line 551
	cmp	DWORD PTR [edi], 7247			; 00001c4fH
	jne	$LN15@gzgets
	cmp	DWORD PTR [edi+76], 0
	jne	$LN15@gzgets
; Line 555
	cmp	DWORD PTR [edi+72], 0
	je	SHORT $LN24@gzgets
; Line 557
	mov	eax, DWORD PTR [edi+68]
	push	eax
	mov	eax, edi
	mov	DWORD PTR [edi+72], 0
	call	_gz_skip
	add	esp, 4
	cmp	eax, -1
; Line 558
	je	$LN15@gzgets
$LN24@gzgets:
; Line 565
	dec	ebx
	mov	DWORD PTR _str$[ebp], esi
	mov	DWORD PTR _left$[ebp], ebx
; Line 566
	je	SHORT $LN7@gzgets
	npad	4
$LL9@gzgets:
; Line 568
	mov	esi, DWORD PTR [edi+36]
	test	esi, esi
	jne	SHORT $LN4@gzgets
; Line 569
	mov	eax, edi
	call	_gz_make
	cmp	eax, -1
	je	SHORT $LN15@gzgets
; Line 571
	mov	esi, DWORD PTR [edi+36]
	test	esi, esi
	je	SHORT $LN23@gzgets
$LN4@gzgets:
; Line 579
	cmp	esi, ebx
	jbe	SHORT $LN19@gzgets
	mov	esi, ebx
$LN19@gzgets:
; Line 580
	mov	ecx, DWORD PTR [edi+32]
	push	esi
	push	10					; 0000000aH
	push	ecx
	call	DWORD PTR __imp__memchr
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 581
	test	ebx, ebx
	je	SHORT $LN2@gzgets
; Line 582
	mov	esi, ebx
	sub	esi, DWORD PTR [edi+32]
	inc	esi
$LN2@gzgets:
; Line 585
	mov	edx, DWORD PTR [edi+32]
	mov	eax, DWORD PTR _buf$[ebp]
	push	esi
	push	edx
	push	eax
	call	_memcpy
; Line 589
	mov	eax, DWORD PTR _left$[ebp]
	sub	DWORD PTR [edi+36], esi
	add	DWORD PTR [edi+32], esi
	add	DWORD PTR [edi+12], esi
; Line 590
	add	DWORD PTR _buf$[ebp], esi
	sub	eax, esi
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _left$[ebp], eax
; Line 591
	test	eax, eax
	je	SHORT $LN7@gzgets
	test	ebx, ebx
	jne	SHORT $LN7@gzgets
	mov	ebx, eax
	jmp	SHORT $LL9@gzgets
$LN23@gzgets:
; Line 572
	mov	ecx, DWORD PTR _str$[ebp]
	cmp	DWORD PTR _buf$[ebp], ecx
; Line 573
	je	SHORT $LN15@gzgets
$LN7@gzgets:
; Line 594
	mov	edx, DWORD PTR _buf$[ebp]
; Line 595
	mov	eax, DWORD PTR _str$[ebp]
	pop	edi
	pop	esi
	mov	BYTE PTR [edx], 0
	pop	ebx
; Line 596
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@gzgets:
	pop	edi
	pop	esi
; Line 547
	xor	eax, eax
	pop	ebx
; Line 596
	mov	esp, ebp
	pop	ebp
	ret	0
_gzgets	ENDP
_TEXT	ENDS
PUBLIC	_gzdirect
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzdirect PROC
; Line 601
	push	ebp
	mov	ebp, esp
	push	esi
; Line 605
	mov	esi, DWORD PTR _file$[ebp]
	test	esi, esi
	jne	SHORT $LN3@gzdirect
$LN6@gzdirect:
; Line 606
	xor	eax, eax
	pop	esi
; Line 620
	pop	ebp
	ret	0
$LN3@gzdirect:
; Line 610
	cmp	DWORD PTR [esi], 7247			; 00001c4fH
; Line 611
	jne	SHORT $LN6@gzdirect
; Line 615
	cmp	DWORD PTR [esi+52], 0
	jne	SHORT $LN1@gzdirect
	cmp	DWORD PTR [esi+36], 0
	jne	SHORT $LN1@gzdirect
; Line 616
	mov	eax, esi
	call	_gz_head
$LN1@gzdirect:
; Line 619
	mov	eax, DWORD PTR [esi+56]
	pop	esi
; Line 620
	pop	ebp
	ret	0
_gzdirect ENDP
_TEXT	ENDS
PUBLIC	_gzclose_r
EXTRN	__imp___close:PROC
EXTRN	_inflateEnd:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclose_r PROC
; Line 625
	push	ebp
	mov	ebp, esp
	push	esi
; Line 630
	mov	esi, DWORD PTR _file$[ebp]
	test	esi, esi
	jne	SHORT $LN3@gzclose_r
$LN6@gzclose_r:
; Line 631
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 649
	pop	ebp
	ret	0
$LN3@gzclose_r:
; Line 635
	cmp	DWORD PTR [esi], 7247			; 00001c4fH
; Line 636
	jne	SHORT $LN6@gzclose_r
; Line 639
	cmp	DWORD PTR [esi+16], 0
	push	ebx
	push	edi
	mov	edi, DWORD PTR __imp__free
	je	SHORT $LN1@gzclose_r
; Line 640
	lea	eax, DWORD PTR [esi+84]
	push	eax
	call	_inflateEnd
; Line 641
	mov	ecx, DWORD PTR [esi+28]
	push	ecx
	call	edi
; Line 642
	mov	edx, DWORD PTR [esi+24]
	push	edx
	call	edi
	add	esp, 12					; 0000000cH
$LN1@gzclose_r:
; Line 644
	push	0
	push	0
	push	esi
	call	_gz_error
; Line 645
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	edi
; Line 646
	mov	ecx, DWORD PTR [esi+4]
	push	ecx
	call	DWORD PTR __imp___close
; Line 647
	push	esi
	mov	ebx, eax
	call	edi
	add	esp, 24					; 00000018H
; Line 648
	neg	ebx
	pop	edi
	sbb	eax, eax
	pop	ebx
	pop	esi
; Line 649
	pop	ebp
	ret	0
_gzclose_r ENDP
_TEXT	ENDS
END
