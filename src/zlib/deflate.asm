; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\programovani\WoW Editor\Test\src\zlib\deflate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_deflate_copyright
CONST	SEGMENT
_deflate_copyright DB ' deflate 1.2.5 Copyright 1995-2010 Jean-loup Gaill'
	DB	'y and Mark Adler ', 00H
	ORG $+4
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
?my_version@?1??deflateInit2_@@9@9 DB '1.2.5', 00H	; `deflateInit2_'::`2'::my_version
CONST	ENDS
PUBLIC	_deflateSetDictionary
EXTRN	_adler32:PROC
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
$T4550 = 8						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary PROC
; File c:\programovani\wow editor\test\src\zlib\deflate.c
; Line 315
	push	ebp
	mov	ebp, esp
; Line 323
	mov	edx, DWORD PTR _strm$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _dictLength$[ebp]
	push	esi
	push	edi
	mov	edi, ebx
	test	edx, edx
	je	$LN8@deflateSet
	mov	esi, DWORD PTR [edx+28]
	test	esi, esi
	je	$LN8@deflateSet
	mov	eax, DWORD PTR _dictionary$[ebp]
	test	eax, eax
	je	$LN8@deflateSet
	mov	ecx, DWORD PTR [esi+24]
	cmp	ecx, 2
	je	$LN8@deflateSet
	cmp	ecx, 1
	jne	SHORT $LN9@deflateSet
	cmp	DWORD PTR [esi+4], 42			; 0000002aH
	jne	$LN8@deflateSet
$LN9@deflateSet:
; Line 327
	test	ecx, ecx
	je	SHORT $LN7@deflateSet
; Line 328
	push	ebx
	push	eax
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_adler32
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
	mov	eax, DWORD PTR _dictionary$[ebp]
	add	esp, 12					; 0000000cH
$LN7@deflateSet:
; Line 330
	cmp	ebx, 3
	jb	$LN14@deflateSet
; Line 331
	mov	ecx, DWORD PTR [esi+44]
	cmp	ebx, ecx
	jbe	SHORT $LN5@deflateSet
; Line 332
	mov	edi, ecx
; Line 333
	sub	ebx, edi
	add	eax, ebx
$LN5@deflateSet:
; Line 335
	mov	edx, DWORD PTR [esi+56]
	push	edi
	push	eax
	push	edx
	call	_memcpy
; Line 343
	mov	edx, DWORD PTR [esi+56]
; Line 344
	mov	ecx, DWORD PTR [esi+88]
	mov	DWORD PTR [esi+108], edi
	mov	DWORD PTR [esi+92], edi
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR [esi+72], eax
	shl	eax, cl
	movzx	ecx, BYTE PTR [edx+1]
	xor	eax, ecx
	and	eax, DWORD PTR [esi+84]
	add	esp, 12					; 0000000cH
; Line 345
	xor	edx, edx
	add	edi, -3					; fffffffdH
	mov	DWORD PTR [esi+72], eax
	mov	DWORD PTR $T4550[ebp], edi
	npad	2
$LL4@deflateSet:
; Line 346
	mov	edi, DWORD PTR [esi+72]
	mov	ecx, DWORD PTR [esi+88]
	mov	eax, DWORD PTR [esi+56]
	movzx	eax, BYTE PTR [eax+edx+2]
	mov	ebx, DWORD PTR [esi+64]
	shl	edi, cl
	mov	ecx, DWORD PTR [esi+68]
	xor	eax, edi
	and	eax, DWORD PTR [esi+84]
	mov	edi, DWORD PTR [esi+52]
	mov	DWORD PTR [esi+72], eax
	mov	ax, WORD PTR [ecx+eax*2]
	and	edi, edx
	mov	WORD PTR [ebx+edi*2], ax
	mov	ecx, DWORD PTR [esi+72]
	mov	eax, DWORD PTR [esi+68]
	mov	WORD PTR [eax+ecx*2], dx
	inc	edx
	cmp	edx, DWORD PTR $T4550[ebp]
	jbe	SHORT $LL4@deflateSet
$LN14@deflateSet:
	pop	edi
	pop	esi
; Line 349
	xor	eax, eax
	pop	ebx
; Line 350
	pop	ebp
	ret	0
$LN8@deflateSet:
	pop	edi
	pop	esi
; Line 324
	mov	eax, -2					; fffffffeH
	pop	ebx
; Line 350
	pop	ebp
	ret	0
_deflateSetDictionary ENDP
_TEXT	ENDS
PUBLIC	_deflateSetHeader
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader PROC
; Line 392
	push	ebp
	mov	ebp, esp
; Line 393
	mov	eax, DWORD PTR _strm$[ebp]
	test	eax, eax
	je	SHORT $LN2@deflateSet@2
	mov	eax, DWORD PTR [eax+28]
	test	eax, eax
	je	SHORT $LN2@deflateSet@2
; Line 394
	cmp	DWORD PTR [eax+24], 2
	jne	SHORT $LN2@deflateSet@2
; Line 395
	mov	ecx, DWORD PTR _head$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 396
	xor	eax, eax
; Line 397
	pop	ebp
	ret	0
$LN2@deflateSet@2:
; Line 393
	mov	eax, -2					; fffffffeH
; Line 397
	pop	ebp
	ret	0
_deflateSetHeader ENDP
_TEXT	ENDS
PUBLIC	_deflatePrime
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime PROC
; Line 404
	push	ebp
	mov	ebp, esp
; Line 405
	mov	eax, DWORD PTR _strm$[ebp]
	test	eax, eax
	je	SHORT $LN1@deflatePri
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@deflatePri
; Line 406
	mov	edx, DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _bits$[ebp]
	mov	DWORD PTR [edx+5820], ecx
; Line 407
	mov	eax, DWORD PTR [eax+28]
	mov	edx, 1
	shl	dx, cl
	dec	dx
	and	dx, WORD PTR _value$[ebp]
	mov	WORD PTR [eax+5816], dx
; Line 408
	xor	eax, eax
; Line 409
	pop	ebp
	ret	0
$LN1@deflatePri:
; Line 405
	mov	eax, -2					; fffffffeH
; Line 409
	pop	ebp
	ret	0
_deflatePrime ENDP
_TEXT	ENDS
PUBLIC	_deflateTune
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune PROC
; Line 457
	push	ebp
	mov	ebp, esp
; Line 460
	mov	eax, DWORD PTR _strm$[ebp]
	test	eax, eax
	je	SHORT $LN1@deflateTun
	mov	eax, DWORD PTR [eax+28]
	test	eax, eax
	je	SHORT $LN1@deflateTun
; Line 462
	mov	ecx, DWORD PTR _good_length$[ebp]
; Line 463
	mov	edx, DWORD PTR _max_lazy$[ebp]
	mov	DWORD PTR [eax+140], ecx
; Line 464
	mov	ecx, DWORD PTR _nice_length$[ebp]
	mov	DWORD PTR [eax+128], edx
; Line 465
	mov	edx, DWORD PTR _max_chain$[ebp]
	mov	DWORD PTR [eax+144], ecx
	mov	DWORD PTR [eax+124], edx
; Line 466
	xor	eax, eax
; Line 467
	pop	ebp
	ret	0
$LN1@deflateTun:
; Line 460
	mov	eax, -2					; fffffffeH
; Line 467
	pop	ebp
	ret	0
_deflateTune ENDP
_TEXT	ENDS
PUBLIC	_deflateBound
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_complen$ = 12						; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound PROC
; Line 489
	push	ebp
	mov	ebp, esp
; Line 496
	mov	edx, DWORD PTR _sourceLen$[ebp]
	lea	eax, DWORD PTR [edx+63]
	shr	eax, 6
	lea	ecx, DWORD PTR [edx+7]
	add	eax, edx
	shr	ecx, 3
	lea	ecx, DWORD PTR [ecx+eax+5]
; Line 499
	mov	eax, DWORD PTR _strm$[ebp]
	push	edi
	mov	DWORD PTR _complen$[ebp], ecx
	test	eax, eax
	je	$LN20@deflateBou
	mov	edi, DWORD PTR [eax+28]
	test	edi, edi
	je	$LN20@deflateBou
; Line 504
	mov	eax, DWORD PTR [edi+24]
	sub	eax, 0
	push	esi
	je	SHORT $LN17@deflateBou
	dec	eax
	je	SHORT $LN16@deflateBou
	dec	eax
	je	SHORT $LN15@deflateBou
; Line 531
	mov	eax, 6
	jmp	SHORT $LN28@deflateBou
$LN15@deflateBou:
; Line 513
	mov	esi, DWORD PTR [edi+28]
	mov	eax, 18					; 00000012H
	test	esi, esi
	je	SHORT $LN28@deflateBou
; Line 514
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN13@deflateBou
; Line 515
	mov	eax, DWORD PTR [esi+20]
	add	eax, 20					; 00000014H
$LN13@deflateBou:
; Line 516
	mov	ecx, DWORD PTR [esi+28]
	push	ebx
; Line 517
	test	ecx, ecx
	je	SHORT $LN9@deflateBou
$LL11@deflateBou:
; Line 520
	mov	bl, BYTE PTR [ecx]
	inc	eax
	inc	ecx
	test	bl, bl
	jne	SHORT $LL11@deflateBou
$LN9@deflateBou:
; Line 521
	mov	ecx, DWORD PTR [esi+36]
; Line 522
	test	ecx, ecx
	je	SHORT $LN5@deflateBou
$LL7@deflateBou:
; Line 525
	mov	bl, BYTE PTR [ecx]
	inc	eax
	inc	ecx
	test	bl, bl
	jne	SHORT $LL7@deflateBou
$LN5@deflateBou:
; Line 526
	cmp	DWORD PTR [esi+44], 0
	pop	ebx
	je	SHORT $LN28@deflateBou
; Line 527
	add	eax, 2
; Line 529
	jmp	SHORT $LN28@deflateBou
$LN16@deflateBou:
; Line 509
	mov	eax, DWORD PTR [edi+108]
	neg	eax
	sbb	eax, eax
	and	eax, 4
	add	eax, 6
; Line 510
	jmp	SHORT $LN28@deflateBou
$LN17@deflateBou:
; Line 506
	xor	eax, eax
$LN28@deflateBou:
; Line 535
	mov	ecx, 15					; 0000000fH
	cmp	DWORD PTR [edi+48], ecx
	jne	SHORT $LN1@deflateBou
	cmp	DWORD PTR [edi+80], ecx
	jne	SHORT $LN1@deflateBou
; Line 540
	mov	esi, edx
	shr	esi, 14					; 0000000eH
	add	esi, eax
	mov	ecx, edx
	shr	ecx, 25					; 00000019H
	mov	eax, edx
	shr	eax, 12					; 0000000cH
	add	esi, ecx
	add	eax, esi
	pop	esi
	lea	eax, DWORD PTR [eax+edx+7]
	pop	edi
; Line 541
	pop	ebp
	ret	0
$LN1@deflateBou:
; Line 536
	add	eax, DWORD PTR _complen$[ebp]
	pop	esi
	pop	edi
; Line 541
	pop	ebp
	ret	0
$LN20@deflateBou:
; Line 500
	lea	eax, DWORD PTR [ecx+6]
	pop	edi
; Line 541
	pop	ebp
	ret	0
_deflateBound ENDP
; Function compile flags: /Ogtp
_putShortMSB PROC
; _s$ = eax
; _b$ = ecx
; Line 551
	push	esi
; Line 552
	mov	esi, DWORD PTR [eax+8]
	push	edi
	mov	edi, DWORD PTR [eax+20]
	mov	edx, ecx
	shr	edx, 8
	mov	BYTE PTR [esi+edi], dl
; Line 553
	mov	edi, DWORD PTR [eax+8]
	mov	esi, 1
	add	DWORD PTR [eax+20], esi
	mov	edx, DWORD PTR [eax+20]
	mov	BYTE PTR [edx+edi], cl
	add	DWORD PTR [eax+20], esi
	pop	edi
	pop	esi
; Line 554
	ret	0
_putShortMSB ENDP
; Function compile flags: /Ogtp
_flush_pending PROC
; _strm$ = eax
; Line 564
	push	esi
	mov	esi, eax
; Line 565
	mov	eax, DWORD PTR [esi+28]
; Line 567
	mov	ecx, DWORD PTR [esi+16]
	push	edi
	mov	edi, DWORD PTR [eax+20]
	cmp	edi, ecx
	jbe	SHORT $LN3@flush_pend
	mov	edi, ecx
$LN3@flush_pend:
; Line 568
	test	edi, edi
	je	SHORT $LN1@flush_pend
; Line 570
	mov	eax, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR [esi+12]
	push	edi
	push	eax
	push	ecx
	call	_memcpy
; Line 572
	mov	eax, DWORD PTR [esi+28]
	add	DWORD PTR [esi+12], edi
	add	DWORD PTR [eax+16], edi
; Line 573
	add	DWORD PTR [esi+20], edi
; Line 574
	sub	DWORD PTR [esi+16], edi
; Line 575
	mov	eax, DWORD PTR [esi+28]
	sub	DWORD PTR [eax+20], edi
; Line 576
	mov	esi, DWORD PTR [esi+28]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [esi+20], 0
	jne	SHORT $LN1@flush_pend
; Line 577
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+16], edx
$LN1@flush_pend:
; Line 579
	pop	edi
	pop	esi
	ret	0
_flush_pending ENDP
_TEXT	ENDS
PUBLIC	_deflateEnd
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateEnd PROC
; Line 897
	push	ebp
	mov	ebp, esp
	push	esi
; Line 900
	mov	esi, DWORD PTR _strm$[ebp]
	test	esi, esi
	je	$LN6@deflateEnd
	mov	eax, DWORD PTR [esi+28]
	test	eax, eax
	je	$LN6@deflateEnd
; Line 902
	push	edi
	mov	edi, DWORD PTR [eax+4]
; Line 909
	cmp	edi, 42					; 0000002aH
	je	SHORT $LN5@deflateEnd
	cmp	edi, 69					; 00000045H
	je	SHORT $LN5@deflateEnd
	cmp	edi, 73					; 00000049H
	je	SHORT $LN5@deflateEnd
	cmp	edi, 91					; 0000005bH
	je	SHORT $LN5@deflateEnd
	cmp	edi, 103				; 00000067H
	je	SHORT $LN5@deflateEnd
	cmp	edi, 113				; 00000071H
	je	SHORT $LN5@deflateEnd
	cmp	edi, 666				; 0000029aH
	je	SHORT $LN5@deflateEnd
; Line 910
	pop	edi
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 923
	pop	ebp
	ret	0
$LN5@deflateEnd:
; Line 914
	mov	eax, DWORD PTR [eax+8]
	test	eax, eax
	je	SHORT $LN4@deflateEnd
	mov	ecx, DWORD PTR [esi+36]
	push	eax
	mov	eax, DWORD PTR [esi+40]
	push	eax
	call	ecx
	add	esp, 8
$LN4@deflateEnd:
; Line 915
	mov	edx, DWORD PTR [esi+28]
	mov	eax, DWORD PTR [edx+68]
	test	eax, eax
	je	SHORT $LN3@deflateEnd
	mov	ecx, DWORD PTR [esi+36]
	push	eax
	mov	eax, DWORD PTR [esi+40]
	push	eax
	call	ecx
	add	esp, 8
$LN3@deflateEnd:
; Line 916
	mov	edx, DWORD PTR [esi+28]
	mov	eax, DWORD PTR [edx+64]
	test	eax, eax
	je	SHORT $LN2@deflateEnd
	mov	ecx, DWORD PTR [esi+36]
	push	eax
	mov	eax, DWORD PTR [esi+40]
	push	eax
	call	ecx
	add	esp, 8
$LN2@deflateEnd:
; Line 917
	mov	edx, DWORD PTR [esi+28]
	mov	eax, DWORD PTR [edx+56]
	test	eax, eax
	je	SHORT $LN1@deflateEnd
	mov	ecx, DWORD PTR [esi+36]
	push	eax
	mov	eax, DWORD PTR [esi+40]
	push	eax
	call	ecx
	add	esp, 8
$LN1@deflateEnd:
; Line 919
	mov	edx, DWORD PTR [esi+28]
	mov	eax, DWORD PTR [esi+40]
	mov	ecx, DWORD PTR [esi+36]
	push	edx
	push	eax
	call	ecx
	add	esp, 8
; Line 922
	xor	eax, eax
	cmp	edi, 113				; 00000071H
	setne	al
	pop	edi
	mov	DWORD PTR [esi+28], 0
	pop	esi
	dec	eax
	and	eax, -3					; fffffffdH
; Line 923
	pop	ebp
	ret	0
$LN6@deflateEnd:
; Line 900
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 923
	pop	ebp
	ret	0
_deflateEnd ENDP
_TEXT	ENDS
PUBLIC	_deflateCopy
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_dest$ = 8						; size = 4
tv260 = 12						; size = 4
_overlay$ = 12						; size = 4
_source$ = 12						; size = 4
_deflateCopy PROC
; Line 933
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 942
	mov	esi, DWORD PTR _source$[ebp]
	test	esi, esi
	je	$LN4@deflateCop
	mov	ebx, DWORD PTR _dest$[ebp]
	test	ebx, ebx
	je	$LN4@deflateCop
	mov	eax, DWORD PTR [esi+28]
	mov	DWORD PTR tv260[ebp], eax
	test	eax, eax
	je	$LN4@deflateCop
; Line 948
	push	edi
	mov	ecx, 14					; 0000000eH
	mov	edi, ebx
	rep movsd
; Line 950
	mov	eax, DWORD PTR [ebx+40]
	mov	ecx, DWORD PTR [ebx+32]
	push	5828					; 000016c4H
	push	1
	push	eax
	call	ecx
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 951
	test	esi, esi
	je	$LN9@deflateCop
; Line 953
	mov	edi, DWORD PTR tv260[ebp]
	push	5828					; 000016c4H
	push	edi
	push	esi
	mov	DWORD PTR [ebx+28], esi
	call	_memcpy
; Line 956
	mov	edx, DWORD PTR [esi+44]
	mov	DWORD PTR [esi], ebx
	mov	eax, DWORD PTR [ebx+40]
	mov	ecx, DWORD PTR [ebx+32]
	push	2
	push	edx
	push	eax
	call	ecx
; Line 957
	mov	edx, DWORD PTR [esi+44]
	mov	DWORD PTR [esi+56], eax
	mov	eax, DWORD PTR [ebx+40]
	mov	ecx, DWORD PTR [ebx+32]
	push	2
	push	edx
	push	eax
	call	ecx
; Line 958
	mov	edx, DWORD PTR [esi+76]
	mov	DWORD PTR [esi+64], eax
	mov	eax, DWORD PTR [ebx+40]
	mov	ecx, DWORD PTR [ebx+32]
	push	2
	push	edx
	push	eax
	call	ecx
; Line 959
	mov	edx, DWORD PTR [esi+5788]
	mov	DWORD PTR [esi+68], eax
	mov	eax, DWORD PTR [ebx+40]
	mov	ecx, DWORD PTR [ebx+32]
	push	4
	push	edx
	push	eax
	call	ecx
; Line 963
	mov	ecx, DWORD PTR [esi+56]
	add	esp, 60					; 0000003cH
	mov	DWORD PTR _overlay$[ebp], eax
	mov	DWORD PTR [esi+8], eax
	test	ecx, ecx
	je	$LN1@deflateCop
	cmp	DWORD PTR [esi+64], 0
	je	$LN1@deflateCop
	cmp	DWORD PTR [esi+68], 0
	je	$LN1@deflateCop
	test	eax, eax
	je	$LN1@deflateCop
; Line 968
	mov	edx, DWORD PTR [esi+44]
	mov	eax, DWORD PTR [edi+56]
	add	edx, edx
	push	edx
	push	eax
	push	ecx
	call	_memcpy
; Line 969
	mov	ecx, DWORD PTR [esi+44]
	mov	edx, DWORD PTR [edi+64]
	mov	eax, DWORD PTR [esi+64]
	add	ecx, ecx
	push	ecx
	push	edx
	push	eax
	call	_memcpy
; Line 970
	mov	ecx, DWORD PTR [esi+76]
	mov	edx, DWORD PTR [edi+68]
	mov	eax, DWORD PTR [esi+68]
	add	ecx, ecx
	push	ecx
	push	edx
	push	eax
	call	_memcpy
; Line 971
	mov	ecx, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [esi+8]
	push	ecx
	push	edx
	push	eax
	call	_memcpy
; Line 973
	mov	edx, DWORD PTR [edi+16]
	sub	edx, DWORD PTR [edi+8]
	mov	ecx, DWORD PTR [esi+8]
; Line 974
	mov	eax, DWORD PTR [esi+5788]
	mov	edi, DWORD PTR _overlay$[ebp]
	add	edx, ecx
	mov	DWORD PTR [esi+16], edx
	mov	edx, eax
; Line 975
	lea	ecx, DWORD PTR [ecx+eax*2]
	shr	edx, 1
	add	ecx, eax
	lea	edx, DWORD PTR [edi+edx*2]
	add	esp, 48					; 00000030H
	mov	DWORD PTR [esi+5796], edx
	mov	DWORD PTR [esi+5784], ecx
; Line 978
	lea	eax, DWORD PTR [esi+2440]
	lea	edx, DWORD PTR [esi+148]
; Line 979
	lea	ecx, DWORD PTR [esi+2684]
	pop	edi
	mov	DWORD PTR [esi+2852], eax
	mov	DWORD PTR [esi+2840], edx
	mov	DWORD PTR [esi+2864], ecx
	pop	esi
; Line 981
	xor	eax, eax
	pop	ebx
; Line 983
	pop	ebp
	ret	0
$LN1@deflateCop:
; Line 964
	push	ebx
	call	_deflateEnd
	add	esp, 4
$LN9@deflateCop:
; Line 965
	pop	edi
	pop	esi
	mov	eax, -4					; fffffffcH
	pop	ebx
; Line 983
	pop	ebp
	ret	0
$LN4@deflateCop:
	pop	esi
; Line 943
	mov	eax, -2					; fffffffeH
	pop	ebx
; Line 983
	pop	ebp
	ret	0
_deflateCopy ENDP
_TEXT	ENDS
EXTRN	_crc32:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_read_buf PROC
; _strm$ = esi
; _size$ = ecx
; Line 996
	push	ebp
	mov	ebp, esp
; Line 997
	mov	eax, DWORD PTR [esi+4]
	push	edi
	mov	edi, eax
; Line 999
	cmp	edi, ecx
	jbe	SHORT $LN5@read_buf
	mov	edi, ecx
$LN5@read_buf:
; Line 1000
	test	edi, edi
	jne	SHORT $LN4@read_buf
	xor	eax, eax
	pop	edi
; Line 1017
	pop	ebp
	ret	0
$LN4@read_buf:
; Line 1002
	sub	eax, edi
	mov	DWORD PTR [esi+4], eax
; Line 1004
	mov	eax, DWORD PTR [esi+28]
	mov	eax, DWORD PTR [eax+24]
	cmp	eax, 1
	jne	SHORT $LN3@read_buf
; Line 1005
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+48]
	push	edi
	push	ecx
	push	edx
	call	_adler32
	jmp	SHORT $LN8@read_buf
$LN3@read_buf:
; Line 1008
	cmp	eax, 2
	jne	SHORT $LN1@read_buf
; Line 1009
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+48]
	push	edi
	push	eax
	push	ecx
	call	_crc32
$LN8@read_buf:
	mov	DWORD PTR [esi+48], eax
	add	esp, 12					; 0000000cH
$LN1@read_buf:
; Line 1012
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR _buf$[ebp]
	push	edi
	push	edx
	push	eax
	call	_memcpy
; Line 1013
	add	DWORD PTR [esi], edi
	add	esp, 12					; 0000000cH
; Line 1014
	add	DWORD PTR [esi+8], edi
; Line 1016
	mov	eax, edi
	pop	edi
; Line 1017
	pop	ebp
	ret	0
_read_buf ENDP
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_lm_init PROC
; _s$ = esi
; Line 1025
	mov	eax, DWORD PTR [esi+44]
; Line 1027
	mov	ecx, DWORD PTR [esi+76]
	mov	edx, DWORD PTR [esi+68]
	add	eax, eax
	mov	DWORD PTR [esi+60], eax
	xor	eax, eax
	mov	WORD PTR [edx+ecx*2-2], ax
	mov	ecx, DWORD PTR [esi+76]
	mov	eax, DWORD PTR [esi+68]
	push	edi
	lea	edx, DWORD PTR [ecx+ecx-2]
	push	edx
	xor	edi, edi
	push	edi
	push	eax
	call	_memset
; Line 1031
	mov	eax, DWORD PTR [esi+132]
	lea	eax, DWORD PTR [eax+eax*2]
	add	eax, eax
	movzx	ecx, WORD PTR _configuration_table[eax+eax+2]
	add	eax, eax
	mov	DWORD PTR [esi+128], ecx
; Line 1032
	movzx	edx, WORD PTR _configuration_table[eax]
	mov	DWORD PTR [esi+140], edx
; Line 1033
	movzx	ecx, WORD PTR _configuration_table[eax+4]
	mov	DWORD PTR [esi+144], ecx
; Line 1034
	movzx	edx, WORD PTR _configuration_table[eax+6]
; Line 1039
	mov	eax, 2
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+108], edi
	mov	DWORD PTR [esi+92], edi
	mov	DWORD PTR [esi+116], edi
; Line 1040
	mov	DWORD PTR [esi+104], edi
; Line 1041
	mov	DWORD PTR [esi+72], edi
	mov	DWORD PTR [esi+124], edx
	mov	DWORD PTR [esi+120], eax
	mov	DWORD PTR [esi+96], eax
	pop	edi
; Line 1047
	ret	0
_lm_init ENDP
; Function compile flags: /Ogtp
tv299 = -20						; size = 4
_limit$ = -16						; size = 4
_nice_match$ = -12					; size = 4
_chain_length$ = -8					; size = 4
_scan_end$ = -2						; size = 1
_scan_end1$ = -1					; size = 1
_cur_match$ = 8						; size = 4
_longest_match PROC
; _s$ = edi
; Line 1066
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 1068
	mov	edx, DWORD PTR [edi+108]
	mov	eax, DWORD PTR [edi+124]
	mov	ecx, DWORD PTR [edi+56]
	push	ebx
	push	esi
; Line 1072
	mov	esi, DWORD PTR [edi+144]
	mov	DWORD PTR _nice_match$[ebp], esi
; Line 1074
	mov	esi, DWORD PTR [edi+44]
	lea	ebx, DWORD PTR [esi-262]
	add	ecx, edx
	mov	DWORD PTR _chain_length$[ebp], eax
	mov	eax, DWORD PTR [edi+120]
	cmp	edx, ebx
	jbe	SHORT $LN18@longest_ma
	sub	edx, esi
	add	edx, 262				; 00000106H
	mov	DWORD PTR _limit$[ebp], edx
	jmp	SHORT $LN19@longest_ma
$LN18@longest_ma:
	mov	DWORD PTR _limit$[ebp], 0
$LN19@longest_ma:
; Line 1090
	movzx	edx, BYTE PTR [eax+ecx-1]
	mov	BYTE PTR _scan_end1$[ebp], dl
; Line 1091
	movzx	edx, BYTE PTR [eax+ecx]
	lea	esi, DWORD PTR [ecx+258]
	mov	BYTE PTR _scan_end$[ebp], dl
; Line 1100
	cmp	eax, DWORD PTR [edi+140]
	jb	SHORT $LN15@longest_ma
; Line 1101
	shr	DWORD PTR _chain_length$[ebp], 2
$LN15@longest_ma:
; Line 1106
	mov	edx, DWORD PTR [edi+116]
	cmp	DWORD PTR _nice_match$[ebp], edx
	jbe	SHORT $LN25@longest_ma
	mov	DWORD PTR _nice_match$[ebp], edx
$LN25@longest_ma:
	mov	ebx, DWORD PTR _cur_match$[ebp]
$LL13@longest_ma:
; Line 1112
	mov	edx, DWORD PTR [edi+56]
	add	edx, ebx
; Line 1160
	mov	bl, BYTE PTR _scan_end$[ebp]
	cmp	BYTE PTR [edx+eax], bl
	jne	$LN12@longest_ma
	mov	bl, BYTE PTR _scan_end1$[ebp]
	cmp	BYTE PTR [edx+eax-1], bl
	jne	$LN12@longest_ma
	mov	bl, BYTE PTR [edx]
	cmp	bl, BYTE PTR [ecx]
	jne	$LN12@longest_ma
	mov	bl, BYTE PTR [edx+1]
	cmp	bl, BYTE PTR [ecx+1]
	jne	$LN12@longest_ma
; Line 1168
	add	ecx, 2
	add	edx, 2
	npad	4
$LL8@longest_ma:
; Line 1179
	mov	bl, BYTE PTR [ecx+1]
	inc	ecx
	cmp	bl, BYTE PTR [edx+1]
	jne	SHORT $LN5@longest_ma
	mov	bl, BYTE PTR [ecx+1]
	inc	ecx
	cmp	bl, BYTE PTR [edx+2]
	jne	SHORT $LN5@longest_ma
	mov	bl, BYTE PTR [ecx+1]
	inc	ecx
	cmp	bl, BYTE PTR [edx+3]
	jne	SHORT $LN5@longest_ma
	mov	bl, BYTE PTR [ecx+1]
	inc	ecx
	cmp	bl, BYTE PTR [edx+4]
	jne	SHORT $LN5@longest_ma
	mov	bl, BYTE PTR [ecx+1]
	inc	ecx
	cmp	bl, BYTE PTR [edx+5]
	jne	SHORT $LN5@longest_ma
	mov	bl, BYTE PTR [ecx+1]
	inc	ecx
	cmp	bl, BYTE PTR [edx+6]
	jne	SHORT $LN5@longest_ma
	mov	bl, BYTE PTR [ecx+1]
	inc	ecx
	cmp	bl, BYTE PTR [edx+7]
	jne	SHORT $LN5@longest_ma
	mov	bl, BYTE PTR [ecx+1]
	inc	ecx
	add	edx, 8
	cmp	bl, BYTE PTR [edx]
	jne	SHORT $LN5@longest_ma
	cmp	ecx, esi
	jb	SHORT $LL8@longest_ma
$LN5@longest_ma:
; Line 1183
	mov	edx, ecx
	sub	edx, esi
	add	edx, 258				; 00000102H
; Line 1184
	lea	ecx, DWORD PTR [esi-258]
; Line 1188
	cmp	edx, eax
	jle	SHORT $LN12@longest_ma
; Line 1189
	mov	eax, DWORD PTR _cur_match$[ebp]
	mov	DWORD PTR [edi+112], eax
; Line 1190
	mov	eax, edx
; Line 1191
	cmp	edx, DWORD PTR _nice_match$[ebp]
	jge	SHORT $LN11@longest_ma
; Line 1195
	mov	bl, BYTE PTR [edx+ecx-1]
; Line 1196
	mov	dl, BYTE PTR [edx+ecx]
	mov	BYTE PTR _scan_end1$[ebp], bl
	mov	BYTE PTR _scan_end$[ebp], dl
$LN12@longest_ma:
; Line 1200
	mov	ebx, DWORD PTR [edi+52]
	and	ebx, DWORD PTR _cur_match$[ebp]
	mov	edx, DWORD PTR [edi+64]
	movzx	ebx, WORD PTR [edx+ebx*2]
	mov	DWORD PTR _cur_match$[ebp], ebx
	cmp	ebx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN11@longest_ma
	dec	DWORD PTR _chain_length$[ebp]
	jne	$LL13@longest_ma
$LN11@longest_ma:
; Line 1202
	mov	ecx, DWORD PTR [edi+116]
	pop	esi
	pop	ebx
	cmp	eax, ecx
	jbe	SHORT $LN16@longest_ma
; Line 1203
	mov	eax, ecx
$LN16@longest_ma:
; Line 1204
	mov	esp, ebp
	pop	ebp
	ret	0
_longest_match ENDP
; Function compile flags: /Ogtp
_wsize$ = -12						; size = 4
$T4601 = -8						; size = 4
_more$ = -4						; size = 4
_fill_window PROC
; _s$ = esi
; Line 1307
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	edi
; Line 1311
	mov	edi, DWORD PTR [esi+44]
	mov	DWORD PTR _wsize$[ebp], edi
	jmp	SHORT $LN23@fill_windo
$LL41@fill_windo:
	mov	edi, DWORD PTR _wsize$[ebp]
$LN23@fill_windo:
; Line 1314
	mov	ebx, DWORD PTR [esi+60]
	sub	ebx, DWORD PTR [esi+116]
	mov	eax, DWORD PTR [esi+108]
; Line 1332
	mov	ecx, DWORD PTR [esi+44]
	sub	ebx, eax
	lea	edx, DWORD PTR [edi+ecx-262]
	mov	DWORD PTR _more$[ebp], ebx
	cmp	eax, edx
	jb	SHORT $LN42@fill_windo
; Line 1334
	mov	eax, DWORD PTR [esi+56]
	push	edi
	lea	ecx, DWORD PTR [eax+edi]
	push	ecx
	push	eax
	call	_memcpy
; Line 1345
	mov	edx, DWORD PTR [esi+76]
; Line 1346
	mov	eax, DWORD PTR [esi+68]
	sub	DWORD PTR [esi+112], edi
	sub	DWORD PTR [esi+108], edi
	add	esp, 12					; 0000000cH
	sub	DWORD PTR [esi+92], edi
	lea	ecx, DWORD PTR [eax+edx*2]
$LL15@fill_windo:
; Line 1348
	movzx	eax, WORD PTR [ecx-2]
	sub	ecx, 2
; Line 1349
	cmp	eax, edi
	jb	SHORT $LN26@fill_windo
	sub	eax, edi
	jmp	SHORT $LN27@fill_windo
$LN26@fill_windo:
	xor	eax, eax
$LN27@fill_windo:
; Line 1350
	dec	edx
	mov	WORD PTR [ecx], ax
	jne	SHORT $LL15@fill_windo
; Line 1354
	mov	ecx, DWORD PTR [esi+64]
	mov	edx, edi
	lea	ecx, DWORD PTR [ecx+edi*2]
$LL12@fill_windo:
; Line 1356
	movzx	eax, WORD PTR [ecx-2]
	sub	ecx, 2
; Line 1357
	cmp	eax, edi
	jb	SHORT $LN28@fill_windo
	sub	eax, edi
	jmp	SHORT $LN29@fill_windo
$LN28@fill_windo:
	xor	eax, eax
$LN29@fill_windo:
; Line 1361
	dec	edx
	mov	WORD PTR [ecx], ax
	jne	SHORT $LL12@fill_windo
; Line 1363
	add	ebx, edi
	mov	DWORD PTR _more$[ebp], ebx
$LN42@fill_windo:
; Line 1365
	mov	edi, DWORD PTR [esi]
	cmp	DWORD PTR [edi+4], 0
	je	$LN2@fill_windo
; Line 1380
	mov	eax, DWORD PTR [esi+116]
	add	eax, DWORD PTR [esi+108]
	mov	ecx, DWORD PTR [edi+4]
	add	eax, DWORD PTR [esi+56]
	mov	edx, DWORD PTR _more$[ebp]
	mov	ebx, ecx
	mov	DWORD PTR $T4601[ebp], eax
	cmp	ebx, edx
	jbe	SHORT $LN34@fill_windo
	mov	ebx, edx
$LN34@fill_windo:
	test	ebx, ebx
	je	SHORT $LN35@fill_windo
$LN33@fill_windo:
	mov	edx, DWORD PTR [edi+28]
	sub	ecx, ebx
	mov	DWORD PTR [edi+4], ecx
	mov	ecx, DWORD PTR [edx+24]
	cmp	ecx, 1
	jne	SHORT $LN32@fill_windo
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+48]
	push	ebx
	push	eax
	push	ecx
	call	_adler32
	jmp	SHORT $LN43@fill_windo
$LN32@fill_windo:
	cmp	ecx, 2
	jne	SHORT $LN30@fill_windo
	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edi+48]
	push	ebx
	push	edx
	push	eax
	call	_crc32
$LN43@fill_windo:
	mov	DWORD PTR [edi+48], eax
	mov	eax, DWORD PTR $T4601[ebp]
	add	esp, 12					; 0000000cH
$LN30@fill_windo:
	mov	ecx, DWORD PTR [edi]
	push	ebx
	push	ecx
	push	eax
	call	_memcpy
	add	DWORD PTR [edi], ebx
	add	esp, 12					; 0000000cH
	add	DWORD PTR [edi+8], ebx
$LN35@fill_windo:
; Line 1381
	add	DWORD PTR [esi+116], ebx
	mov	ebx, DWORD PTR [esi+116]
; Line 1384
	cmp	ebx, 3
	jb	SHORT $LN22@fill_windo
; Line 1385
	mov	edx, DWORD PTR [esi+108]
	add	edx, DWORD PTR [esi+56]
; Line 1386
	mov	ecx, DWORD PTR [esi+88]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR [esi+72], eax
	shl	eax, cl
	movzx	ecx, BYTE PTR [edx+1]
	xor	eax, ecx
	and	eax, DWORD PTR [esi+84]
	mov	DWORD PTR [esi+72], eax
$LN22@fill_windo:
; Line 1395
	cmp	ebx, 262				; 00000106H
	jae	SHORT $LN7@fill_windo
	mov	edx, DWORD PTR [esi]
	cmp	DWORD PTR [edx+4], 0
	jne	$LL41@fill_windo
$LN7@fill_windo:
; Line 1404
	mov	eax, DWORD PTR [esi+5824]
	mov	ecx, DWORD PTR [esi+60]
	cmp	eax, ecx
	jae	SHORT $LN2@fill_windo
; Line 1405
	mov	edi, DWORD PTR [esi+108]
	add	edi, ebx
; Line 1408
	cmp	eax, edi
	jae	SHORT $LN5@fill_windo
; Line 1412
	sub	ecx, edi
	mov	ebx, ecx
; Line 1413
	cmp	ebx, 258				; 00000102H
	jbe	SHORT $LN4@fill_windo
; Line 1414
	mov	ebx, 258				; 00000102H
$LN4@fill_windo:
; Line 1415
	mov	eax, DWORD PTR [esi+56]
	push	ebx
	add	eax, edi
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1416
	add	ebx, edi
	pop	edi
	mov	DWORD PTR [esi+5824], ebx
	pop	ebx
; Line 1430
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@fill_windo:
; Line 1418
	lea	edx, DWORD PTR [edi+258]
	cmp	eax, edx
	jae	SHORT $LN2@fill_windo
; Line 1423
	sub	edi, eax
	add	edi, 258				; 00000102H
; Line 1424
	sub	ecx, eax
	cmp	edi, ecx
	jbe	SHORT $LN1@fill_windo
; Line 1425
	mov	edi, ecx
$LN1@fill_windo:
; Line 1426
	mov	ecx, DWORD PTR [esi+56]
	push	edi
	add	ecx, eax
	push	0
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1427
	add	DWORD PTR [esi+5824], edi
$LN2@fill_windo:
	pop	edi
	pop	ebx
; Line 1430
	mov	esp, ebp
	pop	ebp
	ret	0
_fill_window ENDP
_TEXT	ENDS
EXTRN	__tr_flush_block:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_max_block_size$ = -4					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC
; Line 1465
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
; Line 1472
	mov	esi, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [esi+12]
	add	eax, -5					; fffffffbH
	push	edi
	mov	DWORD PTR _max_block_size$[ebp], 65535	; 0000ffffH
	cmp	eax, 65535				; 0000ffffH
	jae	SHORT $LL11@deflate_st
; Line 1473
	mov	DWORD PTR _max_block_size$[ebp], eax
$LL11@deflate_st:
; Line 1479
	mov	eax, DWORD PTR [esi+116]
	cmp	eax, 1
	ja	SHORT $LN38@deflate_st
; Line 1484
	call	_fill_window
; Line 1485
	mov	eax, DWORD PTR [esi+116]
	test	eax, eax
	je	$LN37@deflate_st
$LN38@deflate_st:
; Line 1491
	add	DWORD PTR [esi+108], eax
; Line 1495
	mov	ecx, DWORD PTR [esi+92]
	mov	eax, DWORD PTR _max_block_size$[ebp]
; Line 1496
	mov	edx, DWORD PTR [esi+108]
	mov	DWORD PTR [esi+116], 0
	lea	eax, DWORD PTR [ecx+eax]
	je	SHORT $LN5@deflate_st
	cmp	edx, eax
	jb	$LN4@deflate_st
$LN5@deflate_st:
; Line 1498
	sub	edx, eax
	mov	DWORD PTR [esi+116], edx
; Line 1499
	mov	DWORD PTR [esi+108], eax
; Line 1500
	test	ecx, ecx
	js	SHORT $LN15@deflate_st
	mov	edx, DWORD PTR [esi+56]
	add	edx, ecx
	jmp	SHORT $LN16@deflate_st
$LN15@deflate_st:
	xor	edx, edx
$LN16@deflate_st:
	push	0
	sub	eax, ecx
	push	eax
	push	edx
	push	esi
	call	__tr_flush_block
	mov	ecx, DWORD PTR [esi+108]
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR [esi+92], ecx
	mov	eax, DWORD PTR [edi+28]
	mov	ebx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [edi+16]
	add	esp, 16					; 00000010H
	cmp	ebx, ecx
	jbe	SHORT $LN23@deflate_st
	mov	ebx, ecx
$LN23@deflate_st:
	test	ebx, ebx
	je	SHORT $LN39@deflate_st
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edi+12]
	push	ebx
	push	edx
	push	eax
	call	_memcpy
	mov	eax, DWORD PTR [edi+28]
	add	DWORD PTR [edi+12], ebx
	add	DWORD PTR [eax+16], ebx
	add	DWORD PTR [edi+20], ebx
	sub	DWORD PTR [edi+16], ebx
	mov	eax, DWORD PTR [edi+28]
	sub	DWORD PTR [eax+20], ebx
	mov	edi, DWORD PTR [edi+28]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [edi+20], 0
	jne	SHORT $LN39@deflate_st
	mov	ecx, DWORD PTR [edi+8]
	mov	DWORD PTR [edi+16], ecx
$LN39@deflate_st:
	mov	edx, DWORD PTR [esi]
	cmp	DWORD PTR [edx+16], 0
	je	$LN36@deflate_st
$LN4@deflate_st:
; Line 1505
	mov	edx, DWORD PTR [esi+92]
	mov	ecx, DWORD PTR [esi+108]
	mov	eax, DWORD PTR [esi+44]
	sub	ecx, edx
	sub	eax, 262				; 00000106H
	cmp	ecx, eax
	jb	$LL11@deflate_st
; Line 1506
	test	edx, edx
	js	SHORT $LN17@deflate_st
	mov	eax, DWORD PTR [esi+56]
	add	eax, edx
	jmp	SHORT $LN18@deflate_st
$LN17@deflate_st:
	xor	eax, eax
$LN18@deflate_st:
	push	0
	push	ecx
	push	eax
	push	esi
	call	__tr_flush_block
	mov	ecx, DWORD PTR [esi+108]
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR [esi+92], ecx
	mov	eax, DWORD PTR [edi+28]
	mov	ebx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [edi+16]
	add	esp, 16					; 00000010H
	cmp	ebx, ecx
	jbe	SHORT $LN28@deflate_st
	mov	ebx, ecx
$LN28@deflate_st:
	test	ebx, ebx
	je	SHORT $LN40@deflate_st
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edi+12]
	push	ebx
	push	edx
	push	eax
	call	_memcpy
	mov	eax, DWORD PTR [edi+28]
	add	DWORD PTR [edi+12], ebx
	add	DWORD PTR [eax+16], ebx
	add	DWORD PTR [edi+20], ebx
	sub	DWORD PTR [edi+16], ebx
	mov	eax, DWORD PTR [edi+28]
	sub	DWORD PTR [eax+20], ebx
	mov	edi, DWORD PTR [edi+28]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [edi+20], 0
	jne	SHORT $LN40@deflate_st
	mov	ecx, DWORD PTR [edi+8]
	mov	DWORD PTR [edi+16], ecx
$LN40@deflate_st:
	mov	edx, DWORD PTR [esi]
	cmp	DWORD PTR [edx+16], 0
	jne	$LL11@deflate_st
$LN36@deflate_st:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 1511
	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@deflate_st:
; Line 1485
	mov	edi, DWORD PTR _flush$[ebp]
	test	edi, edi
	je	SHORT $LN36@deflate_st
; Line 1509
	mov	ecx, DWORD PTR [esi+92]
	test	ecx, ecx
	js	SHORT $LN19@deflate_st
	mov	eax, DWORD PTR [esi+56]
	add	eax, ecx
	jmp	SHORT $LN20@deflate_st
$LN19@deflate_st:
	xor	eax, eax
$LN20@deflate_st:
	xor	edx, edx
	cmp	edi, 4
	sete	dl
	push	edx
	mov	edx, DWORD PTR [esi+108]
	sub	edx, ecx
	push	edx
	push	eax
	push	esi
	call	__tr_flush_block
	mov	eax, DWORD PTR [esi+108]
	mov	DWORD PTR [esi+92], eax
	mov	eax, DWORD PTR [esi]
	add	esp, 16					; 00000010H
	call	_flush_pending
	mov	ecx, DWORD PTR [esi]
	xor	eax, eax
	cmp	DWORD PTR [ecx+16], eax
	jne	SHORT $LN1@deflate_st
	cmp	edi, 4
	setne	al
	pop	edi
	pop	esi
	pop	ebx
	dec	eax
	and	eax, 2
; Line 1511
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1@deflate_st:
; Line 1510
	cmp	edi, 4
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	lea	eax, DWORD PTR [eax+eax+1]
; Line 1511
	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_stored ENDP
_TEXT	ENDS
EXTRN	__dist_code:BYTE
EXTRN	__length_code:BYTE
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_bflush$ = 8						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC
; Line 1523
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	npad	7
$LL17@deflate_fa:
; Line 1533
	mov	eax, DWORD PTR [esi+116]
	cmp	eax, 262				; 00000106H
	jae	SHORT $LN38@deflate_fa
; Line 1534
	call	_fill_window
; Line 1535
	mov	eax, DWORD PTR [esi+116]
	mov	edi, DWORD PTR _flush$[ebp]
	cmp	eax, 262				; 00000106H
	jae	SHORT $LN14@deflate_fa
	test	edi, edi
	je	$LN36@deflate_fa
$LN14@deflate_fa:
; Line 1538
	test	eax, eax
	je	$LN35@deflate_fa
$LN38@deflate_fa:
; Line 1545
	cmp	eax, 3
	jb	SHORT $LN11@deflate_fa
; Line 1546
	mov	eax, DWORD PTR [esi+72]
	mov	ecx, DWORD PTR [esi+88]
	mov	edx, DWORD PTR [esi+108]
	mov	edi, DWORD PTR [esi+52]
	shl	eax, cl
	mov	ecx, DWORD PTR [esi+56]
	movzx	ecx, BYTE PTR [ecx+edx+2]
	xor	eax, ecx
	and	eax, DWORD PTR [esi+84]
	mov	ecx, DWORD PTR [esi+68]
	and	edi, edx
	mov	edx, DWORD PTR [esi+64]
	mov	DWORD PTR [esi+72], eax
	mov	ax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [edx+edi*2], ax
	mov	ecx, DWORD PTR [esi+108]
	and	ecx, DWORD PTR [esi+52]
	mov	edx, DWORD PTR [esi+64]
	movzx	eax, WORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR [esi+72]
	mov	edx, DWORD PTR [esi+68]
	mov	di, WORD PTR [esi+108]
	mov	WORD PTR [edx+ecx*2], di
; Line 1552
	test	eax, eax
	je	SHORT $LN11@deflate_fa
	mov	ecx, DWORD PTR [esi+108]
	mov	edx, DWORD PTR [esi+44]
	sub	ecx, eax
	sub	edx, 262				; 00000106H
	cmp	ecx, edx
	ja	SHORT $LN11@deflate_fa
; Line 1557
	push	eax
	mov	edi, esi
	call	_longest_match
	add	esp, 4
	mov	DWORD PTR [esi+96], eax
$LN11@deflate_fa:
; Line 1560
	cmp	DWORD PTR [esi+96], 3
	jb	$LN10@deflate_fa
; Line 1564
	mov	cx, WORD PTR [esi+108]
	sub	cx, WORD PTR [esi+112]
	mov	edx, DWORD PTR [esi+5792]
	mov	al, BYTE PTR [esi+96]
	mov	edi, DWORD PTR [esi+5796]
	movzx	ecx, cx
	mov	WORD PTR [edi+edx*2], cx
	mov	edi, DWORD PTR [esi+5792]
	mov	edx, DWORD PTR [esi+5784]
	sub	al, 3
	mov	BYTE PTR [edx+edi], al
	movzx	eax, al
	mov	edi, 1
	add	DWORD PTR [esi+5792], edi
	movzx	edx, BYTE PTR __length_code[eax]
	add	WORD PTR [esi+edx*4+1176], di
	lea	eax, DWORD PTR [esi+edx*4+1176]
	add	ecx, 65535				; 0000ffffH
	mov	eax, 256				; 00000100H
	cmp	cx, ax
	jae	SHORT $LN20@deflate_fa
	movzx	ecx, cx
	movzx	eax, BYTE PTR __dist_code[ecx]
	jmp	SHORT $LN21@deflate_fa
$LN20@deflate_fa:
	movzx	edx, cx
	shr	edx, 7
	movzx	eax, BYTE PTR __dist_code[edx+256]
$LN21@deflate_fa:
	add	WORD PTR [esi+eax*4+2440], di
	mov	eax, DWORD PTR [esi+5788]
	sub	eax, edi
	xor	ebx, ebx
	cmp	DWORD PTR [esi+5792], eax
; Line 1566
	mov	eax, DWORD PTR [esi+96]
	sete	bl
	sub	DWORD PTR [esi+116], eax
	mov	ecx, DWORD PTR [esi+116]
	mov	DWORD PTR _bflush$[ebp], ebx
; Line 1573
	cmp	eax, DWORD PTR [esi+128]
	ja	SHORT $LN9@deflate_fa
	cmp	ecx, 3
	jb	SHORT $LN9@deflate_fa
; Line 1574
	dec	eax
	mov	DWORD PTR [esi+96], eax
	npad	4
$LL8@deflate_fa:
; Line 1576
	add	DWORD PTR [esi+108], edi
	mov	edx, DWORD PTR [esi+108]
; Line 1577
	mov	ecx, DWORD PTR [esi+56]
	movzx	eax, BYTE PTR [edx+ecx+2]
	mov	ebx, DWORD PTR [esi+72]
	mov	ecx, DWORD PTR [esi+88]
	shl	ebx, cl
	mov	ecx, DWORD PTR [esi+68]
	xor	eax, ebx
	and	eax, DWORD PTR [esi+84]
	mov	ebx, DWORD PTR [esi+52]
	mov	DWORD PTR [esi+72], eax
	movzx	eax, WORD PTR [ecx+eax*2]
	and	ebx, edx
	mov	edx, DWORD PTR [esi+64]
	mov	WORD PTR [edx+ebx*2], ax
	movzx	eax, WORD PTR [esi+108]
	mov	ecx, DWORD PTR [esi+72]
	mov	edx, DWORD PTR [esi+68]
	mov	WORD PTR [edx+ecx*2], ax
; Line 1581
	dec	DWORD PTR [esi+96]
	jne	SHORT $LL8@deflate_fa
; Line 1582
	add	DWORD PTR [esi+108], edi
; Line 1583
	mov	ebx, DWORD PTR _bflush$[ebp]
	jmp	$LN4@deflate_fa
$LN9@deflate_fa:
; Line 1586
	add	DWORD PTR [esi+108], eax
; Line 1588
	mov	edx, DWORD PTR [esi+56]
	add	edx, DWORD PTR [esi+108]
; Line 1589
	mov	ecx, DWORD PTR [esi+88]
	mov	DWORD PTR [esi+96], 0
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR [esi+72], eax
	shl	eax, cl
	movzx	ecx, BYTE PTR [edx+1]
	xor	eax, ecx
	and	eax, DWORD PTR [esi+84]
	mov	DWORD PTR [esi+72], eax
; Line 1597
	jmp	SHORT $LN4@deflate_fa
$LN10@deflate_fa:
; Line 1600
	mov	edx, DWORD PTR [esi+108]
	mov	eax, DWORD PTR [esi+56]
	mov	al, BYTE PTR [edx+eax]
	mov	ecx, DWORD PTR [esi+5792]
	mov	edx, DWORD PTR [esi+5796]
	xor	edi, edi
	mov	WORD PTR [edx+ecx*2], di
	mov	edx, DWORD PTR [esi+5792]
	mov	ecx, DWORD PTR [esi+5784]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, 1
	add	DWORD PTR [esi+5792], ecx
	movzx	eax, al
	add	WORD PTR [esi+eax*4+148], cx
	mov	edx, DWORD PTR [esi+5788]
	lea	eax, DWORD PTR [esi+eax*4+148]
	sub	edx, ecx
	xor	ebx, ebx
	cmp	DWORD PTR [esi+5792], edx
	sete	bl
; Line 1601
	dec	DWORD PTR [esi+116]
; Line 1602
	add	DWORD PTR [esi+108], ecx
$LN4@deflate_fa:
; Line 1604
	test	ebx, ebx
	je	$LL17@deflate_fa
	mov	ecx, DWORD PTR [esi+92]
	test	ecx, ecx
	js	SHORT $LN22@deflate_fa
	mov	eax, DWORD PTR [esi+56]
	add	eax, ecx
	jmp	SHORT $LN23@deflate_fa
$LN22@deflate_fa:
	xor	eax, eax
$LN23@deflate_fa:
	mov	edx, DWORD PTR [esi+108]
	push	0
	sub	edx, ecx
	push	edx
	push	eax
	push	esi
	call	__tr_flush_block
	mov	eax, DWORD PTR [esi+108]
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR [esi+92], eax
	mov	eax, DWORD PTR [edi+28]
	mov	ebx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [edi+16]
	add	esp, 16					; 00000010H
	cmp	ebx, ecx
	jbe	SHORT $LN28@deflate_fa
	mov	ebx, ecx
$LN28@deflate_fa:
	test	ebx, ebx
	je	SHORT $LN39@deflate_fa
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [edi+12]
	push	ebx
	push	ecx
	push	edx
	call	_memcpy
	mov	eax, DWORD PTR [edi+28]
	add	DWORD PTR [edi+12], ebx
	add	DWORD PTR [eax+16], ebx
	add	DWORD PTR [edi+20], ebx
	sub	DWORD PTR [edi+16], ebx
	mov	eax, DWORD PTR [edi+28]
	sub	DWORD PTR [eax+20], ebx
	mov	edi, DWORD PTR [edi+28]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [edi+20], 0
	jne	SHORT $LN39@deflate_fa
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [edi+16], eax
$LN39@deflate_fa:
	mov	ecx, DWORD PTR [esi]
	cmp	DWORD PTR [ecx+16], 0
	jne	$LL17@deflate_fa
$LN36@deflate_fa:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 1608
	pop	ebp
	ret	0
$LN35@deflate_fa:
; Line 1606
	mov	ecx, DWORD PTR [esi+92]
	test	ecx, ecx
	js	SHORT $LN24@deflate_fa
	mov	eax, DWORD PTR [esi+56]
	add	eax, ecx
	jmp	SHORT $LN25@deflate_fa
$LN24@deflate_fa:
	xor	eax, eax
$LN25@deflate_fa:
	xor	edx, edx
	cmp	edi, 4
	sete	dl
	push	edx
	mov	edx, DWORD PTR [esi+108]
	sub	edx, ecx
	push	edx
	push	eax
	push	esi
	call	__tr_flush_block
	mov	eax, DWORD PTR [esi+108]
	mov	DWORD PTR [esi+92], eax
	mov	eax, DWORD PTR [esi]
	add	esp, 16					; 00000010H
	call	_flush_pending
	mov	ecx, DWORD PTR [esi]
	xor	eax, eax
	cmp	DWORD PTR [ecx+16], eax
	jne	SHORT $LN1@deflate_fa
	cmp	edi, 4
	setne	al
	pop	edi
	pop	esi
	pop	ebx
	dec	eax
	and	eax, 2
; Line 1608
	pop	ebp
	ret	0
$LN1@deflate_fa:
; Line 1607
	cmp	edi, 4
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	lea	eax, DWORD PTR [eax+eax+1]
; Line 1608
	pop	ebp
	ret	0
_deflate_fast ENDP
; Function compile flags: /Ogtp
_bflush$ = 8						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC
; Line 1619
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	npad	7
$LL23@deflate_sl:
; Line 1630
	mov	ecx, DWORD PTR [esi+116]
	cmp	ecx, 262				; 00000106H
	jae	SHORT $LN52@deflate_sl
; Line 1631
	call	_fill_window
; Line 1632
	mov	ecx, DWORD PTR [esi+116]
	mov	edi, DWORD PTR _flush$[ebp]
	cmp	ecx, 262				; 00000106H
	jae	SHORT $LN20@deflate_sl
	test	edi, edi
	je	$LN50@deflate_sl
$LN20@deflate_sl:
; Line 1635
	test	ecx, ecx
	je	$LN48@deflate_sl
$LN52@deflate_sl:
; Line 1641
	xor	eax, eax
; Line 1642
	cmp	ecx, 3
	jb	SHORT $LN18@deflate_sl
; Line 1643
	mov	eax, DWORD PTR [esi+72]
	mov	ecx, DWORD PTR [esi+88]
	mov	edx, DWORD PTR [esi+108]
	mov	edi, DWORD PTR [esi+52]
	shl	eax, cl
	mov	ecx, DWORD PTR [esi+56]
	movzx	ecx, BYTE PTR [ecx+edx+2]
	xor	eax, ecx
	and	eax, DWORD PTR [esi+84]
	mov	ecx, DWORD PTR [esi+68]
	and	edi, edx
	mov	edx, DWORD PTR [esi+64]
	mov	DWORD PTR [esi+72], eax
	mov	ax, WORD PTR [ecx+eax*2]
	mov	WORD PTR [edx+edi*2], ax
	mov	ecx, DWORD PTR [esi+108]
	and	ecx, DWORD PTR [esi+52]
	mov	edx, DWORD PTR [esi+64]
	movzx	eax, WORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR [esi+72]
	mov	edx, DWORD PTR [esi+68]
	mov	di, WORD PTR [esi+108]
	mov	WORD PTR [edx+ecx*2], di
$LN18@deflate_sl:
; Line 1648
	mov	ecx, DWORD PTR [esi+96]
	mov	edx, DWORD PTR [esi+112]
; Line 1649
	mov	ebx, 2
	mov	DWORD PTR [esi+120], ecx
	mov	DWORD PTR [esi+100], edx
	mov	DWORD PTR [esi+96], ebx
; Line 1652
	test	eax, eax
	je	SHORT $LN57@deflate_sl
	cmp	ecx, DWORD PTR [esi+128]
	jae	SHORT $LN57@deflate_sl
	mov	edx, DWORD PTR [esi+108]
	mov	ecx, DWORD PTR [esi+44]
	sub	edx, eax
	sub	ecx, 262				; 00000106H
	cmp	edx, ecx
	ja	SHORT $LN57@deflate_sl
; Line 1657
	push	eax
	mov	edi, esi
	call	_longest_match
	add	esp, 4
	mov	DWORD PTR [esi+96], eax
; Line 1665
	cmp	eax, 5
	ja	SHORT $LN57@deflate_sl
	mov	ecx, 1
	cmp	DWORD PTR [esi+136], ecx
	je	SHORT $LN15@deflate_sl
	cmp	eax, 3
	jne	SHORT $LN58@deflate_sl
	mov	edx, DWORD PTR [esi+108]
	sub	edx, DWORD PTR [esi+112]
	cmp	edx, 4096				; 00001000H
	jbe	SHORT $LN58@deflate_sl
$LN15@deflate_sl:
; Line 1670
	mov	DWORD PTR [esi+96], ebx
	jmp	SHORT $LN58@deflate_sl
$LN57@deflate_sl:
	mov	ecx, 1
$LN58@deflate_sl:
; Line 1676
	mov	eax, DWORD PTR [esi+120]
	cmp	eax, 3
	jb	$LN14@deflate_sl
	cmp	DWORD PTR [esi+96], eax
	ja	$LN14@deflate_sl
; Line 1677
	mov	eax, DWORD PTR [esi+108]
	mov	edx, DWORD PTR [esi+116]
; Line 1683
	mov	ebx, DWORD PTR [esi+5796]
	lea	edi, DWORD PTR [eax+edx-3]
	mov	dx, WORD PTR [esi+108]
	sub	dx, WORD PTR [esi+100]
	mov	al, BYTE PTR [esi+120]
	sub	dx, cx
	movzx	ecx, dx
	mov	edx, DWORD PTR [esi+5792]
	mov	WORD PTR [ebx+edx*2], cx
	mov	ebx, DWORD PTR [esi+5792]
	mov	edx, DWORD PTR [esi+5784]
	sub	al, 3
	mov	BYTE PTR [edx+ebx], al
	movzx	eax, al
	mov	ebx, 1
	add	DWORD PTR [esi+5792], ebx
	movzx	edx, BYTE PTR __length_code[eax]
	add	WORD PTR [esi+edx*4+1176], bx
	lea	eax, DWORD PTR [esi+edx*4+1176]
	add	ecx, 65535				; 0000ffffH
	mov	eax, 256				; 00000100H
	cmp	cx, ax
	jae	SHORT $LN26@deflate_sl
	movzx	ecx, cx
	movzx	eax, BYTE PTR __dist_code[ecx]
	jmp	SHORT $LN27@deflate_sl
$LN26@deflate_sl:
	movzx	edx, cx
	shr	edx, 7
	movzx	eax, BYTE PTR __dist_code[edx+256]
$LN27@deflate_sl:
	add	WORD PTR [esi+eax*4+2440], bx
	mov	eax, DWORD PTR [esi+5788]
	sub	eax, ebx
	xor	ecx, ecx
	cmp	DWORD PTR [esi+5792], eax
; Line 1690
	mov	eax, DWORD PTR [esi+120]
	sete	cl
	mov	edx, ebx
	sub	edx, eax
	add	DWORD PTR [esi+116], edx
; Line 1691
	add	eax, -2					; fffffffeH
	mov	DWORD PTR [esi+120], eax
	mov	DWORD PTR _bflush$[ebp], ecx
	npad	7
$LL13@deflate_sl:
; Line 1693
	add	DWORD PTR [esi+108], ebx
	mov	edx, DWORD PTR [esi+108]
	cmp	edx, edi
	ja	SHORT $LN12@deflate_sl
; Line 1694
	mov	eax, DWORD PTR [esi+72]
	mov	ecx, DWORD PTR [esi+88]
	mov	ebx, DWORD PTR [esi+52]
	shl	eax, cl
	mov	ecx, DWORD PTR [esi+56]
	movzx	ecx, BYTE PTR [ecx+edx+2]
	xor	eax, ecx
	and	eax, DWORD PTR [esi+84]
	mov	ecx, DWORD PTR [esi+68]
	mov	DWORD PTR [esi+72], eax
	movzx	eax, WORD PTR [ecx+eax*2]
	and	ebx, edx
	mov	edx, DWORD PTR [esi+64]
	mov	WORD PTR [edx+ebx*2], ax
	movzx	eax, WORD PTR [esi+108]
	mov	ecx, DWORD PTR [esi+72]
	mov	edx, DWORD PTR [esi+68]
	mov	WORD PTR [edx+ecx*2], ax
	mov	ebx, 1
$LN12@deflate_sl:
; Line 1696
	dec	DWORD PTR [esi+120]
	jne	SHORT $LL13@deflate_sl
; Line 1699
	add	DWORD PTR [esi+108], ebx
; Line 1701
	cmp	DWORD PTR _bflush$[ebp], 0
	mov	eax, DWORD PTR [esi+108]
	mov	DWORD PTR [esi+104], 0
	mov	DWORD PTR [esi+96], 2
	je	$LL23@deflate_sl
	mov	edx, DWORD PTR [esi+92]
	test	edx, edx
	js	SHORT $LN28@deflate_sl
	mov	ecx, DWORD PTR [esi+56]
	add	ecx, edx
	jmp	SHORT $LN29@deflate_sl
$LN28@deflate_sl:
	xor	ecx, ecx
$LN29@deflate_sl:
	push	0
	sub	eax, edx
	push	eax
	push	ecx
	push	esi
	call	__tr_flush_block
	mov	ecx, DWORD PTR [esi+108]
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR [esi+92], ecx
	mov	eax, DWORD PTR [edi+28]
	mov	ebx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [edi+16]
	add	esp, 16					; 00000010H
	cmp	ebx, ecx
	jbe	SHORT $LN36@deflate_sl
	mov	ebx, ecx
$LN36@deflate_sl:
	test	ebx, ebx
	je	SHORT $LN54@deflate_sl
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edi+12]
	push	ebx
	push	edx
	push	eax
	call	_memcpy
	mov	eax, DWORD PTR [edi+28]
	add	DWORD PTR [edi+12], ebx
	add	DWORD PTR [eax+16], ebx
	add	DWORD PTR [edi+20], ebx
	sub	DWORD PTR [edi+16], ebx
	mov	eax, DWORD PTR [edi+28]
	sub	DWORD PTR [eax+20], ebx
	mov	edi, DWORD PTR [edi+28]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [edi+20], 0
	jne	SHORT $LN54@deflate_sl
	mov	ecx, DWORD PTR [edi+8]
	mov	DWORD PTR [edi+16], ecx
$LN54@deflate_sl:
	mov	edx, DWORD PTR [esi]
	cmp	DWORD PTR [edx+16], 0
$LN59@deflate_sl:
	jne	$LL23@deflate_sl
$LN50@deflate_sl:
	pop	edi
	pop	esi
; Line 1715
	xor	eax, eax
	pop	ebx
; Line 1733
	pop	ebp
	ret	0
$LN14@deflate_sl:
; Line 1703
	cmp	DWORD PTR [esi+104], 0
	je	$LN6@deflate_sl
; Line 1709
	mov	eax, DWORD PTR [esi+108]
	mov	edx, DWORD PTR [esi+56]
	mov	al, BYTE PTR [eax+edx-1]
	mov	edx, DWORD PTR [esi+5792]
	mov	edi, DWORD PTR [esi+5796]
	xor	ebx, ebx
	mov	WORD PTR [edi+edx*2], bx
	mov	edx, DWORD PTR [esi+5784]
	mov	edi, DWORD PTR [esi+5792]
	mov	BYTE PTR [edx+edi], al
	add	DWORD PTR [esi+5792], ecx
	movzx	eax, al
	add	WORD PTR [esi+eax*4+148], cx
	mov	edx, DWORD PTR [esi+5788]
	lea	eax, DWORD PTR [esi+eax*4+148]
	sub	edx, ecx
	cmp	DWORD PTR [esi+5792], edx
; Line 1710
	jne	SHORT $LN56@deflate_sl
; Line 1711
	mov	ecx, DWORD PTR [esi+92]
	test	ecx, ecx
	js	SHORT $LN30@deflate_sl
	mov	eax, DWORD PTR [esi+56]
	add	eax, ecx
	jmp	SHORT $LN31@deflate_sl
$LN30@deflate_sl:
	xor	eax, eax
$LN31@deflate_sl:
	mov	edx, DWORD PTR [esi+108]
	push	0
	sub	edx, ecx
	push	edx
	push	eax
	push	esi
	call	__tr_flush_block
	mov	eax, DWORD PTR [esi+108]
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR [esi+92], eax
	mov	eax, DWORD PTR [edi+28]
	mov	ebx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [edi+16]
	add	esp, 16					; 00000010H
	cmp	ebx, ecx
	jbe	SHORT $LN41@deflate_sl
	mov	ebx, ecx
$LN41@deflate_sl:
	test	ebx, ebx
	je	SHORT $LN55@deflate_sl
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [edi+12]
	push	ebx
	push	ecx
	push	edx
	call	_memcpy
	mov	eax, DWORD PTR [edi+28]
	add	DWORD PTR [edi+12], ebx
	add	DWORD PTR [eax+16], ebx
	add	DWORD PTR [edi+20], ebx
	sub	DWORD PTR [edi+16], ebx
	mov	eax, DWORD PTR [edi+28]
	sub	DWORD PTR [eax+20], ebx
	mov	edi, DWORD PTR [edi+28]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [edi+20], 0
	jne	SHORT $LN55@deflate_sl
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [edi+16], eax
$LN55@deflate_sl:
	mov	ecx, 1
$LN56@deflate_sl:
; Line 1713
	add	DWORD PTR [esi+108], ecx
; Line 1715
	mov	ecx, DWORD PTR [esi]
	dec	DWORD PTR [esi+116]
	cmp	DWORD PTR [ecx+16], 0
; Line 1716
	jmp	$LN59@deflate_sl
$LN6@deflate_sl:
; Line 1721
	add	DWORD PTR [esi+108], ecx
; Line 1722
	dec	DWORD PTR [esi+116]
	mov	DWORD PTR [esi+104], ecx
; Line 1724
	jmp	$LL23@deflate_sl
$LN48@deflate_sl:
; Line 1726
	cmp	DWORD PTR [esi+104], 0
	je	SHORT $LN2@deflate_sl
; Line 1728
	mov	edx, DWORD PTR [esi+108]
	mov	eax, DWORD PTR [esi+56]
	mov	al, BYTE PTR [edx+eax-1]
	mov	ecx, DWORD PTR [esi+5792]
	mov	edx, DWORD PTR [esi+5796]
	xor	ebx, ebx
	mov	WORD PTR [edx+ecx*2], bx
	mov	edx, DWORD PTR [esi+5792]
	mov	ecx, DWORD PTR [esi+5784]
	mov	BYTE PTR [ecx+edx], al
	inc	DWORD PTR [esi+5792]
	movzx	eax, al
	inc	WORD PTR [esi+eax*4+148]
	lea	eax, DWORD PTR [esi+eax*4+148]
; Line 1729
	mov	DWORD PTR [esi+104], ebx
$LN2@deflate_sl:
; Line 1731
	mov	ecx, DWORD PTR [esi+92]
	test	ecx, ecx
	js	SHORT $LN32@deflate_sl
	mov	eax, DWORD PTR [esi+56]
	add	eax, ecx
	jmp	SHORT $LN33@deflate_sl
$LN32@deflate_sl:
	xor	eax, eax
$LN33@deflate_sl:
	xor	edx, edx
	cmp	edi, 4
	sete	dl
	push	edx
	mov	edx, DWORD PTR [esi+108]
	sub	edx, ecx
	push	edx
	push	eax
	push	esi
	call	__tr_flush_block
	mov	eax, DWORD PTR [esi+108]
	mov	DWORD PTR [esi+92], eax
	mov	eax, DWORD PTR [esi]
	add	esp, 16					; 00000010H
	call	_flush_pending
	mov	ecx, DWORD PTR [esi]
	xor	eax, eax
	cmp	DWORD PTR [ecx+16], eax
	jne	SHORT $LN1@deflate_sl
	cmp	edi, 4
	setne	al
	pop	edi
	pop	esi
	pop	ebx
	dec	eax
	and	eax, 2
; Line 1733
	pop	ebp
	ret	0
$LN1@deflate_sl:
; Line 1732
	cmp	edi, 4
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	lea	eax, DWORD PTR [eax+eax+1]
; Line 1733
	pop	ebp
	ret	0
_deflate_slow ENDP
; Function compile flags: /Ogtp
_flush$ = 8						; size = 4
_deflate_rle PROC
; _s$ = eax
; Line 1744
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	esi, eax
	npad	8
$LL17@deflate_rl:
; Line 1754
	mov	eax, DWORD PTR [esi+116]
	cmp	eax, 258				; 00000102H
	jae	SHORT $LN38@deflate_rl
; Line 1755
	call	_fill_window
; Line 1756
	mov	eax, DWORD PTR [esi+116]
	mov	edi, DWORD PTR _flush$[ebp]
	cmp	eax, 258				; 00000102H
	jae	SHORT $LN14@deflate_rl
	test	edi, edi
	je	$LN36@deflate_rl
$LN14@deflate_rl:
; Line 1759
	test	eax, eax
	je	$LN35@deflate_rl
$LN38@deflate_rl:
; Line 1763
	mov	DWORD PTR [esi+96], 0
; Line 1764
	cmp	eax, 3
	jb	$LN39@deflate_rl
	mov	eax, DWORD PTR [esi+108]
	test	eax, eax
	je	$LN39@deflate_rl
; Line 1765
	mov	edx, DWORD PTR [esi+56]
	add	edx, eax
; Line 1766
	movzx	ecx, BYTE PTR [edx-1]
	lea	eax, DWORD PTR [edx-1]
; Line 1767
	mov	edi, 1
	movzx	ebx, BYTE PTR [eax+edi]
	add	eax, edi
	cmp	ecx, ebx
	jne	$LN41@deflate_rl
	movzx	ebx, BYTE PTR [eax+edi]
	add	eax, edi
	cmp	ecx, ebx
	jne	$LN41@deflate_rl
	movzx	ebx, BYTE PTR [eax+edi]
	add	eax, edi
	cmp	ecx, ebx
	jne	SHORT $LN41@deflate_rl
; Line 1768
	add	edx, 258				; 00000102H
$LL10@deflate_rl:
; Line 1774
	movzx	ebx, BYTE PTR [eax+edi]
	add	eax, edi
	cmp	ecx, ebx
	jne	SHORT $LN7@deflate_rl
	movzx	ebx, BYTE PTR [eax+edi]
	add	eax, edi
	cmp	ecx, ebx
	jne	SHORT $LN7@deflate_rl
	movzx	ebx, BYTE PTR [eax+edi]
	add	eax, edi
	cmp	ecx, ebx
	jne	SHORT $LN7@deflate_rl
	movzx	ebx, BYTE PTR [eax+edi]
	add	eax, edi
	cmp	ecx, ebx
	jne	SHORT $LN7@deflate_rl
	movzx	ebx, BYTE PTR [eax+edi]
	add	eax, edi
	cmp	ecx, ebx
	jne	SHORT $LN7@deflate_rl
	movzx	ebx, BYTE PTR [eax+edi]
	add	eax, edi
	cmp	ecx, ebx
	jne	SHORT $LN7@deflate_rl
	movzx	ebx, BYTE PTR [eax+edi]
	add	eax, edi
	cmp	ecx, ebx
	jne	SHORT $LN7@deflate_rl
	movzx	ebx, BYTE PTR [eax+edi]
	add	eax, edi
	cmp	ecx, ebx
	jne	SHORT $LN7@deflate_rl
	cmp	eax, edx
	jb	SHORT $LL10@deflate_rl
$LN7@deflate_rl:
; Line 1776
	mov	ecx, DWORD PTR [esi+116]
	sub	eax, edx
	add	eax, 258				; 00000102H
	mov	DWORD PTR [esi+96], eax
	cmp	eax, ecx
	jbe	SHORT $LN41@deflate_rl
; Line 1777
	mov	DWORD PTR [esi+96], ecx
	jmp	SHORT $LN41@deflate_rl
$LN39@deflate_rl:
	mov	edi, 1
$LN41@deflate_rl:
; Line 1782
	cmp	DWORD PTR [esi+96], 3
; Line 1785
	mov	edx, DWORD PTR [esi+5792]
	jb	SHORT $LN5@deflate_rl
	mov	al, BYTE PTR [esi+96]
	mov	ecx, DWORD PTR [esi+5796]
	sub	al, 3
	mov	ebx, edi
	mov	WORD PTR [ecx+edx*2], bx
	mov	ecx, DWORD PTR [esi+5792]
	mov	edx, DWORD PTR [esi+5784]
	mov	BYTE PTR [edx+ecx], al
	add	DWORD PTR [esi+5792], edi
	movzx	edx, al
	movzx	eax, BYTE PTR __length_code[edx]
	add	WORD PTR [esi+eax*4+1176], di
	lea	eax, DWORD PTR [esi+eax*4+1176]
	movzx	eax, BYTE PTR __dist_code
	add	WORD PTR [esi+eax*4+2440], di
	mov	ecx, DWORD PTR [esi+5788]
; Line 1787
	mov	eax, DWORD PTR [esi+96]
	sub	ecx, edi
	xor	edx, edx
	cmp	DWORD PTR [esi+5792], ecx
; Line 1789
	mov	DWORD PTR [esi+96], 0
	sete	dl
	sub	DWORD PTR [esi+116], eax
	add	DWORD PTR [esi+108], eax
	mov	ecx, edx
; Line 1790
	jmp	SHORT $LN4@deflate_rl
$LN5@deflate_rl:
; Line 1793
	mov	ecx, DWORD PTR [esi+108]
	mov	eax, DWORD PTR [esi+56]
	mov	al, BYTE PTR [eax+ecx]
	mov	ecx, DWORD PTR [esi+5796]
	xor	ebx, ebx
	mov	WORD PTR [ecx+edx*2], bx
	mov	ecx, DWORD PTR [esi+5792]
	mov	edx, DWORD PTR [esi+5784]
	mov	BYTE PTR [edx+ecx], al
	add	DWORD PTR [esi+5792], edi
	movzx	edx, al
	add	WORD PTR [esi+edx*4+148], di
	lea	eax, DWORD PTR [esi+edx*4+148]
	mov	eax, DWORD PTR [esi+5788]
	sub	eax, edi
	xor	ecx, ecx
	cmp	DWORD PTR [esi+5792], eax
	sete	cl
; Line 1794
	dec	DWORD PTR [esi+116]
; Line 1795
	add	DWORD PTR [esi+108], edi
$LN4@deflate_rl:
; Line 1797
	test	ecx, ecx
	je	$LL17@deflate_rl
	mov	ecx, DWORD PTR [esi+92]
	test	ecx, ecx
	js	SHORT $LN22@deflate_rl
	mov	eax, DWORD PTR [esi+56]
	add	eax, ecx
	jmp	SHORT $LN23@deflate_rl
$LN22@deflate_rl:
	xor	eax, eax
$LN23@deflate_rl:
	mov	edx, DWORD PTR [esi+108]
	push	0
	sub	edx, ecx
	push	edx
	push	eax
	push	esi
	call	__tr_flush_block
	mov	eax, DWORD PTR [esi+108]
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR [esi+92], eax
	mov	eax, DWORD PTR [edi+28]
	mov	ebx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [edi+16]
	add	esp, 16					; 00000010H
	cmp	ebx, ecx
	jbe	SHORT $LN28@deflate_rl
	mov	ebx, ecx
$LN28@deflate_rl:
	test	ebx, ebx
	je	SHORT $LN40@deflate_rl
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [edi+12]
	push	ebx
	push	ecx
	push	edx
	call	_memcpy
	mov	eax, DWORD PTR [edi+28]
	add	DWORD PTR [edi+12], ebx
	add	DWORD PTR [eax+16], ebx
	add	DWORD PTR [edi+20], ebx
	sub	DWORD PTR [edi+16], ebx
	mov	eax, DWORD PTR [edi+28]
	sub	DWORD PTR [eax+20], ebx
	mov	edi, DWORD PTR [edi+28]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [edi+20], 0
	jne	SHORT $LN40@deflate_rl
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [edi+16], eax
$LN40@deflate_rl:
	mov	ecx, DWORD PTR [esi]
	cmp	DWORD PTR [ecx+16], 0
	jne	$LL17@deflate_rl
$LN36@deflate_rl:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 1801
	pop	ebp
	ret	0
$LN35@deflate_rl:
; Line 1799
	mov	ecx, DWORD PTR [esi+92]
	test	ecx, ecx
	js	SHORT $LN24@deflate_rl
	mov	eax, DWORD PTR [esi+56]
	add	eax, ecx
	jmp	SHORT $LN25@deflate_rl
$LN24@deflate_rl:
	xor	eax, eax
$LN25@deflate_rl:
	xor	edx, edx
	cmp	edi, 4
	sete	dl
	push	edx
	mov	edx, DWORD PTR [esi+108]
	sub	edx, ecx
	push	edx
	push	eax
	push	esi
	call	__tr_flush_block
	mov	eax, DWORD PTR [esi+108]
	mov	DWORD PTR [esi+92], eax
	mov	eax, DWORD PTR [esi]
	add	esp, 16					; 00000010H
	call	_flush_pending
	mov	ecx, DWORD PTR [esi]
	xor	eax, eax
	cmp	DWORD PTR [ecx+16], eax
	jne	SHORT $LN1@deflate_rl
	cmp	edi, 4
	setne	al
	pop	edi
	pop	esi
	pop	ebx
	dec	eax
	and	eax, 2
; Line 1801
	pop	ebp
	ret	0
$LN1@deflate_rl:
; Line 1800
	cmp	edi, 4
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	lea	eax, DWORD PTR [eax+eax+1]
; Line 1801
	pop	ebp
	ret	0
_deflate_rle ENDP
; Function compile flags: /Ogtp
_flush$ = 8						; size = 4
_deflate_huff PROC
; _s$ = eax
; Line 1810
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	esi, eax
$LL8@deflate_hu:
; Line 1815
	cmp	DWORD PTR [esi+116], 0
	jne	SHORT $LN5@deflate_hu
; Line 1816
	call	_fill_window
; Line 1817
	cmp	DWORD PTR [esi+116], 0
	je	$LN22@deflate_hu
$LN5@deflate_hu:
; Line 1827
	mov	eax, DWORD PTR [esi+108]
	mov	ecx, DWORD PTR [esi+56]
	mov	edx, DWORD PTR [esi+5792]
	mov	DWORD PTR [esi+96], 0
	mov	al, BYTE PTR [eax+ecx]
	mov	ecx, DWORD PTR [esi+5796]
	xor	edi, edi
	mov	WORD PTR [ecx+edx*2], di
	mov	ecx, DWORD PTR [esi+5792]
	mov	edx, DWORD PTR [esi+5784]
	mov	BYTE PTR [edx+ecx], al
	movzx	edx, al
	mov	ecx, 1
	add	DWORD PTR [esi+5792], ecx
	add	WORD PTR [esi+edx*4+148], cx
; Line 1829
	add	DWORD PTR [esi+108], ecx
	dec	DWORD PTR [esi+116]
	lea	eax, DWORD PTR [esi+edx*4+148]
	mov	edx, DWORD PTR [esi+5788]
	mov	eax, DWORD PTR [esi+108]
	sub	edx, ecx
	cmp	DWORD PTR [esi+5792], edx
; Line 1830
	jne	SHORT $LL8@deflate_hu
	mov	edx, DWORD PTR [esi+92]
	test	edx, edx
	js	SHORT $LN11@deflate_hu
	mov	ecx, DWORD PTR [esi+56]
	add	ecx, edx
	jmp	SHORT $LN12@deflate_hu
$LN11@deflate_hu:
	xor	ecx, ecx
$LN12@deflate_hu:
	push	0
	sub	eax, edx
	push	eax
	push	ecx
	push	esi
	call	__tr_flush_block
	mov	eax, DWORD PTR [esi+108]
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR [esi+92], eax
	mov	eax, DWORD PTR [edi+28]
	mov	ebx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [edi+16]
	add	esp, 16					; 00000010H
	cmp	ebx, ecx
	jbe	SHORT $LN17@deflate_hu
	mov	ebx, ecx
$LN17@deflate_hu:
	test	ebx, ebx
	je	SHORT $LN24@deflate_hu
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [edi+12]
	push	ebx
	push	ecx
	push	edx
	call	_memcpy
	mov	eax, DWORD PTR [edi+28]
	add	DWORD PTR [edi+12], ebx
	add	DWORD PTR [eax+16], ebx
	add	DWORD PTR [edi+20], ebx
	sub	DWORD PTR [edi+16], ebx
	mov	eax, DWORD PTR [edi+28]
	sub	DWORD PTR [eax+20], ebx
	mov	edi, DWORD PTR [edi+28]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [edi+20], 0
	jne	SHORT $LN24@deflate_hu
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [edi+16], eax
$LN24@deflate_hu:
	mov	ecx, DWORD PTR [esi]
	cmp	DWORD PTR [ecx+16], 0
	jne	$LL8@deflate_hu
$LN23@deflate_hu:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 1834
	pop	ebp
	ret	0
$LN22@deflate_hu:
; Line 1818
	mov	edi, DWORD PTR _flush$[ebp]
	test	edi, edi
; Line 1819
	je	SHORT $LN23@deflate_hu
; Line 1832
	mov	ecx, DWORD PTR [esi+92]
	test	ecx, ecx
	js	SHORT $LN13@deflate_hu
	mov	eax, DWORD PTR [esi+56]
	add	eax, ecx
	jmp	SHORT $LN14@deflate_hu
$LN13@deflate_hu:
	xor	eax, eax
$LN14@deflate_hu:
	xor	edx, edx
	cmp	edi, 4
	sete	dl
	push	edx
	mov	edx, DWORD PTR [esi+108]
	sub	edx, ecx
	push	edx
	push	eax
	push	esi
	call	__tr_flush_block
	mov	eax, DWORD PTR [esi+108]
	mov	DWORD PTR [esi+92], eax
	mov	eax, DWORD PTR [esi]
	add	esp, 16					; 00000010H
	call	_flush_pending
	mov	ecx, DWORD PTR [esi]
	xor	eax, eax
	cmp	DWORD PTR [ecx+16], eax
	jne	SHORT $LN1@deflate_hu
	cmp	edi, 4
	setne	al
	pop	edi
	pop	esi
	pop	ebx
	dec	eax
	and	eax, 2
; Line 1834
	pop	ebp
	ret	0
$LN1@deflate_hu:
; Line 1833
	cmp	edi, 4
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	lea	eax, DWORD PTR [eax+eax+1]
; Line 1834
	pop	ebp
	ret	0
_deflate_huff ENDP
_TEXT	ENDS
PUBLIC	_deflateReset
EXTRN	__tr_init:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateReset PROC
; Line 355
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 359
	mov	edi, DWORD PTR _strm$[ebp]
	xor	ebx, ebx
	cmp	edi, ebx
	je	SHORT $LN2@deflateRes
	mov	esi, DWORD PTR [edi+28]
	cmp	esi, ebx
	je	SHORT $LN2@deflateRes
	cmp	DWORD PTR [edi+32], ebx
	je	SHORT $LN2@deflateRes
	cmp	DWORD PTR [edi+36], ebx
	je	SHORT $LN2@deflateRes
; Line 363
	mov	DWORD PTR [edi+20], ebx
	mov	DWORD PTR [edi+8], ebx
; Line 364
	mov	DWORD PTR [edi+24], ebx
; Line 365
	mov	DWORD PTR [edi+44], 2
; Line 369
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+16], eax
; Line 371
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [esi+20], ebx
	cmp	eax, ebx
	jge	SHORT $LN1@deflateRes
; Line 372
	neg	eax
	mov	DWORD PTR [esi+24], eax
$LN1@deflateRes:
; Line 374
	mov	eax, DWORD PTR [esi+24]
	mov	ecx, eax
	neg	ecx
	sbb	ecx, ecx
	and	ecx, -71				; ffffffb9H
; Line 379
	push	ebx
	add	ecx, 113				; 00000071H
	push	ebx
	mov	DWORD PTR [esi+4], ecx
	push	ebx
	cmp	eax, 2
	jne	SHORT $LN6@deflateRes
	call	_crc32
	jmp	SHORT $LN8@deflateRes
$LN6@deflateRes:
	call	_adler32
$LN8@deflateRes:
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+48], eax
; Line 382
	push	esi
	mov	DWORD PTR [esi+40], ebx
	call	__tr_init
	add	esp, 4
; Line 383
	call	_lm_init
	pop	edi
	pop	esi
; Line 385
	xor	eax, eax
	pop	ebx
; Line 386
	pop	ebp
	ret	0
$LN2@deflateRes:
	pop	edi
	pop	esi
; Line 360
	mov	eax, -2					; fffffffeH
	pop	ebx
; Line 386
	pop	ebp
	ret	0
_deflateReset ENDP
_TEXT	ENDS
PUBLIC	_deflate
EXTRN	__tr_stored_block:PROC
EXTRN	__tr_align:PROC
EXTRN	_z_errmsg:BYTE
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_old_flush$ = -4					; size = 4
tv1136 = 8						; size = 4
_beg$4111 = 8						; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_deflate PROC
; Line 585
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
; Line 590
	mov	edi, DWORD PTR _strm$[ebp]
	test	edi, edi
	je	$LN82@deflate
	mov	esi, DWORD PTR [edi+28]
	test	esi, esi
	je	$LN82@deflate
	mov	ecx, DWORD PTR _flush$[ebp]
	cmp	ecx, 5
	ja	$LN82@deflate
; Line 597
	cmp	DWORD PTR [edi+12], 0
	je	$LN80@deflate
	cmp	DWORD PTR [edi], 0
	jne	SHORT $LN79@deflate
	cmp	DWORD PTR [edi+4], 0
	jne	$LN80@deflate
$LN79@deflate:
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, 666				; 0000029aH
	jne	SHORT $LN81@deflate
	cmp	ecx, 4
	jne	$LN80@deflate
$LN81@deflate:
; Line 600
	cmp	DWORD PTR [edi+16], 0
	jne	SHORT $LN78@deflate
	mov	eax, DWORD PTR _z_errmsg+28
	mov	DWORD PTR [edi+24], eax
	pop	edi
	mov	eax, -5					; fffffffbH
	pop	esi
; Line 892
	mov	esp, ebp
	pop	ebp
	ret	0
$LN78@deflate:
; Line 603
	mov	edx, DWORD PTR [esi+40]
	push	ebx
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR _old_flush$[ebp], edx
; Line 604
	mov	DWORD PTR [esi+40], ecx
; Line 607
	mov	ebx, 1
	cmp	eax, 42					; 0000002aH
	jne	$LN71@deflate
; Line 609
	mov	edx, 2
	cmp	DWORD PTR [esi+24], edx
	jne	$LN76@deflate
; Line 610
	push	0
	push	0
	push	0
	call	_crc32
	mov	DWORD PTR [edi+48], eax
; Line 611
	mov	ecx, DWORD PTR [esi+20]
	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], 31			; 0000001fH
	add	DWORD PTR [esi+20], ebx
	mov	eax, DWORD PTR [esi+20]
; Line 612
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+edx], 139			; 0000008bH
	add	DWORD PTR [esi+20], ebx
	mov	eax, DWORD PTR [esi+20]
; Line 613
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], 8
	add	DWORD PTR [esi+20], ebx
; Line 614
	mov	eax, DWORD PTR [esi+28]
	mov	ecx, DWORD PTR [esi+20]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1136[ebp], ecx
	test	eax, eax
	jne	$LN75@deflate
; Line 615
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR [ecx+edx], al
	add	DWORD PTR [esi+20], ebx
	mov	eax, DWORD PTR [esi+20]
; Line 616
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], 0
	add	DWORD PTR [esi+20], ebx
	mov	eax, DWORD PTR [esi+20]
; Line 617
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+edx], 0
	add	DWORD PTR [esi+20], ebx
	mov	eax, DWORD PTR [esi+20]
; Line 618
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], 0
	add	DWORD PTR [esi+20], ebx
	mov	eax, DWORD PTR [esi+20]
; Line 619
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+edx], 0
	add	DWORD PTR [esi+20], ebx
; Line 622
	mov	eax, DWORD PTR [esi+132]
	mov	ecx, DWORD PTR [esi+20]
	cmp	eax, 9
	jne	SHORT $LN88@deflate
	lea	eax, DWORD PTR [ebx+1]
	jmp	SHORT $LN87@deflate
$LN88@deflate:
	cmp	DWORD PTR [esi+136], 2
	jge	SHORT $LN86@deflate
	cmp	eax, 2
	jl	SHORT $LN86@deflate
	xor	eax, eax
	jmp	SHORT $LN87@deflate
$LN86@deflate:
	mov	eax, 4
$LN87@deflate:
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR [ecx+edx], al
	add	DWORD PTR [esi+20], ebx
	mov	eax, DWORD PTR [esi+20]
; Line 623
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], 11			; 0000000bH
	add	DWORD PTR [esi+20], ebx
; Line 624
	mov	DWORD PTR [esi+4], 113			; 00000071H
; Line 626
	jmp	$LN71@deflate
$LN75@deflate:
; Line 632
	mov	edx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [eax+44]
	neg	edx
	sbb	dl, dl
	and	dl, 16					; 00000010H
	neg	ecx
	sbb	cl, cl
	and	cl, 2
	add	dl, cl
	mov	ecx, DWORD PTR [eax+28]
	neg	ecx
	sbb	cl, cl
	and	cl, 8
	add	dl, cl
	mov	ecx, DWORD PTR [eax+16]
	neg	ecx
	sbb	cl, cl
	and	cl, 4
	add	dl, cl
	cmp	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR [esi+8]
	setne	al
	add	dl, al
	mov	eax, DWORD PTR tv1136[ebp]
	mov	BYTE PTR [eax+ecx], dl
	add	DWORD PTR [esi+20], ebx
	mov	eax, DWORD PTR [esi+20]
; Line 633
	mov	ecx, DWORD PTR [esi+28]
	movzx	ecx, BYTE PTR [ecx+4]
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+edx], cl
	add	DWORD PTR [esi+20], ebx
; Line 634
	mov	edx, DWORD PTR [esi+28]
	movzx	edx, BYTE PTR [edx+5]
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], dl
	add	DWORD PTR [esi+20], ebx
; Line 635
	mov	ecx, DWORD PTR [esi+28]
	movzx	ecx, BYTE PTR [ecx+6]
	mov	eax, DWORD PTR [esi+20]
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+edx], cl
	add	DWORD PTR [esi+20], ebx
; Line 636
	mov	edx, DWORD PTR [esi+28]
	movzx	edx, BYTE PTR [edx+7]
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], dl
	add	DWORD PTR [esi+20], ebx
; Line 639
	mov	eax, DWORD PTR [esi+132]
	mov	ecx, DWORD PTR [esi+20]
	cmp	eax, 9
	jne	SHORT $LN92@deflate
	mov	eax, 2
	jmp	SHORT $LN91@deflate
$LN92@deflate:
	cmp	DWORD PTR [esi+136], 2
	jge	SHORT $LN90@deflate
	cmp	eax, 2
	jl	SHORT $LN90@deflate
	xor	eax, eax
	jmp	SHORT $LN91@deflate
$LN90@deflate:
	mov	eax, 4
$LN91@deflate:
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR [ecx+edx], al
	add	DWORD PTR [esi+20], ebx
; Line 640
	mov	ecx, DWORD PTR [esi+28]
	mov	eax, DWORD PTR [esi+20]
	mov	cl, BYTE PTR [ecx+12]
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+edx], cl
	add	DWORD PTR [esi+20], ebx
; Line 641
	mov	eax, DWORD PTR [esi+28]
	cmp	DWORD PTR [eax+16], 0
	mov	ecx, DWORD PTR [esi+20]
	je	SHORT $LN73@deflate
; Line 642
	mov	al, BYTE PTR [eax+20]
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR [ecx+edx], al
	add	DWORD PTR [esi+20], ebx
; Line 643
	mov	ecx, DWORD PTR [esi+28]
	mov	cl, BYTE PTR [ecx+21]
	mov	eax, DWORD PTR [esi+20]
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+edx], cl
	add	DWORD PTR [esi+20], ebx
	mov	ecx, DWORD PTR [esi+20]
$LN73@deflate:
; Line 645
	mov	edx, DWORD PTR [esi+28]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN72@deflate
; Line 647
	mov	eax, DWORD PTR [esi+8]
	push	ecx
	mov	ecx, DWORD PTR [edi+48]
	push	eax
	push	ecx
	call	_crc32
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+48], eax
$LN72@deflate:
; Line 648
	mov	DWORD PTR [esi+32], 0
; Line 649
	mov	DWORD PTR [esi+4], 69			; 00000045H
; Line 652
	jmp	$LN71@deflate
$LN76@deflate:
; Line 655
	mov	ecx, DWORD PTR [esi+48]
	sub	ecx, 8
	shl	ecx, 12					; 0000000cH
	add	ecx, 2048				; 00000800H
; Line 658
	cmp	DWORD PTR [esi+136], edx
	jge	SHORT $LN69@deflate
	mov	eax, DWORD PTR [esi+132]
	cmp	eax, edx
	jl	SHORT $LN69@deflate
; Line 660
	cmp	eax, 6
	jge	SHORT $LN67@deflate
; Line 661
	mov	eax, ebx
	jmp	SHORT $LN64@deflate
$LN67@deflate:
; Line 662
	xor	edx, edx
	cmp	eax, 6
	setne	dl
	lea	eax, DWORD PTR [edx+2]
; Line 665
	jmp	SHORT $LN64@deflate
$LN69@deflate:
; Line 659
	xor	eax, eax
$LN64@deflate:
; Line 666
	shl	eax, 6
	or	ecx, eax
; Line 667
	cmp	DWORD PTR [esi+108], 0
	je	SHORT $LN63@deflate
	or	ecx, 32					; 00000020H
$LN63@deflate:
; Line 668
	mov	eax, 138547333				; 08421085H
	mul	ecx
	sub	ecx, edx
	shr	ecx, 1
	lea	eax, DWORD PTR [edx+ecx]
	shr	eax, 4
; Line 671
	add	eax, ebx
	mov	ecx, eax
	shl	ecx, 5
	sub	ecx, eax
	mov	eax, esi
	mov	DWORD PTR [esi+4], 113			; 00000071H
	call	_putShortMSB
; Line 674
	cmp	DWORD PTR [esi+108], 0
	je	SHORT $LN62@deflate
; Line 675
	movzx	ecx, WORD PTR [edi+50]
	call	_putShortMSB
; Line 676
	movzx	ecx, WORD PTR [edi+48]
	call	_putShortMSB
$LN62@deflate:
; Line 678
	push	0
	push	0
	push	0
	call	_adler32
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+48], eax
$LN71@deflate:
; Line 682
	cmp	DWORD PTR [esi+4], 69			; 00000045H
	jne	$LN110@deflate
; Line 683
	mov	eax, DWORD PTR [esi+28]
	cmp	DWORD PTR [eax+16], 0
	je	$LN60@deflate
; Line 686
	movzx	eax, WORD PTR [eax+20]
	mov	ecx, DWORD PTR [esi+20]
	mov	DWORD PTR _beg$4111[ebp], ecx
	cmp	DWORD PTR [esi+32], eax
	jae	SHORT $LN101@deflate
$LL59@deflate:
; Line 687
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, DWORD PTR [esi+12]
	jne	SHORT $LN55@deflate
; Line 688
	mov	edx, DWORD PTR [esi+28]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN56@deflate
	cmp	eax, ecx
	jbe	SHORT $LN56@deflate
; Line 690
	sub	eax, ecx
	push	eax
	mov	eax, DWORD PTR [esi+8]
	add	eax, ecx
	mov	ecx, DWORD PTR [edi+48]
	push	eax
	push	ecx
	call	_crc32
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+48], eax
$LN56@deflate:
; Line 691
	mov	eax, edi
	call	_flush_pending
; Line 692
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, eax
	mov	DWORD PTR _beg$4111[ebp], ecx
; Line 693
	cmp	eax, DWORD PTR [esi+12]
	je	SHORT $LN101@deflate
$LN55@deflate:
; Line 696
	mov	edx, DWORD PTR [esi+28]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [esi+32]
	mov	cl, BYTE PTR [ecx+edx]
	mov	ebx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ebx], cl
	mov	ecx, DWORD PTR _beg$4111[ebp]
	mov	eax, 1
	add	DWORD PTR [esi+20], eax
; Line 697
	add	DWORD PTR [esi+32], eax
	mov	edx, DWORD PTR [esi+28]
	movzx	eax, WORD PTR [edx+20]
	cmp	DWORD PTR [esi+32], eax
	jb	SHORT $LL59@deflate
$LN101@deflate:
; Line 699
	mov	edx, DWORD PTR [esi+28]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN54@deflate
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, ecx
	jbe	SHORT $LN54@deflate
; Line 701
	sub	eax, ecx
	push	eax
	mov	eax, DWORD PTR [esi+8]
	add	eax, ecx
	mov	ecx, DWORD PTR [edi+48]
	push	eax
	push	ecx
	call	_crc32
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+48], eax
$LN54@deflate:
; Line 702
	mov	edx, DWORD PTR [esi+28]
	mov	eax, DWORD PTR [esi+32]
	cmp	eax, DWORD PTR [edx+20]
	jne	SHORT $LN110@deflate
; Line 703
	mov	DWORD PTR [esi+32], 0
$LN60@deflate:
; Line 708
	mov	DWORD PTR [esi+4], 73			; 00000049H
$LN110@deflate:
; Line 710
	cmp	DWORD PTR [esi+4], 73			; 00000049H
	jne	$LN41@deflate
; Line 711
	mov	ecx, DWORD PTR [esi+28]
	cmp	DWORD PTR [ecx+28], 0
	je	$LN50@deflate
; Line 712
	mov	edx, DWORD PTR [esi+20]
	npad	1
$LL49@deflate:
; Line 716
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, DWORD PTR [esi+12]
	jne	SHORT $LN44@deflate
; Line 717
	mov	ecx, DWORD PTR [esi+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN45@deflate
	cmp	eax, edx
	jbe	SHORT $LN45@deflate
; Line 719
	mov	ecx, DWORD PTR [edi+48]
	sub	eax, edx
	push	eax
	mov	eax, DWORD PTR [esi+8]
	add	eax, edx
	push	eax
	push	ecx
	call	_crc32
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+48], eax
$LN45@deflate:
; Line 720
	mov	eax, edi
	call	_flush_pending
; Line 721
	mov	eax, DWORD PTR [esi+20]
	mov	edx, eax
; Line 722
	cmp	eax, DWORD PTR [esi+12]
	je	SHORT $LN102@deflate
$LN44@deflate:
; Line 727
	mov	ecx, DWORD PTR [esi+32]
	mov	ebx, DWORD PTR [esi+28]
	mov	ebx, DWORD PTR [ebx+28]
	movzx	ebx, BYTE PTR [ebx+ecx]
	inc	ecx
	mov	DWORD PTR [esi+32], ecx
; Line 728
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], bl
	inc	DWORD PTR [esi+20]
; Line 729
	test	ebx, ebx
	jne	SHORT $LL49@deflate
	jmp	SHORT $LN47@deflate
$LN102@deflate:
; Line 723
	mov	ebx, 1
$LN47@deflate:
; Line 730
	mov	eax, DWORD PTR [esi+28]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN43@deflate
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, edx
	jbe	SHORT $LN43@deflate
; Line 732
	mov	ecx, DWORD PTR [esi+8]
	sub	eax, edx
	push	eax
	add	ecx, edx
	mov	edx, DWORD PTR [edi+48]
	push	ecx
	push	edx
	call	_crc32
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+48], eax
$LN43@deflate:
; Line 733
	test	ebx, ebx
	jne	SHORT $LN41@deflate
; Line 734
	mov	DWORD PTR [esi+32], ebx
$LN50@deflate:
; Line 739
	mov	DWORD PTR [esi+4], 91			; 0000005bH
$LN41@deflate:
; Line 741
	cmp	DWORD PTR [esi+4], 91			; 0000005bH
	jne	$LN30@deflate
; Line 742
	mov	eax, DWORD PTR [esi+28]
	cmp	DWORD PTR [eax+36], 0
	je	$LN39@deflate
; Line 743
	mov	edx, DWORD PTR [esi+20]
$LL38@deflate:
; Line 747
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, DWORD PTR [esi+12]
	jne	SHORT $LN33@deflate
; Line 748
	mov	ecx, DWORD PTR [esi+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN34@deflate
	cmp	eax, edx
	jbe	SHORT $LN34@deflate
; Line 750
	mov	ecx, DWORD PTR [edi+48]
	sub	eax, edx
	push	eax
	mov	eax, DWORD PTR [esi+8]
	add	eax, edx
	push	eax
	push	ecx
	call	_crc32
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+48], eax
$LN34@deflate:
; Line 751
	mov	eax, edi
	call	_flush_pending
; Line 752
	mov	eax, DWORD PTR [esi+20]
	mov	edx, eax
; Line 753
	cmp	eax, DWORD PTR [esi+12]
	je	SHORT $LN103@deflate
$LN33@deflate:
; Line 758
	mov	ecx, DWORD PTR [esi+32]
	mov	ebx, DWORD PTR [esi+28]
	mov	ebx, DWORD PTR [ebx+36]
	movzx	ebx, BYTE PTR [ebx+ecx]
	inc	ecx
	mov	DWORD PTR [esi+32], ecx
; Line 759
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], bl
	inc	DWORD PTR [esi+20]
; Line 760
	test	ebx, ebx
	jne	SHORT $LL38@deflate
	jmp	SHORT $LN36@deflate
$LN103@deflate:
; Line 754
	mov	ebx, 1
$LN36@deflate:
; Line 761
	mov	eax, DWORD PTR [esi+28]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN32@deflate
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, edx
	jbe	SHORT $LN32@deflate
; Line 763
	mov	ecx, DWORD PTR [esi+8]
	sub	eax, edx
	push	eax
	add	ecx, edx
	mov	edx, DWORD PTR [edi+48]
	push	ecx
	push	edx
	call	_crc32
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+48], eax
$LN32@deflate:
; Line 764
	test	ebx, ebx
	jne	SHORT $LN30@deflate
$LN39@deflate:
; Line 768
	mov	DWORD PTR [esi+4], 103			; 00000067H
$LN30@deflate:
; Line 770
	cmp	DWORD PTR [esi+4], 103			; 00000067H
	jne	SHORT $LN25@deflate
; Line 771
	mov	eax, DWORD PTR [esi+28]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN28@deflate
; Line 772
	mov	ecx, DWORD PTR [esi+20]
	add	ecx, 2
	cmp	ecx, DWORD PTR [esi+12]
	jbe	SHORT $LN27@deflate
; Line 773
	mov	eax, edi
	call	_flush_pending
$LN27@deflate:
; Line 774
	mov	eax, DWORD PTR [esi+20]
	lea	edx, DWORD PTR [eax+2]
	cmp	edx, DWORD PTR [esi+12]
	ja	SHORT $LN25@deflate
; Line 775
	mov	dl, BYTE PTR [edi+48]
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], dl
; Line 776
	mov	edx, DWORD PTR [esi+8]
	mov	ecx, 1
	add	DWORD PTR [esi+20], ecx
	mov	eax, DWORD PTR [esi+20]
	mov	bl, BYTE PTR [edi+49]
; Line 777
	push	0
	push	0
	mov	BYTE PTR [eax+edx], bl
	add	DWORD PTR [esi+20], ecx
	push	0
	call	_crc32
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+48], eax
$LN28@deflate:
; Line 782
	mov	DWORD PTR [esi+4], 113			; 00000071H
$LN25@deflate:
; Line 787
	cmp	DWORD PTR [esi+20], 0
	je	SHORT $LN24@deflate
; Line 788
	mov	eax, edi
	call	_flush_pending
; Line 789
	cmp	DWORD PTR [edi+16], 0
	jne	SHORT $LN108@deflate
; Line 858
	mov	DWORD PTR [esi+40], -1
$LN13@deflate:
	pop	ebx
	pop	edi
; Line 859
	xor	eax, eax
	pop	esi
; Line 892
	mov	esp, ebp
	pop	ebp
	ret	0
$LN24@deflate:
; Line 805
	cmp	DWORD PTR [edi+4], 0
	mov	ecx, DWORD PTR _flush$[ebp]
	jne	SHORT $LN21@deflate
	cmp	ecx, DWORD PTR _old_flush$[ebp]
	jg	SHORT $LN21@deflate
	cmp	ecx, 4
	je	SHORT $LN21@deflate
; Line 806
	mov	eax, DWORD PTR _z_errmsg+28
	pop	ebx
	mov	DWORD PTR [edi+24], eax
	pop	edi
	mov	eax, -5					; fffffffbH
	pop	esi
; Line 892
	mov	esp, ebp
	pop	ebp
	ret	0
$LN108@deflate:
; Line 805
	mov	ecx, DWORD PTR _flush$[ebp]
$LN21@deflate:
; Line 810
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, 666				; 0000029aH
	jne	SHORT $LN20@deflate
	cmp	DWORD PTR [edi+4], 0
	je	SHORT $LN113@deflate
; Line 811
	mov	ecx, DWORD PTR _z_errmsg+28
	pop	ebx
	mov	DWORD PTR [edi+24], ecx
	pop	edi
	mov	eax, -5					; fffffffbH
	pop	esi
; Line 892
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@deflate:
; Line 817
	cmp	DWORD PTR [edi+4], 0
	jne	SHORT $LN18@deflate
$LN113@deflate:
	cmp	DWORD PTR [esi+116], 0
	jne	SHORT $LN18@deflate
	test	ecx, ecx
	je	$LN109@deflate
	cmp	eax, 666				; 0000029aH
	je	$LN109@deflate
$LN18@deflate:
; Line 822
	mov	eax, DWORD PTR [esi+136]
	push	ecx
	cmp	eax, 2
	jne	SHORT $LN96@deflate
	mov	eax, esi
	call	_deflate_huff
	add	esp, 4
	jmp	SHORT $LN95@deflate
$LN96@deflate:
	cmp	eax, 3
	jne	SHORT $LN94@deflate
	mov	eax, esi
	call	_deflate_rle
	add	esp, 4
	jmp	SHORT $LN95@deflate
$LN94@deflate:
	mov	eax, DWORD PTR [esi+132]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _configuration_table[edx*4+8]
	push	esi
	call	eax
	add	esp, 8
$LN95@deflate:
; Line 824
	cmp	eax, 2
	je	SHORT $LN16@deflate
	cmp	eax, 3
	jne	SHORT $LN17@deflate
$LN16@deflate:
; Line 825
	mov	DWORD PTR [esi+4], 666			; 0000029aH
$LN17@deflate:
; Line 827
	test	eax, eax
	je	$LN14@deflate
	cmp	eax, 2
	je	$LN14@deflate
; Line 840
	mov	ebx, 1
	cmp	eax, ebx
	jne	SHORT $LN6@deflate
; Line 841
	mov	eax, DWORD PTR _flush$[ebp]
	cmp	eax, ebx
	jne	SHORT $LN11@deflate
; Line 842
	push	esi
	call	__tr_align
	add	esp, 4
	jmp	SHORT $LN7@deflate
$LN11@deflate:
; Line 843
	cmp	eax, 5
	je	SHORT $LN7@deflate
; Line 844
	push	0
	push	0
	push	0
	push	esi
	call	__tr_stored_block
	add	esp, 16					; 00000010H
; Line 848
	cmp	DWORD PTR _flush$[ebp], 3
	jne	SHORT $LN7@deflate
; Line 849
	mov	ecx, DWORD PTR [esi+76]
	mov	edx, DWORD PTR [esi+68]
	xor	eax, eax
	mov	WORD PTR [edx+ecx*2-2], ax
	mov	ecx, DWORD PTR [esi+76]
	lea	edx, DWORD PTR [ecx+ecx-2]
	push	edx
	push	eax
	mov	eax, DWORD PTR [esi+68]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 850
	cmp	DWORD PTR [esi+116], 0
	jne	SHORT $LN7@deflate
; Line 851
	xor	eax, eax
	mov	DWORD PTR [esi+108], eax
; Line 852
	mov	DWORD PTR [esi+92], eax
$LN7@deflate:
; Line 856
	mov	eax, edi
	call	_flush_pending
; Line 857
	cmp	DWORD PTR [edi+16], 0
	jne	SHORT $LN6@deflate
; Line 858
	pop	ebx
	pop	edi
	mov	DWORD PTR [esi+40], -1
; Line 859
	xor	eax, eax
	pop	esi
; Line 892
	mov	esp, ebp
	pop	ebp
	ret	0
$LN109@deflate:
; Line 857
	mov	ebx, 1
$LN6@deflate:
; Line 865
	cmp	DWORD PTR _flush$[ebp], 4
	jne	$LN13@deflate
; Line 866
	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
	jg	SHORT $LN4@deflate
	mov	eax, ebx
	pop	ebx
	pop	edi
	pop	esi
; Line 892
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@deflate:
; Line 870
	cmp	eax, 2
	jne	$LN3@deflate
; Line 871
	mov	edx, DWORD PTR [esi+20]
	mov	al, BYTE PTR [edi+48]
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [ecx+edx], al
	add	DWORD PTR [esi+20], ebx
; Line 872
	movzx	edx, BYTE PTR [edi+49]
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], dl
	add	DWORD PTR [esi+20], ebx
; Line 873
	movzx	edx, BYTE PTR [edi+50]
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], dl
	add	DWORD PTR [esi+20], ebx
; Line 874
	movzx	edx, BYTE PTR [edi+51]
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], dl
	add	DWORD PTR [esi+20], ebx
; Line 875
	movzx	edx, BYTE PTR [edi+8]
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], dl
	add	DWORD PTR [esi+20], ebx
; Line 876
	movzx	edx, BYTE PTR [edi+9]
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], dl
	add	DWORD PTR [esi+20], ebx
; Line 877
	movzx	edx, BYTE PTR [edi+10]
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], dl
	add	DWORD PTR [esi+20], ebx
; Line 878
	movzx	edx, BYTE PTR [edi+11]
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], dl
	add	DWORD PTR [esi+20], ebx
; Line 880
	jmp	SHORT $LN2@deflate
$LN3@deflate:
; Line 883
	movzx	ecx, WORD PTR [edi+50]
	mov	eax, esi
	call	_putShortMSB
; Line 884
	movzx	ecx, WORD PTR [edi+48]
	call	_putShortMSB
$LN2@deflate:
; Line 886
	mov	eax, edi
	call	_flush_pending
; Line 890
	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
	jle	SHORT $LN1@deflate
	neg	eax
	mov	DWORD PTR [esi+24], eax
$LN1@deflate:
; Line 891
	xor	eax, eax
	cmp	DWORD PTR [esi+20], eax
	pop	ebx
	pop	edi
	sete	al
	pop	esi
; Line 892
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@deflate:
; Line 828
	cmp	DWORD PTR [edi+16], 0
	jne	$LN13@deflate
; Line 858
	pop	ebx
	pop	edi
	mov	DWORD PTR [esi+40], -1
; Line 859
	xor	eax, eax
	pop	esi
; Line 892
	mov	esp, ebp
	pop	ebp
	ret	0
$LN80@deflate:
; Line 598
	mov	eax, DWORD PTR _z_errmsg+16
	mov	DWORD PTR [edi+24], eax
$LN82@deflate:
	pop	edi
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 892
	mov	esp, ebp
	pop	ebp
	ret	0
_deflate ENDP
_TEXT	ENDS
PUBLIC	_deflateInit2_
EXTRN	_zcfree:PROC
EXTRN	_zcalloc:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_wrap$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
_version$ = 32						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_ PROC
; Line 220
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 231
	mov	eax, DWORD PTR _version$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR _wrap$[ebp], 1
	cmp	eax, ecx
	je	$LN14@deflateIni
	cmp	BYTE PTR [eax], 49			; 00000031H
	jne	$LN14@deflateIni
	cmp	DWORD PTR _stream_size$[ebp], 56	; 00000038H
	jne	$LN14@deflateIni
; Line 234
	push	edi
	mov	edi, DWORD PTR _strm$[ebp]
	cmp	edi, ecx
	jne	SHORT $LN13@deflateIni
	lea	eax, DWORD PTR [ecx-2]
	pop	edi
; Line 308
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@deflateIni:
; Line 236
	mov	DWORD PTR [edi+24], ecx
; Line 237
	cmp	DWORD PTR [edi+32], ecx
	jne	SHORT $LN12@deflateIni
; Line 238
	mov	DWORD PTR [edi+32], OFFSET _zcalloc
; Line 239
	mov	DWORD PTR [edi+40], ecx
$LN12@deflateIni:
; Line 241
	cmp	DWORD PTR [edi+36], ecx
	jne	SHORT $LN11@deflateIni
	mov	DWORD PTR [edi+36], OFFSET _zcfree
$LN11@deflateIni:
; Line 246
	cmp	DWORD PTR _level$[ebp], -1
	jne	SHORT $LN10@deflateIni
	mov	DWORD PTR _level$[ebp], 6
$LN10@deflateIni:
	push	ebx
; Line 249
	mov	ebx, DWORD PTR _windowBits$[ebp]
	cmp	ebx, ecx
	jge	SHORT $LN9@deflateIni
; Line 250
	mov	DWORD PTR _wrap$[ebp], ecx
; Line 251
	neg	ebx
	jmp	SHORT $LN21@deflateIni
$LN9@deflateIni:
; Line 254
	cmp	ebx, 15					; 0000000fH
	jle	SHORT $LN7@deflateIni
; Line 255
	mov	DWORD PTR _wrap$[ebp], 2
; Line 256
	sub	ebx, 16					; 00000010H
$LN21@deflateIni:
	mov	DWORD PTR _windowBits$[ebp], ebx
$LN7@deflateIni:
; Line 261
	mov	eax, DWORD PTR _memLevel$[ebp]
	dec	eax
	cmp	eax, 8
	ja	$LN5@deflateIni
	cmp	DWORD PTR _method$[ebp], 8
	jne	$LN5@deflateIni
	lea	ecx, DWORD PTR [ebx-8]
	cmp	ecx, 7
	ja	$LN5@deflateIni
	mov	eax, 9
	cmp	DWORD PTR _level$[ebp], eax
	ja	$LN5@deflateIni
	cmp	DWORD PTR _strategy$[ebp], 4
	ja	$LN5@deflateIni
; Line 264
	cmp	ebx, 8
	jne	SHORT $LN4@deflateIni
	mov	DWORD PTR _windowBits$[ebp], eax
	mov	ebx, eax
$LN4@deflateIni:
; Line 265
	mov	edx, DWORD PTR [edi+40]
	mov	eax, DWORD PTR [edi+32]
	push	esi
	push	5828					; 000016c4H
	push	1
	push	edx
	call	eax
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 266
	test	esi, esi
	je	$LN22@deflateIni
; Line 270
	mov	ecx, DWORD PTR _wrap$[ebp]
	mov	DWORD PTR [edi+28], esi
	mov	DWORD PTR [esi+24], ecx
; Line 273
	mov	ecx, DWORD PTR _windowBits$[ebp]
	mov	DWORD PTR [esi+48], ebx
	mov	ebx, 1
	shl	ebx, cl
; Line 276
	mov	ecx, DWORD PTR _memLevel$[ebp]
	add	ecx, 7
; Line 277
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR [esi+80], ecx
	lea	edx, DWORD PTR [ebx-1]
	mov	DWORD PTR [esi+52], edx
	mov	DWORD PTR [esi+76], eax
; Line 278
	dec	eax
	mov	DWORD PTR [esi+84], eax
; Line 279
	add	ecx, 2
	mov	eax, -1431655765			; aaaaaaabH
	mul	ecx
	shr	edx, 1
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [esi+28], 0
	mov	DWORD PTR [esi+44], ebx
	mov	DWORD PTR [esi+88], edx
; Line 281
	mov	eax, DWORD PTR [edi+40]
	mov	ecx, DWORD PTR [edi+32]
	push	2
	push	ebx
	push	eax
	call	ecx
; Line 282
	mov	edx, DWORD PTR [esi+44]
	mov	DWORD PTR [esi+56], eax
	mov	eax, DWORD PTR [edi+40]
	mov	ecx, DWORD PTR [edi+32]
	push	2
	push	edx
	push	eax
	call	ecx
; Line 283
	mov	edx, DWORD PTR [esi+76]
	mov	DWORD PTR [esi+64], eax
	mov	eax, DWORD PTR [edi+40]
	mov	ecx, DWORD PTR [edi+32]
	push	2
	push	edx
	push	eax
	call	ecx
; Line 287
	mov	ecx, DWORD PTR _memLevel$[ebp]
	mov	DWORD PTR [esi+68], eax
	add	ecx, 6
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR [esi+5824], 0
; Line 289
	push	4
	mov	DWORD PTR [esi+5788], eax
	mov	edx, DWORD PTR [edi+40]
	push	eax
	mov	eax, DWORD PTR [edi+32]
	push	edx
	call	eax
; Line 291
	mov	ecx, DWORD PTR [esi+5788]
	add	esp, 48					; 00000030H
; Line 294
	cmp	DWORD PTR [esi+56], 0
	lea	edx, DWORD PTR [ecx*4]
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], edx
	je	SHORT $LN1@deflateIni
	cmp	DWORD PTR [esi+64], 0
	je	SHORT $LN1@deflateIni
	cmp	DWORD PTR [esi+68], 0
	je	SHORT $LN1@deflateIni
	test	eax, eax
	je	SHORT $LN1@deflateIni
; Line 300
	mov	edx, ecx
	shr	edx, 1
	lea	edx, DWORD PTR [eax+edx*2]
; Line 301
	lea	eax, DWORD PTR [eax+ecx*2]
	add	eax, ecx
; Line 303
	mov	ecx, DWORD PTR _level$[ebp]
	mov	DWORD PTR [esi+5796], edx
; Line 304
	mov	edx, DWORD PTR _strategy$[ebp]
; Line 307
	push	edi
	mov	DWORD PTR [esi+5784], eax
	mov	DWORD PTR [esi+132], ecx
	mov	DWORD PTR [esi+136], edx
	mov	BYTE PTR [esi+36], 8
	call	_deflateReset
	add	esp, 4
	pop	esi
	pop	ebx
	pop	edi
; Line 308
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1@deflateIni:
; Line 295
	mov	DWORD PTR [esi+4], 666			; 0000029aH
; Line 296
	mov	eax, DWORD PTR _z_errmsg+24
; Line 297
	push	edi
	mov	DWORD PTR [edi+24], eax
	call	_deflateEnd
	add	esp, 4
$LN22@deflateIni:
; Line 298
	pop	esi
	pop	ebx
	mov	eax, -4					; fffffffcH
	pop	edi
; Line 308
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@deflateIni:
	pop	ebx
; Line 262
	mov	eax, -2					; fffffffeH
	pop	edi
; Line 308
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@deflateIni:
; Line 232
	mov	eax, -6					; fffffffaH
; Line 308
	mov	esp, ebp
	pop	ebp
	ret	0
_deflateInit2_ ENDP
_TEXT	ENDS
PUBLIC	_deflateParams
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_err$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams PROC
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 421
	mov	edx, DWORD PTR _strm$[ebp]
	push	esi
	mov	DWORD PTR _err$[ebp], 0
	test	edx, edx
	je	$LN7@deflatePar
	mov	esi, DWORD PTR [edx+28]
	test	esi, esi
	je	$LN7@deflatePar
; Line 427
	push	ebx
	push	edi
	mov	edi, DWORD PTR _level$[ebp]
	cmp	edi, -1
	jne	SHORT $LN6@deflatePar
	mov	edi, 6
; Line 429
	jmp	SHORT $LN12@deflatePar
$LN6@deflatePar:
	test	edi, edi
	js	$LN4@deflatePar
	cmp	edi, 9
	jg	$LN4@deflatePar
$LN12@deflatePar:
	mov	ebx, DWORD PTR _strategy$[ebp]
	cmp	ebx, 4
	ja	$LN4@deflatePar
; Line 435
	cmp	ebx, DWORD PTR [esi+136]
	jne	SHORT $LN2@deflatePar
; Line 432
	mov	ecx, DWORD PTR [esi+132]
	lea	eax, DWORD PTR [ecx+ecx*2]
; Line 435
	mov	eax, DWORD PTR _configuration_table[eax*4+8]
	lea	ecx, DWORD PTR [edi+edi*2]
	cmp	eax, DWORD PTR _configuration_table[ecx*4+8]
	je	SHORT $LN13@deflatePar
$LN2@deflatePar:
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN13@deflatePar
; Line 437
	push	5
	push	edx
	call	_deflate
	add	esp, 8
	mov	DWORD PTR _err$[ebp], eax
$LN13@deflatePar:
; Line 439
	cmp	DWORD PTR [esi+132], edi
	je	SHORT $LN1@deflatePar
; Line 441
	lea	ecx, DWORD PTR [edi+edi*2]
	mov	DWORD PTR [esi+132], edi
	add	ecx, ecx
	movzx	edx, WORD PTR _configuration_table[ecx+ecx+2]
	add	ecx, ecx
	mov	DWORD PTR [esi+128], edx
; Line 442
	movzx	eax, WORD PTR _configuration_table[ecx]
	mov	DWORD PTR [esi+140], eax
; Line 443
	movzx	edx, WORD PTR _configuration_table[ecx+4]
	mov	DWORD PTR [esi+144], edx
; Line 444
	movzx	eax, WORD PTR _configuration_table[ecx+6]
	mov	DWORD PTR [esi+124], eax
$LN1@deflatePar:
; Line 447
	mov	eax, DWORD PTR _err$[ebp]
	pop	edi
	mov	DWORD PTR [esi+136], ebx
	pop	ebx
	pop	esi
; Line 448
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@deflatePar:
	pop	edi
	pop	ebx
; Line 430
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 448
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@deflatePar:
; Line 421
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 448
	mov	esp, ebp
	pop	ebp
	ret	0
_deflateParams ENDP
_TEXT	ENDS
PUBLIC	_deflateInit_
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_ PROC
; Line 203
	push	ebp
	mov	ebp, esp
; Line 205
	mov	eax, DWORD PTR _stream_size$[ebp]
	mov	ecx, DWORD PTR _version$[ebp]
	mov	edx, DWORD PTR _level$[ebp]
	push	eax
	mov	eax, DWORD PTR _strm$[ebp]
	push	ecx
	push	0
	push	8
	push	15					; 0000000fH
	push	8
	push	edx
	push	eax
	call	_deflateInit2_
	add	esp, 32					; 00000020H
; Line 207
	pop	ebp
	ret	0
_deflateInit_ ENDP
_TEXT	ENDS
END
