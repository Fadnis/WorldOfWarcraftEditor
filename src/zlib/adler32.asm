; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\programovani\WoW Editor\Test\src\zlib\adler32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_adler32
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv884 = 8						; size = 4
_adler$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_adler32 PROC
; File c:\programovani\wow editor\test\src\zlib\adler32.c
; Line 64
	push	ebp
	mov	ebp, esp
; Line 69
	mov	ecx, DWORD PTR _adler$[ebp]
	push	ebx
; Line 73
	mov	ebx, DWORD PTR _len$[ebp]
	push	edi
	mov	edi, ecx
	shr	edi, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	cmp	ebx, 1
	jne	SHORT $LN18@adler32
; Line 74
	mov	eax, DWORD PTR _buf$[ebp]
	movzx	edx, BYTE PTR [eax]
	add	ecx, edx
; Line 75
	cmp	ecx, 65521				; 0000fff1H
	jb	SHORT $LN17@adler32
; Line 76
	sub	ecx, 65521				; 0000fff1H
$LN17@adler32:
; Line 77
	add	edi, ecx
; Line 78
	cmp	edi, 65521				; 0000fff1H
	jb	SHORT $LN16@adler32
; Line 79
	sub	edi, 65521				; 0000fff1H
$LN16@adler32:
; Line 80
	mov	eax, edi
	shl	eax, 16					; 00000010H
	pop	edi
	or	eax, ecx
	pop	ebx
; Line 128
	pop	ebp
	ret	0
$LN18@adler32:
	push	esi
; Line 84
	mov	esi, DWORD PTR _buf$[ebp]
	test	esi, esi
	jne	SHORT $LN15@adler32
; Line 85
	lea	eax, DWORD PTR [esi+1]
	pop	esi
	pop	edi
	pop	ebx
; Line 128
	pop	ebp
	ret	0
$LN15@adler32:
; Line 88
	cmp	ebx, 16					; 00000010H
	jae	SHORT $LN22@adler32
; Line 89
	test	ebx, ebx
	je	SHORT $LN26@adler32
$LL13@adler32:
; Line 90
	movzx	eax, BYTE PTR [esi]
	add	ecx, eax
	inc	esi
; Line 91
	add	edi, ecx
	dec	ebx
	jne	SHORT $LL13@adler32
$LN26@adler32:
; Line 93
	cmp	ecx, 65521				; 0000fff1H
	jb	SHORT $LN11@adler32
; Line 94
	sub	ecx, 65521				; 0000fff1H
$LN11@adler32:
; Line 95
	mov	eax, -2146992015			; 80078071H
	mul	edi
	shr	edx, 15					; 0000000fH
; Line 96
	mov	eax, edx
	shl	eax, 4
	sub	eax, edx
	add	eax, edi
	pop	esi
; Line 127
	shl	eax, 16					; 00000010H
	pop	edi
	or	eax, ecx
	pop	ebx
; Line 128
	pop	ebp
	ret	0
$LN22@adler32:
; Line 100
	cmp	ebx, 5552				; 000015b0H
	jb	$LN9@adler32
	mov	eax, 1584310703				; 5e6ea9afH
	mul	ebx
	shr	edx, 11					; 0000000bH
	mov	DWORD PTR tv884[ebp], edx
	npad	12
$LL10@adler32:
; Line 101
	sub	ebx, 5552				; 000015b0H
; Line 102
	mov	eax, 347				; 0000015bH
	npad	5
$LL8@adler32:
; Line 104
	movzx	edx, BYTE PTR [esi]
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+1]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+2]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+3]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+4]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+5]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+6]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+7]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+8]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+9]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+10]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+11]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+12]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+13]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+14]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+15]
	add	edi, ecx
	add	ecx, edx
	add	edi, ecx
; Line 105
	add	esi, 16					; 00000010H
; Line 106
	dec	eax
	jne	$LL8@adler32
; Line 107
	mov	eax, -2146992015			; 80078071H
	mul	ecx
	shr	edx, 15					; 0000000fH
	imul	edx, -65521				; ffff000fH
	add	ecx, edx
; Line 108
	mov	eax, -2146992015			; 80078071H
	mul	edi
	shr	edx, 15					; 0000000fH
	imul	edx, -65521				; ffff000fH
	add	edi, edx
	dec	DWORD PTR tv884[ebp]
	jne	$LL10@adler32
$LN9@adler32:
; Line 112
	test	ebx, ebx
	je	$LN5@adler32
; Line 113
	cmp	ebx, 16					; 00000010H
	jb	$LN32@adler32
	mov	eax, ebx
	shr	eax, 4
	npad	4
$LL4@adler32:
; Line 115
	movzx	edx, BYTE PTR [esi]
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+1]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+2]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+3]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+4]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+5]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+6]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+7]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+8]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+9]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+10]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+11]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+12]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+13]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+14]
	add	edi, ecx
	add	ecx, edx
	movzx	edx, BYTE PTR [esi+15]
	add	edi, ecx
	add	ecx, edx
	sub	ebx, 16					; 00000010H
	add	edi, ecx
; Line 116
	add	esi, 16					; 00000010H
	dec	eax
	jne	$LL4@adler32
$LN32@adler32:
; Line 118
	test	ebx, ebx
	je	SHORT $LN30@adler32
$LL2@adler32:
; Line 119
	movzx	eax, BYTE PTR [esi]
	add	ecx, eax
	inc	esi
; Line 120
	add	edi, ecx
	dec	ebx
	jne	SHORT $LL2@adler32
$LN30@adler32:
; Line 122
	mov	eax, -2146992015			; 80078071H
	mul	ecx
	shr	edx, 15					; 0000000fH
	imul	edx, -65521				; ffff000fH
	add	ecx, edx
; Line 123
	mov	eax, -2146992015			; 80078071H
	mul	edi
	shr	edx, 15					; 0000000fH
	imul	edx, -65521				; ffff000fH
	add	edi, edx
$LN5@adler32:
; Line 127
	mov	eax, edi
	pop	esi
	shl	eax, 16					; 00000010H
	pop	edi
	or	eax, ecx
	pop	ebx
; Line 128
	pop	ebp
	ret	0
_adler32 ENDP
; Function compile flags: /Ogtp
_sum1$ = -4						; size = 4
_adler32_combine_ PROC
; _adler1$ = ecx
; _adler2$ = edx
; _len2$ = eax
; Line 135
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, eax
	push	edi
	mov	edi, edx
; Line 141
	mov	eax, -2146992015			; 80078071H
	mul	esi
	shr	edx, 15					; 0000000fH
	imul	edx, 65521				; 0000fff1H
	sub	esi, edx
; Line 142
	movzx	eax, cx
	mov	ebx, esi
; Line 143
	mov	esi, eax
	imul	esi, ebx
; Line 145
	movzx	edx, di
	lea	eax, DWORD PTR [eax+edx+65520]
	mov	DWORD PTR _sum1$[ebp], eax
	mov	eax, -2146992015			; 80078071H
	mul	esi
	shr	edx, 15					; 0000000fH
; Line 146
	imul	edx, 65521				; 0000fff1H
	shr	ecx, 16					; 00000010H
	sub	ecx, edx
	shr	edi, 16					; 00000010H
	add	ecx, edi
	sub	ecx, ebx
	lea	eax, DWORD PTR [esi+ecx+65521]
; Line 147
	mov	ecx, DWORD PTR _sum1$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	cmp	ecx, 65521				; 0000fff1H
	jb	SHORT $LN3@adler32_co
	sub	ecx, 65521				; 0000fff1H
; Line 148
	cmp	ecx, 65521				; 0000fff1H
	jb	SHORT $LN3@adler32_co
	sub	ecx, 65521				; 0000fff1H
$LN3@adler32_co:
; Line 149
	cmp	eax, 131042				; 0001ffe2H
	jb	SHORT $LN2@adler32_co
	sub	eax, 131042				; 0001ffe2H
$LN2@adler32_co:
; Line 150
	cmp	eax, 65521				; 0000fff1H
	jb	SHORT $LN1@adler32_co
	sub	eax, 65521				; 0000fff1H
$LN1@adler32_co:
; Line 151
	shl	eax, 16					; 00000010H
	or	eax, ecx
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
_adler32_combine_ ENDP
_TEXT	ENDS
PUBLIC	_adler32_combine
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_adler1$ = 8						; size = 4
_adler2$ = 12						; size = 4
_len2$ = 16						; size = 4
_adler32_combine PROC
; Line 159
	push	ebp
	mov	ebp, esp
; Line 160
	mov	eax, DWORD PTR _len2$[ebp]
	mov	edx, DWORD PTR _adler2$[ebp]
	mov	ecx, DWORD PTR _adler1$[ebp]
; Line 161
	pop	ebp
; Line 160
	jmp	_adler32_combine_
_adler32_combine ENDP
_TEXT	ENDS
PUBLIC	_adler32_combine64
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_adler1$ = 8						; size = 4
_adler2$ = 12						; size = 4
_len2$ = 16						; size = 4
_adler32_combine64 PROC
; Line 167
	push	ebp
	mov	ebp, esp
; Line 168
	mov	eax, DWORD PTR _len2$[ebp]
	mov	edx, DWORD PTR _adler2$[ebp]
	mov	ecx, DWORD PTR _adler1$[ebp]
; Line 169
	pop	ebp
; Line 168
	jmp	_adler32_combine_
_adler32_combine64 ENDP
_TEXT	ENDS
END
