; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\programovani\WoW Editor\Test\src\zlib\trees.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	__dist_code
PUBLIC	__length_code
_DATA	SEGMENT
_static_l_desc DD FLAT:_static_ltree
	DD	FLAT:_extra_lbits
	DD	0101H
	DD	011eH
	DD	0fH
_static_d_desc DD FLAT:_static_dtree
	DD	FLAT:_extra_dbits
	DD	00H
	DD	01eH
	DD	0fH
_static_bl_desc DD 00H
	DD	FLAT:_extra_blbits
	DD	00H
	DD	013H
	DD	07H
_DATA	ENDS
CONST	SEGMENT
_extra_lbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
_bl_order DB	010H
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
	ORG $+1
_extra_dbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
_extra_blbits DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	03H
	DD	07H
	ORG $+4
_static_ltree DW 0cH
	DW	08H
	DW	08cH
	DW	08H
	DW	04cH
	DW	08H
	DW	0ccH
	DW	08H
	DW	02cH
	DW	08H
	DW	0acH
	DW	08H
	DW	06cH
	DW	08H
	DW	0ecH
	DW	08H
	DW	01cH
	DW	08H
	DW	09cH
	DW	08H
	DW	05cH
	DW	08H
	DW	0dcH
	DW	08H
	DW	03cH
	DW	08H
	DW	0bcH
	DW	08H
	DW	07cH
	DW	08H
	DW	0fcH
	DW	08H
	DW	02H
	DW	08H
	DW	082H
	DW	08H
	DW	042H
	DW	08H
	DW	0c2H
	DW	08H
	DW	022H
	DW	08H
	DW	0a2H
	DW	08H
	DW	062H
	DW	08H
	DW	0e2H
	DW	08H
	DW	012H
	DW	08H
	DW	092H
	DW	08H
	DW	052H
	DW	08H
	DW	0d2H
	DW	08H
	DW	032H
	DW	08H
	DW	0b2H
	DW	08H
	DW	072H
	DW	08H
	DW	0f2H
	DW	08H
	DW	0aH
	DW	08H
	DW	08aH
	DW	08H
	DW	04aH
	DW	08H
	DW	0caH
	DW	08H
	DW	02aH
	DW	08H
	DW	0aaH
	DW	08H
	DW	06aH
	DW	08H
	DW	0eaH
	DW	08H
	DW	01aH
	DW	08H
	DW	09aH
	DW	08H
	DW	05aH
	DW	08H
	DW	0daH
	DW	08H
	DW	03aH
	DW	08H
	DW	0baH
	DW	08H
	DW	07aH
	DW	08H
	DW	0faH
	DW	08H
	DW	06H
	DW	08H
	DW	086H
	DW	08H
	DW	046H
	DW	08H
	DW	0c6H
	DW	08H
	DW	026H
	DW	08H
	DW	0a6H
	DW	08H
	DW	066H
	DW	08H
	DW	0e6H
	DW	08H
	DW	016H
	DW	08H
	DW	096H
	DW	08H
	DW	056H
	DW	08H
	DW	0d6H
	DW	08H
	DW	036H
	DW	08H
	DW	0b6H
	DW	08H
	DW	076H
	DW	08H
	DW	0f6H
	DW	08H
	DW	0eH
	DW	08H
	DW	08eH
	DW	08H
	DW	04eH
	DW	08H
	DW	0ceH
	DW	08H
	DW	02eH
	DW	08H
	DW	0aeH
	DW	08H
	DW	06eH
	DW	08H
	DW	0eeH
	DW	08H
	DW	01eH
	DW	08H
	DW	09eH
	DW	08H
	DW	05eH
	DW	08H
	DW	0deH
	DW	08H
	DW	03eH
	DW	08H
	DW	0beH
	DW	08H
	DW	07eH
	DW	08H
	DW	0feH
	DW	08H
	DW	01H
	DW	08H
	DW	081H
	DW	08H
	DW	041H
	DW	08H
	DW	0c1H
	DW	08H
	DW	021H
	DW	08H
	DW	0a1H
	DW	08H
	DW	061H
	DW	08H
	DW	0e1H
	DW	08H
	DW	011H
	DW	08H
	DW	091H
	DW	08H
	DW	051H
	DW	08H
	DW	0d1H
	DW	08H
	DW	031H
	DW	08H
	DW	0b1H
	DW	08H
	DW	071H
	DW	08H
	DW	0f1H
	DW	08H
	DW	09H
	DW	08H
	DW	089H
	DW	08H
	DW	049H
	DW	08H
	DW	0c9H
	DW	08H
	DW	029H
	DW	08H
	DW	0a9H
	DW	08H
	DW	069H
	DW	08H
	DW	0e9H
	DW	08H
	DW	019H
	DW	08H
	DW	099H
	DW	08H
	DW	059H
	DW	08H
	DW	0d9H
	DW	08H
	DW	039H
	DW	08H
	DW	0b9H
	DW	08H
	DW	079H
	DW	08H
	DW	0f9H
	DW	08H
	DW	05H
	DW	08H
	DW	085H
	DW	08H
	DW	045H
	DW	08H
	DW	0c5H
	DW	08H
	DW	025H
	DW	08H
	DW	0a5H
	DW	08H
	DW	065H
	DW	08H
	DW	0e5H
	DW	08H
	DW	015H
	DW	08H
	DW	095H
	DW	08H
	DW	055H
	DW	08H
	DW	0d5H
	DW	08H
	DW	035H
	DW	08H
	DW	0b5H
	DW	08H
	DW	075H
	DW	08H
	DW	0f5H
	DW	08H
	DW	0dH
	DW	08H
	DW	08dH
	DW	08H
	DW	04dH
	DW	08H
	DW	0cdH
	DW	08H
	DW	02dH
	DW	08H
	DW	0adH
	DW	08H
	DW	06dH
	DW	08H
	DW	0edH
	DW	08H
	DW	01dH
	DW	08H
	DW	09dH
	DW	08H
	DW	05dH
	DW	08H
	DW	0ddH
	DW	08H
	DW	03dH
	DW	08H
	DW	0bdH
	DW	08H
	DW	07dH
	DW	08H
	DW	0fdH
	DW	08H
	DW	013H
	DW	09H
	DW	0113H
	DW	09H
	DW	093H
	DW	09H
	DW	0193H
	DW	09H
	DW	053H
	DW	09H
	DW	0153H
	DW	09H
	DW	0d3H
	DW	09H
	DW	01d3H
	DW	09H
	DW	033H
	DW	09H
	DW	0133H
	DW	09H
	DW	0b3H
	DW	09H
	DW	01b3H
	DW	09H
	DW	073H
	DW	09H
	DW	0173H
	DW	09H
	DW	0f3H
	DW	09H
	DW	01f3H
	DW	09H
	DW	0bH
	DW	09H
	DW	010bH
	DW	09H
	DW	08bH
	DW	09H
	DW	018bH
	DW	09H
	DW	04bH
	DW	09H
	DW	014bH
	DW	09H
	DW	0cbH
	DW	09H
	DW	01cbH
	DW	09H
	DW	02bH
	DW	09H
	DW	012bH
	DW	09H
	DW	0abH
	DW	09H
	DW	01abH
	DW	09H
	DW	06bH
	DW	09H
	DW	016bH
	DW	09H
	DW	0ebH
	DW	09H
	DW	01ebH
	DW	09H
	DW	01bH
	DW	09H
	DW	011bH
	DW	09H
	DW	09bH
	DW	09H
	DW	019bH
	DW	09H
	DW	05bH
	DW	09H
	DW	015bH
	DW	09H
	DW	0dbH
	DW	09H
	DW	01dbH
	DW	09H
	DW	03bH
	DW	09H
	DW	013bH
	DW	09H
	DW	0bbH
	DW	09H
	DW	01bbH
	DW	09H
	DW	07bH
	DW	09H
	DW	017bH
	DW	09H
	DW	0fbH
	DW	09H
	DW	01fbH
	DW	09H
	DW	07H
	DW	09H
	DW	0107H
	DW	09H
	DW	087H
	DW	09H
	DW	0187H
	DW	09H
	DW	047H
	DW	09H
	DW	0147H
	DW	09H
	DW	0c7H
	DW	09H
	DW	01c7H
	DW	09H
	DW	027H
	DW	09H
	DW	0127H
	DW	09H
	DW	0a7H
	DW	09H
	DW	01a7H
	DW	09H
	DW	067H
	DW	09H
	DW	0167H
	DW	09H
	DW	0e7H
	DW	09H
	DW	01e7H
	DW	09H
	DW	017H
	DW	09H
	DW	0117H
	DW	09H
	DW	097H
	DW	09H
	DW	0197H
	DW	09H
	DW	057H
	DW	09H
	DW	0157H
	DW	09H
	DW	0d7H
	DW	09H
	DW	01d7H
	DW	09H
	DW	037H
	DW	09H
	DW	0137H
	DW	09H
	DW	0b7H
	DW	09H
	DW	01b7H
	DW	09H
	DW	077H
	DW	09H
	DW	0177H
	DW	09H
	DW	0f7H
	DW	09H
	DW	01f7H
	DW	09H
	DW	0fH
	DW	09H
	DW	010fH
	DW	09H
	DW	08fH
	DW	09H
	DW	018fH
	DW	09H
	DW	04fH
	DW	09H
	DW	014fH
	DW	09H
	DW	0cfH
	DW	09H
	DW	01cfH
	DW	09H
	DW	02fH
	DW	09H
	DW	012fH
	DW	09H
	DW	0afH
	DW	09H
	DW	01afH
	DW	09H
	DW	06fH
	DW	09H
	DW	016fH
	DW	09H
	DW	0efH
	DW	09H
	DW	01efH
	DW	09H
	DW	01fH
	DW	09H
	DW	011fH
	DW	09H
	DW	09fH
	DW	09H
	DW	019fH
	DW	09H
	DW	05fH
	DW	09H
	DW	015fH
	DW	09H
	DW	0dfH
	DW	09H
	DW	01dfH
	DW	09H
	DW	03fH
	DW	09H
	DW	013fH
	DW	09H
	DW	0bfH
	DW	09H
	DW	01bfH
	DW	09H
	DW	07fH
	DW	09H
	DW	017fH
	DW	09H
	DW	0ffH
	DW	09H
	DW	01ffH
	DW	09H
	DW	00H
	DW	07H
	DW	040H
	DW	07H
	DW	020H
	DW	07H
	DW	060H
	DW	07H
	DW	010H
	DW	07H
	DW	050H
	DW	07H
	DW	030H
	DW	07H
	DW	070H
	DW	07H
	DW	08H
	DW	07H
	DW	048H
	DW	07H
	DW	028H
	DW	07H
	DW	068H
	DW	07H
	DW	018H
	DW	07H
	DW	058H
	DW	07H
	DW	038H
	DW	07H
	DW	078H
	DW	07H
	DW	04H
	DW	07H
	DW	044H
	DW	07H
	DW	024H
	DW	07H
	DW	064H
	DW	07H
	DW	014H
	DW	07H
	DW	054H
	DW	07H
	DW	034H
	DW	07H
	DW	074H
	DW	07H
	DW	03H
	DW	08H
	DW	083H
	DW	08H
	DW	043H
	DW	08H
	DW	0c3H
	DW	08H
	DW	023H
	DW	08H
	DW	0a3H
	DW	08H
	DW	063H
	DW	08H
	DW	0e3H
	DW	08H
_static_dtree DW 00H
	DW	05H
	DW	010H
	DW	05H
	DW	08H
	DW	05H
	DW	018H
	DW	05H
	DW	04H
	DW	05H
	DW	014H
	DW	05H
	DW	0cH
	DW	05H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	012H
	DW	05H
	DW	0aH
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	05H
	DW	016H
	DW	05H
	DW	0eH
	DW	05H
	DW	01eH
	DW	05H
	DW	01H
	DW	05H
	DW	011H
	DW	05H
	DW	09H
	DW	05H
	DW	019H
	DW	05H
	DW	05H
	DW	05H
	DW	015H
	DW	05H
	DW	0dH
	DW	05H
	DW	01dH
	DW	05H
	DW	03H
	DW	05H
	DW	013H
	DW	05H
	DW	0bH
	DW	05H
	DW	01bH
	DW	05H
	DW	07H
	DW	05H
	DW	017H
	DW	05H
__dist_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	010H
	DB	011H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
__length_code DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
_base_length DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	0aH
	DD	0cH
	DD	0eH
	DD	010H
	DD	014H
	DD	018H
	DD	01cH
	DD	020H
	DD	028H
	DD	030H
	DD	038H
	DD	040H
	DD	050H
	DD	060H
	DD	070H
	DD	080H
	DD	0a0H
	DD	0c0H
	DD	0e0H
	DD	00H
	ORG $+4
_base_dist DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	06H
	DD	08H
	DD	0cH
	DD	010H
	DD	018H
	DD	020H
	DD	030H
	DD	040H
	DD	060H
	DD	080H
	DD	0c0H
	DD	0100H
	DD	0180H
	DD	0200H
	DD	0300H
	DD	0400H
	DD	0600H
	DD	0800H
	DD	0c00H
	DD	01000H
	DD	01800H
	DD	02000H
	DD	03000H
	DD	04000H
	DD	06000H
; Function compile flags: /Ogtp
CONST	ENDS
_TEXT	SEGMENT
_tr_static_init PROC
; File c:\programovani\wow editor\test\src\zlib\trees.c
; Line 319
	ret	0
_tr_static_init ENDP
; Function compile flags: /Ogtp
_init_block PROC
; _s$ = edx
; Line 421
	lea	eax, DWORD PTR [edx+148]
	mov	ecx, 286				; 0000011eH
	push	esi
	npad	4
$LL9@init_block:
	xor	esi, esi
	mov	WORD PTR [eax], si
	add	eax, 4
	dec	ecx
	jne	SHORT $LL9@init_block
; Line 422
	lea	eax, DWORD PTR [edx+2440]
	mov	ecx, 30					; 0000001eH
$LL6@init_block:
	xor	esi, esi
	mov	WORD PTR [eax], si
	add	eax, 4
	dec	ecx
	jne	SHORT $LL6@init_block
; Line 423
	lea	eax, DWORD PTR [edx+2684]
	mov	ecx, 19					; 00000013H
	npad	4
$LL3@init_block:
	xor	esi, esi
	mov	WORD PTR [eax], si
	add	eax, 4
	dec	ecx
	jne	SHORT $LL3@init_block
; Line 425
	mov	eax, 1
	mov	WORD PTR [edx+1172], ax
; Line 426
	xor	eax, eax
	mov	DWORD PTR [edx+5804], eax
	mov	DWORD PTR [edx+5800], eax
; Line 427
	mov	DWORD PTR [edx+5808], eax
	mov	DWORD PTR [edx+5792], eax
	pop	esi
; Line 428
	ret	0
_init_block ENDP
; Function compile flags: /Ogtp
_v$ = -4						; size = 4
_k$ = 8							; size = 4
_pqdownheap PROC
; _s$ = eax
; _tree$ = edi
; Line 463
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 466
	mov	edx, DWORD PTR [eax+5200]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _k$[ebp]
	mov	ebx, DWORD PTR [eax+esi*4+2908]
	lea	ecx, DWORD PTR [esi+esi]
	mov	DWORD PTR _v$[ebp], ebx
	cmp	ecx, edx
	jg	$LN14@pqdownheap
$LN17@pqdownheap:
; Line 469
	jge	SHORT $LN16@pqdownheap
	mov	esi, DWORD PTR [eax+ecx*4+2912]
	mov	ebx, DWORD PTR [eax+ecx*4+2908]
	movzx	edx, WORD PTR [edi+esi*4]
	movzx	ebx, WORD PTR [edi+ebx*4]
	cmp	dx, bx
	jb	SHORT $LN3@pqdownheap
	jne	SHORT $LN16@pqdownheap
	mov	dl, BYTE PTR [esi+eax+5208]
	mov	esi, DWORD PTR [eax+ecx*4+2908]
	cmp	dl, BYTE PTR [esi+eax+5208]
	ja	SHORT $LN16@pqdownheap
$LN3@pqdownheap:
; Line 470
	inc	ecx
$LN16@pqdownheap:
; Line 473
	mov	esi, DWORD PTR [eax+ecx*4+2908]
	mov	edx, DWORD PTR _v$[ebp]
	movzx	edx, WORD PTR [edi+edx*4]
	movzx	ebx, WORD PTR [edi+esi*4]
	cmp	dx, bx
	jb	SHORT $LN13@pqdownheap
	jne	SHORT $LN15@pqdownheap
	mov	edx, DWORD PTR _v$[ebp]
	mov	bl, BYTE PTR [edx+eax+5208]
	cmp	bl, BYTE PTR [esi+eax+5208]
	jbe	SHORT $LN12@pqdownheap
$LN15@pqdownheap:
; Line 476
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [eax+edx*4+2908], esi
	mov	edx, DWORD PTR [eax+5200]
	mov	esi, ecx
; Line 479
	add	ecx, ecx
	mov	DWORD PTR _k$[ebp], esi
	cmp	ecx, edx
	jle	SHORT $LN17@pqdownheap
; Line 481
	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR [eax+esi*4+2908], ecx
	pop	esi
	pop	ebx
; Line 482
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@pqdownheap:
; Line 481
	mov	edx, DWORD PTR _v$[ebp]
$LN12@pqdownheap:
	mov	ecx, DWORD PTR _k$[ebp]
	pop	esi
	mov	DWORD PTR [eax+ecx*4+2908], edx
	pop	ebx
; Line 482
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@pqdownheap:
; Line 481
	mov	DWORD PTR [eax+esi*4+2908], ebx
	pop	esi
	pop	ebx
; Line 482
	mov	esp, ebp
	pop	ebp
	ret	0
_pqdownheap ENDP
; Function compile flags: /Ogtp
_tree$ = -40						; size = 4
tv643 = -36						; size = 4
_stree$ = -36						; size = 4
tv671 = -32						; size = 4
_extra$ = -32						; size = 4
_base$ = -28						; size = 4
_max_code$ = -24					; size = 4
tv709 = -20						; size = 4
tv277 = -20						; size = 4
_h$ = -16						; size = 4
tv597 = -12						; size = 4
_n$ = -12						; size = 4
_overflow$ = -8						; size = 4
_max_length$ = -4					; size = 4
_gen_bitlen PROC
; _s$ = eax
; _desc$ = ecx
; Line 497
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
; Line 499
	mov	edx, DWORD PTR [ecx+4]
	push	ebx
	mov	ebx, DWORD PTR [ecx]
; Line 500
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR _max_code$[ebp], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _stree$[ebp], edx
; Line 501
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	DWORD PTR _extra$[ebp], edx
; Line 502
	mov	edx, DWORD PTR [ecx+8]
	push	edi
; Line 503
	mov	edi, DWORD PTR [ecx+16]
; Line 511
	xor	ecx, ecx
	mov	DWORD PTR _base$[ebp], edx
	movzx	edx, cx
	mov	ecx, edx
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	DWORD PTR [eax+2876], ecx
	mov	DWORD PTR [eax+2880], ecx
	mov	DWORD PTR [eax+2884], ecx
	mov	DWORD PTR [eax+2888], ecx
	mov	DWORD PTR [eax+2892], ecx
	mov	DWORD PTR [eax+2896], ecx
	mov	DWORD PTR [eax+2900], ecx
	mov	DWORD PTR [eax+2904], ecx
; Line 516
	mov	ecx, DWORD PTR [eax+5204]
	mov	edx, DWORD PTR [eax+ecx*4+2908]
	xor	ecx, ecx
	mov	WORD PTR [ebx+edx*4+2], cx
; Line 518
	mov	ecx, DWORD PTR [eax+5204]
	xor	esi, esi
	inc	ecx
	mov	DWORD PTR _tree$[ebp], ebx
	mov	DWORD PTR _max_length$[ebp], edi
	mov	DWORD PTR _overflow$[ebp], esi
	cmp	ecx, 573				; 0000023dH
	jge	$LN5@gen_bitlen
; Line 516
	lea	edx, DWORD PTR [eax+ecx*4+2908]
	mov	DWORD PTR tv597[ebp], edx
	mov	edx, 573				; 0000023dH
	sub	edx, ecx
; Line 518
	add	ecx, edx
	mov	DWORD PTR tv277[ebp], edx
	mov	DWORD PTR _h$[ebp], ecx
	npad	1
$LL41@gen_bitlen:
; Line 519
	mov	ecx, DWORD PTR tv597[ebp]
	mov	edx, DWORD PTR [ecx]
; Line 520
	movzx	ecx, WORD PTR [ebx+edx*4+2]
	movzx	ecx, WORD PTR [ebx+ecx*4+2]
	inc	ecx
; Line 521
	cmp	ecx, edi
	jle	SHORT $LN17@gen_bitlen
	inc	esi
	mov	ecx, edi
	mov	DWORD PTR _overflow$[ebp], esi
$LN17@gen_bitlen:
; Line 522
	mov	WORD PTR [ebx+edx*4+2], cx
; Line 525
	cmp	edx, DWORD PTR _max_code$[ebp]
	jg	SHORT $LN19@gen_bitlen
; Line 529
	mov	edi, DWORD PTR _base$[ebp]
	inc	WORD PTR [eax+ecx*2+2876]
	xor	esi, esi
	cmp	edx, edi
	jl	SHORT $LN15@gen_bitlen
	mov	esi, edx
	sub	esi, edi
	mov	edi, DWORD PTR _extra$[ebp]
	mov	esi, DWORD PTR [edi+esi*4]
$LN15@gen_bitlen:
; Line 530
	movzx	edi, WORD PTR [ebx+edx*4]
; Line 531
	add	ecx, esi
	imul	ecx, edi
	add	DWORD PTR [eax+5800], ecx
; Line 532
	mov	ecx, DWORD PTR _stree$[ebp]
	test	ecx, ecx
	je	SHORT $LN38@gen_bitlen
	movzx	edx, WORD PTR [ecx+edx*4+2]
	add	edx, esi
	imul	edx, edi
	add	DWORD PTR [eax+5804], edx
$LN38@gen_bitlen:
	mov	edi, DWORD PTR _max_length$[ebp]
	mov	esi, DWORD PTR _overflow$[ebp]
$LN19@gen_bitlen:
; Line 518
	add	DWORD PTR tv597[ebp], 4
	dec	DWORD PTR tv277[ebp]
	jne	SHORT $LL41@gen_bitlen
; Line 534
	test	esi, esi
	je	$LN5@gen_bitlen
	lea	edi, DWORD PTR [eax+edi*2+2876]
$LL12@gen_bitlen:
; Line 541
	mov	ecx, DWORD PTR _max_length$[ebp]
	dec	ecx
; Line 542
	cmp	WORD PTR [eax+ecx*2+2876], 0
	lea	edx, DWORD PTR [eax+ecx*2+2876]
	jne	SHORT $LN8@gen_bitlen
	npad	7
$LL9@gen_bitlen:
	sub	edx, 2
	dec	ecx
	cmp	WORD PTR [edx], 0
	je	SHORT $LL9@gen_bitlen
$LN8@gen_bitlen:
; Line 544
	add	WORD PTR [eax+ecx*2+2878], 2
	mov	edx, 65535				; 0000ffffH
	add	WORD PTR [eax+ecx*2+2876], dx
; Line 545
	mov	ecx, edx
	add	WORD PTR [edi], cx
; Line 549
	sub	esi, 2
; Line 550
	test	esi, esi
	jg	SHORT $LL12@gen_bitlen
; Line 557
	mov	edx, DWORD PTR _max_length$[ebp]
	test	edx, edx
	je	SHORT $LN5@gen_bitlen
	mov	DWORD PTR tv709[ebp], edi
$LL7@gen_bitlen:
; Line 558
	movzx	edi, WORD PTR [edi]
	mov	DWORD PTR _n$[ebp], edi
; Line 559
	test	edi, edi
	je	SHORT $LN6@gen_bitlen
; Line 558
	mov	ecx, DWORD PTR _h$[ebp]
	lea	esi, DWORD PTR [eax+ecx*4+2908]
	npad	6
$LL4@gen_bitlen:
; Line 560
	mov	ecx, DWORD PTR [esi-4]
	dec	DWORD PTR _h$[ebp]
	sub	esi, 4
	mov	DWORD PTR tv671[ebp], esi
; Line 561
	cmp	ecx, DWORD PTR _max_code$[ebp]
	jg	SHORT $LN39@gen_bitlen
; Line 562
	movzx	edi, WORD PTR [ebx+ecx*4+2]
	lea	esi, DWORD PTR [ebx+ecx*4+2]
	cmp	edi, edx
	je	SHORT $LN1@gen_bitlen
; Line 565
	mov	ebx, edx
	sub	ebx, edi
	mov	edi, ebx
	mov	ebx, DWORD PTR _tree$[ebp]
	movzx	ecx, WORD PTR [ebx+ecx*4]
	imul	edi, ecx
	add	DWORD PTR [eax+5800], edi
; Line 566
	mov	WORD PTR [esi], dx
$LN1@gen_bitlen:
; Line 568
	dec	DWORD PTR _n$[ebp]
	mov	edi, DWORD PTR _n$[ebp]
	mov	esi, DWORD PTR tv671[ebp]
$LN39@gen_bitlen:
; Line 559
	test	edi, edi
	jne	SHORT $LL4@gen_bitlen
$LN6@gen_bitlen:
; Line 557
	mov	edi, DWORD PTR tv709[ebp]
	sub	edi, 2
	dec	edx
	mov	DWORD PTR tv709[ebp], edi
	jne	SHORT $LL7@gen_bitlen
$LN5@gen_bitlen:
	pop	edi
	pop	esi
	pop	ebx
; Line 571
	mov	esp, ebp
	pop	ebp
	ret	0
_gen_bitlen ENDP
; Function compile flags: /Ogtp
_nextlen$ = -16					; size = 4
tv84 = -12						; size = 4
_prevlen$ = -8						; size = 4
tv295 = -4						; size = 4
_s$ = 8							; size = 4
_scan_tree PROC
; _tree$ = ecx
; _max_code$ = eax
; Line 715
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
	mov	ebx, eax
; Line 719
	movzx	eax, WORD PTR [edi+2]
; Line 720
	xor	edx, edx
	mov	DWORD PTR _prevlen$[ebp], -1
	mov	DWORD PTR _nextlen$[ebp], eax
; Line 721
	lea	ecx, DWORD PTR [edx+7]
; Line 722
	lea	esi, DWORD PTR [edx+4]
; Line 724
	test	eax, eax
	jne	SHORT $LN17@scan_tree
	mov	ecx, 138				; 0000008aH
	lea	esi, DWORD PTR [eax+3]
$LN17@scan_tree:
; Line 725
	mov	eax, 65535				; 0000ffffH
	mov	WORD PTR [edi+ebx*4+6], ax
; Line 727
	test	ebx, ebx
	js	$LN14@scan_tree
; Line 725
	add	edi, 6
	inc	ebx
	mov	DWORD PTR tv295[ebp], edi
	mov	edi, DWORD PTR _s$[ebp]
	mov	DWORD PTR tv84[ebp], ebx
	mov	ebx, DWORD PTR _nextlen$[ebp]
$LL16@scan_tree:
; Line 728
	mov	eax, ebx
	mov	ebx, DWORD PTR tv295[ebp]
	movzx	ebx, WORD PTR [ebx]
; Line 729
	inc	edx
	cmp	edx, ecx
	jge	SHORT $LN13@scan_tree
	cmp	eax, ebx
	je	SHORT $LN15@scan_tree
$LN13@scan_tree:
; Line 731
	cmp	edx, esi
	jge	SHORT $LN11@scan_tree
; Line 732
	add	WORD PTR [edi+eax*4+2684], dx
	jmp	SHORT $LN5@scan_tree
$LN11@scan_tree:
; Line 733
	test	eax, eax
	je	SHORT $LN9@scan_tree
; Line 734
	cmp	eax, DWORD PTR _prevlen$[ebp]
	je	SHORT $LN23@scan_tree
	inc	WORD PTR [edi+eax*4+2684]
$LN23@scan_tree:
; Line 735
	inc	WORD PTR [edi+2748]
	jmp	SHORT $LN5@scan_tree
$LN9@scan_tree:
; Line 736
	cmp	edx, 10					; 0000000aH
	jg	SHORT $LN6@scan_tree
; Line 737
	inc	WORD PTR [edi+2752]
; Line 738
	jmp	SHORT $LN5@scan_tree
$LN6@scan_tree:
; Line 739
	inc	WORD PTR [edi+2756]
$LN5@scan_tree:
; Line 741
	xor	edx, edx
	mov	DWORD PTR _prevlen$[ebp], eax
; Line 742
	test	ebx, ebx
	jne	SHORT $LN4@scan_tree
; Line 743
	mov	ecx, 138				; 0000008aH
	lea	esi, DWORD PTR [edx+3]
	jmp	SHORT $LN15@scan_tree
$LN4@scan_tree:
; Line 744
	cmp	eax, ebx
	jne	SHORT $LN2@scan_tree
; Line 745
	mov	ecx, 6
	lea	esi, DWORD PTR [ecx-3]
; Line 746
	jmp	SHORT $LN15@scan_tree
$LN2@scan_tree:
; Line 747
	mov	ecx, 7
	lea	esi, DWORD PTR [ecx-3]
$LN15@scan_tree:
; Line 727
	add	DWORD PTR tv295[ebp], 4
	dec	DWORD PTR tv84[ebp]
	jne	SHORT $LL16@scan_tree
$LN14@scan_tree:
	pop	edi
	pop	esi
	pop	ebx
; Line 750
	mov	esp, ebp
	pop	ebp
	ret	0
_scan_tree ENDP
; Function compile flags: /Ogtp
tv1078 = -28						; size = 4
tv1077 = -28						; size = 4
tv1076 = -28						; size = 4
tv1075 = -28						; size = 4
tv1074 = -28						; size = 4
tv1073 = -28						; size = 4
tv1072 = -28						; size = 4
_curlen$ = -28						; size = 4
tv589 = -24						; size = 4
_val$4218 = -20						; size = 4
_val$4204 = -20						; size = 4
_val$4189 = -20						; size = 4
_val$4175 = -20						; size = 4
_val$4159 = -20						; size = 4
_val$4145 = -20						; size = 4
_val$4131 = -20						; size = 4
_prevlen$ = -20						; size = 4
tv1260 = -16						; size = 4
_nextlen$ = -12						; size = 4
_len$4200 = -8						; size = 4
_len$4171 = -8						; size = 4
_len$4141 = -8						; size = 4
_len$4127 = -8						; size = 4
_min_count$ = -8					; size = 4
_count$ = -4						; size = 4
_send_tree PROC
; _s$ = eax
; _tree$ = edx
; _max_code$ = ecx
; Line 760
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	mov	esi, edx
; Line 764
	movzx	ebx, WORD PTR [esi+2]
; Line 765
	xor	edx, edx
	push	edi
	mov	edi, ecx
	mov	DWORD PTR _prevlen$[ebp], -1
	mov	DWORD PTR _nextlen$[ebp], ebx
; Line 766
	lea	ecx, DWORD PTR [edx+7]
; Line 767
	mov	DWORD PTR _min_count$[ebp], 4
; Line 770
	test	ebx, ebx
	jne	SHORT $LN36@send_tree
	mov	ecx, 138				; 0000008aH
	mov	DWORD PTR _min_count$[ebp], 3
$LN36@send_tree:
; Line 772
	test	edi, edi
	js	$LN33@send_tree
	add	esi, 6
	inc	edi
	mov	DWORD PTR tv1260[ebp], esi
	mov	DWORD PTR tv589[ebp], edi
	mov	ebx, 1
	npad	2
$LL35@send_tree:
; Line 773
	mov	edi, DWORD PTR tv1260[ebp]
	movzx	edi, WORD PTR [edi]
	mov	esi, DWORD PTR _nextlen$[ebp]
; Line 774
	add	edx, ebx
	mov	DWORD PTR _curlen$[ebp], esi
	mov	DWORD PTR _nextlen$[ebp], edi
	mov	DWORD PTR _count$[ebp], edx
	cmp	edx, ecx
	jge	SHORT $LN32@send_tree
	cmp	esi, edi
	je	$LN34@send_tree
$LN32@send_tree:
; Line 776
	cmp	edx, DWORD PTR _min_count$[ebp]
	jge	$LN30@send_tree
	npad	7
$LL29@send_tree:
; Line 777
	movzx	edi, WORD PTR [eax+esi*4+2686]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, 16					; 00000010H
	sub	edx, edi
	cmp	ecx, edx
	jle	SHORT $LN26@send_tree
	movzx	esi, WORD PTR [eax+esi*4+2684]
	mov	dx, si
	shl	dx, cl
	mov	ecx, DWORD PTR [eax+8]
	or	WORD PTR [eax+5816], dx
	movzx	ebx, BYTE PTR [eax+5816]
	mov	edx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+edx], bl
	inc	DWORD PTR [eax+20]
	movzx	ebx, BYTE PTR [eax+5817]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], bl
	mov	edx, DWORD PTR [eax+5820]
	mov	cl, 16					; 00000010H
	mov	ebx, 1
	add	DWORD PTR [eax+20], ebx
	sub	cl, dl
	shr	si, cl
	lea	ecx, DWORD PTR [edx+edi-16]
	mov	WORD PTR [eax+5816], si
	mov	esi, DWORD PTR _curlen$[ebp]
	jmp	SHORT $LN44@send_tree
$LN26@send_tree:
	mov	dx, WORD PTR [eax+esi*4+2684]
	shl	dx, cl
	or	WORD PTR [eax+5816], dx
	add	ecx, edi
$LN44@send_tree:
	sub	DWORD PTR _count$[ebp], ebx
	mov	DWORD PTR [eax+5820], ecx
	jne	$LL29@send_tree
; Line 779
	jmp	$LN5@send_tree
$LN30@send_tree:
	test	esi, esi
	je	$LN23@send_tree
; Line 780
	cmp	esi, DWORD PTR _prevlen$[ebp]
	je	$LN42@send_tree
; Line 781
	movzx	ecx, WORD PTR [eax+esi*4+2686]
	mov	edi, 16					; 00000010H
	sub	edi, ecx
	mov	DWORD PTR _len$4127[ebp], ecx
	mov	ecx, DWORD PTR [eax+5820]
	cmp	ecx, edi
	jle	SHORT $LN21@send_tree
	movzx	edx, WORD PTR [eax+esi*4+2684]
	mov	DWORD PTR _val$4131[ebp], edx
	shl	dx, cl
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv1078[ebp], eax
	or	WORD PTR [eax+5816], dx
	mov	edx, DWORD PTR [eax+20]
	mov	al, BYTE PTR [eax+5816]
	mov	BYTE PTR [ecx+edx], al
	mov	eax, DWORD PTR tv1078[ebp]
	add	DWORD PTR [eax+20], ebx
	mov	edi, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+8]
	mov	dl, BYTE PTR [eax+5817]
	mov	BYTE PTR [edi+ecx], dl
	mov	edx, DWORD PTR [eax+5820]
	mov	edi, DWORD PTR _val$4131[ebp]
	add	DWORD PTR [eax+20], ebx
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	di, cl
	mov	ecx, DWORD PTR _len$4127[ebp]
	lea	edx, DWORD PTR [edx+ecx-16]
	mov	DWORD PTR [eax+5820], edx
	mov	edx, DWORD PTR _count$[ebp]
	mov	WORD PTR [eax+5816], di
	jmp	SHORT $LN20@send_tree
$LN21@send_tree:
	mov	di, WORD PTR [eax+esi*4+2684]
	shl	di, cl
	mov	ecx, DWORD PTR [eax+5820]
	or	WORD PTR [eax+5816], di
	add	ecx, DWORD PTR _len$4127[ebp]
	mov	DWORD PTR [eax+5820], ecx
$LN20@send_tree:
	sub	edx, ebx
	mov	DWORD PTR _count$[ebp], edx
$LN42@send_tree:
; Line 784
	movzx	ecx, WORD PTR [eax+2750]
	mov	edi, 16					; 00000010H
	sub	edi, ecx
	mov	DWORD PTR _len$4141[ebp], ecx
	mov	ecx, DWORD PTR [eax+5820]
	cmp	ecx, edi
	jle	SHORT $LN19@send_tree
	movzx	edx, WORD PTR [eax+2748]
	mov	DWORD PTR _val$4145[ebp], edx
	shl	dx, cl
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv1077[ebp], eax
	or	WORD PTR [eax+5816], dx
	mov	edx, DWORD PTR [eax+20]
	mov	al, BYTE PTR [eax+5816]
	mov	BYTE PTR [ecx+edx], al
	mov	eax, DWORD PTR tv1077[ebp]
	add	DWORD PTR [eax+20], ebx
	mov	edi, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+8]
	mov	dl, BYTE PTR [eax+5817]
	mov	BYTE PTR [edi+ecx], dl
	mov	edx, DWORD PTR [eax+5820]
	mov	edi, DWORD PTR _val$4145[ebp]
	add	DWORD PTR [eax+20], ebx
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	di, cl
	mov	ecx, DWORD PTR _len$4141[ebp]
	lea	edx, DWORD PTR [edx+ecx-16]
	mov	DWORD PTR [eax+5820], edx
	mov	edx, DWORD PTR _count$[ebp]
	mov	WORD PTR [eax+5816], di
	jmp	SHORT $LN18@send_tree
$LN19@send_tree:
	mov	di, WORD PTR [eax+2748]
	shl	di, cl
	or	WORD PTR [eax+5816], di
	add	ecx, DWORD PTR _len$4141[ebp]
	mov	DWORD PTR [eax+5820], ecx
$LN18@send_tree:
	mov	ecx, DWORD PTR [eax+5820]
	add	edx, -3					; fffffffdH
	cmp	ecx, 14					; 0000000eH
	jle	SHORT $LN17@send_tree
	mov	DWORD PTR _val$4159[ebp], edx
	shl	dx, cl
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv1076[ebp], eax
	or	WORD PTR [eax+5816], dx
	mov	edx, DWORD PTR [eax+20]
	mov	al, BYTE PTR [eax+5816]
	mov	BYTE PTR [ecx+edx], al
	mov	eax, DWORD PTR tv1076[ebp]
	add	DWORD PTR [eax+20], ebx
	mov	edi, DWORD PTR [eax+20]
	mov	dl, BYTE PTR [eax+5817]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [edi+ecx], dl
	mov	edx, DWORD PTR [eax+5820]
	mov	edi, DWORD PTR _val$4159[ebp]
	add	DWORD PTR [eax+20], ebx
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	di, cl
	add	edx, -14				; fffffff2H
	mov	DWORD PTR [eax+5820], edx
	mov	WORD PTR [eax+5816], di
	jmp	$LN5@send_tree
$LN17@send_tree:
	shl	dx, cl
	or	WORD PTR [eax+5816], dx
	add	ecx, 2
	jmp	$LN45@send_tree
$LN23@send_tree:
; Line 787
	mov	edi, 16					; 00000010H
	cmp	edx, 10					; 0000000aH
	jg	$LN14@send_tree
	movzx	ecx, WORD PTR [eax+2754]
	sub	edi, ecx
	mov	DWORD PTR _len$4171[ebp], ecx
	mov	ecx, DWORD PTR [eax+5820]
	cmp	ecx, edi
	jle	SHORT $LN13@send_tree
	movzx	edx, WORD PTR [eax+2752]
	mov	DWORD PTR _val$4175[ebp], edx
	shl	dx, cl
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv1075[ebp], eax
	or	WORD PTR [eax+5816], dx
	mov	edx, DWORD PTR [eax+20]
	mov	al, BYTE PTR [eax+5816]
	mov	BYTE PTR [ecx+edx], al
	mov	eax, DWORD PTR tv1075[ebp]
	add	DWORD PTR [eax+20], ebx
	mov	edi, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+8]
	mov	dl, BYTE PTR [eax+5817]
	mov	BYTE PTR [edi+ecx], dl
	mov	edx, DWORD PTR [eax+5820]
	mov	edi, DWORD PTR _val$4175[ebp]
	add	DWORD PTR [eax+20], ebx
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	di, cl
	mov	ecx, DWORD PTR _len$4171[ebp]
	lea	edx, DWORD PTR [edx+ecx-16]
	mov	DWORD PTR [eax+5820], edx
	mov	edx, DWORD PTR _count$[ebp]
	mov	WORD PTR [eax+5816], di
	jmp	SHORT $LN12@send_tree
$LN13@send_tree:
	mov	di, WORD PTR [eax+2752]
	shl	di, cl
	mov	ecx, DWORD PTR [eax+5820]
	or	WORD PTR [eax+5816], di
	add	ecx, DWORD PTR _len$4171[ebp]
	mov	DWORD PTR [eax+5820], ecx
$LN12@send_tree:
	mov	ecx, DWORD PTR [eax+5820]
	add	edx, -3					; fffffffdH
	cmp	ecx, 13					; 0000000dH
	jle	SHORT $LN11@send_tree
	mov	DWORD PTR _val$4189[ebp], edx
	shl	dx, cl
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv1074[ebp], eax
	or	WORD PTR [eax+5816], dx
	mov	edx, DWORD PTR [eax+20]
	mov	al, BYTE PTR [eax+5816]
	mov	BYTE PTR [ecx+edx], al
	mov	eax, DWORD PTR tv1074[ebp]
	add	DWORD PTR [eax+20], ebx
	mov	edi, DWORD PTR [eax+20]
	mov	dl, BYTE PTR [eax+5817]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [edi+ecx], dl
	mov	edx, DWORD PTR [eax+5820]
	mov	edi, DWORD PTR _val$4189[ebp]
	add	DWORD PTR [eax+20], ebx
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	di, cl
	add	edx, -13				; fffffff3H
	mov	DWORD PTR [eax+5820], edx
	mov	WORD PTR [eax+5816], di
	jmp	$LN5@send_tree
$LN11@send_tree:
	shl	dx, cl
	or	WORD PTR [eax+5816], dx
	add	ecx, 3
; Line 789
	jmp	$LN45@send_tree
$LN14@send_tree:
; Line 790
	movzx	ecx, WORD PTR [eax+2758]
	sub	edi, ecx
	mov	DWORD PTR _len$4200[ebp], ecx
	mov	ecx, DWORD PTR [eax+5820]
	cmp	ecx, edi
	jle	SHORT $LN8@send_tree
	movzx	edx, WORD PTR [eax+2756]
	mov	DWORD PTR _val$4204[ebp], edx
	shl	dx, cl
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv1073[ebp], eax
	or	WORD PTR [eax+5816], dx
	mov	edx, DWORD PTR [eax+20]
	mov	al, BYTE PTR [eax+5816]
	mov	BYTE PTR [ecx+edx], al
	mov	eax, DWORD PTR tv1073[ebp]
	add	DWORD PTR [eax+20], ebx
	mov	edi, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+8]
	mov	dl, BYTE PTR [eax+5817]
	mov	BYTE PTR [edi+ecx], dl
	mov	edx, DWORD PTR [eax+5820]
	mov	edi, DWORD PTR _val$4204[ebp]
	add	DWORD PTR [eax+20], ebx
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	di, cl
	mov	ecx, DWORD PTR _len$4200[ebp]
	lea	edx, DWORD PTR [edx+ecx-16]
	mov	DWORD PTR [eax+5820], edx
	mov	edx, DWORD PTR _count$[ebp]
	mov	WORD PTR [eax+5816], di
	jmp	SHORT $LN7@send_tree
$LN8@send_tree:
	mov	di, WORD PTR [eax+2756]
	shl	di, cl
	mov	ecx, DWORD PTR [eax+5820]
	or	WORD PTR [eax+5816], di
	add	ecx, DWORD PTR _len$4200[ebp]
	mov	DWORD PTR [eax+5820], ecx
$LN7@send_tree:
	mov	ecx, DWORD PTR [eax+5820]
	add	edx, -11				; fffffff5H
	cmp	ecx, 9
	jle	SHORT $LN6@send_tree
	mov	DWORD PTR _val$4218[ebp], edx
	shl	dx, cl
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv1072[ebp], eax
	or	WORD PTR [eax+5816], dx
	mov	edx, DWORD PTR [eax+20]
	mov	al, BYTE PTR [eax+5816]
	mov	BYTE PTR [ecx+edx], al
	mov	eax, DWORD PTR tv1072[ebp]
	add	DWORD PTR [eax+20], ebx
	mov	edi, DWORD PTR [eax+20]
	mov	dl, BYTE PTR [eax+5817]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [edi+ecx], dl
	mov	edx, DWORD PTR [eax+5820]
	mov	edi, DWORD PTR _val$4218[ebp]
	add	DWORD PTR [eax+20], ebx
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	di, cl
	add	edx, -9					; fffffff7H
	mov	DWORD PTR [eax+5820], edx
	mov	WORD PTR [eax+5816], di
	jmp	SHORT $LN5@send_tree
$LN6@send_tree:
	shl	dx, cl
	or	WORD PTR [eax+5816], dx
	add	ecx, 7
$LN45@send_tree:
	mov	DWORD PTR [eax+5820], ecx
$LN5@send_tree:
; Line 793
	mov	ecx, DWORD PTR _nextlen$[ebp]
	xor	edx, edx
	mov	DWORD PTR _prevlen$[ebp], esi
	test	ecx, ecx
	jne	SHORT $LN4@send_tree
; Line 794
	mov	ecx, 138				; 0000008aH
	mov	DWORD PTR _min_count$[ebp], 3
	jmp	SHORT $LN34@send_tree
$LN4@send_tree:
; Line 795
	cmp	esi, ecx
	jne	SHORT $LN2@send_tree
; Line 796
	mov	ecx, 6
	mov	DWORD PTR _min_count$[ebp], 3
; Line 797
	jmp	SHORT $LN34@send_tree
$LN2@send_tree:
; Line 798
	mov	ecx, 7
	mov	DWORD PTR _min_count$[ebp], 4
$LN34@send_tree:
; Line 772
	add	DWORD PTR tv1260[ebp], 4
	sub	DWORD PTR tv589[ebp], ebx
	jne	$LL35@send_tree
$LN33@send_tree:
	pop	edi
	pop	esi
	pop	ebx
; Line 801
	mov	esp, ebp
	pop	ebp
	ret	0
_send_tree ENDP
; Function compile flags: /Ogtp
tv588 = -4						; size = 4
tv587 = -4						; size = 4
tv586 = -4						; size = 4
_lcodes$ = 8						; size = 4
_dcodes$ = 12						; size = 4
_blcodes$ = 16						; size = 4
_send_all_trees PROC
; _s$ = esi
; Line 845
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 852
	mov	eax, DWORD PTR _lcodes$[ebp]
	mov	ecx, DWORD PTR [esi+5820]
	push	ebx
	add	eax, -257				; fffffeffH
	push	edi
	mov	ebx, 1
	cmp	ecx, 11					; 0000000bH
	jle	SHORT $LN11@send_all_t
	mov	dx, ax
	shl	dx, cl
	mov	ecx, DWORD PTR [esi+20]
	mov	DWORD PTR tv588[ebp], eax
	or	WORD PTR [esi+5816], dx
	mov	edx, DWORD PTR [esi+8]
	mov	al, BYTE PTR [esi+5816]
	mov	BYTE PTR [ecx+edx], al
	add	DWORD PTR [esi+20], ebx
	mov	dl, BYTE PTR [esi+5817]
	mov	edi, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR tv588[ebp]
	mov	BYTE PTR [edi+ecx], dl
	mov	edx, DWORD PTR [esi+5820]
	add	DWORD PTR [esi+20], ebx
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	ax, cl
	add	edx, -11				; fffffff5H
	mov	DWORD PTR [esi+5820], edx
	mov	WORD PTR [esi+5816], ax
	jmp	SHORT $LN10@send_all_t
$LN11@send_all_t:
	shl	ax, cl
	or	WORD PTR [esi+5816], ax
	add	ecx, 5
	mov	DWORD PTR [esi+5820], ecx
$LN10@send_all_t:
; Line 853
	mov	eax, DWORD PTR _dcodes$[ebp]
	mov	ecx, DWORD PTR [esi+5820]
	dec	eax
	cmp	ecx, 11					; 0000000bH
	jle	SHORT $LN9@send_all_t
	mov	dx, ax
	shl	dx, cl
	mov	ecx, DWORD PTR [esi+20]
	mov	DWORD PTR tv587[ebp], eax
	or	WORD PTR [esi+5816], dx
	mov	edx, DWORD PTR [esi+8]
	mov	al, BYTE PTR [esi+5816]
	mov	BYTE PTR [ecx+edx], al
	add	DWORD PTR [esi+20], ebx
	mov	dl, BYTE PTR [esi+5817]
	mov	edi, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR tv587[ebp]
	mov	BYTE PTR [edi+ecx], dl
	mov	edx, DWORD PTR [esi+5820]
	add	DWORD PTR [esi+20], ebx
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	ax, cl
	add	edx, -11				; fffffff5H
	mov	DWORD PTR [esi+5820], edx
	mov	WORD PTR [esi+5816], ax
	jmp	SHORT $LN8@send_all_t
$LN9@send_all_t:
	shl	ax, cl
	or	WORD PTR [esi+5816], ax
	add	ecx, 5
	mov	DWORD PTR [esi+5820], ecx
$LN8@send_all_t:
; Line 854
	mov	eax, DWORD PTR _blcodes$[ebp]
	mov	ecx, DWORD PTR [esi+5820]
	add	eax, -4					; fffffffcH
	cmp	ecx, 12					; 0000000cH
	jle	SHORT $LN7@send_all_t
	mov	dx, ax
	shl	dx, cl
	mov	ecx, DWORD PTR [esi+20]
	mov	DWORD PTR tv586[ebp], eax
	or	WORD PTR [esi+5816], dx
	mov	edx, DWORD PTR [esi+8]
	mov	al, BYTE PTR [esi+5816]
	mov	BYTE PTR [ecx+edx], al
	add	DWORD PTR [esi+20], ebx
	mov	dl, BYTE PTR [esi+5817]
	mov	edi, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR tv586[ebp]
	mov	BYTE PTR [edi+ecx], dl
	mov	edx, DWORD PTR [esi+5820]
	add	DWORD PTR [esi+20], ebx
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	ax, cl
	add	edx, -12				; fffffff4H
	mov	DWORD PTR [esi+5820], edx
	mov	WORD PTR [esi+5816], ax
	jmp	SHORT $LN6@send_all_t
$LN7@send_all_t:
	shl	ax, cl
	or	WORD PTR [esi+5816], ax
	add	ecx, 4
	mov	DWORD PTR [esi+5820], ecx
$LN6@send_all_t:
; Line 855
	xor	edi, edi
	cmp	DWORD PTR _blcodes$[ebp], edi
	jle	$LN3@send_all_t
$LL5@send_all_t:
; Line 857
	mov	ecx, DWORD PTR [esi+5820]
	cmp	ecx, 13					; 0000000dH
	jle	SHORT $LN2@send_all_t
	movzx	edx, BYTE PTR _bl_order[edi]
	movzx	eax, WORD PTR [esi+edx*4+2686]
	mov	dx, ax
	shl	dx, cl
	mov	ecx, DWORD PTR [esi+20]
	or	WORD PTR [esi+5816], dx
	movzx	ebx, BYTE PTR [esi+5816]
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR [ecx+edx], bl
	inc	DWORD PTR [esi+20]
	movzx	ebx, BYTE PTR [esi+5817]
	mov	ecx, DWORD PTR [esi+20]
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR [ecx+edx], bl
	mov	edx, DWORD PTR [esi+5820]
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	ax, cl
	mov	ebx, 1
	add	DWORD PTR [esi+20], ebx
	add	edx, -13				; fffffff3H
	mov	WORD PTR [esi+5816], ax
	mov	DWORD PTR [esi+5820], edx
	jmp	SHORT $LN4@send_all_t
$LN2@send_all_t:
	movzx	eax, BYTE PTR _bl_order[edi]
	mov	dx, WORD PTR [esi+eax*4+2686]
	shl	dx, cl
	or	WORD PTR [esi+5816], dx
	add	ecx, 3
	mov	DWORD PTR [esi+5820], ecx
$LN4@send_all_t:
; Line 855
	add	edi, ebx
	cmp	edi, DWORD PTR _blcodes$[ebp]
	jl	$LL5@send_all_t
$LN3@send_all_t:
; Line 861
	mov	ecx, DWORD PTR _lcodes$[ebp]
	dec	ecx
	lea	edx, DWORD PTR [esi+148]
	mov	eax, esi
	call	_send_tree
; Line 864
	mov	ecx, DWORD PTR _dcodes$[ebp]
	dec	ecx
	lea	edx, DWORD PTR [esi+2440]
	mov	eax, esi
	call	_send_tree
	pop	edi
	pop	ebx
; Line 866
	mov	esp, ebp
	pop	ebp
	ret	0
_send_all_trees ENDP
_TEXT	ENDS
PUBLIC	__tr_tally
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_s$ = 8							; size = 4
_dist$ = 12						; size = 4
_lc$ = 16						; size = 4
__tr_tally PROC
; Line 1030
	push	ebp
	mov	ebp, esp
; Line 1031
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+5792]
	mov	ecx, DWORD PTR _dist$[ebp]
	push	esi
	mov	esi, DWORD PTR [eax+5796]
	mov	WORD PTR [esi+edx*2], cx
; Line 1032
	mov	esi, DWORD PTR [eax+5784]
	mov	edx, DWORD PTR _lc$[ebp]
	push	edi
	mov	edi, DWORD PTR [eax+5792]
	mov	BYTE PTR [esi+edi], dl
	mov	esi, 1
	add	DWORD PTR [eax+5792], esi
; Line 1033
	test	ecx, ecx
	jne	SHORT $LN2@tr_tally
; Line 1035
	add	WORD PTR [eax+edx*4+148], si
; Line 1036
	jmp	SHORT $LN1@tr_tally
$LN2@tr_tally:
; Line 1037
	add	DWORD PTR [eax+5808], esi
; Line 1044
	movzx	edx, BYTE PTR __length_code[edx]
	add	WORD PTR [eax+edx*4+1176], si
	lea	edx, DWORD PTR [eax+edx*4+1176]
	sub	ecx, esi
; Line 1045
	cmp	ecx, 256				; 00000100H
	jae	SHORT $LN5@tr_tally
	movzx	ecx, BYTE PTR __dist_code[ecx]
	jmp	SHORT $LN6@tr_tally
$LN5@tr_tally:
	shr	ecx, 7
	movzx	ecx, BYTE PTR __dist_code[ecx+256]
$LN6@tr_tally:
	add	WORD PTR [eax+ecx*4+2440], si
$LN1@tr_tally:
; Line 1066
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, esi
	xor	edx, edx
	cmp	DWORD PTR [eax+5792], ecx
	pop	edi
	sete	dl
	pop	esi
	mov	eax, edx
; Line 1071
	pop	ebp
	ret	0
__tr_tally ENDP
; Function compile flags: /Ogtp
tv873 = -16						; size = 4
_len$4514 = -16						; size = 4
_extra$ = -16						; size = 4
_val$4489 = -16						; size = 4
_lx$ = -12						; size = 4
_len$4485 = -8						; size = 4
_len$4470 = -8						; size = 4
tv874 = -4						; size = 4
_dist$ = -4						; size = 4
_len$4543 = 8						; size = 4
_ltree$ = 8						; size = 4
_dtree$ = 12						; size = 4
_compress_block PROC
; _s$ = eax
; Line 1080
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	mov	ebx, DWORD PTR _ltree$[ebp]
; Line 1083
	xor	edx, edx
	push	esi
	push	edi
; Line 1087
	cmp	DWORD PTR [eax+5792], edx
	je	$LN17@compress_b
	jmp	SHORT $LN19@compress_b
	npad	4
$LL26@compress_b:
	mov	edx, DWORD PTR _lx$[ebp]
$LN19@compress_b:
; Line 1088
	mov	ecx, DWORD PTR [eax+5796]
	movzx	ecx, WORD PTR [ecx+edx*2]
; Line 1089
	mov	esi, DWORD PTR [eax+5784]
	movzx	esi, BYTE PTR [edx+esi]
	inc	edx
	mov	DWORD PTR _dist$[ebp], ecx
; Line 1090
	test	ecx, ecx
; Line 1091
	mov	ecx, DWORD PTR [eax+5820]
	mov	DWORD PTR _lx$[ebp], edx
	jne	$LN16@compress_b
	movzx	edx, WORD PTR [ebx+esi*4+2]
	mov	edi, 16					; 00000010H
	sub	edi, edx
	mov	DWORD PTR _len$4470[ebp], edx
	cmp	ecx, edi
	jle	SHORT $LN15@compress_b
	movzx	esi, WORD PTR [ebx+esi*4]
	mov	dx, si
	shl	dx, cl
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv874[ebp], ebx
	or	WORD PTR [eax+5816], dx
	mov	edx, DWORD PTR [eax+20]
	mov	bl, BYTE PTR [eax+5816]
	mov	BYTE PTR [ecx+edx], bl
	inc	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+8]
	mov	dl, BYTE PTR [eax+5817]
	mov	edi, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR tv874[ebp]
	mov	BYTE PTR [edi+ecx], dl
	mov	edx, DWORD PTR [eax+5820]
	inc	DWORD PTR [eax+20]
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	si, cl
	mov	ecx, DWORD PTR _len$4470[ebp]
	lea	edx, DWORD PTR [edx+ecx-16]
	mov	DWORD PTR [eax+5820], edx
	mov	WORD PTR [eax+5816], si
	jmp	$LN18@compress_b
$LN15@compress_b:
	mov	si, WORD PTR [ebx+esi*4]
	shl	si, cl
	or	WORD PTR [eax+5816], si
	add	ecx, edx
; Line 1093
	jmp	$LN28@compress_b
$LN16@compress_b:
; Line 1095
	movzx	edi, BYTE PTR __length_code[esi]
; Line 1096
	movzx	edx, WORD PTR [ebx+edi*4+1030]
	mov	ebx, 16					; 00000010H
	sub	ebx, edx
	mov	DWORD PTR _len$4485[ebp], edx
	mov	edx, DWORD PTR _ltree$[ebp]
	cmp	ecx, ebx
	jle	SHORT $LN12@compress_b
	movzx	edx, WORD PTR [edx+edi*4+1028]
	mov	DWORD PTR _val$4489[ebp], edx
	shl	dx, cl
	mov	ecx, DWORD PTR [eax+8]
	or	WORD PTR [eax+5816], dx
	movzx	ebx, BYTE PTR [eax+5816]
	mov	edx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+edx], bl
	inc	DWORD PTR [eax+20]
	movzx	ebx, BYTE PTR [eax+5817]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], bl
	mov	edx, DWORD PTR [eax+5820]
	mov	ebx, DWORD PTR _val$4489[ebp]
	inc	DWORD PTR [eax+20]
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	bx, cl
	mov	ecx, DWORD PTR _len$4485[ebp]
	lea	edx, DWORD PTR [edx+ecx-16]
	mov	DWORD PTR [eax+5820], edx
	mov	WORD PTR [eax+5816], bx
	jmp	SHORT $LN29@compress_b
$LN12@compress_b:
	mov	dx, WORD PTR [edx+edi*4+1028]
	shl	dx, cl
	or	WORD PTR [eax+5816], dx
	add	ecx, DWORD PTR _len$4485[ebp]
	mov	DWORD PTR [eax+5820], ecx
$LN29@compress_b:
; Line 1097
	mov	ebx, DWORD PTR _extra_lbits[edi*4]
	mov	edx, DWORD PTR _dist$[ebp]
	mov	DWORD PTR _extra$[ebp], ebx
; Line 1098
	test	ebx, ebx
	je	SHORT $LN8@compress_b
; Line 1099
	sub	esi, DWORD PTR _base_length[edi*4]
; Line 1100
	mov	ecx, DWORD PTR [eax+5820]
	mov	edi, 16					; 00000010H
	sub	edi, ebx
	cmp	ecx, edi
	jle	SHORT $LN9@compress_b
	mov	di, si
	shl	di, cl
	mov	ecx, DWORD PTR [eax+8]
	or	WORD PTR [eax+5816], di
	movzx	ebx, BYTE PTR [eax+5816]
	mov	edi, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+edi], bl
	inc	DWORD PTR [eax+20]
	movzx	ebx, BYTE PTR [eax+5817]
	mov	ecx, DWORD PTR [eax+8]
	mov	edi, DWORD PTR [eax+20]
	mov	BYTE PTR [edi+ecx], bl
	mov	ebx, DWORD PTR [eax+5820]
	inc	DWORD PTR [eax+20]
	mov	cl, 16					; 00000010H
	sub	cl, bl
	shr	si, cl
	mov	ecx, DWORD PTR _extra$[ebp]
	lea	ecx, DWORD PTR [ebx+ecx-16]
	mov	WORD PTR [eax+5816], si
	jmp	SHORT $LN30@compress_b
$LN9@compress_b:
	shl	si, cl
	or	WORD PTR [eax+5816], si
	add	ecx, ebx
$LN30@compress_b:
	mov	DWORD PTR [eax+5820], ecx
$LN8@compress_b:
; Line 1102
	dec	edx
	mov	DWORD PTR _dist$[ebp], edx
; Line 1103
	cmp	edx, 256				; 00000100H
	jae	SHORT $LN23@compress_b
	movzx	esi, BYTE PTR __dist_code[edx]
	jmp	SHORT $LN24@compress_b
$LN23@compress_b:
	mov	ecx, edx
	shr	ecx, 7
	movzx	esi, BYTE PTR __dist_code[ecx+256]
$LN24@compress_b:
; Line 1106
	mov	ecx, DWORD PTR _dtree$[ebp]
	movzx	edi, WORD PTR [ecx+esi*4+2]
	mov	ecx, DWORD PTR [eax+5820]
	mov	ebx, 16					; 00000010H
	sub	ebx, edi
	mov	DWORD PTR _len$4514[ebp], edi
	cmp	ecx, ebx
	jle	SHORT $LN7@compress_b
	mov	edx, DWORD PTR _dtree$[ebp]
	movzx	edi, WORD PTR [edx+esi*4]
	mov	dx, di
	shl	dx, cl
	mov	ecx, DWORD PTR [eax+8]
	or	WORD PTR [eax+5816], dx
	movzx	ebx, BYTE PTR [eax+5816]
	mov	edx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+edx], bl
	inc	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+20]
	movzx	ebx, BYTE PTR [eax+5817]
	mov	edx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], bl
	mov	edx, DWORD PTR [eax+5820]
	inc	DWORD PTR [eax+20]
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	di, cl
	mov	ecx, DWORD PTR _len$4514[ebp]
	lea	edx, DWORD PTR [edx+ecx-16]
	mov	DWORD PTR [eax+5820], edx
	mov	edx, DWORD PTR _dist$[ebp]
	mov	WORD PTR [eax+5816], di
	jmp	SHORT $LN31@compress_b
$LN7@compress_b:
	mov	ebx, DWORD PTR _dtree$[ebp]
	mov	bx, WORD PTR [ebx+esi*4]
	shl	bx, cl
	or	WORD PTR [eax+5816], bx
	add	ecx, edi
	mov	DWORD PTR [eax+5820], ecx
$LN31@compress_b:
; Line 1107
	mov	edi, DWORD PTR _extra_dbits[esi*4]
	mov	ebx, DWORD PTR _ltree$[ebp]
; Line 1108
	test	edi, edi
	je	$LN18@compress_b
; Line 1109
	sub	edx, DWORD PTR _base_dist[esi*4]
; Line 1110
	mov	ecx, DWORD PTR [eax+5820]
	mov	esi, 16					; 00000010H
	sub	esi, edi
	cmp	ecx, esi
	jle	SHORT $LN4@compress_b
	mov	si, dx
	shl	si, cl
	mov	ecx, DWORD PTR [eax+8]
	or	WORD PTR [eax+5816], si
	movzx	ebx, BYTE PTR [eax+5816]
	mov	esi, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+esi], bl
	inc	DWORD PTR [eax+20]
	movzx	ebx, BYTE PTR [eax+5817]
	mov	esi, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [esi+ecx], bl
	mov	ebx, DWORD PTR [eax+5820]
	inc	DWORD PTR [eax+20]
	mov	cl, 16					; 00000010H
	sub	cl, bl
	shr	dx, cl
	mov	WORD PTR [eax+5816], dx
	lea	edx, DWORD PTR [ebx+edi-16]
	mov	ebx, DWORD PTR _ltree$[ebp]
	mov	DWORD PTR [eax+5820], edx
	jmp	SHORT $LN18@compress_b
$LN4@compress_b:
	shl	dx, cl
	or	WORD PTR [eax+5816], dx
	add	ecx, edi
$LN28@compress_b:
	mov	DWORD PTR [eax+5820], ecx
$LN18@compress_b:
; Line 1118
	mov	ecx, DWORD PTR _lx$[ebp]
	cmp	ecx, DWORD PTR [eax+5792]
	jb	$LL26@compress_b
$LN17@compress_b:
; Line 1120
	movzx	edx, WORD PTR [ebx+1026]
	mov	ecx, DWORD PTR [eax+5820]
	mov	esi, 16					; 00000010H
	sub	esi, edx
	mov	DWORD PTR _len$4543[ebp], edx
	cmp	ecx, esi
	jle	SHORT $LN2@compress_b
	movzx	esi, WORD PTR [ebx+1024]
	mov	dx, si
	shl	dx, cl
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv873[ebp], ebx
	or	WORD PTR [eax+5816], dx
	mov	edx, DWORD PTR [eax+20]
	mov	bl, BYTE PTR [eax+5816]
	mov	BYTE PTR [ecx+edx], bl
	inc	DWORD PTR [eax+20]
	mov	edi, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+8]
	mov	dl, BYTE PTR [eax+5817]
	mov	ebx, DWORD PTR tv873[ebp]
	mov	BYTE PTR [edi+ecx], dl
	mov	edx, DWORD PTR [eax+5820]
	inc	DWORD PTR [eax+20]
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	si, cl
	mov	ecx, DWORD PTR _len$4543[ebp]
	lea	edx, DWORD PTR [edx+ecx-16]
	mov	DWORD PTR [eax+5820], edx
	mov	WORD PTR [eax+5816], si
; Line 1121
	movzx	ecx, WORD PTR [ebx+1026]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax+5812], ecx
	pop	ebx
; Line 1122
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@compress_b:
; Line 1120
	mov	si, WORD PTR [ebx+1024]
	shl	si, cl
	pop	edi
	or	WORD PTR [eax+5816], si
	add	ecx, edx
	mov	DWORD PTR [eax+5820], ecx
; Line 1121
	movzx	edx, WORD PTR [ebx+1026]
	pop	esi
	mov	DWORD PTR [eax+5812], edx
	pop	ebx
; Line 1122
	mov	esp, ebp
	pop	ebp
	ret	0
_compress_block ENDP
; Function compile flags: /Ogtp
_detect_data_type PROC
; _s$ = esi
; Line 1144
	mov	edx, -201342849				; f3ffc07fH
; Line 1148
	xor	eax, eax
	lea	ecx, DWORD PTR [esi+148]
	npad	3
$LL10@detect_dat:
; Line 1149
	test	dl, 1
	je	SHORT $LN9@detect_dat
	cmp	WORD PTR [ecx], 0
	jne	SHORT $LN15@detect_dat
$LN9@detect_dat:
; Line 1148
	inc	eax
	add	ecx, 4
	shr	edx, 1
	cmp	eax, 31					; 0000001fH
	jle	SHORT $LL10@detect_dat
; Line 1154
	cmp	WORD PTR [esi+184], 0
	jne	SHORT $LN5@detect_dat
	cmp	WORD PTR [esi+188], 0
	jne	SHORT $LN5@detect_dat
	cmp	WORD PTR [esi+200], 0
	jne	SHORT $LN5@detect_dat
; Line 1156
	mov	eax, 32					; 00000020H
	lea	ecx, DWORD PTR [esi+276]
	npad	1
$LL4@detect_dat:
; Line 1157
	cmp	WORD PTR [ecx], 0
	jne	SHORT $LN5@detect_dat
; Line 1156
	inc	eax
	add	ecx, 4
	cmp	eax, 256				; 00000100H
	jl	SHORT $LL4@detect_dat
$LN15@detect_dat:
; Line 1163
	xor	eax, eax
; Line 1164
	ret	0
$LN5@detect_dat:
; Line 1155
	mov	eax, 1
; Line 1164
	ret	0
_detect_data_type ENDP
; Function compile flags: /Ogtp
_bi_reverse PROC
; _code$ = ecx
; _len$ = edx
; Line 1175
	xor	eax, eax
	push	esi
$LL3@bi_reverse:
; Line 1177
	mov	esi, ecx
	and	esi, 1
	or	eax, esi
; Line 1179
	dec	edx
	shr	ecx, 1
	add	eax, eax
	test	edx, edx
	jg	SHORT $LL3@bi_reverse
; Line 1180
	shr	eax, 1
	pop	esi
; Line 1181
	ret	0
_bi_reverse ENDP
; Function compile flags: /Ogtp
_bi_flush PROC
; _s$ = eax
; Line 1189
	mov	ecx, DWORD PTR [eax+5820]
	push	ebx
	cmp	ecx, 16					; 00000010H
	jne	SHORT $LN3@bi_flush
; Line 1190
	movzx	ebx, BYTE PTR [eax+5816]
	mov	edx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], bl
	inc	DWORD PTR [eax+20]
	movzx	ebx, BYTE PTR [eax+5817]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], bl
	inc	DWORD PTR [eax+20]
; Line 1191
	xor	ecx, ecx
	mov	WORD PTR [eax+5816], cx
; Line 1192
	mov	DWORD PTR [eax+5820], ecx
	pop	ebx
; Line 1198
	ret	0
$LN3@bi_flush:
; Line 1193
	cmp	ecx, 8
	jl	SHORT $LN1@bi_flush
; Line 1194
	mov	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR [eax+20]
	mov	bl, BYTE PTR [eax+5816]
	mov	BYTE PTR [edx+ecx], bl
; Line 1195
	movzx	edx, BYTE PTR [eax+5817]
	inc	DWORD PTR [eax+20]
; Line 1196
	add	DWORD PTR [eax+5820], -8		; fffffff8H
	mov	WORD PTR [eax+5816], dx
$LN1@bi_flush:
	pop	ebx
; Line 1198
	ret	0
_bi_flush ENDP
; Function compile flags: /Ogtp
_bi_windup PROC
; _s$ = eax
; Line 1206
	mov	ecx, DWORD PTR [eax+5820]
	push	ebx
	cmp	ecx, 8
	jle	SHORT $LN3@bi_windup
; Line 1207
	movzx	ebx, BYTE PTR [eax+5816]
	mov	edx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], bl
	inc	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+8]
	movzx	ebx, BYTE PTR [eax+5817]
	jmp	SHORT $LN6@bi_windup
$LN3@bi_windup:
; Line 1208
	test	ecx, ecx
	jle	SHORT $LN1@bi_windup
; Line 1209
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+20]
	mov	bl, BYTE PTR [eax+5816]
$LN6@bi_windup:
	mov	BYTE PTR [ecx+edx], bl
	inc	DWORD PTR [eax+20]
$LN1@bi_windup:
; Line 1211
	xor	ecx, ecx
	mov	WORD PTR [eax+5816], cx
; Line 1212
	mov	DWORD PTR [eax+5820], ecx
	pop	ebx
; Line 1216
	ret	0
_bi_windup ENDP
; Function compile flags: /Ogtp
_buf$ = 8						; size = 4
_header$ = 12						; size = 4
_copy_block PROC
; _s$ = eax
; _len$ = ecx
; Line 1227
	push	ebp
	mov	ebp, esp
; Line 1228
	mov	edx, DWORD PTR [eax+5820]
	push	ebx
	push	esi
	push	edi
	mov	esi, 1
	cmp	edx, 8
	jle	SHORT $LN8@copy_block
	movzx	ebx, BYTE PTR [eax+5816]
	mov	edx, DWORD PTR [eax+20]
	mov	edi, DWORD PTR [eax+8]
	mov	BYTE PTR [edx+edi], bl
	add	DWORD PTR [eax+20], esi
	movzx	ebx, BYTE PTR [eax+5817]
	mov	edi, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+8]
	mov	BYTE PTR [edi+edx], bl
	jmp	SHORT $LN14@copy_block
$LN8@copy_block:
	test	edx, edx
	jle	SHORT $LN6@copy_block
	mov	edx, DWORD PTR [eax+8]
	mov	edi, DWORD PTR [eax+20]
	mov	bl, BYTE PTR [eax+5816]
	mov	BYTE PTR [edx+edi], bl
$LN14@copy_block:
	add	DWORD PTR [eax+20], esi
$LN6@copy_block:
	xor	edx, edx
	mov	WORD PTR [eax+5816], dx
	mov	DWORD PTR [eax+5820], edx
; Line 1229
	mov	DWORD PTR [eax+5812], 8
; Line 1231
	cmp	DWORD PTR _header$[ebp], edx
	je	SHORT $LN11@copy_block
; Line 1232
	mov	edx, DWORD PTR [eax+20]
	mov	edi, DWORD PTR [eax+8]
	mov	BYTE PTR [edx+edi], cl
	add	DWORD PTR [eax+20], esi
	mov	edi, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [eax+8]
	mov	edx, ecx
	shr	edx, 8
	mov	BYTE PTR [edi+ebx], dl
	add	DWORD PTR [eax+20], esi
	mov	edi, DWORD PTR [eax+20]
; Line 1233
	mov	ebx, DWORD PTR [eax+8]
	mov	dl, cl
	not	dl
	mov	BYTE PTR [edi+ebx], dl
	add	DWORD PTR [eax+20], esi
	mov	edi, DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [eax+8]
	mov	edx, ecx
	not	edx
	shr	edx, 8
	mov	BYTE PTR [edi+ebx], dl
	add	DWORD PTR [eax+20], esi
$LN11@copy_block:
; Line 1241
	test	ecx, ecx
	je	SHORT $LN12@copy_block
$LL2@copy_block:
; Line 1242
	mov	ebx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [eax+20]
	mov	bl, BYTE PTR [ebx]
	mov	edi, DWORD PTR [eax+8]
	add	DWORD PTR _buf$[ebp], esi
	mov	BYTE PTR [edx+edi], bl
	add	DWORD PTR [eax+20], esi
	sub	ecx, esi
	jne	SHORT $LL2@copy_block
$LN12@copy_block:
	pop	edi
	pop	esi
	pop	ebx
; Line 1244
	pop	ebp
	ret	0
_copy_block ENDP
_TEXT	ENDS
PUBLIC	__tr_init
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_s$ = 8							; size = 4
__tr_init PROC
; Line 388
	push	ebp
	mov	ebp, esp
; Line 391
	mov	edx, DWORD PTR _s$[ebp]
	lea	eax, DWORD PTR [edx+148]
; Line 394
	lea	ecx, DWORD PTR [edx+2440]
	mov	DWORD PTR [edx+2840], eax
	mov	DWORD PTR [edx+2852], ecx
; Line 400
	xor	ecx, ecx
	lea	eax, DWORD PTR [edx+2684]
	mov	DWORD PTR [edx+2848], OFFSET _static_l_desc
	mov	DWORD PTR [edx+2860], OFFSET _static_d_desc
	mov	DWORD PTR [edx+2864], eax
	mov	DWORD PTR [edx+2872], OFFSET _static_bl_desc
	mov	WORD PTR [edx+5816], cx
; Line 401
	mov	DWORD PTR [edx+5820], ecx
; Line 402
	mov	DWORD PTR [edx+5812], 8
; Line 410
	pop	ebp
; Line 409
	jmp	_init_block
__tr_init ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_next_code$ = -36					; size = 32
__$ArrayPad$ = -4					; size = 4
_max_code$ = 8						; size = 4
_gen_codes PROC
; _tree$ = edi
; _bl_count$ = edx
; Line 585
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
; Line 594
	lea	esi, DWORD PTR _next_code$[ebp+2]
	xor	ecx, ecx
	mov	eax, 1
	sub	edx, esi
	npad	3
$LL7@gen_codes:
	lea	esi, DWORD PTR [edx+eax*2]
; Line 595
	mov	si, WORD PTR _next_code$[ebp+esi]
	add	si, cx
	add	si, si
	movzx	ecx, si
	mov	WORD PTR _next_code$[ebp+eax*2], cx
	inc	eax
	cmp	eax, 15					; 0000000fH
	jle	SHORT $LL7@gen_codes
; Line 604
	xor	esi, esi
	cmp	DWORD PTR _max_code$[ebp], esi
	jl	SHORT $LN2@gen_codes
	push	ebx
$LL4@gen_codes:
; Line 605
	movzx	edx, WORD PTR [edi+esi*4+2]
; Line 606
	test	edx, edx
	je	SHORT $LN3@gen_codes
; Line 608
	movzx	eax, WORD PTR _next_code$[ebp+edx*2]
	mov	ecx, eax
	inc	eax
	mov	WORD PTR _next_code$[ebp+edx*2], ax
	xor	eax, eax
	npad	4
$LL12@gen_codes:
	mov	ebx, ecx
	and	ebx, 1
	or	eax, ebx
	dec	edx
	shr	ecx, 1
	add	eax, eax
	test	edx, edx
	jg	SHORT $LL12@gen_codes
	shr	eax, 1
	mov	WORD PTR [edi+esi*4], ax
$LN3@gen_codes:
; Line 604
	inc	esi
	cmp	esi, DWORD PTR _max_code$[ebp]
	jle	SHORT $LL4@gen_codes
	pop	ebx
$LN2@gen_codes:
; Line 613
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_gen_codes ENDP
; Function compile flags: /Ogtp
_node$ = -8						; size = 4
_elems$ = -8						; size = 4
_max_code$ = -4						; size = 4
_desc$ = 8						; size = 4
_build_tree PROC
; _s$ = esi
; Line 626
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 627
	mov	eax, DWORD PTR _desc$[ebp]
	push	ebx
	push	edi
	mov	edi, DWORD PTR [eax]
; Line 628
	mov	eax, DWORD PTR [eax+8]
; Line 629
	mov	edx, DWORD PTR [eax+12]
	mov	ebx, DWORD PTR [eax]
; Line 631
	or	ecx, -1
; Line 640
	xor	eax, eax
	mov	DWORD PTR _elems$[ebp], edx
	mov	DWORD PTR _max_code$[ebp], ecx
	mov	DWORD PTR [esi+5200], 0
	mov	DWORD PTR [esi+5204], 573		; 0000023dH
	test	edx, edx
	jle	SHORT $LN22@build_tree
$LL14@build_tree:
; Line 641
	cmp	WORD PTR [edi+eax*4], 0
	je	SHORT $LN11@build_tree
; Line 642
	inc	DWORD PTR [esi+5200]
	mov	edx, DWORD PTR [esi+5200]
	mov	DWORD PTR [esi+edx*4+2908], eax
	mov	DWORD PTR _max_code$[ebp], eax
; Line 643
	mov	BYTE PTR [eax+esi+5208], 0
; Line 644
	mov	ecx, eax
	jmp	SHORT $LN13@build_tree
$LN11@build_tree:
; Line 645
	xor	edx, edx
	mov	WORD PTR [edi+eax*4+2], dx
$LN13@build_tree:
; Line 640
	inc	eax
	cmp	eax, DWORD PTR _elems$[ebp]
	jl	SHORT $LL14@build_tree
$LN22@build_tree:
; Line 654
	cmp	DWORD PTR [esi+5200], 2
	jge	SHORT $LN8@build_tree
$LL9@build_tree:
; Line 655
	cmp	ecx, 2
	jge	SHORT $LN17@build_tree
	inc	ecx
	mov	eax, ecx
	jmp	SHORT $LN18@build_tree
$LN17@build_tree:
	xor	eax, eax
$LN18@build_tree:
	inc	DWORD PTR [esi+5200]
	mov	edx, DWORD PTR [esi+5200]
	mov	DWORD PTR [esi+edx*4+2908], eax
; Line 656
	mov	edx, 1
	mov	WORD PTR [edi+eax*4], dx
; Line 657
	mov	BYTE PTR [esi+eax+5208], 0
; Line 658
	dec	DWORD PTR [esi+5800]
	test	ebx, ebx
	je	SHORT $LN7@build_tree
	movzx	eax, WORD PTR [ebx+eax*4+2]
	sub	DWORD PTR [esi+5804], eax
$LN7@build_tree:
; Line 654
	cmp	DWORD PTR [esi+5200], 2
	jl	SHORT $LL9@build_tree
; Line 655
	mov	DWORD PTR _max_code$[ebp], ecx
$LN8@build_tree:
; Line 661
	mov	edx, DWORD PTR _desc$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 666
	mov	eax, DWORD PTR [esi+5200]
	cdq
	sub	eax, edx
	mov	ebx, eax
	sar	ebx, 1
	cmp	ebx, 1
	jl	SHORT $LN4@build_tree
$LL6@build_tree:
	push	ebx
	mov	eax, esi
	call	_pqdownheap
	dec	ebx
	add	esp, 4
	cmp	ebx, 1
	jge	SHORT $LL6@build_tree
$LN4@build_tree:
; Line 671
	mov	eax, DWORD PTR _elems$[ebp]
	mov	DWORD PTR _node$[ebp], eax
	npad	9
$LL3@build_tree:
; Line 673
	mov	eax, DWORD PTR [esi+5200]
	mov	ecx, DWORD PTR [esi+eax*4+2908]
	mov	ebx, DWORD PTR [esi+2912]
	dec	eax
	mov	DWORD PTR [esi+5200], eax
	push	1
	mov	eax, esi
	mov	DWORD PTR [esi+2912], ecx
	call	_pqdownheap
; Line 674
	mov	eax, DWORD PTR [esi+2912]
; Line 676
	or	edx, -1
	add	DWORD PTR [esi+5204], edx
	mov	ecx, DWORD PTR [esi+5204]
	mov	DWORD PTR [esi+ecx*4+2908], ebx
; Line 677
	add	DWORD PTR [esi+5204], edx
	mov	ecx, DWORD PTR [esi+5204]
	mov	DWORD PTR [esi+ecx*4+2908], eax
; Line 680
	mov	dx, WORD PTR [edi+eax*4]
	add	dx, WORD PTR [edi+ebx*4]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	WORD PTR [edi+ecx*4], dx
; Line 682
	mov	dl, BYTE PTR [esi+ebx+5208]
	mov	cl, BYTE PTR [esi+eax+5208]
	add	esp, 4
	cmp	dl, cl
	movzx	edx, dl
	jae	SHORT $LN20@build_tree
	movzx	edx, cl
$LN20@build_tree:
	mov	ecx, DWORD PTR _node$[ebp]
	inc	dl
	mov	BYTE PTR [esi+ecx+5208], dl
; Line 683
	movzx	edx, cx
	mov	WORD PTR [edi+eax*4+2], dx
	mov	WORD PTR [edi+ebx*4+2], dx
; Line 691
	mov	DWORD PTR [esi+2912], ecx
	inc	ecx
; Line 692
	push	1
	mov	eax, esi
	mov	DWORD PTR _node$[ebp], ecx
	call	_pqdownheap
	add	esp, 4
; Line 694
	cmp	DWORD PTR [esi+5200], 2
	jge	$LL3@build_tree
; Line 696
	dec	DWORD PTR [esi+5204]
	mov	eax, DWORD PTR [esi+5204]
	mov	edx, DWORD PTR [esi+2912]
; Line 701
	mov	ecx, DWORD PTR _desc$[ebp]
	mov	DWORD PTR [esi+eax*4+2908], edx
	mov	eax, esi
	call	_gen_bitlen
; Line 704
	mov	eax, DWORD PTR _max_code$[ebp]
	lea	edx, DWORD PTR [esi+2876]
	push	eax
	call	_gen_codes
	add	esp, 4
	pop	edi
	pop	ebx
; Line 705
	mov	esp, ebp
	pop	ebp
	ret	0
_build_tree ENDP
; Function compile flags: /Ogtp
_build_bl_tree PROC
; _s$ = eax
; Line 809
	push	esi
	mov	esi, eax
; Line 813
	mov	eax, DWORD PTR [esi+2844]
	lea	ecx, DWORD PTR [esi+148]
	push	esi
	call	_scan_tree
; Line 814
	mov	eax, DWORD PTR [esi+2856]
	lea	ecx, DWORD PTR [esi+2440]
	push	esi
	call	_scan_tree
; Line 817
	lea	eax, DWORD PTR [esi+2864]
	push	eax
	call	_build_tree
	add	esp, 12					; 0000000cH
; Line 826
	mov	eax, 18					; 00000012H
	npad	5
$LL4@build_bl_t:
; Line 827
	movzx	ecx, BYTE PTR _bl_order[eax]
	cmp	WORD PTR [esi+ecx*4+2686], 0
	jne	SHORT $LN8@build_bl_t
	movzx	edx, BYTE PTR _bl_order[eax-1]
	cmp	WORD PTR [esi+edx*4+2686], 0
	jne	SHORT $LN10@build_bl_t
	movzx	ecx, BYTE PTR _bl_order[eax-2]
	cmp	WORD PTR [esi+ecx*4+2686], 0
	jne	SHORT $LN11@build_bl_t
	movzx	edx, BYTE PTR _bl_order[eax-3]
	cmp	WORD PTR [esi+edx*4+2686], 0
	jne	SHORT $LN12@build_bl_t
; Line 826
	sub	eax, 4
	cmp	eax, 3
	jge	SHORT $LL4@build_bl_t
; Line 830
	lea	ecx, DWORD PTR [eax+eax*2+17]
	add	DWORD PTR [esi+5800], ecx
	pop	esi
; Line 835
	ret	0
$LN10@build_bl_t:
; Line 827
	dec	eax
; Line 830
	lea	ecx, DWORD PTR [eax+eax*2+17]
	add	DWORD PTR [esi+5800], ecx
	pop	esi
; Line 835
	ret	0
$LN11@build_bl_t:
; Line 827
	sub	eax, 2
; Line 830
	lea	ecx, DWORD PTR [eax+eax*2+17]
	add	DWORD PTR [esi+5800], ecx
	pop	esi
; Line 835
	ret	0
$LN12@build_bl_t:
; Line 827
	sub	eax, 3
$LN8@build_bl_t:
; Line 830
	lea	ecx, DWORD PTR [eax+eax*2+17]
	add	DWORD PTR [esi+5800], ecx
	pop	esi
; Line 835
	ret	0
_build_bl_tree ENDP
_TEXT	ENDS
PUBLIC	__tr_stored_block
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_s$ = 8							; size = 4
_buf$ = 12						; size = 4
_stored_len$ = 16					; size = 4
_last$ = 20						; size = 4
__tr_stored_block PROC
; Line 876
	push	ebp
	mov	ebp, esp
; Line 877
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	cmp	ecx, 13					; 0000000dH
	jle	SHORT $LN2@tr_stored_
	push	ebx
	push	esi
	mov	esi, DWORD PTR _last$[ebp]
	mov	dx, si
	shl	dx, cl
	mov	ecx, DWORD PTR [eax+8]
	or	WORD PTR [eax+5816], dx
	movzx	ebx, BYTE PTR [eax+5816]
	mov	edx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+edx], bl
	movzx	ebx, BYTE PTR [eax+5817]
	inc	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], bl
	mov	edx, DWORD PTR [eax+5820]
	inc	DWORD PTR [eax+20]
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	si, cl
; Line 882
	mov	ecx, DWORD PTR _buf$[ebp]
	add	edx, -13				; fffffff3H
	mov	DWORD PTR [eax+5820], edx
	mov	WORD PTR [eax+5816], si
	pop	esi
	pop	ebx
	push	1
	push	ecx
	mov	ecx, DWORD PTR _stored_len$[ebp]
	call	_copy_block
	add	esp, 8
; Line 883
	pop	ebp
	ret	0
$LN2@tr_stored_:
; Line 877
	mov	dx, WORD PTR _last$[ebp]
	shl	dx, cl
	add	ecx, 3
	mov	DWORD PTR [eax+5820], ecx
; Line 882
	mov	ecx, DWORD PTR _buf$[ebp]
	or	WORD PTR [eax+5816], dx
	push	1
	push	ecx
	mov	ecx, DWORD PTR _stored_len$[ebp]
	call	_copy_block
	add	esp, 8
; Line 883
	pop	ebp
	ret	0
__tr_stored_block ENDP
_TEXT	ENDS
PUBLIC	__tr_align
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_s$ = 8							; size = 4
__tr_align PROC
; Line 898
	push	ebp
	mov	ebp, esp
; Line 899
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, 2
	shl	dx, cl
	push	ebx
	push	esi
	push	edi
	or	WORD PTR [eax+5816], dx
	mov	esi, 1
	cmp	ecx, 13					; 0000000dH
	jle	SHORT $LN9@tr_align
	movzx	ebx, BYTE PTR [eax+5816]
	mov	edx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], bl
	add	DWORD PTR [eax+20], esi
	movzx	ebx, BYTE PTR [eax+5817]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], bl
	mov	edx, DWORD PTR [eax+5820]
	add	DWORD PTR [eax+20], esi
	mov	cl, 16					; 00000010H
	sub	cl, dl
	mov	edi, 2
	shr	di, cl
	add	edx, -13				; fffffff3H
	mov	DWORD PTR [eax+5820], edx
	mov	WORD PTR [eax+5816], di
	jmp	SHORT $LN8@tr_align
$LN9@tr_align:
	add	ecx, 3
	mov	DWORD PTR [eax+5820], ecx
$LN8@tr_align:
; Line 900
	mov	ecx, DWORD PTR [eax+5820]
	xor	edx, edx
	shl	dx, cl
	or	WORD PTR [eax+5816], dx
	cmp	ecx, 9
	jle	SHORT $LN7@tr_align
	movzx	ebx, BYTE PTR [eax+5816]
	mov	edx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], bl
	add	DWORD PTR [eax+20], esi
	movzx	ebx, BYTE PTR [eax+5817]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], bl
	mov	edx, DWORD PTR [eax+5820]
	add	DWORD PTR [eax+20], esi
	mov	cl, 16					; 00000010H
	sub	cl, dl
	xor	edi, edi
	shr	di, cl
	add	edx, -9					; fffffff7H
	mov	DWORD PTR [eax+5820], edx
	mov	WORD PTR [eax+5816], di
	jmp	SHORT $LN6@tr_align
$LN7@tr_align:
	add	ecx, 7
	mov	DWORD PTR [eax+5820], ecx
$LN6@tr_align:
; Line 904
	call	_bi_flush
; Line 910
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR [eax+5812]
	sub	edx, ecx
	add	edx, 11					; 0000000bH
	cmp	edx, 9
	jge	$LN12@tr_align
; Line 911
	mov	edx, 2
	shl	dx, cl
	or	WORD PTR [eax+5816], dx
	cmp	ecx, 13					; 0000000dH
	jle	SHORT $LN4@tr_align
	movzx	ebx, BYTE PTR [eax+5816]
	mov	edx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], bl
	add	DWORD PTR [eax+20], esi
	movzx	ebx, BYTE PTR [eax+5817]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], bl
	mov	edx, DWORD PTR [eax+5820]
	add	DWORD PTR [eax+20], esi
	mov	cl, 16					; 00000010H
	sub	cl, dl
	mov	edi, 2
	shr	di, cl
	add	edx, -13				; fffffff3H
	mov	DWORD PTR [eax+5820], edx
	mov	WORD PTR [eax+5816], di
	jmp	SHORT $LN3@tr_align
$LN4@tr_align:
	add	ecx, 3
	mov	DWORD PTR [eax+5820], ecx
$LN3@tr_align:
; Line 912
	mov	ecx, DWORD PTR [eax+5820]
	xor	edx, edx
	shl	dx, cl
	or	WORD PTR [eax+5816], dx
	cmp	ecx, 9
	jle	SHORT $LN2@tr_align
	movzx	ebx, BYTE PTR [eax+5816]
	mov	edx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], bl
	add	DWORD PTR [eax+20], esi
	movzx	ebx, BYTE PTR [eax+5817]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], bl
	mov	edx, DWORD PTR [eax+5820]
	add	DWORD PTR [eax+20], esi
	mov	cl, 16					; 00000010H
	sub	cl, dl
	xor	esi, esi
	shr	si, cl
	add	edx, -9					; fffffff7H
	mov	DWORD PTR [eax+5820], edx
	mov	WORD PTR [eax+5816], si
; Line 916
	call	_bi_flush
	pop	edi
	pop	esi
; Line 918
	mov	DWORD PTR [eax+5812], 7
	pop	ebx
; Line 919
	pop	ebp
	ret	0
$LN2@tr_align:
; Line 912
	add	ecx, 7
	mov	DWORD PTR [eax+5820], ecx
; Line 916
	call	_bi_flush
$LN12@tr_align:
; Line 918
	pop	edi
	pop	esi
	mov	DWORD PTR [eax+5812], 7
	pop	ebx
; Line 919
	pop	ebp
	ret	0
__tr_align ENDP
_TEXT	ENDS
PUBLIC	__tr_flush_block
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_max_blindex$ = -4					; size = 4
_s$ = 8							; size = 4
_buf$ = 12						; size = 4
_stored_len$ = 16					; size = 4
_last$ = 20						; size = 4
__tr_flush_block PROC
; Line 930
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 935
	mov	ebx, DWORD PTR _stored_len$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [esi+132], 0
	push	edi
	mov	DWORD PTR _max_blindex$[ebp], 0
	jle	SHORT $LN14@tr_flush_b
; Line 938
	mov	edi, DWORD PTR [esi]
	cmp	DWORD PTR [edi+44], 2
	jne	SHORT $LN13@tr_flush_b
; Line 939
	call	_detect_data_type
	mov	DWORD PTR [edi+44], eax
$LN13@tr_flush_b:
; Line 942
	lea	eax, DWORD PTR [esi+2840]
	push	eax
	call	_build_tree
; Line 946
	lea	ecx, DWORD PTR [esi+2852]
	push	ecx
	call	_build_tree
	add	esp, 8
; Line 956
	mov	eax, esi
	call	_build_bl_tree
; Line 959
	mov	edx, DWORD PTR [esi+5800]
; Line 960
	mov	ecx, DWORD PTR [esi+5804]
	add	edx, 10					; 0000000aH
	add	ecx, 10					; 0000000aH
	shr	edx, 3
	shr	ecx, 3
	mov	DWORD PTR _max_blindex$[ebp], eax
; Line 966
	cmp	ecx, edx
	ja	SHORT $LN11@tr_flush_b
; Line 968
	jmp	SHORT $LN17@tr_flush_b
$LN14@tr_flush_b:
; Line 970
	lea	ecx, DWORD PTR [ebx+5]
$LN17@tr_flush_b:
	mov	edx, ecx
$LN11@tr_flush_b:
; Line 976
	lea	eax, DWORD PTR [ebx+4]
	cmp	eax, edx
	ja	SHORT $LN10@tr_flush_b
	mov	eax, DWORD PTR _buf$[ebp]
	test	eax, eax
	je	SHORT $LN10@tr_flush_b
; Line 985
	mov	edi, DWORD PTR _last$[ebp]
	push	edi
	push	ebx
	push	eax
	push	esi
	call	__tr_stored_block
	add	esp, 16					; 00000010H
	jmp	$LN4@tr_flush_b
$LN10@tr_flush_b:
; Line 990
	cmp	DWORD PTR [esi+136], 4
	je	$LN7@tr_flush_b
	cmp	ecx, edx
	je	$LN7@tr_flush_b
; Line 998
	mov	ecx, DWORD PTR [esi+5820]
	mov	edi, DWORD PTR _last$[ebp]
	lea	edx, DWORD PTR [edi+4]
	cmp	ecx, 13					; 0000000dH
	jle	SHORT $LN3@tr_flush_b
	mov	ax, dx
	shl	ax, cl
	mov	ecx, DWORD PTR [esi+20]
	or	WORD PTR [esi+5816], ax
	movzx	ebx, BYTE PTR [esi+5816]
	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [ecx+eax], bl
	inc	DWORD PTR [esi+20]
	movzx	ebx, BYTE PTR [esi+5817]
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+8]
	mov	BYTE PTR [eax+ecx], bl
	mov	eax, DWORD PTR [esi+5820]
	inc	DWORD PTR [esi+20]
	mov	cl, 16					; 00000010H
	sub	cl, al
	shr	dx, cl
	add	eax, -13				; fffffff3H
	mov	DWORD PTR [esi+5820], eax
	mov	WORD PTR [esi+5816], dx
	jmp	SHORT $LN2@tr_flush_b
$LN3@tr_flush_b:
	shl	dx, cl
	or	WORD PTR [esi+5816], dx
	add	ecx, 3
	mov	DWORD PTR [esi+5820], ecx
$LN2@tr_flush_b:
; Line 1000
	mov	eax, DWORD PTR _max_blindex$[ebp]
	mov	ecx, DWORD PTR [esi+2856]
	mov	edx, DWORD PTR [esi+2844]
	inc	eax
	push	eax
	inc	ecx
	push	ecx
	inc	edx
	push	edx
	call	_send_all_trees
; Line 1001
	lea	eax, DWORD PTR [esi+2440]
	push	eax
	lea	ecx, DWORD PTR [esi+148]
	push	ecx
	mov	eax, esi
	call	_compress_block
	add	esp, 20					; 00000014H
	jmp	$LN4@tr_flush_b
$LN7@tr_flush_b:
; Line 992
	mov	ecx, DWORD PTR [esi+5820]
	mov	edi, DWORD PTR _last$[ebp]
	lea	eax, DWORD PTR [edi+2]
	cmp	ecx, 13					; 0000000dH
	jle	SHORT $LN6@tr_flush_b
	mov	dx, ax
	shl	dx, cl
	mov	ecx, DWORD PTR [esi+20]
	or	WORD PTR [esi+5816], dx
	movzx	ebx, BYTE PTR [esi+5816]
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR [ecx+edx], bl
	inc	DWORD PTR [esi+20]
	movzx	ebx, BYTE PTR [esi+5817]
	mov	ecx, DWORD PTR [esi+20]
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR [ecx+edx], bl
	mov	edx, DWORD PTR [esi+5820]
	inc	DWORD PTR [esi+20]
	mov	cl, 16					; 00000010H
	sub	cl, dl
	shr	ax, cl
	add	edx, -13				; fffffff3H
	mov	DWORD PTR [esi+5820], edx
	mov	WORD PTR [esi+5816], ax
	jmp	SHORT $LN5@tr_flush_b
$LN6@tr_flush_b:
	shl	ax, cl
	or	WORD PTR [esi+5816], ax
	add	ecx, 3
	mov	DWORD PTR [esi+5820], ecx
$LN5@tr_flush_b:
; Line 993
	push	OFFSET _static_dtree
	push	OFFSET _static_ltree
	mov	eax, esi
	call	_compress_block
	add	esp, 8
$LN4@tr_flush_b:
; Line 1010
	mov	edx, esi
	call	_init_block
; Line 1012
	test	edi, edi
	je	SHORT $LN1@tr_flush_b
; Line 1013
	mov	eax, esi
	call	_bi_windup
$LN1@tr_flush_b:
	pop	edi
	pop	esi
	pop	ebx
; Line 1020
	mov	esp, ebp
	pop	ebp
	ret	0
__tr_flush_block ENDP
_TEXT	ENDS
END
