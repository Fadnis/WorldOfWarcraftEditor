; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\programovani\WoW Editor\Test\src\zlib\gzwrite.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG5774	DB	'out of memory', 00H
	ORG $+2
$SG5776	DB	'1.2.5', 00H
	ORG $+2
$SG5778	DB	'out of memory', 00H
	ORG $+2
$SG5800	DB	'internal error: deflate stream corrupt', 00H
	ORG $+1
$SG5835	DB	'requested length does not fit in int', 00H
_DATA	ENDS
EXTRN	_gz_error:PROC
EXTRN	__imp__free:PROC
EXTRN	_deflateInit2_:PROC
EXTRN	__imp__malloc:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
tv66 = -4						; size = 4
_gz_init PROC
; _state$ = esi
; File c:\programovani\wow editor\test\src\zlib\gzwrite.c
; Line 13
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 18
	mov	ebx, DWORD PTR [esi+20]
	push	edi
	push	ebx
	lea	edi, DWORD PTR [esi+84]
	call	DWORD PTR __imp__malloc
; Line 19
	push	ebx
	mov	DWORD PTR tv66[ebp], eax
	mov	DWORD PTR [esi+24], eax
	call	DWORD PTR __imp__malloc
; Line 20
	xor	ebx, ebx
	add	esp, 8
	mov	DWORD PTR [esi+28], eax
	cmp	DWORD PTR tv66[ebp], ebx
	je	SHORT $LN4@gz_init
	cmp	eax, ebx
	je	SHORT $LN8@gz_init
; Line 34
	push	56					; 00000038H
	push	OFFSET $SG5776
	mov	DWORD PTR [edi+32], ebx
	mov	DWORD PTR [edi+36], ebx
	mov	DWORD PTR [edi+40], ebx
	mov	eax, DWORD PTR [esi+64]
	mov	ecx, DWORD PTR [esi+60]
	push	eax
	push	8
	push	31					; 0000001fH
	push	8
	push	ecx
	push	edi
	call	_deflateInit2_
	add	esp, 32					; 00000020H
; Line 35
	test	eax, eax
	je	SHORT $LN1@gz_init
; Line 36
	mov	edx, DWORD PTR [esi+24]
	push	edx
	call	DWORD PTR __imp__free
; Line 37
	push	OFFSET $SG5778
	push	-4					; fffffffcH
	push	esi
	call	_gz_error
	add	esp, 16					; 00000010H
	pop	edi
	or	eax, -1
	pop	ebx
; Line 49
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1@gz_init:
; Line 42
	mov	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [esi+16], eax
; Line 45
	mov	DWORD PTR [edi+16], eax
; Line 46
	mov	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+12], eax
	pop	edi
; Line 47
	mov	DWORD PTR [esi+32], eax
; Line 48
	xor	eax, eax
	pop	ebx
; Line 49
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@gz_init:
; Line 21
	cmp	eax, ebx
	je	SHORT $LN8@gz_init
; Line 22
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN8@gz_init:
; Line 23
	mov	eax, DWORD PTR [esi+24]
	cmp	eax, ebx
	je	SHORT $LN2@gz_init
; Line 24
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN2@gz_init:
; Line 25
	push	OFFSET $SG5774
	push	-4					; fffffffcH
	push	esi
	call	_gz_error
	add	esp, 12					; 0000000cH
	pop	edi
; Line 26
	or	eax, -1
	pop	ebx
; Line 49
	mov	esp, ebp
	pop	ebp
	ret	0
_gz_init ENDP
_TEXT	ENDS
EXTRN	__imp__strerror:PROC
EXTRN	__imp___errno:PROC
EXTRN	_deflateReset:PROC
EXTRN	_deflate:PROC
EXTRN	__imp___write:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_flush$ = 8						; size = 4
_gz_comp PROC
; _state$ = eax
; Line 58
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	mov	esi, eax
; Line 64
	cmp	DWORD PTR [esi+16], 0
	lea	ebx, DWORD PTR [esi+84]
	jne	SHORT $LN18@gz_comp
	call	_gz_init
	cmp	eax, -1
	jne	SHORT $LN18@gz_comp
; Line 65
	pop	esi
	or	eax, eax
	pop	ebx
; Line 104
	pop	ebp
	ret	0
$LN18@gz_comp:
; Line 68
	xor	eax, eax
	push	edi
$LL11@gz_comp:
; Line 73
	cmp	DWORD PTR [ebx+16], 0
	je	SHORT $LN19@gz_comp
	mov	ecx, DWORD PTR _flush$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@gz_comp
	cmp	ecx, 4
	jne	SHORT $LN19@gz_comp
	cmp	eax, 1
	jne	SHORT $LN8@gz_comp
$LN19@gz_comp:
; Line 74
	mov	eax, DWORD PTR [esi+32]
	mov	edi, DWORD PTR [ebx+12]
	sub	edi, eax
; Line 76
	je	SHORT $LN20@gz_comp
	push	edi
	push	eax
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	DWORD PTR __imp___write
	add	esp, 12					; 0000000cH
	test	eax, eax
	js	SHORT $LN4@gz_comp
	cmp	eax, edi
	jne	SHORT $LN4@gz_comp
$LN20@gz_comp:
; Line 80
	cmp	DWORD PTR [ebx+16], 0
	jne	SHORT $LN3@gz_comp
; Line 81
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR [ebx+16], ecx
; Line 82
	mov	edx, DWORD PTR [esi+28]
	mov	DWORD PTR [ebx+12], edx
$LN3@gz_comp:
; Line 84
	mov	eax, DWORD PTR [ebx+12]
	mov	ecx, DWORD PTR _flush$[ebp]
	mov	DWORD PTR [esi+32], eax
$LN8@gz_comp:
; Line 88
	mov	edi, DWORD PTR [ebx+16]
; Line 89
	push	ecx
	push	ebx
	call	_deflate
	add	esp, 8
; Line 90
	cmp	eax, -2					; fffffffeH
	je	SHORT $LN17@gz_comp
; Line 95
	sub	edi, DWORD PTR [ebx+16]
; Line 96
	jne	SHORT $LL11@gz_comp
; Line 99
	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN1@gz_comp
; Line 100
	push	ebx
	call	_deflateReset
	add	esp, 4
$LN1@gz_comp:
; Line 103
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 104
	pop	ebp
	ret	0
$LN4@gz_comp:
; Line 77
	call	DWORD PTR __imp___errno
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__strerror
	push	eax
	push	-1
	push	esi
	call	_gz_error
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
; Line 78
	or	eax, -1
	pop	ebx
; Line 104
	pop	ebp
	ret	0
$LN17@gz_comp:
; Line 92
	push	OFFSET $SG5800
	push	-2					; fffffffeH
	push	esi
	call	_gz_error
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
; Line 93
	or	eax, -1
	pop	ebx
; Line 104
	pop	ebp
	ret	0
_gz_comp ENDP
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_first$ = -8						; size = 4
_n$ = -4						; size = 4
_len$ = 8						; size = 4
_gz_zero PROC
; _state$ = eax
; Line 110
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	esi, eax
; Line 116
	cmp	DWORD PTR [esi+88], 0
	push	edi
	lea	edi, DWORD PTR [esi+84]
	je	SHORT $LN36@gz_zero
	push	0
	call	_gz_comp
	add	esp, 4
	cmp	eax, -1
	jne	SHORT $LN36@gz_zero
; Line 117
	pop	edi
	or	eax, eax
	pop	esi
; Line 136
	mov	esp, ebp
	pop	ebp
	ret	0
$LN36@gz_zero:
; Line 121
	mov	eax, DWORD PTR _len$[ebp]
	push	ebx
	mov	DWORD PTR _first$[ebp], 1
	test	eax, eax
	je	$LN3@gz_zero
	npad	3
$LL4@gz_zero:
; Line 123
	mov	ebx, DWORD PTR [esi+16]
	cmp	ebx, 2147483647				; 7fffffffH
	ja	SHORT $LN9@gz_zero
	cmp	ebx, eax
	jg	SHORT $LN9@gz_zero
	mov	DWORD PTR _n$[ebp], ebx
	jmp	SHORT $LN10@gz_zero
$LN9@gz_zero:
	mov	DWORD PTR _n$[ebp], eax
	mov	ebx, eax
$LN10@gz_zero:
; Line 124
	cmp	DWORD PTR _first$[ebp], 0
	je	SHORT $LN2@gz_zero
; Line 125
	mov	eax, DWORD PTR [esi+24]
	push	ebx
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 126
	mov	DWORD PTR _first$[ebp], 0
$LN2@gz_zero:
; Line 128
	mov	DWORD PTR [edi+4], ebx
; Line 129
	mov	ecx, DWORD PTR [esi+24]
	mov	DWORD PTR [edi], ecx
; Line 130
	add	DWORD PTR [esi+12], ebx
; Line 131
	cmp	DWORD PTR [esi+16], 0
	jne	SHORT $LL21@gz_zero
	call	_gz_init
	cmp	eax, -1
	je	$LN29@gz_zero
$LL21@gz_zero:
	cmp	DWORD PTR [edi+16], 0
	jne	SHORT $LN18@gz_zero
	mov	eax, DWORD PTR [esi+32]
	mov	ebx, DWORD PTR [edi+12]
	sub	ebx, eax
	je	SHORT $LN37@gz_zero
	mov	edx, DWORD PTR [esi+4]
	push	ebx
	push	eax
	push	edx
	call	DWORD PTR __imp___write
	add	esp, 12					; 0000000cH
	test	eax, eax
	js	SHORT $LN14@gz_zero
	cmp	eax, ebx
	jne	SHORT $LN14@gz_zero
$LN37@gz_zero:
	cmp	DWORD PTR [edi+16], 0
	jne	SHORT $LN13@gz_zero
	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
	mov	ecx, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+12], ecx
$LN13@gz_zero:
	mov	edx, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+32], edx
$LN18@gz_zero:
	mov	ebx, DWORD PTR [edi+16]
	push	0
	push	edi
	call	_deflate
	add	esp, 8
	cmp	eax, -2					; fffffffeH
	je	SHORT $LN28@gz_zero
	sub	ebx, DWORD PTR [edi+16]
	jne	SHORT $LL21@gz_zero
; Line 133
	mov	eax, DWORD PTR _n$[ebp]
	sub	DWORD PTR _len$[ebp], eax
	je	SHORT $LN3@gz_zero
; Line 121
	mov	eax, DWORD PTR _len$[ebp]
	jmp	$LL4@gz_zero
; Line 131
$LN14@gz_zero:
	call	DWORD PTR __imp___errno
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__strerror
	push	eax
	push	-1
	push	esi
	call	_gz_error
	add	esp, 16					; 00000010H
	pop	ebx
	pop	edi
; Line 132
	or	eax, -1
	pop	esi
; Line 136
	mov	esp, ebp
	pop	ebp
	ret	0
$LN28@gz_zero:
; Line 131
	push	OFFSET $SG5800
	push	-2					; fffffffeH
	push	esi
	call	_gz_error
	add	esp, 12					; 0000000cH
$LN29@gz_zero:
; Line 132
	pop	ebx
	pop	edi
	or	eax, -1
	pop	esi
; Line 136
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@gz_zero:
	pop	ebx
	pop	edi
; Line 135
	xor	eax, eax
	pop	esi
; Line 136
	mov	esp, ebp
	pop	ebp
	ret	0
_gz_zero ENDP
_TEXT	ENDS
PUBLIC	_gzwrite
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_put$ = 16						; size = 4
_len$ = 16						; size = 4
_gzwrite PROC
; Line 143
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 144
	mov	ebx, DWORD PTR _len$[ebp]
	push	esi
; Line 150
	mov	esi, DWORD PTR _file$[ebp]
	mov	DWORD PTR _put$[ebp], ebx
	test	esi, esi
; Line 151
	je	SHORT $LN32@gzwrite
; Line 156
	cmp	DWORD PTR [esi], 31153			; 000079b1H
	jne	SHORT $LN32@gzwrite
	cmp	DWORD PTR [esi+76], 0
	jne	SHORT $LN32@gzwrite
; Line 161
	test	ebx, ebx
	jns	SHORT $LN30@gzwrite
; Line 162
	push	OFFSET $SG5835
	push	-5					; fffffffbH
	push	esi
	call	_gz_error
	add	esp, 12					; 0000000cH
$LN32@gzwrite:
; Line 163
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 214
	pop	ebp
	ret	0
$LN30@gzwrite:
; Line 168
	je	SHORT $LN32@gzwrite
; Line 171
	cmp	DWORD PTR [esi+16], 0
	jne	SHORT $LN24@gzwrite
	call	_gz_init
	cmp	eax, -1
; Line 172
	je	SHORT $LN32@gzwrite
$LN24@gzwrite:
; Line 175
	cmp	DWORD PTR [esi+72], 0
	je	SHORT $LN27@gzwrite
; Line 177
	mov	eax, DWORD PTR [esi+68]
	push	eax
	mov	eax, esi
	mov	DWORD PTR [esi+72], 0
	call	_gz_zero
	add	esp, 4
	cmp	eax, -1
; Line 178
	je	SHORT $LN32@gzwrite
$LN27@gzwrite:
	push	edi
; Line 182
	cmp	ebx, DWORD PTR [esi+16]
	jae	SHORT $LN10@gzwrite
$LL9@gzwrite:
; Line 185
	mov	eax, DWORD PTR [esi+88]
	test	eax, eax
	jne	SHORT $LN6@gzwrite
; Line 186
	mov	ecx, DWORD PTR [esi+24]
	mov	DWORD PTR [esi+84], ecx
$LN6@gzwrite:
; Line 187
	mov	edi, DWORD PTR [esi+16]
	sub	edi, eax
; Line 188
	cmp	edi, ebx
	jbe	SHORT $LN5@gzwrite
; Line 189
	mov	edi, ebx
$LN5@gzwrite:
; Line 190
	mov	edx, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [esi+84]
	push	edi
	push	edx
	add	ecx, eax
	push	ecx
	call	_memcpy
; Line 191
	add	DWORD PTR [esi+88], edi
; Line 192
	add	DWORD PTR [esi+12], edi
; Line 193
	add	DWORD PTR _buf$[ebp], edi
	add	esp, 12					; 0000000cH
; Line 194
	sub	ebx, edi
; Line 195
	je	SHORT $LN26@gzwrite
	push	0
	mov	eax, esi
	call	_gz_comp
	add	esp, 4
	cmp	eax, -1
	jne	SHORT $LL9@gzwrite
$LN31@gzwrite:
	pop	edi
	pop	esi
; Line 196
	xor	eax, eax
	pop	ebx
; Line 214
	pop	ebp
	ret	0
$LN10@gzwrite:
; Line 201
	cmp	DWORD PTR [esi+88], 0
	je	SHORT $LN28@gzwrite
	push	0
	mov	eax, esi
	call	_gz_comp
	add	esp, 4
	cmp	eax, -1
; Line 202
	je	SHORT $LN31@gzwrite
$LN28@gzwrite:
; Line 206
	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [esi+88], ebx
	mov	DWORD PTR [esi+84], edx
; Line 207
	add	DWORD PTR [esi+12], ebx
; Line 208
	push	0
	mov	eax, esi
	call	_gz_comp
	add	esp, 4
	cmp	eax, -1
; Line 209
	je	SHORT $LN31@gzwrite
$LN26@gzwrite:
; Line 213
	mov	eax, DWORD PTR _put$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 214
	pop	ebp
	ret	0
_gzwrite ENDP
_TEXT	ENDS
PUBLIC	_gzputc
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 11						; size = 1
_c$ = 12						; size = 4
_gzputc	PROC
; Line 220
	push	ebp
	mov	ebp, esp
	push	esi
; Line 226
	mov	esi, DWORD PTR _file$[ebp]
	test	esi, esi
	jne	SHORT $LN8@gzputc
$LN12@gzputc:
; Line 227
	or	eax, -1
	pop	esi
; Line 257
	pop	ebp
	ret	0
$LN8@gzputc:
; Line 232
	cmp	DWORD PTR [esi], 31153			; 000079b1H
	jne	SHORT $LN12@gzputc
	cmp	DWORD PTR [esi+76], 0
	jne	SHORT $LN12@gzputc
; Line 236
	cmp	DWORD PTR [esi+72], 0
	je	SHORT $LN4@gzputc
; Line 238
	mov	eax, DWORD PTR [esi+68]
	push	eax
	mov	eax, esi
	mov	DWORD PTR [esi+72], 0
	call	_gz_zero
	add	esp, 4
	cmp	eax, -1
; Line 239
	je	SHORT $LN12@gzputc
$LN4@gzputc:
; Line 244
	mov	ecx, DWORD PTR [esi+88]
	cmp	ecx, DWORD PTR [esi+16]
	jae	SHORT $LN3@gzputc
; Line 245
	test	ecx, ecx
	jne	SHORT $LN2@gzputc
; Line 246
	mov	edx, DWORD PTR [esi+24]
	mov	DWORD PTR [esi+84], edx
$LN2@gzputc:
; Line 247
	mov	edx, DWORD PTR [esi+84]
	mov	eax, DWORD PTR _c$[ebp]
	mov	BYTE PTR [ecx+edx], al
	inc	DWORD PTR [esi+88]
; Line 248
	inc	DWORD PTR [esi+12]
	pop	esi
; Line 257
	pop	ebp
	ret	0
$LN3@gzputc:
	push	ebx
; Line 253
	mov	ebx, DWORD PTR _c$[ebp]
; Line 254
	push	1
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	esi
	mov	BYTE PTR _buf$[ebp], bl
	call	_gzwrite
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	je	SHORT $LN1@gzputc
; Line 255
	pop	ebx
	or	eax, -1
	pop	esi
; Line 257
	pop	ebp
	ret	0
$LN1@gzputc:
; Line 256
	mov	eax, ebx
	pop	ebx
	pop	esi
; Line 257
	pop	ebp
	ret	0
_gzputc	ENDP
_TEXT	ENDS
PUBLIC	_gzputs
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_str$ = 12						; size = 4
_gzputs	PROC
; Line 263
	push	ebp
	mov	ebp, esp
; Line 268
	mov	edx, DWORD PTR _str$[ebp]
	mov	eax, edx
	push	esi
	lea	esi, DWORD PTR [eax+1]
	npad	4
$LL5@gzputs:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL5@gzputs
	sub	eax, esi
	mov	esi, eax
; Line 269
	mov	eax, DWORD PTR _file$[ebp]
	push	esi
	push	edx
	push	eax
	call	_gzwrite
	add	esp, 12					; 0000000cH
; Line 270
	test	eax, eax
	jne	SHORT $LN4@gzputs
	test	esi, esi
	je	SHORT $LN4@gzputs
	or	eax, -1
$LN4@gzputs:
	pop	esi
; Line 271
	pop	ebp
	ret	0
_gzputs	ENDP
_TEXT	ENDS
PUBLIC	_gzprintf
EXTRN	__imp___vsnprintf:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_format$ = 12						; size = 4
_gzprintf PROC
; Line 278
	push	ebp
	mov	ebp, esp
	push	esi
; Line 285
	mov	esi, DWORD PTR _file$[ebp]
	test	esi, esi
	jne	SHORT $LN9@gzprintf
; Line 286
	or	eax, -1
	pop	esi
; Line 343
	pop	ebp
	ret	0
$LN9@gzprintf:
; Line 291
	cmp	DWORD PTR [esi], 31153			; 000079b1H
	jne	SHORT $LN13@gzprintf
	cmp	DWORD PTR [esi+76], 0
	jne	SHORT $LN13@gzprintf
; Line 295
	cmp	DWORD PTR [esi+16], 0
	jne	SHORT $LN6@gzprintf
	call	_gz_init
	cmp	eax, -1
	jne	SHORT $LN6@gzprintf
$LN13@gzprintf:
; Line 296
	xor	eax, eax
	pop	esi
; Line 343
	pop	ebp
	ret	0
$LN6@gzprintf:
; Line 299
	cmp	DWORD PTR [esi+72], 0
	je	SHORT $LN4@gzprintf
; Line 301
	mov	eax, DWORD PTR [esi+68]
	push	eax
	mov	eax, esi
	mov	DWORD PTR [esi+72], 0
	call	_gz_zero
	add	esp, 4
	cmp	eax, -1
; Line 302
	je	SHORT $LN13@gzprintf
$LN4@gzprintf:
; Line 306
	cmp	DWORD PTR [esi+88], 0
	je	SHORT $LN3@gzprintf
	push	0
	mov	eax, esi
	call	_gz_comp
	add	esp, 4
	cmp	eax, -1
; Line 307
	je	SHORT $LN13@gzprintf
$LN3@gzprintf:
; Line 311
	mov	ecx, DWORD PTR [esi+24]
	push	edi
	mov	edi, DWORD PTR [esi+16]
	mov	BYTE PTR [edi+ecx-1], 0
; Line 329
	mov	eax, DWORD PTR _format$[ebp]
	mov	ecx, DWORD PTR [esi+24]
	lea	edx, DWORD PTR _format$[ebp+4]
	push	edx
	push	eax
	push	edi
	push	ecx
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H
; Line 335
	test	eax, eax
	jle	SHORT $LN1@gzprintf
	cmp	eax, edi
	jge	SHORT $LN1@gzprintf
	mov	edx, DWORD PTR [esi+24]
	cmp	BYTE PTR [edi+edx-1], 0
	jne	SHORT $LN1@gzprintf
; Line 339
	mov	DWORD PTR [esi+88], eax
; Line 340
	mov	ecx, DWORD PTR [esi+24]
	mov	DWORD PTR [esi+84], ecx
; Line 341
	add	DWORD PTR [esi+12], eax
	pop	edi
	pop	esi
; Line 343
	pop	ebp
	ret	0
$LN1@gzprintf:
	pop	edi
; Line 336
	xor	eax, eax
	pop	esi
; Line 343
	pop	ebp
	ret	0
_gzprintf ENDP
_TEXT	ENDS
PUBLIC	_gzflush
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_flush$ = 12						; size = 4
_gzflush PROC
; Line 425
	push	ebp
	mov	ebp, esp
	push	esi
; Line 429
	mov	esi, DWORD PTR _file$[ebp]
	test	esi, esi
	jne	SHORT $LN7@gzflush
; Line 430
	or	eax, -1
	pop	esi
; Line 451
	pop	ebp
	ret	0
$LN7@gzflush:
; Line 434
	cmp	DWORD PTR [esi], 31153			; 000079b1H
	jne	SHORT $LN5@gzflush
	cmp	DWORD PTR [esi+76], 0
	jne	SHORT $LN5@gzflush
; Line 438
	push	edi
	mov	edi, DWORD PTR _flush$[ebp]
	cmp	edi, 4
	ja	SHORT $LN3@gzflush
; Line 442
	cmp	DWORD PTR [esi+72], 0
	je	SHORT $LN1@gzflush
; Line 444
	mov	eax, DWORD PTR [esi+68]
	push	eax
	mov	eax, esi
	mov	DWORD PTR [esi+72], 0
	call	_gz_zero
	add	esp, 4
	cmp	eax, -1
	jne	SHORT $LN1@gzflush
; Line 445
	pop	edi
	or	eax, eax
	pop	esi
; Line 451
	pop	ebp
	ret	0
$LN1@gzflush:
; Line 449
	push	edi
	mov	eax, esi
	call	_gz_comp
; Line 450
	mov	eax, DWORD PTR [esi+76]
	add	esp, 4
	pop	edi
	pop	esi
; Line 451
	pop	ebp
	ret	0
$LN3@gzflush:
	pop	edi
; Line 439
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 451
	pop	ebp
	ret	0
$LN5@gzflush:
; Line 435
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 451
	pop	ebp
	ret	0
_gzflush ENDP
_TEXT	ENDS
PUBLIC	_gzsetparams
EXTRN	_deflateParams:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_gzsetparams PROC
; Line 458
	push	ebp
	mov	ebp, esp
	push	esi
; Line 463
	mov	esi, DWORD PTR _file$[ebp]
	test	esi, esi
	jne	SHORT $LN8@gzsetparam
$LN6@gzsetparam:
; Line 464
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 493
	pop	ebp
	ret	0
$LN8@gzsetparam:
; Line 469
	cmp	DWORD PTR [esi], 31153			; 000079b1H
	jne	SHORT $LN6@gzsetparam
	cmp	DWORD PTR [esi+76], 0
	jne	SHORT $LN6@gzsetparam
; Line 473
	push	ebx
	mov	ebx, DWORD PTR _strategy$[ebp]
	push	edi
	mov	edi, DWORD PTR _level$[ebp]
	cmp	edi, DWORD PTR [esi+60]
	jne	SHORT $LN5@gzsetparam
	cmp	ebx, DWORD PTR [esi+64]
; Line 474
	je	SHORT $LN14@gzsetparam
$LN5@gzsetparam:
; Line 477
	cmp	DWORD PTR [esi+72], 0
	je	SHORT $LN11@gzsetparam
; Line 479
	mov	eax, DWORD PTR [esi+68]
	push	eax
	mov	eax, esi
	mov	DWORD PTR [esi+72], 0
	call	_gz_zero
	add	esp, 4
	cmp	eax, -1
	jne	SHORT $LN11@gzsetparam
; Line 480
	pop	edi
	pop	ebx
	or	eax, eax
	pop	esi
; Line 493
	pop	ebp
	ret	0
$LN11@gzsetparam:
; Line 484
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN2@gzsetparam
; Line 486
	cmp	DWORD PTR [esi+88], 0
	je	SHORT $LN1@gzsetparam
	push	1
	mov	eax, esi
	call	_gz_comp
	add	esp, 4
	cmp	eax, -1
	jne	SHORT $LN1@gzsetparam
; Line 487
	mov	eax, DWORD PTR [esi+76]
	pop	edi
	pop	ebx
	pop	esi
; Line 493
	pop	ebp
	ret	0
$LN1@gzsetparam:
; Line 488
	push	ebx
	lea	eax, DWORD PTR [esi+84]
	push	edi
	push	eax
	call	_deflateParams
	add	esp, 12					; 0000000cH
$LN2@gzsetparam:
; Line 490
	mov	DWORD PTR [esi+60], edi
; Line 491
	mov	DWORD PTR [esi+64], ebx
$LN14@gzsetparam:
; Line 492
	pop	edi
	pop	ebx
	xor	eax, eax
	pop	esi
; Line 493
	pop	ebp
	ret	0
_gzsetparams ENDP
_TEXT	ENDS
PUBLIC	_gzclose_w
EXTRN	__imp___close:PROC
EXTRN	_deflateEnd:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclose_w PROC
; Line 498
	push	ebp
	mov	ebp, esp
	push	esi
; Line 503
	mov	esi, DWORD PTR _file$[ebp]
	push	edi
	xor	edi, edi
	cmp	esi, edi
	jne	SHORT $LN3@gzclose_w
$LN6@gzclose_w:
	pop	edi
; Line 504
	mov	eax, -2					; fffffffeH
	pop	esi
; Line 527
	pop	ebp
	ret	0
$LN3@gzclose_w:
; Line 508
	cmp	DWORD PTR [esi], 31153			; 000079b1H
; Line 509
	jne	SHORT $LN6@gzclose_w
; Line 512
	cmp	DWORD PTR [esi+72], edi
	je	SHORT $LN1@gzclose_w
; Line 514
	mov	eax, DWORD PTR [esi+68]
	push	eax
	mov	eax, esi
	mov	DWORD PTR [esi+72], edi
	call	_gz_zero
	add	esp, 4
	mov	edi, eax
$LN1@gzclose_w:
; Line 518
	push	ebx
	push	4
	mov	eax, esi
	call	_gz_comp
; Line 519
	lea	ecx, DWORD PTR [esi+84]
	push	ecx
	add	edi, eax
	call	_deflateEnd
; Line 520
	mov	edx, DWORD PTR [esi+28]
	mov	ebx, DWORD PTR __imp__free
	push	edx
	call	ebx
; Line 521
	mov	eax, DWORD PTR [esi+24]
	push	eax
	call	ebx
; Line 522
	push	0
	push	0
	push	esi
	call	_gz_error
; Line 523
	mov	ecx, DWORD PTR [esi+8]
	push	ecx
	call	ebx
; Line 524
	mov	edx, DWORD PTR [esi+4]
	push	edx
	call	DWORD PTR __imp___close
; Line 525
	push	esi
	add	edi, eax
	call	ebx
	add	esp, 40					; 00000028H
; Line 526
	mov	eax, edi
	pop	ebx
	neg	eax
	pop	edi
	sbb	eax, eax
	pop	esi
; Line 527
	pop	ebp
	ret	0
_gzclose_w ENDP
_TEXT	ENDS
END
