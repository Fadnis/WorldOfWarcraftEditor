; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\programovani\WoW Editor\Test\src\zlib\gzlib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
$SG5939	DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG5825	DB	'<fd:%d>', 00H
$SG5966	DB	'out of memory', 00H
	ORG $+2
$SG5967	DB	': ', 00H
_DATA	ENDS
PUBLIC	_gzbuffer
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_size$ = 12						; size = 4
_gzbuffer PROC
; File c:\programovani\wow editor\test\src\zlib\gzlib.c
; Line 227
	push	ebp
	mov	ebp, esp
; Line 231
	mov	eax, DWORD PTR _file$[ebp]
	test	eax, eax
	jne	SHORT $LN4@gzbuffer
$LN7@gzbuffer:
; Line 232
	or	eax, -1
; Line 246
	pop	ebp
	ret	0
$LN4@gzbuffer:
; Line 234
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, 7247				; 00001c4fH
	je	SHORT $LN3@gzbuffer
	cmp	ecx, 31153				; 000079b1H
; Line 235
	jne	SHORT $LN7@gzbuffer
$LN3@gzbuffer:
; Line 238
	cmp	DWORD PTR [eax+16], 0
; Line 239
	jne	SHORT $LN7@gzbuffer
; Line 242
	mov	ecx, DWORD PTR _size$[ebp]
	test	ecx, ecx
; Line 243
	je	SHORT $LN7@gzbuffer
; Line 244
	mov	DWORD PTR [eax+20], ecx
; Line 245
	xor	eax, eax
; Line 246
	pop	ebp
	ret	0
_gzbuffer ENDP
_TEXT	ENDS
PUBLIC	_gztell64
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gztell64 PROC
; Line 361
	push	ebp
	mov	ebp, esp
; Line 365
	mov	eax, DWORD PTR _file$[ebp]
	test	eax, eax
	jne	SHORT $LN2@gztell64
$LN7@gztell64:
; Line 366
	or	eax, -1
; Line 373
	pop	ebp
	ret	0
$LN2@gztell64:
; Line 368
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, 7247				; 00001c4fH
	je	SHORT $LN1@gztell64
	cmp	ecx, 31153				; 000079b1H
; Line 369
	jne	SHORT $LN7@gztell64
$LN1@gztell64:
; Line 372
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN5@gztell64
	mov	ecx, DWORD PTR [eax+68]
	mov	eax, DWORD PTR [eax+12]
	add	eax, ecx
; Line 373
	pop	ebp
	ret	0
$LN5@gztell64:
; Line 372
	mov	eax, DWORD PTR [eax+12]
	xor	ecx, ecx
	add	eax, ecx
; Line 373
	pop	ebp
	ret	0
_gztell64 ENDP
_TEXT	ENDS
PUBLIC	_gztell
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gztell	PROC
; Line 378
	push	ebp
	mov	ebp, esp
; Line 381
	mov	eax, DWORD PTR _file$[ebp]
	test	eax, eax
	jne	SHORT $LN6@gztell
$LN12@gztell:
	or	eax, -1
; Line 383
	pop	ebp
	ret	0
; Line 381
$LN6@gztell:
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, 7247				; 00001c4fH
	je	SHORT $LN5@gztell
	cmp	ecx, 31153				; 000079b1H
	jne	SHORT $LN12@gztell
$LN5@gztell:
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN9@gztell
	mov	ecx, DWORD PTR [eax+68]
	mov	eax, DWORD PTR [eax+12]
	add	eax, ecx
; Line 383
	pop	ebp
	ret	0
; Line 381
$LN9@gztell:
	mov	eax, DWORD PTR [eax+12]
	xor	ecx, ecx
	add	eax, ecx
; Line 383
	pop	ebp
	ret	0
_gztell	ENDP
_TEXT	ENDS
PUBLIC	_gzoffset64
EXTRN	__imp__lseek:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzoffset64 PROC
; Line 388
	push	ebp
	mov	ebp, esp
	push	esi
; Line 393
	mov	esi, DWORD PTR _file$[ebp]
	test	esi, esi
	jne	SHORT $LN4@gzoffset64
$LN7@gzoffset64:
; Line 394
	or	eax, -1
	pop	esi
; Line 406
	pop	ebp
	ret	0
$LN4@gzoffset64:
; Line 396
	mov	eax, DWORD PTR [esi]
	cmp	eax, 7247				; 00001c4fH
	je	SHORT $LN3@gzoffset64
	cmp	eax, 31153				; 000079b1H
; Line 397
	jne	SHORT $LN7@gzoffset64
$LN3@gzoffset64:
; Line 400
	mov	eax, DWORD PTR [esi+4]
	push	1
	push	0
	push	eax
	call	DWORD PTR __imp__lseek
	add	esp, 12					; 0000000cH
; Line 401
	cmp	eax, -1
; Line 402
	je	SHORT $LN7@gzoffset64
; Line 403
	cmp	DWORD PTR [esi], 7247			; 00001c4fH
	jne	SHORT $LN5@gzoffset64
; Line 404
	sub	eax, DWORD PTR [esi+88]
$LN5@gzoffset64:
	pop	esi
; Line 406
	pop	ebp
	ret	0
_gzoffset64 ENDP
_TEXT	ENDS
PUBLIC	_gzoffset
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzoffset PROC
; Line 411
	push	ebp
	mov	ebp, esp
	push	esi
; Line 414
	mov	esi, DWORD PTR _file$[ebp]
	test	esi, esi
	jne	SHORT $LN8@gzoffset
$LN12@gzoffset:
	or	eax, -1
	pop	esi
; Line 416
	pop	ebp
	ret	0
; Line 414
$LN8@gzoffset:
	mov	eax, DWORD PTR [esi]
	cmp	eax, 7247				; 00001c4fH
	je	SHORT $LN7@gzoffset
	cmp	eax, 31153				; 000079b1H
	jne	SHORT $LN12@gzoffset
$LN7@gzoffset:
	mov	eax, DWORD PTR [esi+4]
	push	1
	push	0
	push	eax
	call	DWORD PTR __imp__lseek
	add	esp, 12					; 0000000cH
	cmp	eax, -1
	je	SHORT $LN12@gzoffset
	cmp	DWORD PTR [esi], 7247			; 00001c4fH
	jne	SHORT $LN11@gzoffset
	sub	eax, DWORD PTR [esi+88]
$LN11@gzoffset:
	pop	esi
; Line 416
	pop	ebp
	ret	0
_gzoffset ENDP
_TEXT	ENDS
PUBLIC	_gzeof
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzeof	PROC
; Line 421
	push	ebp
	mov	ebp, esp
; Line 425
	mov	eax, DWORD PTR _file$[ebp]
	test	eax, eax
; Line 426
	je	SHORT $LN7@gzeof
; Line 428
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, 7247				; 00001c4fH
; Line 429
	jne	SHORT $LN7@gzeof
; Line 433
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN7@gzeof
	cmp	DWORD PTR [eax+88], 0
	jne	SHORT $LN7@gzeof
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN7@gzeof
	mov	eax, 1
; Line 434
	pop	ebp
	ret	0
$LN7@gzeof:
; Line 433
	xor	eax, eax
; Line 434
	pop	ebp
	ret	0
_gzeof	ENDP
_TEXT	ENDS
PUBLIC	_gzerror
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_errnum$ = 12						; size = 4
_gzerror PROC
; Line 440
	push	ebp
	mov	ebp, esp
; Line 444
	mov	eax, DWORD PTR _file$[ebp]
	test	eax, eax
	jne	SHORT $LN3@gzerror
$LN8@gzerror:
; Line 445
	xor	eax, eax
; Line 454
	pop	ebp
	ret	0
$LN3@gzerror:
; Line 447
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, 7247				; 00001c4fH
	je	SHORT $LN2@gzerror
	cmp	ecx, 31153				; 000079b1H
; Line 448
	jne	SHORT $LN8@gzerror
$LN2@gzerror:
; Line 451
	mov	ecx, DWORD PTR _errnum$[ebp]
	test	ecx, ecx
	je	SHORT $LN1@gzerror
; Line 452
	mov	edx, DWORD PTR [eax+76]
	mov	DWORD PTR [ecx], edx
$LN1@gzerror:
; Line 453
	mov	eax, DWORD PTR [eax+80]
	test	eax, eax
	jne	SHORT $LN4@gzerror
	mov	eax, OFFSET $SG5939
$LN4@gzerror:
; Line 454
	pop	ebp
	ret	0
_gzerror ENDP
_TEXT	ENDS
PUBLIC	_gz_error
EXTRN	__imp__malloc:PROC
EXTRN	__imp__free:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_state$ = 8						; size = 4
_err$ = 12						; size = 4
_msg$ = 16						; size = 4
_gz_error PROC
; Line 485
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 487
	mov	ebx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [ebx+80]
	push	esi
	test	eax, eax
	je	SHORT $LN16@gz_error
; Line 488
	cmp	DWORD PTR [ebx+76], -4			; fffffffcH
	je	SHORT $LN4@gz_error
; Line 489
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN4@gz_error:
; Line 490
	mov	DWORD PTR [ebx+80], 0
$LN16@gz_error:
; Line 495
	mov	esi, DWORD PTR _msg$[ebp]
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [ebx+76], eax
	test	esi, esi
	je	$LN6@gz_error
; Line 499
	cmp	eax, -4					; fffffffcH
	jne	SHORT $LN2@gz_error
; Line 500
	mov	DWORD PTR [ebx+80], esi
	pop	esi
	pop	ebx
; Line 514
	pop	ebp
	ret	0
$LN2@gz_error:
	push	edi
; Line 505
	mov	edi, DWORD PTR [ebx+8]
	mov	eax, edi
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL10@gz_error:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL10@gz_error
	sub	eax, edx
	mov	edx, eax
	mov	eax, esi
	lea	esi, DWORD PTR [eax+1]
$LL11@gz_error:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL11@gz_error
	sub	eax, esi
	lea	eax, DWORD PTR [eax+edx+3]
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	mov	DWORD PTR [ebx+80], eax
	test	eax, eax
	jne	SHORT $LN1@gz_error
; Line 506
	pop	edi
	pop	esi
	mov	DWORD PTR [ebx+76], -4			; fffffffcH
; Line 507
	mov	DWORD PTR [ebx+80], OFFSET $SG5966
	pop	ebx
; Line 514
	pop	ebp
	ret	0
$LN1@gz_error:
; Line 510
	mov	ecx, edi
	mov	edx, eax
$LL8@gz_error:
	mov	al, BYTE PTR [ecx]
	mov	BYTE PTR [edx], al
	inc	ecx
	inc	edx
	test	al, al
	jne	SHORT $LL8@gz_error
; Line 511
	mov	eax, OFFSET $SG5967
	mov	ecx, eax
$LL12@gz_error:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL12@gz_error
	mov	edi, DWORD PTR [ebx+80]
	sub	eax, ecx
	mov	esi, ecx
	dec	edi
$LL13@gz_error:
	mov	cl, BYTE PTR [edi+1]
	inc	edi
	test	cl, cl
	jne	SHORT $LL13@gz_error
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
; Line 512
	mov	eax, DWORD PTR _msg$[ebp]
	and	ecx, 3
	rep movsb
	mov	ecx, eax
$LL14@gz_error:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL14@gz_error
	mov	edi, DWORD PTR [ebx+80]
	sub	eax, ecx
	mov	esi, ecx
	dec	edi
	npad	1
$LL15@gz_error:
	mov	cl, BYTE PTR [edi+1]
	inc	edi
	test	cl, cl
	jne	SHORT $LL15@gz_error
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
	and	ecx, 3
	rep movsb
	pop	edi
$LN6@gz_error:
	pop	esi
	pop	ebx
; Line 514
	pop	ebp
	ret	0
_gz_error ENDP
; Function compile flags: /Ogtp
_gz_reset PROC
; _state$ = esi
; Line 69
	push	edi
; Line 70
	xor	edi, edi
	cmp	DWORD PTR [esi], 7247			; 00001c4fH
	jne	SHORT $LN1@gz_reset
; Line 71
	mov	DWORD PTR [esi+36], edi
; Line 72
	mov	DWORD PTR [esi+40], edi
; Line 73
	mov	DWORD PTR [esi+52], edi
; Line 74
	mov	DWORD PTR [esi+56], 1
$LN1@gz_reset:
; Line 77
	mov	eax, DWORD PTR [esi+80]
	mov	DWORD PTR [esi+72], edi
	cmp	eax, edi
	je	SHORT $LN8@gz_reset
	cmp	DWORD PTR [esi+76], -4			; fffffffcH
	je	SHORT $LN7@gz_reset
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN7@gz_reset:
	mov	DWORD PTR [esi+80], edi
$LN8@gz_reset:
	mov	DWORD PTR [esi+76], edi
; Line 78
	mov	DWORD PTR [esi+12], edi
; Line 79
	mov	DWORD PTR [esi+88], edi
	pop	edi
; Line 80
	ret	0
_gz_reset ENDP
_TEXT	ENDS
EXTRN	__imp__open:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_path$ = 8						; size = 4
_fd$ = 12						; size = 4
_gz_open PROC
; _mode$ = eax
; Line 87
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 91
	push	140					; 0000008cH
	mov	edi, eax
	call	DWORD PTR __imp__malloc
	mov	esi, eax
; Line 92
	xor	eax, eax
	add	esp, 4
	cmp	esi, eax
; Line 93
	je	$LN38@gz_open
; Line 94
	mov	DWORD PTR [esi+16], eax
; Line 95
	mov	DWORD PTR [esi+20], 8192		; 00002000H
; Line 96
	mov	DWORD PTR [esi+80], eax
; Line 99
	mov	DWORD PTR [esi], eax
; Line 100
	mov	DWORD PTR [esi+60], -1
; Line 101
	mov	DWORD PTR [esi+64], eax
; Line 102
	mov	al, BYTE PTR [edi]
	test	al, al
	je	$LN13@gz_open
	mov	edx, 3
	lea	ecx, DWORD PTR [edx+1]
	npad	4
$LL22@gz_open:
; Line 103
	cmp	al, 48					; 00000030H
	jl	SHORT $LN20@gz_open
	cmp	al, 57					; 00000039H
	jg	SHORT $LN20@gz_open
; Line 104
	movsx	eax, al
	sub	eax, 48					; 00000030H
	mov	DWORD PTR [esi+60], eax
; Line 105
	jmp	SHORT $LN37@gz_open
$LN20@gz_open:
; Line 106
	movsx	eax, al
	add	eax, -43				; ffffffd5H
	cmp	eax, 76					; 0000004cH
	ja	SHORT $LN37@gz_open
	movzx	eax, BYTE PTR $LN35@gz_open[eax]
	jmp	DWORD PTR $LN39@gz_open[eax*4]
$LN16@gz_open:
; Line 108
	mov	DWORD PTR [esi], 7247			; 00001c4fH
; Line 109
	jmp	SHORT $LN37@gz_open
$LN15@gz_open:
; Line 112
	mov	DWORD PTR [esi], 31153			; 000079b1H
; Line 113
	jmp	SHORT $LN37@gz_open
$LN14@gz_open:
; Line 115
	mov	DWORD PTR [esi], 1
; Line 116
	jmp	SHORT $LN37@gz_open
$LN11@gz_open:
; Line 124
	mov	DWORD PTR [esi+64], 1
; Line 125
	jmp	SHORT $LN37@gz_open
$LN10@gz_open:
; Line 127
	mov	DWORD PTR [esi+64], 2
; Line 128
	jmp	SHORT $LN37@gz_open
$LN9@gz_open:
; Line 130
	mov	DWORD PTR [esi+64], edx
; Line 131
	jmp	SHORT $LN37@gz_open
$LN8@gz_open:
; Line 133
	mov	DWORD PTR [esi+64], ecx
$LN37@gz_open:
; Line 102
	mov	al, BYTE PTR [edi+1]
; Line 137
	inc	edi
	test	al, al
	jne	SHORT $LL22@gz_open
; Line 141
	cmp	DWORD PTR [esi], 0
; Line 143
	je	SHORT $LN13@gz_open
; Line 147
	mov	edi, DWORD PTR _path$[ebp]
	mov	eax, edi
	lea	edx, DWORD PTR [eax+1]
$LL36@gz_open:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL36@gz_open
	sub	eax, edx
	inc	eax
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	mov	DWORD PTR [esi+8], eax
; Line 148
	test	eax, eax
; Line 150
	je	SHORT $LN13@gz_open
; Line 152
	mov	ecx, edi
	mov	edx, eax
$LL26@gz_open:
	mov	al, BYTE PTR [ecx]
	mov	BYTE PTR [edx], al
	inc	ecx
	inc	edx
	test	al, al
	jne	SHORT $LL26@gz_open
; Line 169
	mov	eax, DWORD PTR _fd$[ebp]
	cmp	eax, -1
	jne	SHORT $LN30@gz_open
	mov	eax, DWORD PTR [esi]
	cmp	eax, 7247				; 00001c4fH
	jne	SHORT $LN27@gz_open
	xor	eax, eax
	jmp	SHORT $LN28@gz_open
$LN13@gz_open:
; Line 119
	push	esi
	call	DWORD PTR __imp__free
	add	esp, 4
$LN38@gz_open:
; Line 120
	pop	edi
	xor	eax, eax
	pop	esi
; Line 189
	pop	ebp
	ret	0
$LN27@gz_open:
; Line 169
	sub	eax, 31153				; 000079b1H
	neg	eax
	sbb	eax, eax
	and	eax, -504				; fffffe08H
	add	eax, 512				; 00000200H
	or	eax, 257				; 00000101H
$LN28@gz_open:
	push	438					; 000001b6H
	or	eax, 32768				; 00008000H
	push	eax
	push	edi
	call	DWORD PTR __imp__open
	add	esp, 12					; 0000000cH
$LN30@gz_open:
	mov	DWORD PTR [esi+4], eax
; Line 170
	cmp	eax, -1
	jne	SHORT $LN4@gz_open
; Line 171
	mov	ecx, DWORD PTR [esi+8]
	mov	edi, DWORD PTR __imp__free
	push	ecx
	call	edi
; Line 172
	push	esi
	call	edi
	add	esp, 8
	pop	edi
; Line 173
	xor	eax, eax
	pop	esi
; Line 189
	pop	ebp
	ret	0
$LN4@gz_open:
; Line 175
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, 1
	jne	SHORT $LN3@gz_open
; Line 176
	mov	DWORD PTR [esi], 31153			; 000079b1H
; Line 185
	call	_gz_reset
	pop	edi
; Line 188
	mov	eax, esi
	pop	esi
; Line 189
	pop	ebp
	ret	0
$LN3@gz_open:
; Line 179
	cmp	ecx, 7247				; 00001c4fH
	jne	SHORT $LN1@gz_open
; Line 180
	push	1
	push	0
	push	eax
	call	DWORD PTR __imp__lseek
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+44], eax
; Line 181
	cmp	eax, -1
	jne	SHORT $LN1@gz_open
	mov	DWORD PTR [esi+44], 0
$LN1@gz_open:
; Line 185
	call	_gz_reset
	pop	edi
; Line 188
	mov	eax, esi
	pop	esi
; Line 189
	pop	ebp
	ret	0
	npad	2
$LN39@gz_open:
	DD	$LN13@gz_open
	DD	$LN8@gz_open
	DD	$LN9@gz_open
	DD	$LN14@gz_open
	DD	$LN11@gz_open
	DD	$LN10@gz_open
	DD	$LN16@gz_open
	DD	$LN15@gz_open
	DD	$LN37@gz_open
$LN35@gz_open:
	DB	0
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	1
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	2
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	3
	DB	8
	DB	8
	DB	8
	DB	8
	DB	4
	DB	8
	DB	5
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
_gz_open ENDP
_TEXT	ENDS
PUBLIC	_gzopen
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen	PROC
; Line 195
	push	ebp
	mov	ebp, esp
; Line 196
	mov	eax, DWORD PTR _path$[ebp]
	push	-1
	push	eax
	mov	eax, DWORD PTR _mode$[ebp]
	call	_gz_open
	add	esp, 8
; Line 197
	pop	ebp
	ret	0
_gzopen	ENDP
_TEXT	ENDS
PUBLIC	_gzopen64
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen64 PROC
; Line 203
	push	ebp
	mov	ebp, esp
; Line 204
	mov	eax, DWORD PTR _path$[ebp]
	push	-1
	push	eax
	mov	eax, DWORD PTR _mode$[ebp]
	call	_gz_open
	add	esp, 8
; Line 205
	pop	ebp
	ret	0
_gzopen64 ENDP
_TEXT	ENDS
PUBLIC	_gzdopen
EXTRN	__imp__sprintf:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzdopen PROC
; Line 211
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 215
	mov	edi, DWORD PTR _fd$[ebp]
	cmp	edi, -1
	je	SHORT $LN1@gzdopen
	push	19					; 00000013H
	call	DWORD PTR __imp__malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	je	SHORT $LN1@gzdopen
; Line 217
	push	edi
	push	OFFSET $SG5825
	push	esi
	call	DWORD PTR __imp__sprintf
; Line 218
	mov	eax, DWORD PTR _mode$[ebp]
	push	edi
	push	esi
	call	_gz_open
; Line 219
	push	esi
	mov	edi, eax
	call	DWORD PTR __imp__free
	add	esp, 24					; 00000018H
; Line 220
	mov	eax, edi
	pop	edi
	pop	esi
; Line 221
	pop	ebp
	ret	0
$LN1@gzdopen:
	pop	edi
; Line 216
	xor	eax, eax
	pop	esi
; Line 221
	pop	ebp
	ret	0
_gzdopen ENDP
_TEXT	ENDS
PUBLIC	_gzrewind
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzrewind PROC
; Line 251
	push	ebp
	mov	ebp, esp
	push	esi
; Line 255
	mov	esi, DWORD PTR _file$[ebp]
	test	esi, esi
; Line 256
	je	SHORT $LN2@gzrewind
; Line 260
	cmp	DWORD PTR [esi], 7247			; 00001c4fH
	jne	SHORT $LN2@gzrewind
	cmp	DWORD PTR [esi+76], 0
	jne	SHORT $LN2@gzrewind
; Line 264
	mov	eax, DWORD PTR [esi+44]
	mov	ecx, DWORD PTR [esi+4]
	push	0
	push	eax
	push	ecx
	call	DWORD PTR __imp__lseek
	add	esp, 12					; 0000000cH
	cmp	eax, -1
; Line 265
	je	SHORT $LN2@gzrewind
; Line 266
	call	_gz_reset
; Line 267
	xor	eax, eax
	pop	esi
; Line 268
	pop	ebp
	ret	0
$LN2@gzrewind:
; Line 261
	or	eax, -1
	pop	esi
; Line 268
	pop	ebp
	ret	0
_gzrewind ENDP
_TEXT	ENDS
PUBLIC	_gzseek64
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_offset$ = 12						; size = 4
_whence$ = 16						; size = 4
_gzseek64 PROC
; Line 275
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 281
	mov	esi, DWORD PTR _file$[ebp]
	xor	ebx, ebx
	cmp	esi, ebx
	jne	SHORT $LN15@gzseek64
$LN26@gzseek64:
	pop	esi
; Line 282
	or	eax, -1
	pop	ebx
; Line 344
	pop	ebp
	ret	0
$LN15@gzseek64:
; Line 284
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, 7247				; 00001c4fH
	je	SHORT $LN14@gzseek64
	cmp	ecx, 31153				; 000079b1H
; Line 285
	jne	SHORT $LN26@gzseek64
$LN14@gzseek64:
; Line 288
	cmp	DWORD PTR [esi+76], ebx
; Line 289
	jne	SHORT $LN26@gzseek64
; Line 292
	mov	eax, DWORD PTR _whence$[ebp]
	push	edi
	cmp	eax, ebx
	je	SHORT $LN21@gzseek64
	cmp	eax, 1
	je	SHORT $LN11@gzseek64
$LN25@gzseek64:
	pop	edi
	pop	esi
; Line 293
	or	eax, -1
	pop	ebx
; Line 344
	pop	ebp
	ret	0
$LN21@gzseek64:
; Line 297
	mov	edi, DWORD PTR _offset$[ebp]
	sub	edi, DWORD PTR [esi+12]
	jmp	SHORT $LN9@gzseek64
$LN11@gzseek64:
; Line 299
	mov	edi, DWORD PTR _offset$[ebp]
	cmp	DWORD PTR [esi+72], ebx
	je	SHORT $LN9@gzseek64
	add	edi, DWORD PTR [esi+68]
$LN9@gzseek64:
; Line 300
	mov	DWORD PTR [esi+72], ebx
; Line 304
	cmp	ecx, 7247				; 00001c4fH
	jne	SHORT $LN8@gzseek64
	cmp	DWORD PTR [esi+52], 1
	jne	SHORT $LN8@gzseek64
	mov	eax, DWORD PTR [esi+12]
	add	eax, edi
	cmp	eax, DWORD PTR [esi+48]
	jl	SHORT $LN8@gzseek64
; Line 305
	mov	edx, DWORD PTR [esi+4]
	mov	ecx, edi
	sub	ecx, DWORD PTR [esi+36]
	push	1
	push	ecx
	push	edx
	call	DWORD PTR __imp__lseek
	add	esp, 12					; 0000000cH
; Line 306
	cmp	eax, -1
; Line 307
	je	SHORT $LN25@gzseek64
; Line 311
	push	ebx
	push	ebx
	push	esi
	mov	DWORD PTR [esi+36], ebx
	mov	DWORD PTR [esi+40], ebx
	mov	DWORD PTR [esi+72], ebx
	call	_gz_error
	add	esp, 12					; 0000000cH
; Line 313
	add	DWORD PTR [esi+12], edi
; Line 314
	mov	eax, DWORD PTR [esi+12]
	pop	edi
	mov	DWORD PTR [esi+88], ebx
	pop	esi
	pop	ebx
; Line 344
	pop	ebp
	ret	0
$LN8@gzseek64:
; Line 318
	cmp	edi, ebx
	jge	SHORT $LN23@gzseek64
; Line 319
	cmp	ecx, 7247				; 00001c4fH
; Line 320
	jne	SHORT $LN25@gzseek64
; Line 321
	add	edi, DWORD PTR [esi+12]
; Line 323
	js	$LN25@gzseek64
; Line 324
	push	esi
	call	_gzrewind
	add	esp, 4
	cmp	eax, -1
; Line 325
	je	$LN25@gzseek64
$LN23@gzseek64:
; Line 329
	cmp	DWORD PTR [esi], 7247			; 00001c4fH
	jne	SHORT $LN2@gzseek64
; Line 331
	mov	ecx, DWORD PTR [esi+36]
	cmp	ecx, 2147483647				; 7fffffffH
	ja	SHORT $LN19@gzseek64
	mov	eax, ecx
	cmp	ecx, edi
	jle	SHORT $LN20@gzseek64
$LN19@gzseek64:
	mov	eax, edi
$LN20@gzseek64:
; Line 333
	add	DWORD PTR [esi+32], eax
; Line 334
	add	DWORD PTR [esi+12], eax
	sub	ecx, eax
	mov	DWORD PTR [esi+36], ecx
; Line 335
	sub	edi, eax
$LN2@gzseek64:
; Line 339
	cmp	edi, ebx
	je	SHORT $LN1@gzseek64
; Line 340
	mov	DWORD PTR [esi+72], 1
; Line 341
	mov	DWORD PTR [esi+68], edi
$LN1@gzseek64:
; Line 343
	mov	eax, DWORD PTR [esi+12]
	add	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 344
	pop	ebp
	ret	0
_gzseek64 ENDP
_TEXT	ENDS
PUBLIC	_gzseek
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_offset$ = 12						; size = 4
_whence$ = 16						; size = 4
_gzseek	PROC
; Line 351
	push	ebp
	mov	ebp, esp
; Line 356
	pop	ebp
; Line 354
	jmp	_gzseek64
_gzseek	ENDP
_TEXT	ENDS
PUBLIC	_gzclearerr
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclearerr PROC
; Line 459
	push	ebp
	mov	ebp, esp
	push	esi
; Line 463
	mov	esi, DWORD PTR _file$[ebp]
	test	esi, esi
	je	SHORT $LN11@gzclearerr
; Line 466
	mov	eax, DWORD PTR [esi]
	cmp	eax, 7247				; 00001c4fH
	je	SHORT $LN14@gzclearerr
	cmp	eax, 31153				; 000079b1H
	jne	SHORT $LN11@gzclearerr
; Line 470
	jmp	SHORT $LN1@gzclearerr
$LN14@gzclearerr:
; Line 471
	mov	DWORD PTR [esi+40], 0
$LN1@gzclearerr:
; Line 472
	mov	eax, DWORD PTR [esi+80]
	test	eax, eax
	je	SHORT $LN10@gzclearerr
	cmp	DWORD PTR [esi+76], -4			; fffffffcH
	je	SHORT $LN9@gzclearerr
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN9@gzclearerr:
	mov	DWORD PTR [esi+80], 0
$LN10@gzclearerr:
	mov	DWORD PTR [esi+76], 0
$LN11@gzclearerr:
	pop	esi
; Line 473
	pop	ebp
	ret	0
_gzclearerr ENDP
_TEXT	ENDS
END
